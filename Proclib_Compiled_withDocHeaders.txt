__HEADER__
ABORT.pro
__FOOTER__
//-----------------------------------------------------------------------------------------------------
// End a trial without imposing any iti or trial length, and without
// giving any rewards or punishments.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare ABORT();

process ABORT()
	{	
	
	declare hide int run_cmd_sess = 1;	// state 1 is countermanding
	declare hide int run_mg_sess = 3;	// state 3 is mem guided sacc
	declare hide int run_gonogo_sess = 4;
	declare hide int run_delayed_sess = 6;
	declare hide int run_search_sess = 7;
	
	Event_fifo[Set_event] = Abort_;				// ...queue strobe...
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue...
	
	Event_fifo[Set_event] = Eot_;				// ...queue strobe...
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue...
	                                            
	spawnwait INFOS();							// ...queue a big ole` pile-o-strobes for plexon				
	nexttick 10;								// Give TEMPO a chance to catch its breath before attempting.. 
                                                // ...RDX communication with vdosync.
                                                // NOTE: if you add a bunch more strobes to INFOS.pro and you...
	                                            // start getting buffer overflow errors increase the number of nextticks.
	if (State == run_cmd_sess)
		{
		spawnwait SETC_TRL(n_targ_pos,			// notice that this is spawnwait instead of spawn b/c
					go_weight,					// ...no inter trial interval is imposed.
					stop_weight,        		// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
					ignore_weight,              
					staircase,                      
					n_SSDs,                         
					min_holdtime,                   
					max_holdtime,                   
					expo_jitter);  
		}
	else if (State == run_search_sess)
		{
		spawnwait SETS_TRL(n_targ_pos,			// notice that this is spawnwait instead of spawn b/c
					go_weight,					// ...no inter trial interval is imposed.
					stop_weight,        		// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
					ignore_weight,              
					staircase,                      
					n_SSDs,                         
					min_holdtime,                   
					max_holdtime,                   
					expo_jitter);  
		}
	else if (State == run_mg_sess)
		{
		spawnwait SETMGTRL(n_targ_pos,							// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				 go_weight,
				 stop_weight,
				 ignore_weight,
				 n_SOAs,
				 min_holdtime,
				 max_holdtime,
				 expo_jitter,
				 expo_jitter_soa);
		}
		
	else if (State == run_gonogo_sess)
		{
		spawnwait SETG_TRL(n_targ_pos,				// Select variables for the first mem guided...					
				min_holdtime,           		// ...trial.  This happens once outside of the while...
				max_holdtime,           		// ...loop just to set up for the first iteration. After...
				expo_jitter,            		// ...that SETM_TRL.pro will be called by END_TRL.pro.
				min_soa,
				max_soa,
				expo_jitter_soa);
		}	
		
	else if (State == run_delayed_sess)
		{
		spawnwait SETD_TRL(n_targ_pos,				// Select variables for the first mem guided...					
				min_holdtime,           		// ...trial.  This happens once outside of the while...
				max_holdtime,           		// ...loop just to set up for the first iteration. After...
				expo_jitter,            		// ...that SETM_TRL.pro will be called by END_TRL.pro.
				min_soa,
				max_soa,
				expo_jitter_soa);
		}	
	nexttick 50; 								// this is just here to prevent vdosync buffer overflows if subject is on edge of fix window	
	                                            
	
	}
	__HEADER__
ALL_PROS.dcf
__FOOTER__
; TEMPO DIALOG CONFIGURATION FILE
; Copyright 1997-2016 Reflective Computing.  All Rights Reserved.
; This file was created by TEMPO and should not be edited directly by the user.
; The commands in this file are undocumented and subject to change in future releases.
; Fri Sep 30 14:05:03 2016
; DLOAD C:\TEMPO\ProcLib\ALL_PROS.dcf

; DIALOGS

SCREENRES 1280,1024,32,1,0,0

DIAPAGE 0,"Info_and_StartClock"
DIAPOS   0,0,0,0,-1,-1,410,352,790,556,0
DIAOBJ   0,0,2,265,120,345,148,"OK","start;\r\ndpop Info_and_StartClock;"
DIAOBJ   0,3,1,15,12,240,156,"","ALL_PROS.pro     (F1)\r\n\r\nprotocol control structure\r\nand associated protocols\r\n\r\nwritten by\r\ndavid.c.godlove@vanderbilt.edu\r\nJanuary, 2011"

DIAPAGE 1,"Choose_Task"
DIAPOS   1,0,0,972,-1,-1,405,580,791,940,1
DIAOBJ   1,0,2,190,52,338,80,"Countermanding","quiet State = 1;\r\ndialog Pre_Task_Main;\r\ndpop Choose_Task"
DIAOBJ   1,1,1,20,16,165,64,"","Which task do you\r\nwant to run? (F2)"
DIAOBJ   1,2,2,271,284,351,308,"Exit","Exit"
DIAOBJ   1,3,2,170,284,256,308,"Stop Clock","stop"
DIAOBJ   1,4,2,190,124,338,152,"GONOGO","quiet State = 4;\r\ndialog Pre_Task_Main;\r\ndpop Choose_Task"
DIAOBJ   1,5,2,190,16,338,44,"Fixation","quiet State = 2;\r\ndialog Fixation_Main;\r\ndpop Choose_Task"
DIAOBJ   1,6,2,190,88,338,116,"Memory Guided","quiet State = 3;\r\ndialog Pre_Task_Main;\r\ndpop Choose_Task"
DIAOBJ   1,7,2,190,160,338,188,"VEP","quiet State = 5;\r\ndialog Flash_Vars;\r\ndpop Choose_Task"
DIAOBJ   1,8,2,190,196,338,224,"Delayed task","quiet State = 6;\r\ndialog Pre_Task_Main;\r\ndpop Choose_Task"
DIAOBJ   1,9,2,190,232,338,260,"Search","quiet State = 7;\r\ndialog Pre_Task_Main;\r\ndpop Choose_Task"

DIAPAGE 2,"Pre_Task_Main"
DIAPOS   2,0,0,0,-1,-1,790,204,1175,880,2
DIAOBJ   2,0,2,210,612,275,636,"OK","OK = 1;\r\ndialog In_Task_pane;\r\nDSET; DPOP"
DIAOBJ   2,1,2,290,612,355,636,"Cancel","quiet state = 0;\r\ndialog Choose_Task;\r\nDPOP"
DIAOBJ   2,2,1,125,12,275,60,"","Please set all \r\nappropriate variables \r\nfor task initiation."
DIAOBJ   2,3,1,15,584,160,632,"","Press OK to start task.\r\nPess Cancel to return\r\nto task selection."
DIAOBJ   2,4,1,15,240,145,288,"","Adjust the relative\r\ndistribution of trial\r\ntypes."
DIAOBJ   2,5,1,15,412,150,460,"","Adjust the task\r\ntiming."
DIAOBJ   2,6,1,15,324,145,372,"","Adjust stimulus\r\nproperties."
DIAOBJ   2,7,1,15,496,150,544,"","Adjust eye input\r\nrelated parameters."
DIAOBJ   2,8,2,210,496,350,532,"Eyes / Windows","Dialog Pre_Task_Trial_Eyes"
DIAOBJ   2,9,2,210,324,350,360,"Stimuli","Dialog Pre_Task_Trial_Stimuli"
DIAOBJ   2,10,2,210,412,350,448,"Timing","Dialog Pre_Task_Trial_Timing"
DIAOBJ   2,11,2,210,240,350,276,"Trial Types","Dialog Pre_Task_Trial_Types"
DIAOBJ   2,12,1,15,140,170,212,"","Select a monkey \r\nto apply subject \r\nspecific defaults."
DIAOBJ   2,13,2,210,144,350,180,"Monkey","dialog Select_Monkey"

DIAPAGE 3,"Pre_Task_Trial_Types"
DIAPOS   3,0,0,0,-1,-1,690,64,1095,924,3
DIAOBJ   3,0,2,270,796,335,824,"Apply","DSET"
DIAOBJ   3,1,2,120,796,180,824,"OK","DSET\r\nDPOP Pre_Task_Trial_Types"
DIAOBJ   3,2,1,5,88,115,124,"","GO         weight\r\n(Cmanding only)"
DIAOBJ   3,3,1,5,136,120,168,"","STOP     weight\r\n(Cmanding only)"
DIAOBJ   3,4,1,5,192,110,224,"","IGNORE weight\r\n(Cmanding only)"
DIAOBJ   3,5,1,125,8,275,68,"","Set the relative weights\r\nof trial types.\r\n(Must sum to 100)"
DIAOBJ   3,6,2,195,796,260,824,"Cancel","DPOP Pre_Task_Trial_Types"
DIAOBJ   3,7,5,190,188,255,212,"","Ignore_weight"
DIAOBJ   3,8,5,190,136,255,164,"","Stop_weight"
DIAOBJ   3,9,5,190,88,255,116,"","Go_weight"
DIAOBJ   3,10,3,320,88,380,112,"","Go_weight"
DIAOBJ   3,11,3,320,136,380,160,"","Stop_weight"
DIAOBJ   3,12,3,320,184,380,208,"","Ignore_weight"
DIAOBJ   3,13,3,320,380,380,404,"","Dealer_wins_weight"
DIAOBJ   3,14,3,320,336,380,360,"","Bonus_weight"
DIAOBJ   3,15,5,190,332,255,356,"","Bonus_weight"
DIAOBJ   3,16,5,190,384,255,408,"","Dealer_wins_weight"
DIAOBJ   3,17,1,120,276,280,328,"","Set the relative weights\r\nof surprise outcome \r\nreversals."
DIAOBJ   3,18,1,5,384,135,408,"","Extra punish weight"
DIAOBJ   3,19,1,5,332,135,356,"","Extra reward weight"
DIAOBJ   3,20,1,120,460,285,528,"","Set the relative weights\r\nof reward and \r\npunishment resizing.\r\n(Must sum to 100.)"
DIAOBJ   3,21,3,320,668,380,692,"","SmlP_weight"
DIAOBJ   3,22,3,320,712,380,736,"","MedP_weight"
DIAOBJ   3,23,3,320,760,380,784,"","BigP_weight"
DIAOBJ   3,24,3,320,536,380,560,"","BigR_weight"
DIAOBJ   3,25,3,320,580,380,604,"","MedR_weight"
DIAOBJ   3,26,3,320,624,380,648,"","SmlR_weight"
DIAOBJ   3,27,5,190,712,255,736,"","MedP_weight"
DIAOBJ   3,28,5,190,752,255,776,"","BigP_weight"
DIAOBJ   3,29,5,190,540,255,564,"","BigR_weight"
DIAOBJ   3,30,5,190,580,255,608,"","MedR_weight"
DIAOBJ   3,31,5,190,624,255,648,"","SmlR_weight"
DIAOBJ   3,32,5,190,668,255,692,"","SmlP_weight"
DIAOBJ   3,33,1,5,708,180,732,"","BASE punishment weight"
DIAOBJ   3,34,1,5,532,155,556,"","LG reward weight"
DIAOBJ   3,35,1,5,576,155,600,"","BASE reward weight"
DIAOBJ   3,36,1,5,620,155,644,"","SML reward weight"
DIAOBJ   3,37,1,5,664,170,688,"","SML punishment  weight"
DIAOBJ   3,38,1,5,756,170,780,"","LG punishment weight"

DIAPAGE 4,"Pre_Task_Trial_Stimuli"
DIAPOS   4,0,0,972,-1,-1,525,144,1085,848,4
DIAOBJ   4,0,2,305,644,365,668,"OK","DSET; DPOP"
DIAOBJ   4,1,2,390,644,450,668,"Cancel","DPOP"
DIAOBJ   4,2,2,475,644,535,668,"Apply","DSET"
DIAOBJ   4,3,1,5,544,135,568,"","Set Size"
DIAOBJ   4,4,1,5,584,150,628,"","Correct Tones \r\n(1=high, 0=low)"
DIAOBJ   4,5,1,5,328,151,372,"","Ignore Signal Color\r\n(Cmanding only)"
DIAOBJ   4,6,1,5,280,150,321,"","Stop Signal Color\r\n(Cmanding only)"
DIAOBJ   4,7,1,5,228,151,264,"","Fixation Color"
DIAOBJ   4,8,1,10,500,155,540,"","Fixation Size"
DIAOBJ   4,9,1,281,77,427,109,"","Target Colors"
DIAOBJ   4,10,1,285,124,430,164,"","Target Angles"
DIAOBJ   4,11,1,10,136,150,168,"","Target Eccentricities"
DIAOBJ   4,12,1,6,76,146,112,"","Target Sizes"
DIAOBJ   4,13,1,240,12,365,56,"","Set the task\r\nstimuli parameters"
DIAOBJ   4,14,2,160,76,230,104,"SET","Dialog Pre_Task_Target_Sizes"
DIAOBJ   4,15,2,435,120,505,148,"SET","dialog Pre_Task_Target_Angle"
DIAOBJ   4,16,2,431,73,502,101,"SET","dialog Pre_Task_Target_Colors"
DIAOBJ   4,17,5,160,496,230,524,"","Fixation_size"
DIAOBJ   4,18,5,160,228,205,256,"","Fixation_color[0]"
DIAOBJ   4,19,5,160,280,205,308,"","Stop_sig_color[0]"
DIAOBJ   4,20,5,160,332,205,356,"","Ignore_sig_color[0]"
DIAOBJ   4,21,5,155,584,225,612,"","Set_Tones"
DIAOBJ   4,22,4,155,540,230,568,"","SetSize"
DIAOBJ   4,23,5,290,280,335,308,"","Stop_sig_color[1]"
DIAOBJ   4,24,3,260,540,341,568,"","SetSize"
DIAOBJ   4,25,3,505,336,550,360,"","Ignore_sig_color[2]"
DIAOBJ   4,26,5,420,280,465,308,"","Stop_sig_color[2]"
DIAOBJ   4,27,3,285,496,355,520,"","Fixation_size"
DIAOBJ   4,28,3,505,232,550,256,"","Fixation_color[2]"
DIAOBJ   4,29,3,505,284,550,308,"","Stop_sig_color[2]"
DIAOBJ   4,30,3,266,584,336,608,"","Set_Tones"
DIAOBJ   4,31,2,160,128,230,160,"SET","dialog Pre_Task_Target_Ecc"
DIAOBJ   4,32,5,420,332,465,356,"","Ignore_sig_color[2]"
DIAOBJ   4,33,5,290,332,335,356,"","Ignore_sig_color[1]"
DIAOBJ   4,34,5,290,228,335,256,"","Fixation_color[1]"
DIAOBJ   4,35,5,420,228,465,256,"","Fixation_color[2]"
DIAOBJ   4,36,3,245,232,290,256,"","Fixation_color[0]"
DIAOBJ   4,37,3,245,284,290,308,"","Stop_sig_color[0]"
DIAOBJ   4,38,3,380,284,425,308,"","Stop_sig_color[1]"
DIAOBJ   4,39,3,245,336,290,360,"","Ignore_sig_color[0]"
DIAOBJ   4,40,3,380,232,425,256,"","Fixation_color[1]"
DIAOBJ   4,41,3,380,336,425,360,"","Ignore_sig_color[1]"
DIAOBJ   4,42,1,145,196,215,220,"","Red"
DIAOBJ   4,43,1,412,193,485,217,"","Blue"
DIAOBJ   4,44,1,280,192,355,216,"","Green"
DIAOBJ   4,45,1,6,448,135,472,"","Placeholders"
DIAOBJ   4,46,5,156,441,225,468,"","PlacPres"
DIAOBJ   4,47,3,265,444,342,468,"","PlacPres"
DIAOBJ   4,48,1,6,393,131,424,"","Percent Catch"
DIAOBJ   4,49,5,155,388,225,417,"","Perc_catch"
DIAOBJ   4,50,3,265,392,355,421,"","Perc_catch"

DIAPAGE 5,"Pre_Task_Trial_Timing"
DIAPOS   5,0,0,0,-1,-1,820,0,1266,996,5
DIAOBJ   5,0,2,175,928,245,956,"OK","DSET; DPOP"
DIAOBJ   5,1,2,265,928,335,956,"Cancel","DPOP"
DIAOBJ   5,2,2,360,928,425,956,"Apply","DSET"
DIAOBJ   5,3,1,15,800,197,828,"","Fixaxtion Time / SOA"
DIAOBJ   5,4,3,340,292,410,316,"","Max_Holdtime"
DIAOBJ   5,5,3,337,505,407,529,"","Targ_hold_time"
DIAOBJ   5,6,3,337,629,407,653,"","Base_Punish_time"
DIAOBJ   5,7,3,337,673,407,697,"","Fixed_trl_length"
DIAOBJ   5,8,5,232,793,306,820,"","search_fix_time"
DIAOBJ   5,9,3,340,248,410,272,"","Min_Holdtime"
DIAOBJ   5,10,3,340,332,410,356,"","Expo_Jitter"
DIAOBJ   5,11,3,337,545,407,569,"","Tone_Duration"
DIAOBJ   5,12,3,337,713,407,737,"","Trial_length"
DIAOBJ   5,13,3,370,800,435,828,"","search_fix_time"
DIAOBJ   5,14,3,340,208,410,232,"","Allowed_fix_time"
DIAOBJ   5,15,3,337,421,407,445,"","Max_sacc_duration"
DIAOBJ   5,16,3,337,589,407,613,"","Base_Reward_time"
DIAOBJ   5,17,3,337,761,407,785,"","Inter_trl_int"
DIAOBJ   5,18,1,15,836,175,864,"","Catch Trial Hold"
DIAOBJ   5,19,3,336,156,406,180,"","Staircase"
DIAOBJ   5,20,3,337,377,407,401,"","Max_saccade_time"
DIAOBJ   5,21,5,230,537,305,564,"","Tone_Duration"
DIAOBJ   5,22,5,232,833,306,860,"","catch_hold_time"
DIAOBJ   5,23,5,230,753,305,780,"","Inter_trl_int"
DIAOBJ   5,24,5,230,240,305,265,"","Min_Holdtime"
DIAOBJ   5,25,5,230,324,305,349,"","Expo_Jitter"
DIAOBJ   5,26,5,230,581,305,608,"","Base_Reward_time"
DIAOBJ   5,27,5,230,621,305,648,"","Base_Punish_time"
DIAOBJ   5,28,3,327,832,431,864,"","catch_hold_time"
DIAOBJ   5,29,5,230,200,305,225,"","Allowed_fix_time"
DIAOBJ   5,30,5,230,284,305,309,"","Max_Holdtime"
DIAOBJ   5,31,5,230,497,305,524,"","Targ_hold_time"
DIAOBJ   5,32,5,230,665,305,692,"","Fixed_trl_length"
DIAOBJ   5,34,5,230,152,305,177,"","Staircase"
DIAOBJ   5,35,5,230,369,305,396,"","Max_saccade_time"
DIAOBJ   5,36,5,230,413,305,440,"","Max_sacc_duration"
DIAOBJ   5,37,5,230,705,305,732,"","Trial_length"
DIAOBJ   5,39,1,15,144,195,189,"","Staircase SSD (0,1)\r\n(Countermanding only)\r\n"
DIAOBJ   5,40,1,15,409,190,441,"","Max saccade duration"
DIAOBJ   5,42,1,15,449,190,485,"","Cancel Time\r\n(Countermanding only)"
DIAOBJ   5,43,4,230,453,305,480,"","Cancl_time"
DIAOBJ   5,44,1,15,248,190,280,"","Minimum Holdtime"
DIAOBJ   5,45,1,15,328,190,360,"","Exponential holdtime (0,1)"
DIAOBJ   5,46,1,15,497,190,533,"","Target holdtime"
DIAOBJ   5,47,1,15,665,190,697,"","Fixed trial length (0,1)"
DIAOBJ   5,48,1,15,761,190,793,"","Inter-trial interval"
DIAOBJ   5,49,1,15,92,200,144,"","SSDs\r\n(Countermanding only)"
DIAOBJ   5,50,1,15,288,190,324,"","Maximum Holdtime"
DIAOBJ   5,51,1,15,541,190,573,"","Tone duration"
DIAOBJ   5,52,1,15,621,190,657,"","Base punish time"
DIAOBJ   5,53,3,337,461,407,485,"","Cancl_time"
DIAOBJ   5,54,1,15,200,190,236,"","Time to fixation abort"
DIAOBJ   5,55,1,15,373,190,405,"","Max saccade time"
DIAOBJ   5,56,1,15,577,190,613,"","Base reward time"
DIAOBJ   5,57,1,15,713,190,749,"","Trial length"
DIAOBJ   5,59,2,230,97,305,124,"SET","dialog Cmanding_Pre_Task_Trial_SSDs"
DIAOBJ   5,60,1,66,12,386,92,"","Set Task Timing Parameters (most of \r\nthese parameters cannot be changed \r\nafter task initiation)"

DIAPAGE 6,"Pre_Task_Trial_Eyes"
DIAPOS   6,0,0,0,-1,-1,740,556,1100,928,6
DIAOBJ   6,0,2,115,304,180,328,"OK","DSET; DPOP"
DIAOBJ   6,1,2,200,304,260,328,"Cancel","DPOP"
DIAOBJ   6,2,2,280,304,345,328,"Apply","DSET"
DIAOBJ   6,3,3,270,156,345,180,"","Targ_win_size"
DIAOBJ   6,4,3,270,192,345,216,"","X_gain"
DIAOBJ   6,5,3,270,236,345,260,"","Y_gain"
DIAOBJ   6,6,3,270,116,345,140,"","Fix_win_size"
DIAOBJ   6,7,5,190,156,260,180,"","Targ_win_size"
DIAOBJ   6,8,5,190,116,260,144,"","Fix_win_size"
DIAOBJ   6,9,1,105,20,245,84,"","Set Eye and Window\r\nrelated parametes\r\n(gain is just shown\r\nno need to change)"
DIAOBJ   6,10,1,15,116,155,140,"","Fixation window size"
DIAOBJ   6,11,1,15,156,160,184,"","Target window size"
DIAOBJ   6,12,1,15,236,95,260,"","Eye Y gain"
DIAOBJ   6,13,1,15,192,95,220,"","Eye X gain"

DIAPAGE 7,"Pre_Task_Target_Sizes"
DIAPOS   7,0,0,0,-1,-1,910,28,1180,616,7
DIAOBJ   7,0,2,15,520,75,544,"OK","DSET; DPOP"
DIAOBJ   7,1,2,95,520,155,544,"Cancel","DPOP"
DIAOBJ   7,2,2,175,520,235,544,"Apply","DSET"
DIAOBJ   7,3,1,10,244,65,268,"","Targ 4"
DIAOBJ   7,4,1,10,356,65,380,"","Targ 6"
DIAOBJ   7,5,1,10,464,65,488,"","Targ 8"
DIAOBJ   7,6,1,10,76,65,100,"","Targ 1"
DIAOBJ   7,7,1,10,132,65,156,"","Targ 2"
DIAOBJ   7,8,1,10,188,65,212,"","Targ 3"
DIAOBJ   7,9,1,10,300,65,324,"","Targ 5"
DIAOBJ   7,10,1,10,412,65,436,"","Targ 7"
DIAOBJ   7,11,1,55,4,195,60,"","Set Target Sizes\r\n(number of targets is \r\ncalculated by blanks)"
DIAOBJ   7,12,4,95,464,155,492,"","Size_list[7]"
DIAOBJ   7,13,4,95,76,155,104,"","Size_list[0]"
DIAOBJ   7,14,4,95,188,155,212,"","Size_list[2]"
DIAOBJ   7,15,4,95,296,155,324,"","Size_list[4]"
DIAOBJ   7,16,4,95,352,155,380,"","Size_list[5]"
DIAOBJ   7,17,4,95,408,155,432,"","Size_list[6]"
DIAOBJ   7,18,4,95,132,155,160,"","Size_list[1]"
DIAOBJ   7,19,4,95,244,155,268,"","Size_list[3]"
DIAOBJ   7,20,3,215,464,260,488,"","Size_list[7]"
DIAOBJ   7,21,3,215,244,260,268,"","Size_list[3]"
DIAOBJ   7,22,3,215,352,260,376,"","Size_list[5]"
DIAOBJ   7,23,3,215,80,260,104,"","Size_list[0]"
DIAOBJ   7,24,3,215,136,260,160,"","Size_list[1]"
DIAOBJ   7,25,3,215,188,260,212,"","Size_list[2]"
DIAOBJ   7,26,3,215,296,260,320,"","Size_list[4]"
DIAOBJ   7,27,3,215,404,260,428,"","Size_list[6]"

DIAPAGE 8,"Pre_Task_Target_Ecc"
DIAPOS   8,0,0,0,-1,-1,910,68,1180,676,8
DIAOBJ   8,0,2,20,540,80,564,"OK","DSET; DPOP"
DIAOBJ   8,1,2,100,540,160,564,"Cancel","DPOP"
DIAOBJ   8,2,2,180,540,240,564,"Apply","DSET"
DIAOBJ   8,3,3,175,496,240,520,"","Eccentricity_list[7]"
DIAOBJ   8,4,3,175,436,240,460,"","Eccentricity_list[6]"
DIAOBJ   8,5,3,175,100,240,124,"","Eccentricity_list[0]"
DIAOBJ   8,6,3,175,212,240,236,"","Eccentricity_list[2]"
DIAOBJ   8,7,3,175,268,240,292,"","Eccentricity_list[3]"
DIAOBJ   8,8,3,175,324,240,348,"","Eccentricity_list[4]"
DIAOBJ   8,9,3,175,380,240,404,"","Eccentricity_list[5]"
DIAOBJ   8,10,3,175,156,240,180,"","Eccentricity_list[1]"
DIAOBJ   8,11,5,100,204,155,232,"","Eccentricity_list[2]"
DIAOBJ   8,12,5,100,316,155,344,"","Eccentricity_list[4]"
DIAOBJ   8,13,5,100,428,155,456,"","Eccentricity_list[6]"
DIAOBJ   8,14,5,100,488,155,516,"","Eccentricity_list[7]"
DIAOBJ   8,15,5,100,92,155,120,"","Eccentricity_list[0]"
DIAOBJ   8,16,5,100,148,155,176,"","Eccentricity_list[1]"
DIAOBJ   8,17,5,100,260,155,288,"","Eccentricity_list[3]"
DIAOBJ   8,18,5,100,372,155,400,"","Eccentricity_list[5]"
DIAOBJ   8,19,1,15,492,75,516,"","Targ 8"
DIAOBJ   8,20,1,15,96,75,120,"","Targ 1"
DIAOBJ   8,21,1,15,264,75,288,"","Targ 4"
DIAOBJ   8,22,1,15,376,75,400,"","Targ 6"
DIAOBJ   8,23,1,15,432,75,456,"","Targ 7"
DIAOBJ   8,24,1,15,208,75,232,"","Targ 3"
DIAOBJ   8,25,1,15,152,75,176,"","Targ 2"
DIAOBJ   8,26,1,15,320,75,344,"","Targ 5"
DIAOBJ   8,27,1,45,28,205,56,"","Set Target Eccentricities"

DIAPAGE 9,"Pre_Task_Target_Angle"
DIAPOS   9,0,0,0,-1,-1,915,112,1180,732,9
DIAOBJ   9,0,2,15,556,75,580,"OK","DSET; DPOP"
DIAOBJ   9,1,2,95,556,155,580,"Cancel","DPOP"
DIAOBJ   9,2,2,175,556,240,580,"Apply","DSET"
DIAOBJ   9,3,3,180,260,245,284,"","Angle_list[3]"
DIAOBJ   9,4,3,180,380,245,404,"","Angle_list[5]"
DIAOBJ   9,5,3,180,504,245,528,"","Angle_list[7]"
DIAOBJ   9,6,3,180,76,245,100,"","Angle_list[0]"
DIAOBJ   9,7,3,180,136,245,160,"","Angle_list[1]"
DIAOBJ   9,8,3,180,200,245,224,"","Angle_list[2]"
DIAOBJ   9,9,3,180,320,245,344,"","Angle_list[4]"
DIAOBJ   9,10,3,180,444,245,468,"","Angle_list[6]"
DIAOBJ   9,11,5,95,136,155,160,"","Angle_list[1]"
DIAOBJ   9,12,5,95,256,155,284,"","Angle_list[3]"
DIAOBJ   9,13,5,95,380,155,404,"","Angle_list[5]"
DIAOBJ   9,14,5,95,440,155,464,"","Angle_list[6]"
DIAOBJ   9,15,5,95,500,155,528,"","Angle_list[7]"
DIAOBJ   9,16,5,95,72,155,100,"","Angle_list[0]"
DIAOBJ   9,17,5,90,204,150,228,"","Angle_list[2]"
DIAOBJ   9,18,5,95,316,155,344,"","Angle_list[4]"
DIAOBJ   9,19,1,10,504,70,528,"","Targ 8"
DIAOBJ   9,20,1,10,444,70,468,"","Targ 7"
DIAOBJ   9,21,1,10,76,70,100,"","Targ 1"
DIAOBJ   9,22,1,10,200,70,224,"","Targ 3"
DIAOBJ   9,23,1,10,260,70,284,"","Targ 4"
DIAOBJ   9,24,1,10,320,70,344,"","Targ 5"
DIAOBJ   9,25,1,10,380,70,404,"","Targ 6"
DIAOBJ   9,26,1,10,136,70,160,"","Targ 2"
DIAOBJ   9,27,1,65,16,180,44,"","Set Target Angles"

DIAPAGE 10,"Pre_Task_Target_Colors"
DIAPOS   10,0,0,0,-1,-1,685,152,1245,780,10
DIAOBJ   10,0,2,305,564,370,588,"OK","DSET; DPOP"
DIAOBJ   10,1,2,390,564,455,588,"Cancel","DPOP"
DIAOBJ   10,2,2,470,564,535,588,"Apply","DSET"
DIAOBJ   10,3,3,485,204,545,228,"","Color_list[2,2]"
DIAOBJ   10,4,3,485,328,545,352,"","Color_list[4,2]"
DIAOBJ   10,5,3,485,508,545,532,"","Color_list[7,2]"
DIAOBJ   10,6,3,485,448,545,472,"","Color_list[6,2]"
DIAOBJ   10,7,3,485,84,545,108,"","Color_list[0,2]"
DIAOBJ   10,8,3,485,144,545,168,"","Color_list[1,2]"
DIAOBJ   10,9,3,485,268,545,292,"","Color_list[3,2]"
DIAOBJ   10,10,3,485,388,545,412,"","Color_list[5,2]"
DIAOBJ   10,11,5,425,448,475,476,"","Color_list[6,2]"
DIAOBJ   10,12,5,425,84,475,112,"","Color_list[0,2]"
DIAOBJ   10,13,5,425,204,475,232,"","Color_list[2,2]"
DIAOBJ   10,14,5,425,268,475,296,"","Color_list[3,2]"
DIAOBJ   10,15,5,425,328,475,356,"","Color_list[4,2]"
DIAOBJ   10,16,5,425,388,475,416,"","Color_list[5,2]"
DIAOBJ   10,17,5,425,144,475,172,"","Color_list[1,2]"
DIAOBJ   10,18,1,15,204,70,236,"","Targ 3"
DIAOBJ   10,19,1,15,328,70,356,"","Targ 5"
DIAOBJ   10,20,1,15,448,70,480,"","Targ 7"
DIAOBJ   10,21,1,15,508,70,536,"","Targ 8"
DIAOBJ   10,22,1,15,84,70,112,"","Targ 1"
DIAOBJ   10,23,1,15,144,70,172,"","Targ 2"
DIAOBJ   10,24,1,15,268,70,296,"","Targ 4"
DIAOBJ   10,25,1,15,388,70,416,"","Targ 6"
DIAOBJ   10,26,5,425,508,475,536,"","Color_list[7,2]"
DIAOBJ   10,27,1,200,12,355,36,"","Set Target Colors (0-63)"
DIAOBJ   10,28,3,330,204,390,228,"","Color_list[2,1]"
DIAOBJ   10,29,3,330,328,390,352,"","Color_list[4,1]"
DIAOBJ   10,30,3,330,448,390,472,"","Color_list[6,1]"
DIAOBJ   10,31,3,330,508,390,532,"","Color_list[7,1]"
DIAOBJ   10,32,3,330,84,390,108,"","Color_list[0,1]"
DIAOBJ   10,33,3,330,144,390,168,"","Color_list[1,1]"
DIAOBJ   10,34,3,330,268,390,292,"","Color_list[3,1]"
DIAOBJ   10,35,3,330,388,390,412,"","Color_list[5,1]"
DIAOBJ   10,36,5,270,204,320,232,"","Color_list[2,1]"
DIAOBJ   10,37,5,270,268,320,296,"","Color_list[3,1]"
DIAOBJ   10,38,5,270,328,320,356,"","Color_list[4,1]"
DIAOBJ   10,39,5,270,448,320,476,"","Color_list[6,1]"
DIAOBJ   10,40,5,270,508,320,536,"","Color_list[7,1]"
DIAOBJ   10,41,5,270,84,320,112,"","Color_list[0,1]"
DIAOBJ   10,42,5,270,144,320,172,"","Color_list[1,1]"
DIAOBJ   10,43,5,270,388,320,416,"","Color_list[5,1]"
DIAOBJ   10,44,3,175,388,235,412,"","Color_list[5,0]"
DIAOBJ   10,45,3,175,508,235,532,"","Color_list[7,0]"
DIAOBJ   10,46,3,175,84,235,108,"","Color_list[0,0]"
DIAOBJ   10,47,3,175,204,235,228,"","Color_list[2,0]"
DIAOBJ   10,48,3,175,268,235,292,"","Color_list[3,0]"
DIAOBJ   10,49,3,175,328,235,352,"","Color_list[4,0]"
DIAOBJ   10,50,3,175,448,235,472,"","Color_list[6,0]"
DIAOBJ   10,51,3,175,144,235,168,"","Color_list[1,0]"
DIAOBJ   10,52,5,115,204,165,232,"","Color_list[2,0]"
DIAOBJ   10,53,5,115,328,165,356,"","Color_list[4,0]"
DIAOBJ   10,54,5,115,448,165,476,"","Color_list[6,0]"
DIAOBJ   10,55,5,115,508,165,536,"","Color_list[7,0]"
DIAOBJ   10,56,5,115,84,165,112,"","Color_list[0,0]"
DIAOBJ   10,57,5,115,144,165,172,"","Color_list[1,0]"
DIAOBJ   10,58,5,115,268,165,296,"","Color_list[3,0]"
DIAOBJ   10,59,5,115,388,165,416,"","Color_list[5,0]"
DIAOBJ   10,60,1,210,52,285,76,"","Red"
DIAOBJ   10,61,1,510,52,585,76,"","Blue"
DIAOBJ   10,62,1,350,52,420,76,"","Green "

DIAPAGE 11,"Cmanding_Pre_Task_Trial_SSDs"
DIAPOS   11,0,0,0,-1,-1,335,92,935,748,11
DIAOBJ   11,0,2,360,596,425,620,"OK","DSET; DPOP"
DIAOBJ   11,1,2,435,596,500,620,"Cancel","DPOP"
DIAOBJ   11,2,2,515,596,575,620,"Apply","dset"
DIAOBJ   11,3,3,505,344,575,368,"","SSD_list[15]"
DIAOBJ   11,4,3,505,536,575,560,"","SSD_list[19]"
DIAOBJ   11,5,3,505,436,575,460,"","SSD_list[17]"
DIAOBJ   11,6,3,505,108,575,132,"","SSD_list[10]"
DIAOBJ   11,7,3,505,248,575,272,"","SSD_list[13]"
DIAOBJ   11,8,3,505,296,575,320,"","SSD_list[14]"
DIAOBJ   11,9,3,505,392,575,416,"","SSD_list[16]"
DIAOBJ   11,10,3,505,484,575,508,"","SSD_list[18]"
DIAOBJ   11,11,3,505,152,575,176,"","SSD_list[11]"
DIAOBJ   11,12,3,505,204,575,228,"","SSD_list[12]"
DIAOBJ   11,13,3,205,344,270,368,"","SSD_list[5]"
DIAOBJ   11,14,3,205,392,270,416,"","SSD_list[6]"
DIAOBJ   11,15,3,205,536,270,560,"","SSD_list[9]"
DIAOBJ   11,16,3,205,108,270,132,"","SSD_list[0]"
DIAOBJ   11,17,3,205,248,270,272,"","SSD_list[3]"
DIAOBJ   11,18,3,205,296,270,320,"","SSD_list[4]"
DIAOBJ   11,19,3,205,436,270,460,"","SSD_list[7]"
DIAOBJ   11,20,3,205,484,270,508,"","SSD_list[8]"
DIAOBJ   11,21,3,205,156,270,180,"","SSD_list[1]"
DIAOBJ   11,22,3,205,204,270,228,"","SSD_list[2]"
DIAOBJ   11,23,5,405,296,475,320,"","SSD_list[14]"
DIAOBJ   11,24,5,405,436,475,460,"","SSD_list[17]"
DIAOBJ   11,25,5,405,536,475,560,"","SSD_list[19]"
DIAOBJ   11,26,5,405,204,475,228,"","SSD_list[12]"
DIAOBJ   11,27,5,405,248,475,272,"","SSD_list[13]"
DIAOBJ   11,28,5,405,344,475,368,"","SSD_list[15]"
DIAOBJ   11,29,5,405,392,475,416,"","SSD_list[16]"
DIAOBJ   11,30,5,405,484,475,508,"","SSD_list[18]"
DIAOBJ   11,31,5,405,108,475,132,"","SSD_list[10]"
DIAOBJ   11,32,1,310,248,375,272,"","SSD 14"
DIAOBJ   11,33,1,310,344,375,368,"","SSD 16"
DIAOBJ   11,34,1,310,436,375,460,"","SSD 18"
DIAOBJ   11,35,1,310,536,375,560,"","SSD 20"
DIAOBJ   11,36,1,310,108,375,132,"","SSD 11"
DIAOBJ   11,37,1,310,204,375,228,"","SSD 13"
DIAOBJ   11,38,1,310,296,375,320,"","SSD 15"
DIAOBJ   11,39,1,310,392,375,416,"","SSD 17"
DIAOBJ   11,40,1,310,484,375,508,"","SSD 19"
DIAOBJ   11,41,1,310,156,375,180,"","SSD 12"
DIAOBJ   11,42,5,110,248,180,272,"","SSD_list[3]"
DIAOBJ   11,43,5,110,344,180,368,"","SSD_list[5]"
DIAOBJ   11,44,5,110,436,180,460,"","SSD_list[7]"
DIAOBJ   11,45,5,110,536,180,560,"","SSD_list[9]"
DIAOBJ   11,46,5,110,156,180,180,"","SSD_list[1]"
DIAOBJ   11,47,5,110,204,180,228,"","SSD_list[2]"
DIAOBJ   11,48,5,110,296,180,320,"","SSD_list[4]"
DIAOBJ   11,49,5,110,392,180,416,"","SSD_list[6]"
DIAOBJ   11,50,5,110,484,180,508,"","SSD_list[8]"
DIAOBJ   11,51,5,110,108,180,132,"","SSD_list[0]"
DIAOBJ   11,52,1,15,248,85,272,"","SSD 4"
DIAOBJ   11,53,1,15,344,85,368,"","SSD 6"
DIAOBJ   11,54,1,15,436,85,460,"","SSD 8"
DIAOBJ   11,55,1,15,536,85,560,"","SSD 10"
DIAOBJ   11,56,1,15,156,85,180,"","SSD 2"
DIAOBJ   11,57,1,15,204,85,228,"","SSD 3"
DIAOBJ   11,58,1,15,296,85,320,"","SSD 5"
DIAOBJ   11,59,1,15,392,85,416,"","SSD 7"
DIAOBJ   11,60,1,15,484,85,508,"","SSD 9"
DIAOBJ   11,61,1,15,108,85,132,"","SSD 1"
DIAOBJ   11,62,5,405,156,475,180,"","SSD_list[11]"
DIAOBJ   11,63,1,200,4,415,88,"","Set the stop-signal delays\r\nin vertical retrace units.\r\n(These must be monotonically\r\nincreasing.  The number of SSDs \r\nis calculated based on blanks.)"

DIAPAGE 12,"In_Task_pane"
DIAPOS   12,0,0,972,-1,-1,407,426,843,985,12
DIAOBJ   12,0,2,148,489,275,517,"Quit Task","dialog Quit_Check"
DIAOBJ   12,1,2,286,489,412,517,"Apply Changes","DSET;"
DIAOBJ   12,2,3,331,157,400,181,"","Base_Punish_time"
DIAOBJ   12,3,3,331,41,400,65,"","Fix_win_size"
DIAOBJ   12,4,3,331,77,400,101,"","Targ_win_size"
DIAOBJ   12,5,3,331,117,400,141,"","Base_Reward_time"
DIAOBJ   12,6,5,200,117,261,144,"","Base_Reward_time"
DIAOBJ   12,7,5,200,157,261,184,"","Base_Punish_time"
DIAOBJ   12,8,5,200,41,261,68,"","Fix_win_size"
DIAOBJ   12,9,5,200,77,261,104,"","Targ_win_size"
DIAOBJ   12,10,1,5,77,168,117,"","Target window size"
DIAOBJ   12,11,1,5,117,168,157,"","Base reward time"
DIAOBJ   12,12,1,5,157,168,197,"","Base punish time"
DIAOBJ   12,13,1,5,41,168,81,"","Fix window size"
DIAOBJ   12,14,1,52,4,348,40,"","Monitor and control in-task variables"
DIAOBJ   12,15,1,296,0,341,24,"","(F4)"
DIAOBJ   12,16,2,13,489,140,517,"Pause","quiet Pause = 1;\r\ndialog Resume"
DIAOBJ   12,17,1,5,277,168,317,"","Set Size"
DIAOBJ   12,18,1,6,197,172,233,"","Move timeout\r\n(training)"
DIAOBJ   12,19,3,322,277,400,308,"","SetSize"
DIAOBJ   12,20,3,335,197,400,221,"","Bmove_tout\r\n"
DIAOBJ   12,21,5,200,237,261,264,"","Perc_catch"
DIAOBJ   12,22,5,200,197,261,224,"","Bmove_tout"
DIAOBJ   12,23,3,306,237,400,265,"","Perc_catch"
DIAOBJ   12,24,1,5,237,168,277,"","Percent Catch"
DIAOBJ   12,25,5,200,277,261,304,"","SetSize"
DIAOBJ   12,26,1,5,317,165,345,"","Catch Hold Time"
DIAOBJ   12,27,5,200,317,261,344,"","catch_hold_time"
DIAOBJ   12,28,3,293,317,400,345,"","catch_hold_time"
DIAOBJ   12,29,1,5,357,133,381,"","Target Loc. (train)"
DIAOBJ   12,30,5,200,357,261,384,"","TargTrainSet"
DIAOBJ   12,31,3,271,357,400,381,"","TargTrainSet"
DIAOBJ   12,32,1,5,397,165,426,"","Singleton Presence"
DIAOBJ   12,33,1,5,437,165,466,"","Singleton Color"
DIAOBJ   12,34,5,200,397,261,424,"","SingMode"
DIAOBJ   12,35,5,200,437,261,464,"","SingCol"
DIAOBJ   12,36,3,240,397,400,426,"","SingMode"
DIAOBJ   12,37,3,240,437,400,466,"","SingCol"

DIAPAGE 13,"Quit_Check"
DIAPOS   13,0,0,0,-1,-1,440,320,800,500,13
DIAOBJ   13,0,2,230,116,345,140,"Quit Task","quiet state = 0;\r\nDPOP In_Task_pane;\r\nDPOP Fixation_Main;\r\nDPOP;\r\nDPOP Flash_Vars;\r\n"
DIAOBJ   13,1,2,110,116,220,140,"Don't Quit","DPOP"
DIAOBJ   13,2,1,5,12,215,76,"","QUIT TASK\r\n\r\nAre you sure you want to quit?"

DIAPAGE 14,"Fixation_Main"
DIAPOS   14,0,0,0,-1,-1,408,200,758,528,14
DIAOBJ   14,0,2,115,268,180,292,"Start","quiet OK = 1;"
DIAOBJ   14,1,2,195,268,255,292,"Quit","dialog Quit_Check;"
DIAOBJ   14,2,1,5,64,130,88,"","Reward duration"
DIAOBJ   14,3,1,5,96,130,120,"","Tone frequency"
DIAOBJ   14,4,1,5,128,130,152,"","Target window size"
DIAOBJ   14,5,1,0,188,130,212,"","Inter-trial interval"
DIAOBJ   14,6,1,5,160,130,184,"","Hold fixation time"
DIAOBJ   14,7,2,270,264,335,288,"Apply","DSET"
DIAOBJ   14,8,5,140,124,210,148,"","Targ_win_size"
DIAOBJ   14,9,5,140,156,210,180,"","Targ_hold_time"
DIAOBJ   14,10,5,140,188,210,212,"","Inter_trl_int"
DIAOBJ   14,11,5,140,60,210,84,"","Base_Reward_time"
DIAOBJ   14,12,5,140,92,210,116,"","Success_Tone_medR"
DIAOBJ   14,13,3,255,128,320,152,"","Targ_win_size"
DIAOBJ   14,14,3,255,160,320,184,"","Targ_hold_time"
DIAOBJ   14,15,3,255,192,320,216,"","Inter_trl_int"
DIAOBJ   14,16,3,255,64,320,88,"","Base_Reward_time"
DIAOBJ   14,17,3,255,96,320,120,"","Success_Tone_medR"
DIAOBJ   14,18,1,115,8,240,40,"","Set fixation task\r\nvariables"
DIAOBJ   14,19,1,250,8,295,32,"","(F3)"
DIAOBJ   14,20,1,0,224,125,248,"","Auto(0) or Manual(1)"
DIAOBJ   14,21,5,140,220,210,244,"","fix_manual"
DIAOBJ   14,22,3,255,220,320,244,"","fix_manual"

DIAPAGE 15,"Resume"
DIAPOS   15,0,0,0,-1,-1,460,202,640,338,15
DIAOBJ   15,0,1,35,20,145,48,"","Task is paused."
DIAOBJ   15,1,2,50,60,115,84,"Resume","quiet Pause = 0;\r\nDPOP"

DIAPAGE 16,"Select_Monkey"
DIAPOS   16,0,0,0,-1,-1,495,324,755,772,16
DIAOBJ   16,0,2,180,388,245,412,"OK","DPOP"
DIAOBJ   16,1,2,60,257,182,289,"Euler","quiet Monkey = 2;\r\nquiet Set_monkey = 1;\r\ndpop"
DIAOBJ   16,2,2,60,216,182,248,"Broca","quiet Monkey = 3;\r\nquiet Set_monkey = 1;\r\ndpop"
DIAOBJ   16,3,2,60,92,182,124,"Helmholtz","quiet Monkey = 4;\r\nquiet Set_monkey = 1;\r\ndpop"
DIAOBJ   16,4,2,60,176,182,208,"Xena","quiet Monkey =1;\r\nquiet Set_monkey = 1;\r\ndpop"
DIAOBJ   16,6,2,60,133,182,165,"Gauss","quiet Monkey = 5;\r\nquiet Set_monkey = 1;\r\ndpop"

DIAPAGE 17,"MemGuide_Pre_Task_Main"
DIAPOS   17,0,0,0,-1,-1,820,220,1205,896,17
DIAOBJ   17,0,2,215,604,275,628,"OK","OK = 1;\r\ndialog MemGuided_In_Task;\r\nDSET; DPOP"
DIAOBJ   17,1,2,295,604,360,628,"Cancel","quiet state = 0;\r\ndialog Choose_Task;\r\nDPOP"

DIAPAGE 18,"Flash_Vars"
DIAPOS   18,0,-1,-1,-1,-1,65,260,439,693,18
DIAOBJ   18,0,2,284,50,348,72,"OK","DSET; DPOP"
DIAOBJ   18,1,2,280,118,352,139,"Quit","dialog Quit_Check"
DIAOBJ   18,2,1,6,19,80,38,"","Flash Dur."
DIAOBJ   18,3,1,1,57,72,79,"","Inter-Flash"
DIAOBJ   18,4,4,90,16,178,39,"","flashTime"
DIAOBJ   18,5,4,86,53,177,75,"","IFI"
DIAOBJ   18,6,3,199,17,273,34,"","flashTime"
DIAOBJ   18,7,3,197,52,273,74,"","IFI"
DIAOBJ   18,9,1,6,92,68,109,"","Reward"
DIAOBJ   18,10,4,87,91,178,110,"","Base_Reward_time"
DIAOBJ   18,11,3,197,89,274,108,"","Base_Reward_time"
DIAOBJ   18,12,2,283,16,348,37,"Start","quiet OK = 1;"
DIAOBJ   18,13,2,283,86,348,107,"Pause","quiet Pause = 1;\r\ndialog Resume"

; END OF DIALOGS

__HEADER__
ALL_PROS.pcf
__FOOTER__
; TEMPO PROTOCOL CONFIGURATION FILE
; Copyright 1997-2003 Reflective Computing.  All Rights Reserved.
; This file was created by TEMPO and should not be edited directly by the user.
; The commands in this file are undocumented and subject to change in future releases.
; Tue Dec 30 21:11:40 2003
; CLOAD ALL_PROS.pcf

; tempow 11.7 Set 40.13   'CLIENT0294656' connected to 'tempo4'
; KPED 11.2 Set 40
; KSRV 11.3 Set 40.13 (Server 'tempo4          ' running on computer '')
; PCL 0.0     TEMPO 0.0
; ANALOGRESOLUTION=16
; WARNING=2
; SPEED=1000.000000  PROSPEED=500.000000  (100/100000 Sec/SampleSet)
; ASETS=2(2)  CSETS=2(2)  ESETS=2(2)
; ACHANNELS=3
; CCHANNELS=2
; ECHANNELS=2
;
;                          Protocol Usage of Kernel Resources  
;
; Parameter       Limit          Used    Pct        Bytes/Total        Develop    Stable
; -------------   -------     -------  -----        -----------        -------    ------
; PROCESSES       =80              55    69%         2420/3520          =79        =58      
; INSTRUCTIONS    =7000          4854    69%        87360/126000        =6068      =5110    
; InstructionsXMS =20025         4854    24%        87360/360448        =6068      =5110    
; SYMBOLTABLE     =2200          1882    86%        22584/26400         =2214      =1981    
; HASHTABLE       =     257,2200         75%        11418/14742       Use Kernel Default
; NAMETABLE       =60000        21405    36%        21405/60000         =25182     =22532   
; DATABASES       =16               0     0%            0/960           =0         =0       
; ARRAYTABLE      =500            478    96%          478/500           =598       =493     
; ARRAYDATA       =10240         9456    92%         9456/10240         =11820     =9748    
; OBJECTS         =41              25    61%         1100/1804          =28        =26      
;
; PROTOCOL PROCESS CONTROL BLOCKS (XMS Instructions Caching ENABLED)
; INSTRUCTIONS=7000,20024
; Memory (bytes):  87360/126000 Conventional, 87360/360448 XMS
; Server CPU Mhz  Empirical 2992.5    Theoretical 3000.0
;
;    STATE PROCESS  Longest  1.306ms   PC INST  MAX LONG     MS  MaxMS LongMS Bytes  Conventional        XMS      Loaded  uSec 
;   1 DONE DEFAULT                  12434    0  265    0  0.000  0.277  0.000 12434       2-12435  
;   2 SUSP GOODVARS                     0    0    0    0  0.000  0.000  0.000  1742   12436-14177  
;   3 SUSP STIM                         0    0    0    0  0.000  0.000  0.000    70   14178-14247  
;   4 SUSP KEY_STIM                     0    0    0    0  0.000  0.000  0.000    16   14248-14263  
;   5 DONE SET_CLRS                   626    0   37    0  0.000  0.148  0.000   626   14264-14889  
;   6 DONE SET_COOR                   286    0   24    0  0.000  0.049  0.000   286   14890-15175  
;   7 DONE GRAPHS                     314    0   26    0  0.000  0.034  0.000   314   15176-15489  
;   8 SUSP SET_INH                      0    0    0    0  0.000  0.000  0.000   798   15490-16287  
;   9 SUSP SET_SOA                      0    0    0    0  0.000  0.000  0.000   656   16288-16943  
;  10 DONE SET_SCH                     98    0    8    0  0.000  0.023  0.000    98   16944-17041  
;  11 DONE WINDOWS                    680    0   54    0  0.000  0.042  0.000   680   17042-17721  
;  12 DONE LOCATE_I                   360   28   56   29  0.016  0.596  0.017   360   17722-18081  
;  13 RUN  WATCHEYE                   682   39   83   39  0.029  0.613  0.028   686   18082-18767  
;  14 DONE TONE                        54    0    5    0  0.000  0.017  0.000    54   18768-18821  
;  15 SUSP TONESWEP                     0    0    0    0  0.000  0.000  0.000   288   18822-19109  
;  16 DONE WATCHMTH                   404    0   14   12  0.000  0.068  0.010   404   19110-19513  
;  17 DONE WATCHBOD                   160    0    2    0  0.000  0.007  0.000   160   19514-19673  
;  18 DONE SVR_BELL                   180    0    4    0  0.000  0.018  0.000   180   19674-19853  
;  19 SUSP SVR_BEL2                     0    0    0    0  0.000  0.000  0.000    20   19854-19873  
;  20 SUSP CMDTRIAL                     0    0    0    0  0.000  0.000  0.000  2698   19874-22571  
;  21 SUSP MGTRIAL                      0    0    0    0  0.000  0.000  0.000  2904   22572-25475  
;  22 DONE SCHTRIAL                  3312    0   69   69  0.000  0.242  0.220  3312   25476-28787  
;  23 SUSP REP_ORT                      0    0    0    0  0.000  0.000  0.000  3364   28788-32151  
;  24 DONE RAND_ORT                  1292    0   80   79  0.000  0.085  0.079  1292   32152-33443  
;  25 SUSP LOC_REP                      0    0    0    0  0.000  0.000  0.000    36   33444-33479  
;  26 SUSP RandomizeRepDistAngles       0    0    0    0  0.000  0.000  0.000   110   33480-33589  
;  27 SUSP RandomizeRepDistEccentric    0    0    0    0  0.000  0.000  0.000   110   33590-33699  
;  28 SUSP RandomizeRepTargAngles       0    0    0    0  0.000  0.000  0.000   110   33700-33809  
;  29 SUSP REP1_LOC                     0    0    0    0  0.000  0.000  0.000   270   33810-34079  
;  30 SUSP REP2_LOC                     0    0    0    0  0.000  0.000  0.000   270   34080-34349  
;  31 SUSP REP3_LOC                     0    0    0    0  0.000  0.000  0.000   270   34350-34619  
;  32 SUSP REP4_LOC                     0    0    0    0  0.000  0.000  0.000   270   34620-34889  
;  33 SUSP REP5_LOC                     0    0    0    0  0.000  0.000  0.000   270   34890-35159  
;  34 SUSP REP6_LOC                     0    0    0    0  0.000  0.000  0.000   270   35160-35429  
;  35 SUSP RandomizeRanDistAngles       0    0    0    0  0.000  0.000  0.000   110   35430-35539  
;  36 SUSP RandomizeRanDistEccentric    0    0    0    0  0.000  0.000  0.000   110   35540-35649  
;  37 SUSP RandomizeRanTargAngles       0    0    0    0  0.000  0.000  0.000   110   35650-35759  
;  38 DONE LOC_RAND                  7154    0   75   75  0.000  0.044  0.040  7154   35760-42913  
;  39 DONE SEL_LOCS                  2834    0   39   39  0.000  0.037  0.022  2834   42914-45747  
;  40 DONE DRW_T                     1294    0   42    0  0.000  0.091  0.000  1294   45748-47041  
;  41 DONE DRW_L                     1350    0   43    0  0.000  0.091  0.000  1350   47042-48391  
;  42 DONE DRW_PLAC                   370    0   31    0  0.000  0.068  0.000   370   48392-48761  
;  43 DONE DRW_SQR                    380    0   96    0  0.000  0.173  0.000   380   48762-49141  
;  44 SUSP FIX_PGS                      0    0    0    0  0.000  0.000  0.000   442   49142-49583  
;  45 SUSP FLS_PGS                      0    0    0    0  0.000  0.000  0.000   506   49584-50089  
;  46 SUSP CMD_PGS                      0    0    0    0  0.000  0.000  0.000  2046   50090-52135  
;  47 SUSP STAIR                        0    0    0    0  0.000  0.000  0.000   250   52136-52385  
;  48 SUSP SETC_TRL                     0    0    0    0  0.000  0.000  0.000   730   52386-53115  
;  49 SUSP MG_PGS                       0    0    0    0  0.000  0.000  0.000  2156   53116-55271  
;  50 SUSP SETMGTRL                     0    0    0    0  0.000  0.000  0.000   730   55272-56001  
;  51 SUSP GNG_PGS                      0    0    0    0  0.000  0.000  0.000  2312   56002-58313  
;  52 SUSP SETG_TRL                     0    0    0    0  0.000  0.000  0.000  1014   58314-59327  
;  53 SUSP DEL_PGS                      0    0    0    0  0.000  0.000  0.000  1780   59328-61107  
;  54 SUSP SETD_TRL                     0    0    0    0  0.000  0.000  0.000   510   61108-61617  
;  55 DONE TSCH_PGS                  7982    0   75    0  0.000  0.123  0.000  7982   61618-69599  
;  56 DONE LSCH_PGS                  7982    0   75    0  0.000  0.106  0.000  7982   69600-77581  
;  57 DONE SETS_TRL                   796    0   40    0  0.000  0.033  0.000   796   77582-78377  
;  58 SUSP GNGTRIAL                     0    0    0    0  0.000  0.000  0.000  2780   78378-81157  
;  59 SUSP DELTRIAL                     0    0    0    0  0.000  0.000  0.000  1726   81158-82883  
;  60 SUSP UPD8_INH                     0    0    0    0  0.000  0.000  0.000  1976   82884-84859  
;  61 SUSP UPD8_SOA                     0    0    0    0  0.000  0.000  0.000  1952   84860-86811  
;  62 DONE UPD8_SCH                   792    0   31    0  0.000  0.020  0.000   792   86812-87603  
;  63 DONE INFOS                     4094    0  146    0  0.000  0.121  0.000  4094   87604-91697  
;  64 DONE ABORT                      688    0   16    0  0.000  0.028  0.000   688   91698-92385  
;  65 DONE JUICE                       44    0    4    0  0.000  0.028  0.000    44   92386-92429  
;  66 DONE SUCCESS                   1202    0   23    0  0.000  0.067  0.000  1202   92430-93631  
;  67 DONE FAILURE                    992    0   22    0  0.000  0.065  0.000   992   93632-94623  
;  68 DONE END_TRL                   1608    0   68    0  0.000  0.067  0.000  1608   94624-96231  
;  69 SUSP KEY_REWD                     0    0    0    0  0.000  0.000  0.000   190   96232-96421  
;  70 SUSP KEY_T_UP                     0    0    0    0  0.000  0.000  0.000    50   96422-96471  
;  71 SUSP KEY_T_DN                     0    0    0    0  0.000  0.000  0.000    68   96472-96539  
;  72 SUSP FIXTRIAL                     0    0    0    0  0.000  0.000  0.000   470   96540-97009  
;  73 SUSP FIXATION                     0    0    0    0  0.000  0.000  0.000  1032   97010-98041  
;  74 SUSP CMANDING                     0    0    0    0  0.000  0.000  0.000   990   98042-99031  
;  75 SUSP MGUIDE                       0    0    0    0  0.000  0.000  0.000   938   99032-99969  
;  76 SUSP GONOGO                       0    0    0    0  0.000  0.000  0.000   822   99970-100791 
;  77 SUSP DELAYED                      0    0    0    0  0.000  0.000  0.000   802  100792-101593 
;  78 DONE SEARCH                     924    0   28   22  0.000  0.068  0.037   924  101594-102517 
;  79 SUSP FLSHSCRN                     0    0    0    0  0.000  0.000  0.000   656  102518-103173 
;  80 DONE WAIT_MU                    100    0  450  342  0.000  0.722  0.541   100  103174-103273 
;  81 DONE SEND_TTL                   144    0   70   56  0.000  0.221  0.101   144  103274-103417 
;  82 RUN  QUE_TTL                    146    8   68   56  0.008  0.587  0.053   150  103418-103567 
;  83 RUN  IDLE                       624   17   30    0  0.011  0.098  0.000   628  103568-104195 


SPEED 1000

; ANALOG TABLE SETTINGS
;; ACHANNELS=3


ACHANINFO 0


; SPIKE TABLE SETTINGS
;; CCHANNELS=1


CCHANINFO 0


; EVENT TABLE SETTINGS
;; ECHANNELS=2


ECHANINFO 0


PLOAD ALL_PROS.pro

; DATABASES=40


; WINDOW CONFIGURATION

SCREENRES 1280,1024,32,1,0,0
MAINWND 1,0,0,-1,-1,1,0,555,58,0
MSGWND 1,160,972,-1,-1,0,76,405,936,0
STATUSWND 1,0,0,-1,-1,405,496,1255,580,0
SHOW s 0

CMDWND 1,160,972,-1,-1,0,940,405,990,0
ANIMPAGE 0x1,1,0,972,-1,-1,405,76,1255,492,0
ANIMVIEW 0,1,0,0,0,0,0,0,421,389,0
ANIMVIEW 1,1,0,0,0,0,421,0,842,389,1

; DATABASES PAGES & VIEWS

DBPCOLORS 0x0,0x0,0x0,0x0,0x0

; END GRAPH CONFIGURATION

DLOAD C:\\TEMPO\\ProcLib\\ALL_PROS.dcf

; BEGIN KEY DEFINITIONS

KEY F1 = dialog Info_and_StartClock
KEY ESC = dpop
KEY PLUS = spawn key_rewd
KEY INSERT = spawn key_rewd
KEY ALTE = Eye_on_VDOSync = 1
KEY ALTX = Eye_on_VDOSYnc = 0
KEY ALTC = CenterEyeNow = 1
KEY F2 = dialog Choose_Task
KEY F3 = dialog Fixation_Main
KEY F4 = dialog in_task_pane
KEY ALTM = spawn key_move
KEY CURUP = spawn KEY_REWD
KEY PGUP = spawn KEY_STIM

; END KEY DEFINITIONS

__HEADER__
ALL_PROS.pro
__FOOTER__
//----------------------------------------------------------------------------
// ALL_PROS.pro is meant to contain all of the protocols run in a particular rig.
// The protocols contained here have been written with the following principles.
// If one expands or changes this protocol, it is recommended that these
// principles continue to be followed to save headaches and poor data collection.
// This requires an additional time commitment on the front end, but the 
// investment will pay dividends on the back end. 
//
// PRINCIPLE 1) MODULARITY
// As much as possible, each process in the ProcLib (Process Library) has been 
// written to stand on its own and function without needing other processes.
// This is good for at least three reasons.  First, processes can be recycled in
// the protocol across multiple tasks minimizing valuable coding space.  Second,
// using these processes as a set of tools, protocols can be developed rapidly.
// Third and most important, modularity allows for unit testing.  All of the 
// processes here have been tested as individual units.
//
// PRINCIPLE 2) VARIABLE SCOPE
// Wherever possible, variables have been kept local in scope.  At first glance,
// this may seem like a big waste of time.  Short protocols are easily written 
// with shared globals (see ACQUIRE.pro), and maintaining local variable scope 
// leads to cumbersome process calls.  However, once a protocol reaches any
// real level of complexity, global variables lead to unstable behavior and 
// untraceable bugs (see cman_f.pro, the predecessor of CMANDING.pro).  By 
// carefully tracking variables and keeping their scope local we can simplify the
// behavior of the task greatly.  Throughout the code...  
// -ALL_CAPS refer to process calls,
// -Capitilized variables refer to Globals,
// -lowercase variables refer to locals.
//
// PRINCIPLE 3) STIMULUS PRECISION
// Drawing on the current viewing screen leads to sloppiness.  If an object is 
// drawn in the middle of the refresh cycle stimulus "tear" can occur, and if 
// stimuli and photodiode marker drawing are initiated in the wrong stage of the
// vertical retrace the photodiode marker may be drawn before the stimulus rather
// than after.  One approach is to use pallete swapping to make stimuli visible 
// or invisible, but this approach is time consuming and the timing is somewhat 
// variable since it reallocates video memory.  The approach used here is to  
// allocate a chunk of video memory to every page which will be viewed on a given 
// trial during the inter-trial interval, and then to use page flipping to present  
// the stimuli with precision and speed.
//
// PRINCIPLE 4) UNIT CONVERSION 
// Many different units may refer to the same measurement at different stages in 
// the task.  For instance, eye position may be dealt with in degrees, voltage, 
// analog card units, or pixels depending on the reference frame.  In the past, 
// the burden of conversion fell to the user and translation code had to deal 
// with this problem post-hoc (see cman_f.pro).  Here, pains have been taken to
// convert eye traces, stimuli, and fixation boxes into a standard reference 
// frame (visual degrees) "under the hood" so that the user is not forced to 
// consult a slide rule every time they want to move the target location.
//
// PRINCIPLE 5) TASK SWITCHING
// while() loops have been used below to pause between tasks and pause at task 
// intitiation so users can select variables.  This allows a user to set up a GUI 
// which will switch gracefully between tasks.  Following this principle saves
// the user from having to start and stop the clock every time a new task is to be 
// run, and keeps the user from making costly mistakes like freezing the solonoid 
// open or failing to close the last trial before saving to plexon and ruining the 
// session.
//
// PRINCIPLE 6) HARDWARE FLEXIBILITY
// The protocol has been designed with a mechanism for switching between recording
// setups in place.  Variables which are necessary for the protocol to work in a 
// particular room have not been hard coded.  Instead, they reside in a file called
// RIGSETUP.pro.  By opening and changing the values of the rig specfic hardware 
// variables in this file, one is able to port ALL_PROS.pro to a new recording
// setup easily.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011;        modified by joshua.d.cosman@vanderbilt.edu	July, 2013

#pragma declare = 1                     // require declarations of all variables

declare IDLE();							// must be declared in top because it is called by other processes below

declare int State;						// The State global variable allows the control structure to run tasks...
										// ...depending on the current stystem state. The beginning state is idling.
declare int OK;							// Starts tasks after setting variables;
declare int Set_monkey;
declare int Monkey;	
declare int Pause;						// Gives user ability to pause task with a button press
declare int Last_task;					// Keeps track of the last task which was run to hold onto default variable values
declare int Event_fifo_N = 1000;		// Length of strobed event buffer
declare int Event_fifo[Event_fifo_N];	// Global first in first out buffer for event codes
declare int Set_event = 0;              // Current index of Event_fifo buffer to set
declare int fix_manual = 1;				//auto fixation task = 1

#include C:/TEMPO/ProcLib/RIGSETUP.pro  // declares a bunch of rig specific global variables
#include C:/TEMPO/ProcLib/EVENTDEF.pro	// event code definitions
#include C:/TEMPO/ProcLib/ALL_VARS.pro	// declares global variables needed to run protocols
#include C:/TEMPO/ProcLib/DEFAULT.pro	// sets all globals to their appropriate defaults for countermanding
#include C:/TEMPO/ProcLib/GOODVARS.pro	// do user defined variables make sense before starting the task?
#include C:/TEMPO/ProcLib/STIM.pro		// deliver microstim and send a stobe
#include C:/TEMPO/ProcLib/KEY_STIM.pro	// deliver microstim via key press
#include C:/TEMPO/ProcLib/SET_CLRS.pro	// sets the stim colors up
#include C:/TEMPO/ProcLib/DIO.pro		// necessary for digital input output communication
#include C:/TEMPO/ProcLib/SET_COOR.pro  // set screen coordinates up and calculate some conversion factors
#include C:/TEMPO/ProcLib/GRAPHS.pro    // required when using object graphs in cmanding protocol (modified from object.pro to include graph setup)
#include C:/TEMPO/ProcLib/SET_INH.pro	// sets up the inhibition function graph used in cmanding
#include C:/TEMPO/ProcLib/SET_SOA.pro
#include C:/TEMPO/ProcLib/SET_SCH.pro	// sets parameters for search RT graph
#include C:/TEMPO/ProcLib/WINDOWS.pro	// sets fixation and target window size (these valeus are needed in WATCHEYE.pro)
#include C:/TEMPO/ProcLib/WATCHEYE.pro	// monitors eye position on each process cyle
#include C:/TEMPO/ProcLib/TONE.pro      // does simple frequency conversion and presents tone accordingly
//#include C:/TEMPO/ProcLib/TONESWEP.pro	// a sweep through several tones for a sound which can be distinguished from pure tones
//#include C:/TEMPO/ProcLib/WATCHMTH.pro	// monitors mouth movement on each process cycle
//#include C:/TEMPO/ProcLib/WATCHBOD.pro	// monitors body movement on each process cycle
#include C:/TEMPO/ProcLib/SVR_BELL.pro	// sounds speaker on server
#include C:/TEMPO/ProcLib/SVR_BEL2.pro	// sounds speaker on server (different)
#include C:/TEMPO/ProcLib/CMDTRIAL.pro	// runs a single countermanding trial based on input
#include C:/TEMPO/ProcLib/MGTRIAL.pro
#include C:/TEMPO/ProcLib/SCHTRIAL.pro
//#include C:/TEMPO/ProcLib/VMAPTRIAL.pro

#include C:/TEMPO/ProcLib/REP_ORT.pro   // simple process for selecting repeated display orientations prior to trial
#include C:/TEMPO/ProcLib/RAND_ORT.pro	// simple process for selecting random display orientation prior to trial
#include C:/TEMPO/ProcLib/LOC_REP.pro	// simple process for selecting repeated display locations prior to trial
//#include C:/TEMPO/ProcLib/LOC_RAND_SING.pro	// simple process for selecting random display locations prior to trial
#include C:/TEMPO/ProcLib/LOC_RAND.pro	// simple process for selecting random display locations prior to trial
#include C:/TEMPO/ProcLib/LOC_ASYM.pro	// select displays for probability cueing mode

#include C:/TEMPO/ProcLib/SEL_LOCS.pro	// simple process for selecting stimulus locations on a given trials, from above 2 files

#include C:/TEMPO/ProcLib/DRW_T.pro		// simple process for drawing T stimulus, incldues T_ORIENT
#include C:/TEMPO/ProcLib/DRW_L.pro	    // simple process for drawing L stimulus, incldues L_ORIENT
#include C:/TEMPO/ProcLib/DRW_PLAC.pro	// simple process for drawing placeholder stimulus
#include C:/TEMPO/ProcLib/DRW_SQR.pro	// simple process for drawing box

#include C:/TEMPO/ProcLib/FIX_PGS.pro	// setup fixation stimuli
#include C:/TEMPO/ProcLib/FLS_PGS.pro	// setup flash stimuli
//#include C:/TEMPO/ProcLib/LSCH_PGS.pro	// setup search windows - L
//#include C:/TEMPO/ProcLib/TSCH_PGS.pro	// setup search windows - T
#include C:/TEMPO/ProcLib/CMD_PGS.pro	// setup countermanding windows

#include C:/TEMPO/ProcLib/SETC_TRL.pro	// sets up all of the input to run a countermanding trial
#include C:/TEMPO/ProcLib/SETMGTRL.pro
//#include C:/TEMPO/ProcLib/SETM_TRL.pro
#include C:/TEMPO/ProcLib/SETG_TRL.pro  // sets up all input to run a gonogo trial
#include C:/TEMPO/ProcLib/SETD_TRL.pro  // sets up all input to run a delayed saccade trial
#include C:/TEMPO/ProcLib/SETS_TRL.pro  // sets up all input to run a search trial

#include C:/TEMPO/ProcLib/GNGTRIAL.pro	// runs a single gonogo guided trial based on input
//#include C:/TEMPO/ProcLib/DELTRIAL.pro 	// runs a single delayed saccade trial based on input
#include C:/TEMPO/ProcLib/UPD8_INH.pro	// updates inhibition function for cmanding
//#include C:/TEMPO/ProcLib/UPD8_SOA.pro  
#include C:/TEMPO/ProcLib/UPD8_SCH.pro	// updates search performance RT
#include C:/TEMPO/ProcLib/INFOS.pro		// queue up all trial event codes for strobing to plexon
#include C:/TEMPO/ProcLib/END_TRL.pro	// ends a trial based on outcome
//#include C:/TEMPO/ProcLib/KEY_REWD.pro	// needed to give reward manually from keyboard (stupid)
#include C:/TEMPO/ProcLib/KEY_TARG.pro	// see above
#include C:/TEMPO/ProcLib/FIXATION.pro	// fixation control structure
//#include C:/TEMPO/ProcLib/CMANDING.pro	// countermanding control structure
//#include C:/TEMPO/ProcLib/MEMORY.pro	// mem guided sacc task control structure
//#include C:/TEMPO/ProcLib/MGUIDE.pro
//#include C:/TEMPO/ProcLib/GONOGO.pro    // gonogo sacc task control structure
//#include C:/TEMPO/ProcLib/DELAYED.pro   // delayed guided sacc task control structure
#include C:/TEMPO/ProcLib/SEARCH.pro	// SEARCH control structure
//#include C:/TEMPO/ProcLib/VISMAP.pro 	// Visual mapping 
//#include C:/TEMPO/ProcLib/FLSHSCRN.pro	// for gross VEPs
//#include C:/TEMPO/ProcLib/QUE_TTL.pro	// makes a ring buffer for sending TTL events



//----------------------------------------------------------------------
process IDLE() enabled					// When the clock is started the task is not yet running.
	{									// At any time we can press a button to return to this...
										// ...idle loop.  It will make sure everything is off...
										// ...and all necessary variables are reset before...
										// ...starting the task over or starting a new task.
	declare hide int off = 0;
	declare hide int idling;
	declare hide int run_cmd_sess 		= 1;	// state 1 is countermanding
	declare hide int run_fix_sess 		= 2;	// state 2 is fixation
	declare hide int run_mg_sess 		= 3;	// state 3 is mem guided sacc
	declare hide int run_gonogo_sess	= 4;
	declare hide int run_flash_sess		= 5;	// state 5 is flash screen protocol
	declare hide int run_delayed_sess	= 6;
	declare hide int run_search_sess	= 7;
	declare hide int run_vm_sess 		= 8;
	
	seed1(timeus());					// randomly seed the number generator
	normal(1);							// call the normal distribution to replenish queue after seeding
	idling = 1;							// makes the while loop run
					  
	dioSetMode(0, PORTA|PORTB|PORTC); 	// set 1st three TTL lines to output					  
	mio_dig_set(Juice_channel,off);		// make sure the juice line is closed
	mio_fout(off);						// make sure the speaker is off
	dsend("vi 256;");					// make sure vdosync is in correct config
	dsend("ca");						// flush all vdosync memory
			
	spawn SET_COOR(scr_width,			// set up screen coordinates based on globals defined in RIGSETUP.pro	
				scr_height,
				subj_dist,
				scr_pixX,
				scr_pixY);
				
	spawn GRAPHS(scr_pixX,				// this is currently countermanding specific and should be changed
				scr_pixY,				
				deg2pix_X,
				deg2pix_Y);		
	
	spawn WATCHEYE(eye_X_channel,		// start monitoring eye position
				eye_Y_channel, 
				analogUnits, 
				maxVoltage,
				deg2pix_X,
				deg2pix_Y);
				
//	spawn QUE_TTL();					// set up for plexon communication
	printf("flushing video memory please wait...\n");
	wait 5000; 							// it can take up to 5 seconds to clear all vdo sync memory (pg 7-37)
	printf("done!\n");
	system("dialog Choose_Task");		// Pop up choose task dialog
	
		
	
	while (idling)						// wait for the user to specify which task to run
		{
		
//		if (State == run_cmd_sess)		// user wants to run the countermanding task
//			{
//			OK = 0;
//			spawn CMANDING();			// start countermanding
//			idling = 0;					// stop idling
//			}
			
		if (State == run_fix_sess)		// user wants to run the fixation task
			{
			OK = 0;
			spawn FIXATION();			// start fixation
			idling = 0;					// stop idling
			}
			
//		if (State == run_mg_sess)		// user wants to run the mem guided sacc task
//			{
//			OK = 0;
//			spawn MGUIDE();				// start mem guided sacc task
//			idling = 0;					// stop idling
//			}
			
//		if (State == run_gonogo_sess)	// user wants to run the go/nogo task
//			{                           
//			OK = 0;                     
//			spawn goNOgo();             // start go/nogo task
//			idling = 0;                 // stop idling
//			}
			
//		if (State == run_flash_sess)	// user wants to run the flash protocol
//			{
//			OK = 0;
//			spawn FLSHSCRN();			// start flash protocol
//			idling = 0;					// stop idling
//			}
		
//		if (State == run_delayed_sess)	// user wants to run the delayed sacc task
//			{
//			OK = 0;
//			spawn Delayed();			// start delayed sacc task
//			idling = 0;					// stop idling
//			}
		if (State == run_search_sess)	// user wants to run the delayed sacc task
			{
			OK = 0;
			spawn SEARCH();			// start delayed sacc task
			idling = 0;					// stop idling
			}					
		/*if (State == run_vm_sess)
			{
			OK = 0;
			spawn VISMAP();
			idling = 0;
			}
		*/
		nexttick;						// if no task is specified idle for another process... 
										// ...cycle and then check again.
		
		}
	
	}



__HEADER__
ALL_VARS.pro
__FOOTER__
// These are the user defined global variables needed to run the countermanding task
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011; modified by joshua.d.cosman@vanderbilt.edu, July 2013

declare int		Trl_number;
declare int		Comp_Trl_number;
declare float	Rand_Comp_Trl_number_DP; 	//search specific - gives correct number of dist pres trials; see END_TRL.pro
declare float	Rand_Comp_Trl_number_DA; 	//search specific - gives correct number of dist abs trials
declare float	Rep_Comp_Trl_number; 	//search specific - gives correct number of repeat trials; see END_TRL.pro
declare float	Rand_Comp_Trl_number; 	//search specific - gives correct number of random trials
declare float	Rand_Comp_NG_Trl; 		//search specific - gives correct number of random NOGO/catch trials
declare float	Rand_Comp_Trl_DA; 		//search specific - gives correct number of random NOGO/catch trials for sing. session
declare float	Rand_Comp_Trl_DP; 		//search specific - gives correct number of random NOGO/catch trials
declare float	Rep_Comp_NG_Trl; 		//search specific - gives correct number of repeat NOGO/catch trials

//----------------------------------------------------------------------------------------------------------------
// Online analysis variables
declare int		RandPerAcc;
declare int		RepPerAcc;
declare int		RandPerAcc_DA;
declare int		RandPerAcc_DP;
declare float	rand_inacc_sacc;
declare float	rep_inacc_sacc;
declare float	rand_inacc_sacc_DA;
declare float	rand_inacc_sacc_DP;
declare float	current_rt; 			//search specific - gives current RT for use in graph calculations
declare float 	cum_rep_rt;
declare float 	avg_rep_rt;
declare float 	graph_rep_rt;
declare float 	cum_rand_rt;
declare float 	avg_rand_rt;
declare float 	cum_rand_rt_DA;
declare float 	avg_rand_rt_DA;
declare float 	cum_rand_rt_DP;
declare float 	avg_rand_rt_DP;
declare float 	graph_rand_rt;
declare int		Correct_trls;
declare float	Consec_corr;	
declare int		Block_number;
declare int		Trls_per_block;			// for one directional reward paradigm


//----------------------------------------------------------------------------------------------------------------
// Trial type distributions (must sum to 100)
declare float	Go_weight;				// percentage of go trials
declare float	Stop_weight;			// percentage of stop trials
declare float	Ignore_weight;			// percentage of ignore trials

declare int		DR1_flag;				// shows that we are doing 1DR version of task

declare float	Bonus_weight;			// percentage of time that the subject is wrong but gets rewarded anyway.
declare float	Dealer_wins_weight;		// percentage of time that the subject is right but gets punished anyway.

declare float	BigR_weight;			// weights for random changes of reward size
declare float	MedR_weight;			// weights for random changes of reward size
declare float	SmlR_weight;			// weights for random changes of reward size
declare float	SmlP_weight;			// weights for random changes of punsiment size
declare float	MedP_weight;			// weights for random changes of punsiment size
declare float	BigP_weight;			// weights for random changes of punsiment size


//----------------------------------------------------------------------------------------------------------------
// Stimulus properties
////////////////Search Specific
declare int     Catch;					// determines catch trial or not, SETS_TRL.pro
declare int     CatchCode;					// determines catch trial type for event code
declare float   Perc_catch;				// percentage catch trials, set in DEFAULT.pro
declare int		PlacPres;				// determines presence of placeholders in search task -- 0 = no placeholders,  1 = placeholders
declare int		SearchType;				// determines homo/hetero distractors -- Hetero = 1, Homo = 2
declare int		TargetType;				// determines Target Type -- L = 1, T = 2
declare int		TrialTp;				// determines random/repeated displays
declare int		SetSize;				// determines set size via following values -- SS1 = 1, SS2 = 2, SS4 = 3, SS8 = 4, SS12 = 5
declare int		soa_mode;				// turns search soa mode on/off, see DEFAULT.pro
declare int     Consec_trl;				// consec trials to get reward
//Contextual cue related target and distractor locations
declare float	Dist_Ecc_list[9] = {5, 11, 14, 5, 11, 14, 5, 11, 14};	// distance of each target from center of screen individually (degrees)	declare hide float 	targ_angle;
declare float	Dist_Ang_list[8] = {25, 65, 115, 155, 205, 245, 295, 335}; //off cardinal coords., ensures that displays are L/R lateralized
declare float	RanTarg_Ang_list[4] = {65, 155, 245, 335}; //off cardinal coords., ensures that displays are L/R lateralized
declare float	RepTarg_Ang_list[4] = {25, 115, 205, 295}; //off cardinal coords., ensures that displays are L/R lateralized

// Target eccentricity gets hard coded in DEFAULT.pro so I can keep constant across conditions in contextual cueing

// declare float	LeftLatAng_list[3] = {225, 135, 180}; //off card inal coords.
// declare float	RightLatAng_list[3] = {45, 0, 315}; //off cardinal coords.
declare float	TrAngList[4] = {0, 90, 180, 270}; //off cardinal coords.
declare	int		ArrStruct;
declare	int		ProbCue; //turn probability cueing mode on or off
declare	int		ProbSide; //more probable target location
declare	int		TaskStim; //turn task-based stimulation on or off
declare	int		FixJitter;
declare	int		LatStruct;
declare int     Catch_Rew; //allows us to set how much we divide base reward by on catch trials relative to target trials
declare int 	trialtype; //selects repeat vs random displays
declare int		Singleton_color[3];	// need to make this more finely adjustable for luminance matching
declare int		NonSingleton_color[3];	// need to make this more finely adjustable for luminance matching
declare int		d1color;	// need to make this more finely adjustable for luminance matching
declare int		SingMode; //declares presence/absence of singleton, set in DEFAULT.pro
declare int		SingFreq; //singleton present vs absent frequency/proportion, only used in LOC_RAND.pro
declare int		DistPres; //singleton present (1) vs. absent (0) for strobing. See EVENTDEF.pro, gets set in LOC_RAND.pro
declare int		SingCol; //declares color of singleton, currently set in DEFAULT.pro and selected in SET_CLRS.pro
declare int		PercSingTrl; // sets percentage of trials where singleton is present, set in DEFAULT.pro, see also usage in LOC_RAND.pro
//declare	int		TrainOrt;
declare int		TargOrt;
declare int		TargOrt1; //specific to singleton search mode sets T1 
declare int		TargOrt2; //specific to singleton search mode sets T2 
declare int 	TD_Select; //Select Target Distractor relationship for singleton search mode (i.e., which is target and which is distractor)
//declare int 	TargID_Select; //Select target type from trial to trial at random in singleton search mode
declare int 	DistOrt;
declare	int		SearchEcc;
declare	int		SelEcc; // select eccentricity - see SETS_TRL.PRO
declare	int		VarEcc; // turn eccentricity selection on/off
declare	int		TargTrainSet;
declare int		THemi; //0=vertical meridian, 1=left hemi, 2=right hemi
declare int		DHemi; //0=vertical meridian, 1=left hemi, 2=right hemi
declare 		Rand_targ_angle;
declare 		Rand_d1_angle;

declare float 	catch_hold_time;
declare float 	search_fix_time;
declare float 	plac_duration;
declare float   max_plactime;
declare float   min_plactime;
//////////////////End Search Specific

///////// Ultrasound Vars /////////
declare	int StimInterval;
declare	int StimCond;
declare	int LastStim;
declare	int Npulse;
declare	int PulseGap;

////////// Ultrasound Vars /////////

declare int		Classic;				// emulates the old stop signal task
declare int		Stop_sig_color[3];		// need to make this more finely adjustable for luminance matching
declare int		Ignore_sig_color[3];	// need to make this more finely adjustable for luminance matching
declare int		Fixation_color[3];		// need to make this more finely adjustable for luminance matching
declare int		Mask_sig_color[3];		//temporal
declare int		N_targ_pos;				// number of target positions (need to calculate this myself based on user input)
declare int		Color_list[12,3];		// color of each stimulus individually (see critique above)
declare float	Size_list[12];			// size of each stimulus individually (degrees)
declare float	Angle_list[12];			// angle of each target individually (degrees)
declare float	Eccentricity_list[12];	// distance of each target from center of screen individually (degrees)
declare float	Fixation_size;			// size of the fixatoin point (degrees)
declare int		Set_Tones;				// sets up the tones to either high or low based on user input
declare int		Success_Tone_bigR;		// positive secondary reinforcer in Hz (large reward)
declare int		Success_Tone_medR;		// positive secondary reinforcer in Hz (medium reward)
declare int		Success_Tone_smlR;		// positive secondary reinforcer in Hz (small reward)		
declare int		Failure_Tone_smlP;		// negative secondary reinforcer in Hz (short timeout)
declare int		Failure_Tone_medP;		// negative secondary reinforcer in Hz (medium timeout)
declare int		Failure_Tone_bigP;		// negative secondary reinforcer in Hz (long timeout)
declare int		Fixation_Target;		// Target number for the fixation task (changed by key macros);

//declare float	Ang_list[12] = {0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330}; //cardinal coords.
declare hide float llength = 1.6;
declare hide float lwidth = 0.5;

//----------------------------------------------------------------------------------------------------------------
declare float	Fix_win_size;			// size of fixation window (degrees)
declare float	Targ_win_size;			// size of target window (degrees)



//----------------------------------------------------------------------------------------------------------------
// Task timing paramaters (all times in ms unless otherwise specified)
declare int		Allowed_fix_time;		// subject has this long to acquire fixation before a new trial is initiated
declare int		Expo_Jitter;			// defines if exponential holdtime is used or if holdtime is sampled from rectanglular dist.
declare int		Expo_Jitter_SOA;		// defines if exponential holdtime is used for fixation offset in mem guided sacc task
declare int		Min_Holdtime;			// minimum time after fixation before target presentation
declare int		Max_Holdtime;			// maximum time after fixation before target presentation
declare int		Min_SOA;				// minimum time from target onset to fixation offset (mem guided only)
declare int		Max_SOA;				// maximum time from target onset to fixation offset (mem guided only)
declare int		Min_saccade_time;		// for training subjects to slow down if necessary
declare int		Max_saccade_time;		// subject has this long to saccade to the target
declare int		Max_sacc_duration;		// once the eyes leave fixation they must be in the target before this time is up
declare int		Targ_hold_time;			// after saccade subject must hold fixation at target for this long
declare int		N_SSDs;					// number of stop signal delays (need to calculate this myself)
declare int		Max_SSD;				// longest SSD
declare int		Min_SSD;				// shortest SSD
declare int		N_SOAs;
declare int		Max_SOA;
declare int 	Min_SSD;
declare int 	SSD_floor;				// for training to cancel consistantly
declare int 	SSD_ceil;				// for training to cancel consistantly
declare int		Staircase;				// do we select the next SSD based on a staircasing algorithm?
declare float	SSD_list[20];			// needs to be in refresh rate units
declare float	SOA_list[20];			// needs to be in refresh rate units
declare int		Cancl_time;				// subject must hold fixation for this long on a stop trial to be deemed canceled
declare int		Tone_Duration;			// how long should the error and success tones be presented?
declare int		Reward_Offset;			// how long after tone before juice is given (needed to seperate primary and secondary reinforcement)
declare int		Base_Reward_time;		// how long will the juice solonoid remain open (monkeys are very interested in this varaible)
declare int		Base_Punish_time;		// time out for messing up
declare int		Bmove_tout;				// additive timeout imposed for each body movement
declare int		Move_ct;				// Output lets us know how many times the body has moved.
declare int		Max_move_ct;			// Setting maximum move_ct so monkey doesn't self-punish to eternity
declare int		TrainingStill;			// Indicates that we are using motion detector to train the monk to be still
declare int		Canc_alert;				// Alert operator that the monk has canceled a trial (during training)
declare int		Fixed_trl_length;		// 1 for fixed trial length, 0 for fixied inter trial intervals
declare int		Trial_length;			// fixed at this value (only works if Fixed_trl_length == 1) must figure out max time for this variable and include it in comments
declare int		Inter_trl_int;			// how long between trials (only works if Fixed_trl_length == 0)
declare int 	Exp_juice;				// Exponential juice reward duration by reaction time
declare int 	nogosoa;
//------------------------------------------------------------------------------------------------------------------
// Globals needed for multiple processes which must be declared here to avoid dependancy conflicts
declare int Reward_duration;			//GLOBAL OUTPUT FOR INFOS.pro will be set by END_TRL.pro
declare int Punish_time;				//GLOBAL OUTPUT FOR INFOS.pro will be set by END_TRL.pro
declare int Success_tone;				//GLOBAL OUTPUT FOR INFOS.pro will be set by END_TRL.pro
declare int Failure_tone;				//GLOBAL OUTPUT FOR INFOS.pro will be set by END_TRL.pro

// Flash Variables
declare float IFI;
declare float flashTime;








__HEADER__
C_VARS.pro
__FOOTER__
// These are the user defined global variables needed to run the countermanding task
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare int		Trl_number;
declare int		Comp_Trl_number;
declare int		Block_number;

declare int		C_early_saccades;
declare int		C_go_correct;
declare int		C_go_wrong;
declare int		C_nogo_correct;
declare int		C_nogo_wrong;


//----------------------------------------------------------------------------------------------------------------
// Trial type distributions (must sum to 100)
declare float	Go_weight;				// percentage of go trials
declare float	Stop_weight;			// percentage of stop trials
declare float	Ignore_weight;			// percentage of ignore trials

declare float	Bonus_weight;			// percentage of time that the subject is wrong but gets rewarded anyway.
declare float	Dealer_wins_weight;		// percentage of time that the subject is right but gets punished anyway.

declare float	BigR_weight;			// weights for random changes of reward size
declare float	MedR_weight;			// weights for random changes of reward size
declare float	SmlR_weight;			// weights for random changes of reward size
declare float	SmlP_weight;			// weights for random changes of punsiment size
declare float	MedP_weight;			// weights for random changes of punsiment size
declare float	BigP_weight;			// weights for random changes of punsiment size


//----------------------------------------------------------------------------------------------------------------
// Stimulus properties
declare int		Classic;				// emulates the old stop signal task
declare int		Stop_sig_color[3];		// need to make this more finely adjustable for luminance matching
declare int		Ignore_sig_color[3];	// need to make this more finely adjustable for luminance matching
declare int		Fixation_color[3];		// need to make this more finely adjustable for luminance matching
declare int		Mask_sig_color[3];
declare int		N_targ_pos;				// number of target positions (need to calculate this myself based on user input)
declare int		Color_list[9,3];		// color of each target individually (see critique above)
declare int		tColor_list[9,3];
declare float	Size_list[9];			// size of each target individually (degrees)
declare float	Angle_list[9];			// angle of each target individually (degrees)
declare float	Eccentricity_list[9];	// distance of each target from center of screen individually (degrees)
declare float	Fixation_size;			// size of the fixatoin point (degrees)
declare int		Set_Tones;				// sets up the tones to either high or low based on user input
declare int		Success_Tone_bigR;		// positive secondary reinforcer in Hz (large reward)
declare int		Success_Tone_medR;		// positive secondary reinforcer in Hz (medium reward)
declare int		Success_Tone_smlR;		// positive secondary reinforcer in Hz (small reward)		
declare int		Failure_Tone_smlP;		// negative secondary reinforcer in Hz (short timeout)
declare int		Failure_Tone_medP;		// negative secondary reinforcer in Hz (medium timeout)
declare int		Failure_Tone_bigP;		// negative secondary reinforcer in Hz (long timeout)
declare int		Fixation_Target;		// Target number for the fixation task (changed by key macros);


//----------------------------------------------------------------------------------------------------------------
// Eye related variables
declare float	Fix_win_size;			// size of fixation window (degrees)
declare float	Targ_win_size;			// size of target window (degrees)



//----------------------------------------------------------------------------------------------------------------
// Task timing paramaters (all times in ms unless otherwise specified)
declare int		Allowed_fix_time;		// subject has this long to acquire fixation before a new trial is initiated
declare int		Expo_Jitter;			// defines if exponential holdtime is used or if holdtime is sampled from rectanglular dist.
declare int		Min_Holdtime;			// minimum time after fixation before target presentation
declare int		Max_Holdtime;			// maximum time after fixation before target presentation
declare int		Max_saccade_time;		// subject has this long to saccade to the target
declare int		Max_sacc_duration;		// once the eyes leave fixation they must be in the target before this time is up
declare int		Targ_hold_time;			// after saccade subject must hold fixation at target for this long
declare int		N_SSDs;					// number of stop signal delays (need to calculate this myself)
declare int		Max_SSD;				// longest SSD
declare int		Min_SSD;				// shortest SSD
declare int		Staircase;				// do we select the next SSD based on a staircasing algorithm?
declare float	SSD_list[20];			// needs to be in refresh rate units
declare int		Cancl_time;				// subject must hold fixation for this long on a stop trial to be deemed canceled
declare int		Tone_Duration;			// how long should the error and success tones be presented?
declare int		Reward_Offset;			// how long after tone before juice is given (needed to seperate primary and secondary reinforcement)
declare int		Base_Reward_time;		// how long will the juice solonoid remain open (monkeys are very interested in this varaible)
declare int		Base_Punish_time;		// time out for messing up
declare int		Fixed_trl_length;		// 1 for fixed trial length, 0 for fixied inter trial intervals
declare int		Trial_length;			// fixed at this value (only works if Fixed_trl_length == 1) must figure out max time for this variable and include it in comments
declare int		Inter_trl_int;			// how long between trials (only works if Fixed_trl_length == 0)










__HEADER__
CMANDING.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// This is the main CMANDING protocol.  It works like this.
// 1) Define all varialbes
// 2) Setup random variables needed for a trial
// start loop
// 3) Run a trial
// 4) End the trial
// 		a) deliver rewards and punishments
//		b) take care of ITI
// 		c) set up variables for next run
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011
	
declare CMANDING();						

process CMANDING()     
	{
	declare hide int run_cmd_sess	= 1;
	declare hide int run_idle		= 0;
			
	Trl_number				= 1;
	Comp_Trl_number			= 0;
	Block_number			= 1;
	if (Last_task != run_cmd_sess)				// Only do this if we have gone into another task or if this is first run of day.
		{
		system("dialog Select_Monkey");
		spawnwait DEFAULT(State,				// Set all globals to their default values.
						Monkey,					
						Room);				
		Last_task = run_cmd_sess;
		}
		
	dsend("DM RFRSH");                			// This code sets up a vdosync macro definition to wait a specified ...
	if (Room == 23)                   			// ...number of vertical retraces based on the room in which we are    ...
		{                             			// ...recording.  This kluge is necessary because vdosync operates     ...
		dsendf("vw %d:\n",1);         			// ...differently in the different rooms.  In 028 a command to wait    ...
		}                             			// ...2 refresh cycles usually only waits for one and a command to     ...
	else                              			// ...wait for 1 usually only waits for 0.  Room 029 and 023 appear to ...
		{                             			// ...work properly.
		dsendf("vw %d:\n",2);
		}
	dsend("EM RFRSH");
	
	while(!OK)									
		{
		nexttick;
		if(Set_monkey)
			{
			spawnwait DEFAULT(State,			// Set all globals to their default values for a particular monkey.
						Monkey,						
						Room);	
			Set_monkey = 0;
			}
		}
	
	spawnwait GOODVARS(State);
	
	spawnwait SET_INH(max_ssd, 					// Set up the right graph for INH f(x).
					min_ssd,
					n_ssds);
					
	spawnwait SET_CLRS(n_targ_pos);
	
	spawnwait SETC_TRL(n_targ_pos,				// Select variables for the first countermanding...
				go_weight,						// ...trial.  This happens once outside of the while...
				stop_weight,					// ...loop just to set up for the first iteration. After...
				ignore_weight,					// ...that SETC_TRL.pro will be called by END_TRL.pro.
				staircase,
				n_SSDs,
				min_holdtime,
                max_holdtime,
				expo_jitter);

	Event_fifo[Set_event] = CmanHeader_;		// Set a strobe to identify this file as a Cmanding session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = Identify_Room_;		// Set a strobe to identify this file as a Cmanding session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = Room;				// Set a strobe to identify this file as a Cmanding session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	
	nexttick 10;								// to prevent buffer overflows after task reentry.
	
	CheckMotion = 1;							// set global for watching the motion detector
	spawn WATCHMTH;								// start watching the mouth motion detector if present
	spawn WATCHBOD;								// start watching motion detector for body if present
	
	while (State == run_cmd_sess)				// while the user has not yet terminated the countermanding task
		{
				
		 spawnwait CMDTRIAL(allowed_fix_time, 	// run a trial with variables defined in SETC_TRL.pro
							curr_holdtime, 
							trl_type, 
							max_saccade_time, 
							curr_ssd, 
							cancl_time, 
							max_sacc_duration, 
							targ_hold_time,
							object_fix);		
		
		spawnwait END_TRL(trl_outcome);			// end a trial with trl_outcome set in CMDTRIAL.pro
				
		nexttick;								// wait at least one cycle and do it all again
		
		while(Pause)							// gives the user the ability to pause the task without ending it
			{
			nexttick;
			}
		
		}

												// the State global variables allow a control structure...
												// ...to impliment the task.
	State = run_idle;							// If we are out of the while loop the user wanted...
												// ...to stop cmanding.
	CheckMotion = 0;							// stop watching for motion detector.
												
	oDestroy(object_fixwin);					// destroy all task graph objects
	oDestroy(object_targwin);
	oDestroy(object_fix);
	oDestroy(object_targ);
	oDestroy(object_eye);
	
	oSetGraph(gleft,aCLEAR);					// clear the left graph
	
	oDestroy(object_ssd0);						// destroy all inh f(x) graph objects
	oDestroy(object_ssd1);						
	oDestroy(object_ssd2);						
	oDestroy(object_ssd3);						
	oDestroy(object_ssd4);						
	oDestroy(object_ssd5);						
	oDestroy(object_ssd6);						
	oDestroy(object_ssd7);						
	oDestroy(object_ssd8);						
	oDestroy(object_ssd9);						
	oDestroy(object_ssd10);						
	oDestroy(object_ssd11);						
	oDestroy(object_ssd12);						
	oDestroy(object_ssd13);						
	oDestroy(object_ssd14);						
	oDestroy(object_ssd15);						
	oDestroy(object_ssd16);						
	oDestroy(object_ssd17);						
	oDestroy(object_ssd18);						
	oDestroy(object_ssd19);
	oDestroy(object_30_70);
	
	oSetGraph(gleft,aCLEAR);					// clear the left graph
		
	spawn IDLE;									// return control to IDLE.pro
    
	}__HEADER__
CMD_PGS.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// process CMD_PGS(int curr_target, 
				// float fixation_size, 
				// int fixation_color, 
				// int sig_color, 
				// float scr_width, 
				// float scr_height, 
				// float pd_left, 
				// float pd_bottom, 
				// float pd_size);
// Figure out all stimuli that will be needed on the next countermanding trial and
// place it all into video memory.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011


declare hide float 	Size;   																	// Global output will be sent as stobes...        										
declare hide float 	Angle;        																// ...by INFOS.pro at trial end.
declare hide float 	Eccentricity; 
declare hide int   	Color;								

//declare CMD_PGS(int curr_target, 																// set SETC_TRL.pro
//				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
//				int fixation_color,                     										// see SET_CLRS.pro
//				int sig_color,                          										// see DEFAULT.pro and ALL_VARS.pro
//				float scr_width,                        										// see RIGSETUP.pro
//				float scr_height,                       										// see RIGSETUP.pro
//				float pd_left,                          										// see RIGSETUP.pro
//				float pd_bottom,                        										// see RIGSETUP.pro
//				float pd_size,                          										// see RIGSETUP.pro
//				float deg2pix_X,                        										// see SET_COOR.pro
//				float deg2pix_Y,                        										// see SET_COOR.pro
//				float unit2pix_X,                       										// see SET_COOR.pro
//				float unit2pix_Y,                       										// see SET_COOR.pro
//				int object_targ);                       										// see GRAPHS.pro

process CMD_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				int sig_color,                          										// see DEFAULT.pro and ALL_VARS.pro
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ)                        										// see GRAPHS.pro
	{										
											
	declare hide float 	pd_eccentricity;										
	declare hide float	pd_angle;										
	declare hide float 	opposite;										
	declare hide float	adjacent;										
	declare hide float	stim_ecc_x;										
	declare hide float	stim_ecc_y;										
	declare hide int   	open        = 0;										
	declare hide int   	fill        = 1;										
	
	// number the pgs that need to be drawn
	declare hide int   	blank       = 0;										
	declare hide int	fixation_pd = 1;										
	declare hide int	fixation    = 2;										
	declare hide int	target_pd   = 3;										
	declare hide int	target      = 4;										
	declare hide int	signal_pd   = 5;										
	declare hide int	signal      = 6;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Calculate screen coordinates for stimuli on this trial								
	size         = Size_list[curr_target];   													// Figure out the attributes of the current target 
	angle        = Angle_list[curr_target]; 													// THESE USER DEFINED GLOBALS ARE ARRAYS SO 
	eccentricity = Eccentricity_list[curr_target];												// THEY CANNOT BE PASSED INTO PROCESSES
	color        = curr_target + 1;																// zero is reserved for black.  see SET_CLRS.pro							
													
	stim_ecc_x = cos(angle) * eccentricity;														// find the center of the box in x and y space based on the angle and eccentricity...
	stim_ecc_y = sin(angle) * eccentricity * -1;												
	oMove(object_targ, stim_ecc_x*deg2pix_X, stim_ecc_y*deg2pix_Y);								// ...and move the animated graph object there.
	oSetAttribute(object_targ, aSIZE, size*deg2pix_X, size*deg2pix_Y);							// while we are at it, resize fixation object on animated graph
	oSetAttribute(object_fix, aSIZE, 1*deg2pix_X, 1*deg2pix_Y);									
	
	opposite = ((scr_height/2)-pd_bottom);														// Figure out angle and eccentricity of photodiode marker in pixels
	adjacent = ((scr_width/2)-pd_left);                                                         // NOTE: I am assuming your pd is in the lower left quadrant of your screen
	pd_eccentricity = sqrt((opposite * opposite) + (adjacent * adjacent));
	pd_angle = rad2deg(atan (opposite / adjacent));
	pd_angle = pd_angle + 180; 																	//change this for different quadrent or write some code for flexibility
	
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 1
	// print("fixation with photodiode");
	dsendf("rw %d,%d;\n",fixation_pd,fixation_pd); 												// draw first pg of video memory
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 2	  
	// print("fixation");
	dsendf("rw %d,%d;\n",fixation,fixation);   													// draw second pg of video memory                                       
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 3	 
	// print("target with photodiode");
	dsendf("rw %d,%d;\n",target_pd,target_pd);  												// draw pg 3                                        
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
	if (!Classic)																				// if we are doing stop-signal 2.0 (not classic)
		{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); // draw fixation point
		}
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    nexttick;
	
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 4	  
	// print("target");
	dsendf("rw %d,%d;\n",target,target);  														// draw pg 4                                        
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);         	// draw target
	if (!Classic)																				// if we are doing stop-signal 2.0 (not classic)
		{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y);   	// draw fixation point
		}
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 5 
	// print("signal with photodiode");
	dsendf("rw %d,%d;\n",signal_pd,signal_pd);    												// draw pg 5                                      
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);         	// draw target
	if (Classic)
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);   		// draw stop signal/ignore stim
	if (!Classic)																				// if we are doing stop-signal 2.0 (not classic)
		{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); // draw fixation point
		}
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    nexttick;
	
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 6	 
	// print("signal");
	dsendf("rw %d,%d;\n",signal,signal);   														// draw pg 6                                       					
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);   		// draw stop signal/ignore stim
	if (!Classic)																				// if we are doing stop-signal 2.0 (not classic)
		{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); // draw fixation point
		}
	nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 0 (last is displayed first)	
	// print("blank"); 																			
	dsendf("rw %d,%d;\n",blank,blank);                                          				// draw the blank screen last so that it shows up first
	dsendf("cl:\n");                                                                            // clear screen (that's all)
	
	
	}__HEADER__
CMDTRIAL.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// Run a countermanding trial based on the variables calculated by SETC_TRL.pro and those 
// given by the user.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare hide int Trl_Outcome;			// Global output used in END_TRL
declare hide int Trl_Start_Time;		// Global output used in END_TRL
declare hide int LastStopOutcome = 1;	// Global output used to staircase SSD

declare CMDTRIAL(allowed_fix_time,		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime, 			// see SETC_TRL.pro
				trl_type, 				// see SETC_TRL.pro
				max_saccade_time, 		// see ALL_VARS.pro and DEFAULT.pro
				curr_ssd, 				// see SETC_TRL.pro
				cancl_time,				// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,			// see ALL_VARS.pro and DEFAULT.pro
				object_fix);			// animated graph object

process CMDTRIAL(allowed_fix_time, 		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime,     		// see SETC_TRL.pro
				trl_type,          		// see SETC_TRL.pro
				max_saccade_time,  		// see ALL_VARS.pro and DEFAULT.pro
				curr_ssd,          		// see SETC_TRL.pro
				cancl_time,        		// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,    		// see ALL_VARS.pro and DEFAULT.pro
				object_fix)        		// animated graph object
	{
	
	// Number the trial types to make them easier to read below
	declare hide int 	go_trl 		= 0;
	declare hide int 	stop_trl 	= 1;
	declare hide int 	ignore_trl 	= 2;
	
	// Number the trial stages to make them easier to read below
	declare hide int 	need_fix  	= 1;
	declare hide int 	fixating  	= 2;
	declare hide int 	targ_on   	= 3;
	declare hide int 	in_flight 	= 4;
	declare hide int 	on_target 	= 5;	
	declare hide int 	stage;
	
	// Number the stimuli pages to make reading easier
	declare hide int   	blank       = 0;
	declare hide int	fixation_pd = 1;
	declare hide int	fixation    = 2;
	declare hide int	target_pd   = 3;
	declare hide int	target      = 4;
	declare hide int	signal_pd   = 5;
	declare hide int	signal      = 6;

	// Assign values to success and failure so they are more readable
	declare hide int	success		= 1;
	declare hide int	failure		= 0;
	declare hide int	no_change	= 2;
	
	// Code all possible outcomes
	declare hide int constant no_fix		= 1;	// never attained fixation
	declare hide int constant broke_fix		= 2;	// attained and then lost fixation before target presentation
	declare hide int constant go_wrong		= 3;	// never made saccade on a go trial
	declare hide int constant nogo_correct	= 4;	// successfully canceled trial
	declare hide int constant sacc_out		= 5;	// made an inaccurate saccade out of the target box
	declare hide int constant broke_targ	= 6;	// didn't hold fixation at the target for long enough
	declare hide int constant go_correct	= 7;	// correct saccade on a go trial
	declare hide int constant nogo_wrong	= 8;	// error noncanceled trial
	declare hide int constant body_move		= 12;	// error body movement (for training stillness)
	declare hide int constant too_fast		= 14;	// low RT while in training to slow down.
	                                        
	// Timing variables which will be used to time task
	declare hide float 	fix_spot_time; 					
	declare hide float  targ_time; 					
	declare hide float  saccade_time;
	declare hide float 	aquire_fix_time;
	declare hide float 	stop_sig_time;
	declare hide float	aquire_targ_time;	
	
	// This variable makes the while loop work
	declare hide int 	trl_running;
	
	// Have to be reset on every iteration since 
	// variable declaration only occurs at load time
	trl_running 		= 1;
	stage 				= need_fix;
	
	// Tell the user what's up
	printf(" \n");
	printf("# %d",Trl_number);
	printf(" (%d",Comp_Trl_number);
	printf(" correct)\n");
	if (trl_type == go_trl)
		{
		printf("GO\n");
		printf("holdtime = %d\n",curr_holdtime);
		}
	if (trl_type == stop_trl)
		{
		printf("STOP\n");
		printf("holdtime = %d\n",curr_holdtime);
		printf("               ssd = %d\n",round(curr_ssd * (1000.0/Refresh_rate)));
		}
	if (trl_type == ignore_trl)
		{
		printf("IGNORE\n");
		printf("holdtime = %d\n",curr_holdtime);
		printf("               isd = %d\n",round(curr_ssd * (1000.0/Refresh_rate)));
		}
	
	
																			// HERE IS WHERE THE FUN BEGINS
	Event_fifo[Set_event] = TrialStart_;									// queue TrialStart_ strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	dsendf("vp %d\n",fixation_pd);											// flip the pg to the fixation stim with pd marker
	fix_spot_time = time();  												// record the time
	Event_fifo[Set_event] = FixSpotOn_;										// queue strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	dsendf("XM RFRSH:\n"); 													// wait one vertical retrace
	dsendf("vp %d\n",fixation);												// flip the pg to the fixation stim without pd marker
	oSetAttribute(object_fix, aVISIBLE); 									// turn on the fixation point in animated graph
	
	
	while (trl_running)														// trials ending will set trl_running = 0
		{	
		
	//--------------------------------------------------------------------------------------------
	// STAGE need_fix (the fixation point is on, but the subject hasn't looked at it)
		if (stage == need_fix)
			{		
			if (In_FixWin)													// If the eyes have entered the fixation window (before time, see below)...
				{
				aquire_fix_time = time();									// ...function call to time to note current time and...
				Trl_Start_Time = aquire_fix_time;							// Global output
				Event_fifo[Set_event] = Fixate_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = fixating;											// ...advance to the next stage.
				}
			else if (time() > fix_spot_time + allowed_fix_time)				// But if time runs out...
				{
				Trl_Outcome = no_fix;    									// TRIAL OUTCOME ERROR (no fixation)
				LastStopOutcome = no_change;								// Don't change SSD
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen,...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Aborted (no fixation)\n");							// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}			
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE fixating (the subject is looking at the fixation point waiting for target onset)		
		else if (stage == fixating)
			{
			if (!In_FixWin)													// If the eyes stray out of the fixation window...
				{
				Trl_Outcome = broke_fix;									// TRIAL OUTCOME ERROR (broke fixation)
				LastStopOutcome = no_change;								// Don't change SSD
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Aborted (broke fixation)\n");						// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}
			else if (In_FixWin && time() > aquire_fix_time + curr_holdtime)	// But if the eyes are still in the window at end of holdtime...
				{
				dsendf("vp %d\n",target_pd);								// ...flip the pg to the target with pd marker...	
				targ_time = time(); 										// ...record the time...
				dsendf("XM RFRSH:\n"); 										// ...wait one vetical retrace...
				dsendf("vp %d\n",target);									// ...flip the pg to the target without pd marker.
				
				if (trl_type == stop_trl ||									// If it is a stop or ignore trial present the signal.
				trl_type == ignore_trl)										// This happens here so that no overhead intervenes between commands.
					{														// That way the # of vertical retraces remains independant of incidental processing time.
																			// (Even so, sometimes we will accidentally wait n+1 retraces. Such is vdosync.)
					dsendf("vw %d\n",curr_ssd-1);							// Wait so many vertical retraces (one is waited implicitly b/c photodiode marker above)...
					dsendf("vp %d\n",signal_pd);							// ...flip the pg to the signal with the pd marker...
					stop_sig_time = targ_time + 
						(round(curr_ssd * (1000.0 / Refresh_rate))); 		// ...record TEMPO time of presentation...
					dsendf("XM RFRSH:\n"); 									// ...wait 1 vertical retrace...
					dsendf("vp %d\n",signal);								// ...and flip the pg to the signal without pd marker.
					}
					
				Event_fifo[Set_event] = FixSpotOff_;						// Queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				
																			// Now the animated graphs have to catch up (seperate so that stim timing stays tight)
				if (trl_type == go_trl)										// If the trial is a go trial...
					{
					oSetAttribute(object_targ, aVISIBLE); 					// ...show target in animated graph...
					oSetAttribute(object_fix, aINVISIBLE); 					// ...remove fixation point from animated graph.
					}
				else if (trl_type == ignore_trl)							// But if the trial is an ignore trial
					{
					oSetAttribute(object_targ, aVISIBLE); 					// ...just show target in animated graph (fixation point stays on).
					}														// If it is a stop trial the target just never comes up in the animated graph.
					
				stage = targ_on;											// Advance to the next trial stage.				
				}
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE targ_on (the target has been presented but the subject is still fixating)		
		else if (stage == targ_on)
			{		
			if (!In_FixWin)													// If the eyes leave the fixation window...
				{															// ...we have a saccade, so...
				saccade_time = time();										// ...record the time...
				Event_fifo[Set_event] = Saccade_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				printf("                          rt = %d\n",saccade_time - targ_time);	// ...tell the user whats up...
				stage = in_flight;											// ...and advance to the next stage.
				if (saccade_time - targ_time < Min_saccade_time)
					{
					Trl_Outcome = too_fast; 								// TRIAL OUTCOME TOO FAST (too fast while being trained to slow down)
					LastStopOutcome = no_change;							// Don't change SSD
					dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
					oSetAttribute(object_targ, aINVISIBLE); 				// ...remove target from animated graph...
					oSetAttribute(object_fix, aINVISIBLE); 					// ...remove fixation point from animated graph...
					printf("Error (too fast)\n");							// ...tell the user whats up...
					trl_running = 0;										// ...and terminate the trial.
					}
				}
			else if (In_FixWin &&  											// But if no saccade occurs...
				time() > targ_time + max_saccade_time && 					// ...and time for a saccade runs out...
				(trl_type == go_trl || trl_type == ignore_trl))				// ...and a saccade was supposed to be made.
				{
				Trl_Outcome = go_wrong;           							// TRIAL OUTCOME ERROR (incorrect go trial)
				LastStopOutcome = no_change;								// Don't change SSD
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (no saccade)\n");								// ...tell the user whats up...
				spawn SVR_BELL();
				trl_running = 0;											// ...and terminate the trial.
				}				
			else if (In_FixWin &&											// But if no saccade occurs...
				time() > targ_time + curr_ssd + cancl_time && 				// ...and time for a saccade runs out...
				trl_type == stop_trl)										// ...and a saccade was NOT supposed to be made...
				{
				Trl_Outcome = nogo_correct;   								// TRIAL OUTCOME CORRECT (canceled trial)
				LastStopOutcome = success;									// set the global for staircasing...
				Correct_trls = Correct_trls + 1;							// ...set a global for 1DR...
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				Event_fifo[Set_event] = Correct_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				printf("Correct (canceled)\n");								// ...tell the user whats up...
				if (Canc_alert)
					{
					spawn SVR_BEL2();										// for training purposes
					}
				trl_running = 0;  											// ...and terminate the trial.
				}		
			}
			
			
			
	//--------------------------------------------------------------------------------------------
	// STAGE in_flight (eyes have left fixation window but have not entered target window)		
		else if (stage == in_flight)
			{
			if (In_TargWin)													// If the eyes get into the target window...
				{
				aquire_targ_time = time();									// ...record the time...
				Event_fifo[Set_event] = Decide_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = on_target;											// ...and advance to the next stage of the trial.
				if (trl_type == stop_trl)									// But if a saccade was the wrong thing to do...
					{												
					Event_fifo[Set_event] = Error_sacc;						// ...queue strobe for Neuro Explorer
					Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.
					}
				else 														// Otherwise...
					{								
					Event_fifo[Set_event] = Correct_sacc;					// ...queue strobe for Neuro Explorer
					Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.					
					}
				}
			else if (time() > saccade_time + max_sacc_duration)				// But, if the eyes are out of the target window and time runs out...
				{
				Trl_Outcome = sacc_out;   									// TRIAL OUTCOME ERROR (innacurrate saccade)
				if (trl_type == stop_trl)									// But if a saccade was the wrong thing to do...
					{												
					LastStopOutcome = failure;								// ...record the failure.
					}
				else 														// Otherwise...
					{								
					LastStopOutcome = no_change;							// ...make sure that the last outcome is cleared.						
					}
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (inaccurate saccade)\n");						// ...tell the user whats up...
				trl_running = 0; 											// ...and terminate the trial.
				}
			}
		
		
		
	//--------------------------------------------------------------------------------------------
	// STAGE on_target (eyes have entered the target window.  will they remain there for duration?)	
		else if (stage == on_target)
			{
			if (!In_TargWin)												// If the eyes left the target window...
				{			
				Trl_Outcome = broke_targ;									// TRIAL OUTCOME ERROR (broke target fixation)
				if (trl_type == stop_trl)									// But if a saccade was the wrong thing to do...
					{												
					LastStopOutcome = failure;
					}
				else 														// Otherwise...
					{								
					LastStopOutcome = no_change;							// ...make sure that the last outcome is cleared.						
					}
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (broke target fixation)\n");					// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}		
			else if (In_TargWin  											// But if the eyes are still in the target window...
				&&  time() > aquire_targ_time + targ_hold_time)				// ...and the target hold time is up...
				{
				if (trl_type == go_trl || trl_type == ignore_trl)			// ...and a saccade was the correct thing to do...
					{
					Trl_Outcome = go_correct;								//TRIAL OUTCOME CORRECT (correct go trial)
					LastStopOutcome = no_change;							// Don't change SSD
					Correct_trls = Correct_trls + 1;						// ...set a global for 1DR...
					Event_fifo[Set_event] = Correct_;						// ...queue strobe...
					Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue...
					printf("Correct (saccade)\n");							// ...tell the user whats up...
					}
				else if (trl_type == stop_trl)								// But if a saccade was the wrong thing to do...
					{
					Trl_Outcome = nogo_wrong;								//TRIAL OUTCOME ERROR (noncanceled trial)
					LastStopOutcome = failure;
					printf("Error (noncanceled)\n");						// ...tell the user whats up...
					}														// Either way we are done, so...
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				trl_running = 0;											// ...and terminate the trial.
				}			
			}
			
		if (Move_ct > 0)
			{
			Trl_Outcome = body_move;   										// TRIAL OUTCOME ABORTED (the body was moving)
			LastStopOutcome = no_change;									// ...make sure that the last outcome is cleared.	
			dsendf("vp %d\n",blank);										// Flip the pg to the blank screen...
			oSetAttribute(object_targ, aINVISIBLE); 						// ...remove target from animated graph...
			oSetAttribute(object_fix, aINVISIBLE); 							// ...remove fixation point from animated graph...
			printf("Aborted (body movement)\n");							// ...tell the user whats up...
			trl_running = 0; 												// ...and terminate the trial.
			}	
			
		nexttick;
		}
	}__HEADER__
DEFAULT.pro
__FOOTER__
// This sets all of the user defined global variables.
// It is needed because of the loop structure which allows multiple tasks to run 
// from the same protocol.  If multiple protocols use the same variables, we may 
// run into problems if we don't specifically reset them at the beginning of each
// task change.
//
// written by david.c.godlove@vanderbilt.edu 	July, 2011


declare DEFAULT(int state, 
				int monkey, 
				int room);

process DEFAULT(int state, 
				int monkey, 
				int room)
	{
	
	declare hide int run_cmd_sess 		= 1;	// state 1 is countermanding
	declare hide int run_fix_sess 		= 2;	// state 2 is fixation
	declare hide int run_mg_sess 		= 3;	// state 3 is mem guided sacc
	declare hide int run_gonogo_sess	= 4;	// state 4 is gonogo
	declare hide int run_flash_sess		= 5;	// state 5 is flash screen protocol
	declare hide int run_delayed_sess   = 6;
	declare hide int run_search_sess    = 7;

	

	declare hide int xena    	= 1;
	declare hide int broca		= 3;	
	declare hide int helmholtz	= 4;
    declare hide int gauss		= 5;

	declare hide int color_num,r_, g_, b_;
	r_ = 0; g_ = 1; b_ = 2;

	
	Trls_per_block 			= 100; // In other words, there are no blocks
	
	//----------------------------------------------------------------------------------------------------------------
	// Trial type distributions (MUST SUM TO 100)
	Go_weight				= 0.0;
	Stop_weight				= 100.0;
	Ignore_weight			= 0.0;
	
	DR1_flag				= 0;	// We don't normally want to do 1DR version.
	
	
	//----------------------------------------------------------------------------------------------------------------
	// Stimulus properties
	// White iso luminant value is 35,33,27;
	// Red iso luminant value is is 63,base_reward0,0;
	// Green iso luminant value is 0,36,0;
	// Blue iso luminant value is 0,0,59;
	
	//////////// Default Search Variables
	TargetType				= 1; //1 = L, 2 = T
	PlacPres				= 1; // 1 = absent, 2 = present
	SearchType				= 2; //Hetero = 1, Homo = 2
	SetSize					= 1; //SS1 = 1, SS2 = 2, SS4 = 3, SS8 = 4, SS12 = 5
	search_fix_time			= 500; //
	plac_duration	 		= 1000; //consider adding to ALLVARS.pro
	Consec_trl  			= 0; //min number of consecutive correct trials (minus one) required to get reward
	
	
	NonSingleton_color[r_]		= 35;	//Default to gray
	NonSingleton_color[g_]		= 33;	
	NonSingleton_color[b_]		= 27; 
	
	Singleton_color[r_]			= 35;	//Default to gray
	Singleton_color[g_]			= 33;	
	Singleton_color[b_]			= 27; 
	////////////
	
	
	Classic					= 0;
	
	Stop_sig_color[r_]		= 63;	
	Stop_sig_color[g_]		= 0;	
	Stop_sig_color[b_]		= 0;	
	
	Ignore_sig_color[r_]	= 0;	
	Ignore_sig_color[g_]	= 36;	
	Ignore_sig_color[b_]	= 0;	
					
	Fixation_color[r_]		= 35;	
	Fixation_color[g_]		= 33;	
	Fixation_color[b_]		= 27;	
	
	N_targ_pos				= 2;	// number of target positions (this is calculated below based on user input)
									
	Color_list[0,r_]		= 35;	// color of each target individually
	Color_list[0,g_]		= 33;	// color of each target individually
	Color_list[0,b_]		= 27;	// color of each target individually
					
	Color_list[1,r_]		= 35;
	Color_list[1,g_]		= 33;
	Color_list[1,b_]		= 27;
					
	Color_list[2,r_]		= 35;
	Color_list[2,g_]		= 33;
	Color_list[2,b_]		= 27;
							
	Color_list[3,r_]		= 35;
	Color_list[3,g_]		= 33;
	Color_list[3,b_]		= 27;
					
	Color_list[4,r_]		= 35;
	Color_list[4,g_]		= 33;
	Color_list[4,b_]		= 27;
							
	Color_list[5,r_]		= 35;
	Color_list[5,g_]		= 33;
	Color_list[5,b_]		= 27;
							
	Color_list[6,r_]		= 35;
	Color_list[6,g_]		= 33;
	Color_list[6,b_]		= 27;
							
	Color_list[7,r_]		= 35;
	Color_list[7,g_]		= 33;
	Color_list[7,b_]		= 27;

	Color_list[8,r_]		= 35;
	Color_list[8,g_]		= 33;
	Color_list[8,b_]		= 27;

	Color_list[9,r_]		= 35;
	Color_list[9,g_]		= 33;
	Color_list[9,b_]		= 27;

	Color_list[10,r_]		= 35;
	Color_list[10,g_]		= 33;
	Color_list[10,b_]		= 27;

	Color_list[11,r_]		= 35;
	Color_list[11,g_]		= 33;
	Color_list[11,b_]		= 27;	
	
	
	Size_list[0]			= 0.5;	// size of each target individually (degrees)
	Size_list[1]			= 0.5;
	Size_list[2]			= 0.5;
	Size_list[3]			= 0.5;
	Size_list[4]			= 0.5;
	Size_list[5]			= 0.5;
	Size_list[6]			= 0.5;
	Size_list[7]			= 0.5;
	Size_list[8]			= 0.5;
	Size_list[9]			= 0.5;
	Size_list[10]			= 0.5;
	Size_list[11]			= 0.5;

	
	Angle_list[0]			= 0;	// angle of each target individually (degrees)
	Angle_list[1]			= 180;
	Angle_list[2]			= 90;
	Angle_list[3]			= 135;
	Angle_list[4]			= 180;
	Angle_list[5]			= -135;
	Angle_list[6]			= -90;
	Angle_list[7]			= -45;
	
	Eccentricity_list[0]	= 8.0;	// distance of each target from center of screen individually (degrees)
	Eccentricity_list[1]	= 8.0;
	Eccentricity_list[2]	= 8.0;
	Eccentricity_list[3]	= 8.0;
	Eccentricity_list[4]	= 8.0;
	Eccentricity_list[5]	= 8.0;
	Eccentricity_list[6]	= 8.0;
	Eccentricity_list[7]	= 8.0;
	Eccentricity_list[8]	= 8.0;
	Eccentricity_list[9]	= 8.0;
	Eccentricity_list[10]	= 8.0;
	Eccentricity_list[11]	= 8.0;

	// Eccentricity_list[0]	= 12.0;	// distance of each target from center of screen individually (degrees)
	// Eccentricity_list[1]	= 12.0;
	// Eccentricity_list[2]	= 12.0;
	// Eccentricity_list[3]	= 12.0;
	// Eccentricity_list[4]	= 12.0;
	// Eccentricity_list[5]	= 12.0;
	// Eccentricity_list[6]	= 12.0;
	// Eccentricity_list[7]	= 12.0;
	// Eccentricity_list[8]	= 12.0;
	// Eccentricity_list[9]	= 12.0;
	// Eccentricity_list[10]	= 12.0;
	// Eccentricity_list[11]	= 12.0;

	// Eccentricity_list[0]	= 5.0;	// distance of each target from center of screen individually (degrees)
	// Eccentricity_list[1]	= 5.0;
	// Eccentricity_list[2]	= 5.0;
	// Eccentricity_list[3]	= 5.0;
	// Eccentricity_list[4]	= 5.0;
	// Eccentricity_list[5]	= 5.0;
	// Eccentricity_list[6]	= 5.0;
	// Eccentricity_list[7]	= 5.0;
	// Eccentricity_list[8]	= 5.0;
	// Eccentricity_list[9]	= 5.0;
	// Eccentricity_list[10]	= 5.0;
	// Eccentricity_list[11]	= 5.0;
	
	Fixation_size			= .5;	// size of the fixatoin point (degrees)	
	
	Success_Tone_bigR		= 100;	// positive secondary reinforcer in Hz (large reward)
	Success_Tone_medR		= 200;	// positive secondary reinforcer in Hz (medium reward)
	Success_Tone_smlR		= 400;	// positive secondary reinforcer in Hz (small reward)		
	Failure_Tone_smlP		= 800;	// negative secondary reinforcer in Hz (short timeout)
	Failure_Tone_medP		= 1600;	// negative secondary reinforcer in Hz (medium timeout)
	Failure_Tone_bigP		= 3200;	// negative secondary reinforcer in Hz (long timeout)	
	
	Fixation_Target 		= 0;	// Target number for the fixation task (not used here);
	
	//----------------------------------------------------------------------------------------------------------------
	// Eye related variables
	Fix_win_size			= 2.5;	// size of fixation window (degrees)
	Targ_win_size			= 6;	// size of target window (degrees)
	
	
	
	//----------------------------------------------------------------------------------------------------------------
	// Task timing paramaters (all times in ms unless otherwise specified)
	Allowed_fix_time		= 2000;	// subject has this long to acquire fixation before a new trial is initiated
	Expo_Jitter_soa			= 0;	// defines if exponential holdtime is used or if holdtime is sampled from rectanglular dist.
	expo_jitter 			= 0;
	Min_Holdtime			= 500;  // minimum time after fixation before target presentation
	Max_Holdtime			= 1000; // maximum time after fixation before target presentation
	Min_SOA					= 0;	// minimum time between target onset and fixation offset (mem guided only)
	Max_SOA					= 1000;	// maximum time between target onset and fixation offset (mem guided only)
	Min_saccade_time		= 0;
	Max_saccade_time		= 800;	// subject has this long to saccade to the target
	Max_sacc_duration		= 100;	// once the eyes leave fixation they must be in the target before this time is up
	Targ_hold_time			= 600; 	// after saccade subject must hold fixation at target for this long
	Staircase				= 1;	// do we select the next SSD based on a staircasing algorithm?
	
	SSD_list[0]				= 3;	// needs to be in vertical retrace units
	SSD_list[1]				= 6;
	SSD_list[2]				= 9;
	SSD_list[3]				= 12;
	SSD_list[4]				= 0;
	SSD_list[5]				= 0;
	SSD_list[6]				= 0;
	SSD_list[7]				= 0;
	SSD_list[8]				= 0;
	SSD_list[9]				= 0;
	SSD_list[10]			= 0;
	SSD_list[11]			= 0;
	SSD_list[12]			= 0;
	SSD_list[13]			= 0;
	SSD_list[14]			= 0;
	SSD_list[15]			= 0;
	SSD_list[16]			= 0;
	SSD_list[17]			= 0;
	SSD_list[18]			= 0;
	SSD_list[19]			= 0;
	
 	SSD_floor 				= 0;	// for training to cancel consistently
 	SSD_ceil				= 0;	// for training to cancel consistently
	
	Cancl_time				= Max_saccade_time * 2;	// subject must hold fixation for this long on a stop trial to be deemed canceled
	Tone_Duration			= 30;	// how long should the error and success tones be presented?
	Exp_juice 				= 0;	// Exponential juice reward duration by reaction time
	Reward_Offset			= 600;	// how long after tone before juice is given (needed to seperate primary and secondary reinforcement)
	Base_Reward_time		= 60;	// medium time for the juice solonoid to remain open (monkeys are very interested in this varaible)
	Base_Punish_time		= 2000;	// medium time out for messing up (monkeys care less for this one)
	Max_move_ct				= 1;	// for training to be still with a motion detector
	Bmove_tout				= 2000;	// for training to be still with a motion detector
	TrainingStill			= 0;	// Indicates that we are using motion detector to train the monk to be still
	Canc_alert				= 0;	// Alert operator that the monk has canceled a trial (during training)
	Fixed_trl_length		= 0;	// 1 for fixed trial length, 0 for fixed inter trial intervals
	Trial_length			= 0; 	// fixed at this value (only works if Fixed_trl_length == 1) must figure out max time for this variable and include it in comments
	
// WZ: change for ultrasound experiments	
//	Inter_trl_int			= 1000;	// how long between trials (only works if Fixed_trl_length == 0)
	Inter_trl_int			= 4000;	// how long between trials (only works if Fixed_trl_length == 0)
// end US change	
	
	
	
	
	
	
	//--------------------------------------------------------------------------------------------------------------------
	// Xena
	if(monkey == xena)
		{		
		
		// GENERAL ACROSS ALL TASKS---------------------------------------------------------------------------------------
		// distance from center of subjects eyeball to screen
		if(room == 28)
			{
			Subj_dist	= 457.0;
			TrainingStill = 0;		
			}
		else if (room == 29)
			{
			Subj_dist	= 535.0;
			}
		// else if (room == 23)
			// {
			// }
			
		Set_tones = 1;
		
		Fix_win_size			= 3.5;
		Targ_win_size			= 5;	
		
		Allowed_fix_time		= 1000;
		Max_saccade_time		= 800;
		Base_Reward_time		= 50;
		Base_Punish_time		= 1000;
		
		// SEARCH TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_search_sess)
			{
			Trls_per_block 			= 10000;
			
			DR1_flag				= 0;
			
			Go_weight				= 100.0;
			Stop_weight				= 0.0;
			Ignore_weight			= 0.0;
				
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;			
			
			Eccentricity_list[0]	= 3;	
			Eccentricity_list[1]	= 6;
			Eccentricity_list[2]	= 9;
			Eccentricity_list[3]	= 6;
			Eccentricity_list[4]	= 6;	
			Eccentricity_list[5]	= 9;
			Eccentricity_list[6]	= 2;
			Eccentricity_list[7]	= 4;
			Eccentricity_list[8]	= 5;	
			Eccentricity_list[9]	= 6;
			Eccentricity_list[10]	= 8;
			Eccentricity_list[11]	= 9;
						
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 30;
			Angle_list[2]			= 60;
			Angle_list[3]			= 90;
			Angle_list[4]			= 120;
			Angle_list[5]			= 150;
			Angle_list[6]			= 180;
			Angle_list[7]			= 210;
			Angle_list[8]			= 240;
			Angle_list[9]			= 270;
			Angle_list[10]			= 300;
			Angle_list[11]			= 330;
			}		
	
		
		
		// STOP SIGNAL TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_cmd_sess)
			{
			Trls_per_block 			= 20;
			N_targ_pos = 2;
			DR1_flag				= 1;
			
			Go_weight				= 50.0;
			Stop_weight				= 50.0;
			Ignore_weight			= 0.0;
					
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;					
					
			Ignore_sig_color[r_]	= 63;	
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;

			
			SSD_list[0]				= 3;	
			SSD_list[1]				= 13;
			SSD_list[2]				= 23;
			SSD_list[3]				= 33;
			SSD_list[4]				= 43;
			SSD_list[5]				= 53;
			SSD_list[6]				= 63;
			SSD_list[7]				= 0;
			SSD_list[8]				= 0;
			SSD_list[9]				= 0;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;

			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;			
			}
		// Memory Guided TASK SPECIFIC--------------------------------------------------------------------------------------

		if (state == run_mg_sess)
			{	
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;
									
			Min_SOA = 600;
			Max_SOA = 1400;
			Expo_Jitter_SOA 		= 0;
			Exp_juice 				= 1;
			Trial_length			= 5000;
			Cancl_time				= 1200;
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation
			
			Max_saccade_time		= 1000;
			Base_Reward_time		= 30;
			Base_Punish_time		= 5000;
			
			N_targ_pos				= 8;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 0;	//63
			Ignore_sig_color[g_]	= 36;	
			Ignore_sig_color[b_]	= 0;	
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
	
			SOA_list[0] = 200;
			SOA_list[1] = 300;
			SOA_list[2] = 400;
			SOA_list[3] = 300;
			SOA_list[4] = 400;
			SOA_list[5] = 400;
			SOA_list[6] = 900;
			SOA_list[7] = 1000;
			SOA_list[8] = 0;
			SOA_list[9] = 0;
			SOA_list[10] = 0;
			SOA_list[11] = 0;
			SOA_list[12] = 0;
			SOA_list[13] = 0;
			SOA_list[14] = 0;
			SOA_list[15] = 0;
			SOA_list[16] = 0;
			SOA_list[17] = 0;
			SOA_list[18] = 0;
			SOA_list[19] = 0;
			
			}		
		// FIXATION TASK SPECIFIC----------------------------------------------------------------------------
		if (state == run_fix_sess)
			{
			N_targ_pos = 9;
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
			
			Color_list[8,r_]		= 35;
			Color_list[8,g_]		= 33;
			Color_list[8,b_]		= 27;
		
		
			Size_list[0]			= 0.5;	// size of each target individually (degrees)
			Size_list[1]			= 0.5;
			Size_list[2]			= 0.5;
			Size_list[3]			= 0.5;
			Size_list[4]			= 0.5;
			Size_list[5]			= 0.5;
			Size_list[6]			= 0.5;
			Size_list[7]			= 0.5;
			Size_list[8]			= 0.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 90;
			Angle_list[2]			= -90;
			Angle_list[3]			= 180;
			Angle_list[4]			= 0;
			Angle_list[5]			= 135;
			Angle_list[6]			= 45;
			Angle_list[7]			= -135;
			Angle_list[8]			= -45;
			
			Eccentricity_list[0]	= 0.0;	// distance of each target from center of screen individually (degrees)
			Eccentricity_list[1]	= 11.0;
			Eccentricity_list[2]	= 11.0;
			Eccentricity_list[3]	= 11.0;
			Eccentricity_list[4]	= 11.0;
			Eccentricity_list[5]	= 15.6;
			Eccentricity_list[6]	= 15.6;
			Eccentricity_list[7]	= 15.6;
			Eccentricity_list[8]	= 15.6;
			
			Fix_win_size = 0;
			Targ_win_size = 2.5;
			
			Allowed_fix_time = 1200;
			Max_saccade_time = 800;
			Targ_hold_time = 600; 
			}
		}
	
	
	if(monkey == broca)
		{		
		
		// GENERAL ACROSS ALL TASKS---------------------------------------------------------------------------------------
		// distance from center of subjects eyeball to screen
		if(room == 28)
			{
			Subj_dist	= 450.0;
			TrainingStill = 0;		
			}
		else if (room == 29)
			{
			Subj_dist	= 535.0;
			}
		// else if (room == 23)
			// {
			// }
			
		Set_tones = 1;
		
		Fix_win_size			= 3.5;
		Targ_win_size			= 6;	
		
		Allowed_fix_time		= 1000;
		Max_saccade_time		= 800;
		Base_Reward_time		= 50;
		Base_Punish_time		= 1000;
		
		
		// STOP SIGNAL TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_cmd_sess)
			{
			Trls_per_block 			= 20;
			
			DR1_flag				= 1;
			
			Go_weight				= 50.0;
			Stop_weight				= 50.0;
			Ignore_weight			= 0.0;
						
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;					
					
			Ignore_sig_color[r_]	= 63;	
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;
			
			SSD_list[0]				= 3;	
			SSD_list[1]				= 13;
			SSD_list[2]				= 23;
			SSD_list[3]				= 33;
			SSD_list[4]				= 43;
			SSD_list[5]				= 53;
			SSD_list[6]				= 63;
			SSD_list[7]				= 0;
			SSD_list[8]				= 0;
			SSD_list[9]				= 0;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;		
			}
			
			
	
		if (state == run_mg_sess)
			{	
			Go_weight				= 90;
			Stop_weight				= 10;
			Ignore_weight			= 0;
									
			Min_SOA = 600;
			Max_SOA = 1400;
			Expo_Jitter_SOA 		= 0;
			Exp_juice 				= 1;
			Trial_length			= 5000;
			Cancl_time				= 1200;
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation
			
			
			
			Max_saccade_time		= 400;
			Base_Reward_time		= 100;
			Base_Punish_time		= 1000;
			
			N_targ_pos				= 2;
					
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 0;
			Size_list[3]			= 0;
			Size_list[4]			= 0;
			Size_list[5]			= 0;
			Size_list[6]			= 0;
			Size_list[7]			= 0;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 180;
			Angle_list[2]			= 90;
			Angle_list[3]			= 135;
			Angle_list[4]			= 180;
			Angle_list[5]			= -135;
			Angle_list[6]			= -90;
			Angle_list[7]			= -45;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 0;	//63
			Ignore_sig_color[g_]	= 36;	
			Ignore_sig_color[b_]	= 0;	
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
	
			SOA_list[0]				= 50;	
			SOA_list[1]				= 60;
			SOA_list[2]				= 70;
			SOA_list[3]				= 80;
			SOA_list[4]				= 90;
			SOA_list[5]				= 0;
			SOA_list[6]				= 0;
			SOA_list[7]				= 0;
			SOA_list[8]				= 0;
			SOA_list[9]				= 0;
			SOA_list[10]			= 0;
			SOA_list[11]			= 0;
			SOA_list[12]			= 0;
			SOA_list[13]			= 0;
			SOA_list[14]			= 0;
			SOA_list[15]			= 0;
			SOA_list[16]			= 0;
			SOA_list[17]			= 0;
			SOA_list[18]			= 0;
			SOA_list[19]			= 0;
			}	
			

		}		
	
if(monkey == helmholtz)
		{		
		
		// GENERAL ACROSS ALL TASKS---------------------------------------------------------------------------------------
		// distance from center of subjects eyeball to screen
		if(room == 28)
			{
			Subj_dist	= 440.0;
			TrainingStill = 0;	//0 = body monitor off	
			}
		else if (room == 29)
			{
			Subj_dist	= 535.0;
			}
		// else if (room == 23)
			// {
			// }
			
		Set_tones = 1;
		
		Fix_win_size			= 3.5;
		Targ_win_size			= 6;	
		
		Allowed_fix_time		= 1000;
		Max_saccade_time		= 800;
		Base_Reward_time		= 30;
		Base_Punish_time		= 10000;
		
		
		// STOP SIGNAL TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_cmd_sess)
			{
			Trls_per_block 			= 10000;
			
			DR1_flag				= 0;
			
			Go_weight				= 100.0;
			Stop_weight				= 0.0;
			Ignore_weight			= 0.0;
					
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;					
					
			Ignore_sig_color[r_]	= 63;	
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;
			
			SSD_list[0]				= 3;	
			SSD_list[1]				= 13;
			SSD_list[2]				= 23;
			SSD_list[3]				= 33;
			SSD_list[4]				= 43;
			SSD_list[5]				= 53;
			SSD_list[6]				= 63;
			SSD_list[7]				= 0;
			SSD_list[8]				= 0;
			SSD_list[9]				= 0;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;		
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 45;
			Angle_list[2]			= 90;
			Angle_list[3]			= 135;
			Angle_list[4]			= 180;
			Angle_list[5]			= -135;
			Angle_list[6]			= -90;
			Angle_list[7]			= -45;
			}
		//GO NO-GO TASK SPECIFIC-----------------------------------------------------------------------------------		
		if (state == run_gonogo_sess)
			{	
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;

			Min_SOA = 0;
			Max_SOA = 1000;
			Expo_Jitter_SOA = 0;

			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 45;
			Angle_list[2]			= 135;
			Angle_list[3]			= 180;
			Angle_list[4]			= -135;
			Angle_list[5]			= -45;
			Angle_list[6]			= 0;
			Angle_list[7]			= 180;
			
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 63;	//63
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;	
			
			Mask_sig_color[r_]		= 	0;	//63
			Mask_sig_color[g_]		= 	0;	
			Mask_sig_color[b_]		= 	0;
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
			
			SSD_list[0]				= 3;	
			SSD_list[1]				= 8;
			SSD_list[2]				= 13;
			SSD_list[3]				= 18;
			SSD_list[4]				= 23;
			SSD_list[5]				= 28;
			SSD_list[6]				= 33;
			SSD_list[7]				= 38;
			SSD_list[8]				= 43;
			SSD_list[9]				= 48;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;
			}	
		// MEMORY GUIDED TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_mg_sess)
			{	
			
			TaskStim				= 1; // stimulation mode on; will auto-stim during various task periods; 0 = no stim
			
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;
									
			Min_SOA = 600;
			Max_SOA = 1400;
			Expo_Jitter_SOA 		= 0;
			Exp_juice 				= 1;
			Trial_length			= 5000;
			Cancl_time				= 1200;
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 500; // maximum time after fixation before target presentation
			
			Max_saccade_time		= 350;
			Base_Reward_time		= 30;
			Base_Punish_time		= 5000;
			
			N_targ_pos				= 8;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 0;	//63
			Ignore_sig_color[g_]	= 36;	
			Ignore_sig_color[b_]	= 0;	
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
	
/* 			 Color_list[0,r_]		= 35;	// gray
			Color_list[0,g_]		= 33;	// 
			Color_list[0,b_]		= 27;	// 

			Color_list[1,r_]		= 63;	// red
			Color_list[1,g_]		= 0;
			Color_list[1,b_]		= 0;
							
			Color_list[2,r_]		= 0;	// green
			Color_list[2,g_]		= 36;
			Color_list[2,b_]		= 0;
									
			Color_list[3,r_]		= 0;	// blue
			Color_list[3,g_]		= 0;
			Color_list[3,b_]		= 59;
							
			Color_list[4,r_]		= 100;	// yellow
			Color_list[4,g_]		= 100;
			Color_list[4,b_]		= 0;
									
			Color_list[5,r_]		= 255;	// magenta
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 255;
									
			Color_list[6,r_]		= 153;	// brown
			Color_list[6,g_]		= 76;
			Color_list[6,b_]		= 0;
									
			Color_list[7,r_]		= 255;	// white
			Color_list[7,g_]		= 255; 
			Color_list[7,b_]		= 255;  */	
	
	
			SOA_list[0] = 300;
			SOA_list[1] = 450;
			SOA_list[2] = 600;
			SOA_list[3] = 750;
			SOA_list[4] = 900;
			SOA_list[5] = 1050;
			SOA_list[6] = 1200;
			SOA_list[7] = 1350;
			SOA_list[8] = 0;
			SOA_list[9] = 0;
			SOA_list[10] = 0;
			SOA_list[11] = 0;
			SOA_list[12] = 0;
			SOA_list[13] = 0;
			SOA_list[14] = 0;
			SOA_list[15] = 0;
			SOA_list[16] = 0;
			SOA_list[17] = 0;
			SOA_list[18] = 0;
			SOA_list[19] = 0;
			
			}	
			

		

		// SEARCH TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_search_sess)
			{
			Trls_per_block 			= 100;
			Base_Punish_time		= 2000;
			Catch_Rew               = 1; // 1 = full base reward; allows us to set how much we divide base reward by on catch trials relative to target trials
			
			//// Probability cueing vars /////
			ProbCue					= 0; // 1= prob cue on, 0 = prob cue off
			ProbSide				= 1; // 0=right; 1=left more probable target location
			/// Ultrasound vars /////
			VarEcc					= 0; // 0 = off, 1 = on; variable eccentricity from list line 137 LOC_RAND.pro
			LatStruct				= 1; // For US detection task: 0 = search items only at lateral positions; 1 = normal search, all locations  
			Npulse					= 600; //number of pulses sent  
			PulseGap				= 1000; //gap between pulses
			StimInterval			= 60000; //10 minutes = 600000ms
			StimCond				= 0; //0 = stim starting block 1 (min 0), 1 = stim starting block 2 (min 10)
			
			////////// Training-specific variables - allow user to use fixed distractor locations and identities
			ArrStruct	 			= 1; // 1=structured arrays, 0=contextual cueing
			//TrainOrt 				= 1;
			TargTrainSet			= 1; //1=random loc, 2= fixed pos. 1, 3 = fixed pos 2., etc. up to max location number
			DistOrt					= 2; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT  
			TargOrt					= 2; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT  
			SearchEcc				= 8; //entricity in degrees; use to make fixed eccentricity 
			SingMode				= 0; //0=classic search, 1=singleton present/capture task, 2=variable singleton mode
			SingCol					= 2; 
			PercSingTrl				= 50; //Percentage of trials where singleton is present, see LOC_RAND.pro for code
			soa_mode				= 0;  //fixation response soa; 1=on, 0=off 
			
			///////// Use this variable to manipulate predictability of Fixation / Search ISI
			FixJitter			    = 0;  // 0 = random fixation-search ISI; 1 = Fixed; see sets_trl.pro
			//////////
			
			catch_hold_time			= 200;
			Perc_catch				= 0; //percent catch trials
			TargetType				= 2; //1 = L, 2 = T
			PlacPres				= 1; //1 = no placeholders,  2 = placeholders
			SetSize					= 8; //SS1 = 1, SS2 = 2, etc. up to set size 12;
			// Select Search task and Target/Distractor for Singleton Search
			SearchType				= 2; //Hetero = 1, Homo = 2, Homo Random = 3, 4 Singleton search mode (target/dist swap trial to trial)
			TargOrt1				= 2; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT 
			TargOrt2				= 2; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT
			
			//search_fix_time			= 0; //equiv to SOA - amount of time the fixation point stays on after target onset; fix off = go signal
			max_plactime			= 700;
			min_plactime			= 1000;
			
			targ_hold_time			= 200;
			Max_sacc_duration		= 50;
			Min_saccade_time		= 70;
			Max_saccade_time 		= 300;
			Min_Holdtime			= 300;  // minimum time after fixation before target presentation
			Max_Holdtime			= 800; // maximum time after fixation before target presentation		
					
			Go_weight				= 100.0;
			Stop_weight				= 0.0;
			Ignore_weight			= 0.0;
							
			NonSingleton_color[r_]		= 35;	
			NonSingleton_color[g_]		= 33;	
			NonSingleton_color[b_]		= 27; 
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;			
			
								
			// angle of each location individually (degrees) - only used for training/structured array mode
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;			
			}		
			
			SOA_list[0] = 300;
			SOA_list[1] = 450;
			SOA_list[2] = 600;
			SOA_list[3] = 750;
		// FIXATION TASK SPECIFIC----------------------------------------------------------------------------
		
		if (state == run_fix_sess)
			{
			N_targ_pos = 9;
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
			
			Color_list[8,r_]		= 35;
			Color_list[8,g_]		= 33;
			Color_list[8,b_]		= 27;
		
		
			Size_list[0]			= 0.5;	// size of each target individually (degrees)
			Size_list[1]			= 0.5;
			Size_list[2]			= 0.5;
			Size_list[3]			= 0.5;
			Size_list[4]			= 0.5;
			Size_list[5]			= 0.5;
			Size_list[6]			= 0.5;
			Size_list[7]			= 0.5;
			Size_list[8]			= 0.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 90;
			Angle_list[2]			= -90;
			Angle_list[3]			= 180;
			Angle_list[4]			= 0;
			Angle_list[5]			= 135;
			Angle_list[6]			= 45;
			Angle_list[7]			= -135;
			Angle_list[8]			= -45;
			
			Eccentricity_list[0]	= 0.0;	// distance of each target from center of screen individually (degrees)
			Eccentricity_list[1]	= 11.0;
			Eccentricity_list[2]	= 11.0;
			Eccentricity_list[3]	= 11.0;
			Eccentricity_list[4]	= 11.0;
			Eccentricity_list[5]	= 15.6;
			Eccentricity_list[6]	= 15.6;
			Eccentricity_list[7]	= 15.6;
			Eccentricity_list[8]	= 15.6;
			
			Fix_win_size = 0;
			Targ_win_size = 2.5;
			
			Allowed_fix_time = 1200;
			Max_saccade_time = 800;
			Targ_hold_time = 600;
			}

		// DELAYED SACCADE TASK SPECIFIC----------------------------------------------------------------------------
		
		if (state == run_delayed_sess)
			{	
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;
			
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation
			Min_SOA					= 200;	// minimum time between target onset and fixation offset (mem guided only)
			Max_SOA					= 200;	// maximum time between target onset and fixation offset (mem guided only)
			Reward_Offset			= 0;	// how long after tone before juice is given (needed to seperate primary and secondary reinforcement)
			Exp_juice 				= 0;
			
			N_targ_pos				= 4;
				
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;
		
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;
			
			
			SOA_list[0] = 200;
			SOA_list[1] = 200;
			SOA_list[2] = 300;
			SOA_list[3] = 300;
			SOA_list[4] = 400;
			SOA_list[5] = 1100;
			SOA_list[6] = 1200;
			SOA_list[7] = 1300;
			SOA_list[8] = 0;
			SOA_list[9] = 0;
			SOA_list[10] = 0;
			SOA_list[11] = 0;
			SOA_list[12] = 0;
			SOA_list[13] = 0;
			SOA_list[14] = 0;
			SOA_list[15] = 0;
			SOA_list[16] = 0;
			SOA_list[17] = 0;
			SOA_list[18] = 0;
			SOA_list[19] = 0; 
			}
		//--------------------------------------------------------------------------------------------------------------------
		// Flash task
		if (state == run_flash_sess)
			{
			Success_Tone_medR 	= 1600;
			Base_Reward_time 	= 10;
			Fix_win_size 		= 22;
			IFI 				= 1000;
			flashTime 			= 100;
			}
		}	


if(monkey == gauss)
		{		
		
		// GENERAL ACROSS ALL TASKS---------------------------------------------------------------------------------------
		// distance from center of subjects eyeball to screen
		if(room == 28)
			{
			Subj_dist	= 445.0;
			TrainingStill = 0;		
			}
		else if (room == 29)
			{
			Subj_dist	= 535.0;
			}
		// else if (room == 23)
			// {
			// }
			
		Set_tones = 1;
		
		Fix_win_size			= 3.5;
		Targ_win_size			= 6;	
		
		Allowed_fix_time		= 1000;
		Max_saccade_time		= 350;
		Base_Reward_time		= 30;
		Base_Punish_time		= 5000;
		
		
		// STOP SIGNAL TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_cmd_sess)
			{
			Trls_per_block 			= 10000;
			
			DR1_flag				= 0;
			
			Go_weight				= 100.0;
			Stop_weight				= 0.0;
			Ignore_weight			= 0.0;
			
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;					
					
			Ignore_sig_color[r_]	= 63;	
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;
						
			SSD_list[0]				= 3;	
			SSD_list[1]				= 13;
			SSD_list[2]				= 23;
			SSD_list[3]				= 33;
			SSD_list[4]				= 43;
			SSD_list[5]				= 53;
			SSD_list[6]				= 63;
			SSD_list[7]				= 0;
			SSD_list[8]				= 0;
			SSD_list[9]				= 0;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;		
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 45;
			Angle_list[2]			= 90;
			Angle_list[3]			= 135;
			Angle_list[4]			= 180;
			Angle_list[5]			= -135;
			Angle_list[6]			= -90;
			Angle_list[7]			= -45;
			}
		//GO NO-GO TASK SPECIFIC-----------------------------------------------------------------------------------		
		if (state == run_gonogo_sess)
			{	
			
			
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;

			Min_SOA = 0;
			Max_SOA = 1000;
			Expo_Jitter_SOA = 0;

			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 45;
			Angle_list[2]			= 135;
			Angle_list[3]			= 180;
			Angle_list[4]			= -135;
			Angle_list[5]			= -45;
			Angle_list[6]			= 0;
			Angle_list[7]			= 180;
			
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 63;	//63
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;	
			
			Mask_sig_color[r_]		= 	0;	//63
			Mask_sig_color[g_]		= 	0;	
			Mask_sig_color[b_]		= 	0;
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
			
			SSD_list[0]				= 3;	
			SSD_list[1]				= 8;
			SSD_list[2]				= 13;
			SSD_list[3]				= 18;
			SSD_list[4]				= 23;
			SSD_list[5]				= 28;
			SSD_list[6]				= 33;
			SSD_list[7]				= 38;
			SSD_list[8]				= 43;
			SSD_list[9]				= 48;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;
			}	
		// MEMORY GUIDED TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_mg_sess)
			{	
			
			TaskStim				= 1; // 1 = stimulation mode on; will auto-stim during various task periods; 0 = no stim

			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;
									
			Min_SOA = 300;
			Max_SOA = 1400;
			Expo_Jitter_SOA 		= 0;
			Exp_juice 				= 1;
			Trial_length			= 5000;
			Cancl_time				= 1200;
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation
			
			Max_saccade_time		= 350;
			Base_Reward_time		= 30;
			Base_Punish_time		= 5000;
			
			N_targ_pos				= 8;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 0;	//63
			Ignore_sig_color[g_]	= 36;	
			Ignore_sig_color[b_]	= 0;	
			
			/* Color_list[0,r_]		= 35;	// gray
			Color_list[0,g_]		= 33;	// 
			Color_list[0,b_]		= 27;	// 

			Color_list[1,r_]		= 63;	// red
			Color_list[1,g_]		= 0;
			Color_list[1,b_]		= 0;
							
			Color_list[2,r_]		= 0;	// green
			Color_list[2,g_]		= 36;
			Color_list[2,b_]		= 0;
									
			Color_list[3,r_]		= 0;	// blue
			Color_list[3,g_]		= 0;
			Color_list[3,b_]		= 59;
							
			Color_list[4,r_]		= 100;	// yellow
			Color_list[4,g_]		= 100;
			Color_list[4,b_]		= 0;
									
			Color_list[5,r_]		= 255;	// magenta
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 255;
									
			Color_list[6,r_]		= 153;	// brown
			Color_list[6,g_]		= 76;
			Color_list[6,b_]		= 0;
									
			Color_list[7,r_]		= 255;	// white
			Color_list[7,g_]		= 255;
			Color_list[7,b_]		= 255;  */
	
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;  
	
		
	
			SOA_list[0] = 300;
			SOA_list[1] = 400;
			SOA_list[2] = 500;
			SOA_list[3] = 600;
			SOA_list[4] = 1200;
			SOA_list[5] = 1400;
			SOA_list[6] = 1600;
			SOA_list[7] = 1800;
			SOA_list[8] = 2000;
			SOA_list[9] = 0;
			SOA_list[10] = 0;
			SOA_list[11] = 0;
			SOA_list[12] = 0;
			SOA_list[13] = 0;
			SOA_list[14] = 0;
			SOA_list[15] = 0;
			SOA_list[16] = 0;
			SOA_list[17] = 0;
			SOA_list[18] = 0;
			SOA_list[19] = 0;
			
			}	
			
		// SEARCH TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_search_sess)
			{
			Trls_per_block 			= 100;
			Base_Punish_time		= 5000;
			Catch_Rew               = 1; // 1 = full base reward; allows us to set how much we divide base reward by on catch trials relative to target trials
			Consec_trl				= 0; //min number of consecutive correct trials (plus one) required to get reward
			
			//// Probability cueing vars /////
			ProbCue					= 0; // 1= prob cue on, 0 = prob cue off
			ProbSide				= 1; // 0=right; 1=left more probable target location

			/// Ultrasound vars /////
			VarEcc					= 0; // 0 = off, 1 = on; variable eccentricity from list line 137 LOC_RAND.pro
			LatStruct				= 1; // For US detection task: 0 = search items only at 4 corners; 1 = normal search, all locations  
			Npulse					= 600; //number of pulses sent  
			PulseGap				= 1000; //gap between pulses
			StimInterval			= 600000; //10 minutes = 600000ms
			StimCond				= 1; //0 = stim starting block 1 (min 0), 1 = stim starting block 2 (min 10)

			////////// Training-specific variables - allow user to use fixed distractor locations and identities
			ArrStruct	 			= 1; // 1 = Sets locations to fixed eccentricity and angle, set using SearchEcc below, 0 = contextual cueing
			//For Capture Task: 0 = normal target/dist positions, 1 = only lateral and/or up/down positions (lat only vs lat up/down depends on TgAng set in LOCRAND.pro being 2 vs 4)
			//TrainOrt 				= 1; // 1 = Sets orientations to fixed orient, using TargOrt and DistOrt below//
			TargTrainSet			= 1; //1 = random loc, 2= fixed pos. 1, 3 = fixed pos 2., etc. up to max location number
			DistOrt					= 4; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT,    
			TargOrt					= 2; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT 
			SearchEcc				= 8; //Eccentricity in degrees; use to make fixed eccentricity 
			SingMode				= 0; //0=classic search, 1=singleton present/capture task
			SingCol					= 1; 
			PercSingTrl				= 50; //Percentage of trials where singleton is present, see LOC_RAND.pro for code
			soa_mode				= 0; //fixation response soa; 1=on, 0=off 

			///////// Use this variable to manipulate predictability of Fixation / Search ISI
			FixJitter			    = 0;  // 0 = Random fixation-search ISI; 1 = Fixed; see sets_trl.pro
			//////////
			
			catch_hold_time			= 175;
			Perc_catch				= 0; //percent catch trials
			TargetType				= 1; //1 = L, 2 = T
			PlacPres				= 1; //1 = no placeholders,  2 = placeholders
			SetSize					= 8; //SS1 = 1, SS2 = 2, etc. up to set size 12
			// Select Search task and Target/Distractor for Singleton Search
			SearchType				= 2; //Hetero = 1, Homo = 2, Homo Random = 3, Singleton search mode = 4 (target/dist swap trial to trial), 5 = All Orientation of target, for detection only (area 45b pilot)
			//TargOrt variables below only necessary for singleton search mode
			TargOrt1				= 3; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT 
			TargOrt2				= 3; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT 

			//search_fix_time			= 1000; //equiv to SOA - amount of time the fixation point stays on after target onset; fix off = go signal
			max_plactime			= 700;
			min_plactime			= 1000;
			
			targ_hold_time			= 200;
			Max_sacc_duration		= 50;
			Min_saccade_time		= 70;
			Max_saccade_time 		= 300;
			Min_Holdtime			= 300;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation		
					
			Go_weight				= 100.0;
			Stop_weight				= 0.0;
			Ignore_weight			= 0.0;
			
			NonSingleton_color[r_]		= 35;	
			NonSingleton_color[g_]		= 33;	
			NonSingleton_color[b_]		= 27; 

			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;			
			
			Eccentricity_list[0]	= 3;	
			Eccentricity_list[1]	= 6;
			Eccentricity_list[2]	= 9;
			Eccentricity_list[3]	= 6;
			Eccentricity_list[4]	= 6;	
			Eccentricity_list[5]	= 9;
			Eccentricity_list[6]	= 2;
			Eccentricity_list[7]	= 4;
			Eccentricity_list[8]	= 5;	
			Eccentricity_list[9]	= 6;
			Eccentricity_list[10]	= 8;
			Eccentricity_list[11]	= 9;
			
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;
			
			SOA_list[0] = 250;
			SOA_list[1] = 300;
			SOA_list[2] = 350;
			SOA_list[3] = 400;

			}		
	
		// FIXATION TASK SPECIFIC----------------------------------------------------------------------------
		
		if (state == run_fix_sess)
			{
			N_targ_pos = 9;
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
			
			Color_list[8,r_]		= 35;
			Color_list[8,g_]		= 33;
			Color_list[8,b_]		= 27;
		
		
			Size_list[0]			= 0.5;	// size of each target individually (degrees)
			Size_list[1]			= 0.5;
			Size_list[2]			= 0.5;
			Size_list[3]			= 0.5;
			Size_list[4]			= 0.5;
			Size_list[5]			= 0.5;
			Size_list[6]			= 0.5;
			Size_list[7]			= 0.5;
			Size_list[8]			= 0.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 90;
			Angle_list[2]			= -90;
			Angle_list[3]			= 180;
			Angle_list[4]			= 0;
			Angle_list[5]			= 135;
			Angle_list[6]			= 45;
			Angle_list[7]			= -135;
			Angle_list[8]			= -45;
			
			Eccentricity_list[0]	= 0.0;	// distance of each target from center of screen individually (degrees)
			Eccentricity_list[1]	= 11.0;
			Eccentricity_list[2]	= 11.0;
			Eccentricity_list[3]	= 11.0;
			Eccentricity_list[4]	= 11.0;
			Eccentricity_list[5]	= 15.6;
			Eccentricity_list[6]	= 15.6;
			Eccentricity_list[7]	= 15.6;
			Eccentricity_list[8]	= 15.6;
			
			Fix_win_size = 0;
			Targ_win_size = 2.5;
			
			Allowed_fix_time = 1200;
			Max_saccade_time = 800;
			Targ_hold_time = 600;
			}

		// DELAYED SACCADE TASK SPECIFIC----------------------------------------------------------------------------
		
		if (state == run_delayed_sess)
			{	
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;
			
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation
			Min_SOA					= 200;	// minimum time between target onset and fixation offset (mem guided only)
			Max_SOA					= 200;	// maximum time between target onset and fixation offset (mem guided only)
			Reward_Offset			= 0;	// how long after tone before juice is given (needed to seperate primary and secondary reinforcement)
			Exp_juice 				= 0;
			
			N_targ_pos				= 8;
		
			Angle_list[0]			= 90;	// angle of each target individually (degrees)
			Angle_list[1]			= 270;//270
			Angle_list[2]			= 0;
			Angle_list[3]			= 180;
			Angle_list[4]			= 45;
			Angle_list[5]			= 135;
			Angle_list[6]			= 225;
			Angle_list[7]			= 315;
		
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;
		
			SOA_list[0] = 300;
			SOA_list[1] = 300;
			SOA_list[2] = 400;
			SOA_list[3] = 400;
			SOA_list[4] = 500;
			SOA_list[5] = 400;
			SOA_list[6] = 900;
			SOA_list[7] = 1000;
			SOA_list[8] = 0;
			SOA_list[9] = 0;
			SOA_list[10] = 0;
			SOA_list[11] = 0;
			SOA_list[12] = 0;
			SOA_list[13] = 0;
			SOA_list[14] = 0;
			SOA_list[15] = 0;
			SOA_list[16] = 0;
			SOA_list[17] = 0;
			SOA_list[18] = 0;
			SOA_list[19] = 0;
			}
		//--------------------------------------------------------------------------------------------------------------------
		// Flash task
		if (state == run_flash_sess)
			{
			Success_Tone_medR 	= 1600;
			Base_Reward_time 	= 100;
			Fix_win_size 		= 22;
			IFI 				= 1000;
			flashTime 			= 100;
			}
	}	

		
}__HEADER__
DEFAULT_goodBU.pro
__FOOTER__
// This sets all of the user defined global variables.
// It is needed because of the loop structure which allows multiple tasks to run 
// from the same protocol.  If multiple protocols use the same variables, we may 
// run into problems if we don't specifically reset them at the beginning of each
// task change.
//
// written by david.c.godlove@vanderbilt.edu 	July, 2011


declare DEFAULT(int state, 
				int monkey, 
				int room);

process DEFAULT(int state, 
				int monkey, 
				int room)
	{
	
	declare hide int run_cmd_sess 		= 1;	// state 1 is countermanding
	declare hide int run_fix_sess 		= 2;	// state 2 is fixation
	declare hide int run_mg_sess 		= 3;	// state 3 is mem guided sacc
	declare hide int run_gonogo_sess	= 4;	// state 4 is gonogo
	declare hide int run_flash_sess		= 5;	// state 5 is flash screen protocol
	declare hide int run_delayed_sess   = 6;
	declare hide int run_search_sess    = 7;

	

	declare hide int xena    	= 1;
	declare hide int broca		= 3;	
	declare hide int helmholtz	= 4;
    declare hide int gauss		= 5;

	declare hide int color_num,r_, g_, b_;
	r_ = 0; g_ = 1; b_ = 2;

	
	Trls_per_block 			= 100; // In other words, there are no blocks
	
	//----------------------------------------------------------------------------------------------------------------
	// Trial type distributions (MUST SUM TO 100)
	Go_weight				= 0.0;
	Stop_weight				= 100.0;
	Ignore_weight			= 0.0;
	
	DR1_flag				= 0;	// We don't normally want to do 1DR version.
	
	
	//----------------------------------------------------------------------------------------------------------------
	// Stimulus properties
	// White iso luminant value is 35,33,27;
	// Red iso luminant value is is 63,base_reward0,0;
	// Green iso luminant value is 0,36,0;
	// Blue iso luminant value is 0,0,59;
	
	//////////// Default Search Variables
	TargetType				= 1; //1 = L, 2 = T
	PlacPres				= 1; // 1 = absent, 2 = present
	SearchType				= 2; //Hetero = 1, Homo = 2
	SetSize					= 1; //SS1 = 1, SS2 = 2, SS4 = 3, SS8 = 4, SS12 = 5
	search_fix_time			= 500; //
	plac_duration	 		= 1000; //consider adding to ALLVARS.pro
	Consec_trl  			= 0; //min number of consecutive correct trials (minus one) required to get reward
	
	
	NonSingleton_color[r_]		= 35;	//Default to gray
	NonSingleton_color[g_]		= 33;	
	NonSingleton_color[b_]		= 27; 
	
	Singleton_color[r_]			= 35;	//Default to gray
	Singleton_color[g_]			= 33;	
	Singleton_color[b_]			= 27; 
	////////////
	
	
	Classic					= 0;
	
	Stop_sig_color[r_]		= 63;	
	Stop_sig_color[g_]		= 0;	
	Stop_sig_color[b_]		= 0;	
	
	Ignore_sig_color[r_]	= 0;	
	Ignore_sig_color[g_]	= 36;	
	Ignore_sig_color[b_]	= 0;	
					
	Fixation_color[r_]		= 35;	
	Fixation_color[g_]		= 33;	
	Fixation_color[b_]		= 27;	
	
	N_targ_pos				= 2;	// number of target positions (this is calculated below based on user input)
									
	Color_list[0,r_]		= 35;	// color of each target individually
	Color_list[0,g_]		= 33;	// color of each target individually
	Color_list[0,b_]		= 27;	// color of each target individually
					
	Color_list[1,r_]		= 35;
	Color_list[1,g_]		= 33;
	Color_list[1,b_]		= 27;
					
	Color_list[2,r_]		= 35;
	Color_list[2,g_]		= 33;
	Color_list[2,b_]		= 27;
							
	Color_list[3,r_]		= 35;
	Color_list[3,g_]		= 33;
	Color_list[3,b_]		= 27;
					
	Color_list[4,r_]		= 35;
	Color_list[4,g_]		= 33;
	Color_list[4,b_]		= 27;
							
	Color_list[5,r_]		= 35;
	Color_list[5,g_]		= 33;
	Color_list[5,b_]		= 27;
							
	Color_list[6,r_]		= 35;
	Color_list[6,g_]		= 33;
	Color_list[6,b_]		= 27;
							
	Color_list[7,r_]		= 35;
	Color_list[7,g_]		= 33;
	Color_list[7,b_]		= 27;

	Color_list[8,r_]		= 35;
	Color_list[8,g_]		= 33;
	Color_list[8,b_]		= 27;

	Color_list[9,r_]		= 35;
	Color_list[9,g_]		= 33;
	Color_list[9,b_]		= 27;

	Color_list[10,r_]		= 35;
	Color_list[10,g_]		= 33;
	Color_list[10,b_]		= 27;

	Color_list[11,r_]		= 35;
	Color_list[11,g_]		= 33;
	Color_list[11,b_]		= 27;	
	
	
	Size_list[0]			= 0.5;	// size of each target individually (degrees)
	Size_list[1]			= 0.5;
	Size_list[2]			= 0.5;
	Size_list[3]			= 0.5;
	Size_list[4]			= 0.5;
	Size_list[5]			= 0.5;
	Size_list[6]			= 0.5;
	Size_list[7]			= 0.5;
	Size_list[8]			= 0.5;
	Size_list[9]			= 0.5;
	Size_list[10]			= 0.5;
	Size_list[11]			= 0.5;

	
	Angle_list[0]			= 0;	// angle of each target individually (degrees)
	Angle_list[1]			= 180;
	Angle_list[2]			= 90;
	Angle_list[3]			= 135;
	Angle_list[4]			= 180;
	Angle_list[5]			= -135;
	Angle_list[6]			= -90;
	Angle_list[7]			= -45;
	
	Eccentricity_list[0]	= 8.0;	// distance of each target from center of screen individually (degrees)
	Eccentricity_list[1]	= 8.0;
	Eccentricity_list[2]	= 8.0;
	Eccentricity_list[3]	= 8.0;
	Eccentricity_list[4]	= 8.0;
	Eccentricity_list[5]	= 8.0;
	Eccentricity_list[6]	= 8.0;
	Eccentricity_list[7]	= 8.0;
	Eccentricity_list[8]	= 8.0;
	Eccentricity_list[9]	= 8.0;
	Eccentricity_list[10]	= 8.0;
	Eccentricity_list[11]	= 8.0;

	// Eccentricity_list[0]	= 12.0;	// distance of each target from center of screen individually (degrees)
	// Eccentricity_list[1]	= 12.0;
	// Eccentricity_list[2]	= 12.0;
	// Eccentricity_list[3]	= 12.0;
	// Eccentricity_list[4]	= 12.0;
	// Eccentricity_list[5]	= 12.0;
	// Eccentricity_list[6]	= 12.0;
	// Eccentricity_list[7]	= 12.0;
	// Eccentricity_list[8]	= 12.0;
	// Eccentricity_list[9]	= 12.0;
	// Eccentricity_list[10]	= 12.0;
	// Eccentricity_list[11]	= 12.0;

	// Eccentricity_list[0]	= 5.0;	// distance of each target from center of screen individually (degrees)
	// Eccentricity_list[1]	= 5.0;
	// Eccentricity_list[2]	= 5.0;
	// Eccentricity_list[3]	= 5.0;
	// Eccentricity_list[4]	= 5.0;
	// Eccentricity_list[5]	= 5.0;
	// Eccentricity_list[6]	= 5.0;
	// Eccentricity_list[7]	= 5.0;
	// Eccentricity_list[8]	= 5.0;
	// Eccentricity_list[9]	= 5.0;
	// Eccentricity_list[10]	= 5.0;
	// Eccentricity_list[11]	= 5.0;
	
	Fixation_size			= .5;	// size of the fixatoin point (degrees)	
	
	Success_Tone_bigR		= 100;	// positive secondary reinforcer in Hz (large reward)
	Success_Tone_medR		= 200;	// positive secondary reinforcer in Hz (medium reward)
	Success_Tone_smlR		= 400;	// positive secondary reinforcer in Hz (small reward)		
	Failure_Tone_smlP		= 800;	// negative secondary reinforcer in Hz (short timeout)
	Failure_Tone_medP		= 1600;	// negative secondary reinforcer in Hz (medium timeout)
	Failure_Tone_bigP		= 3200;	// negative secondary reinforcer in Hz (long timeout)	
	
	Fixation_Target 		= 0;	// Target number for the fixation task (not used here);
	
	//----------------------------------------------------------------------------------------------------------------
	// Eye related variables
	Fix_win_size			= 2.5;	// size of fixation window (degrees)
	Targ_win_size			= 6;	// size of target window (degrees)
	
	
	
	//----------------------------------------------------------------------------------------------------------------
	// Task timing paramaters (all times in ms unless otherwise specified)
	Allowed_fix_time		= 2000;	// subject has this long to acquire fixation before a new trial is initiated
	Expo_Jitter_soa			= 0;	// defines if exponential holdtime is used or if holdtime is sampled from rectanglular dist.
	expo_jitter 			= 0;
	Min_Holdtime			= 500;  // minimum time after fixation before target presentation
	Max_Holdtime			= 1000; // maximum time after fixation before target presentation
	Min_SOA					= 0;	// minimum time between target onset and fixation offset (mem guided only)
	Max_SOA					= 1000;	// maximum time between target onset and fixation offset (mem guided only)
	Min_saccade_time		= 0;
	Max_saccade_time		= 800;	// subject has this long to saccade to the target
	Max_sacc_duration		= 100;	// once the eyes leave fixation they must be in the target before this time is up
	Targ_hold_time			= 600; 	// after saccade subject must hold fixation at target for this long
	Staircase				= 1;	// do we select the next SSD based on a staircasing algorithm?
	
	SSD_list[0]				= 3;	// needs to be in vertical retrace units
	SSD_list[1]				= 6;
	SSD_list[2]				= 9;
	SSD_list[3]				= 12;
	SSD_list[4]				= 0;
	SSD_list[5]				= 0;
	SSD_list[6]				= 0;
	SSD_list[7]				= 0;
	SSD_list[8]				= 0;
	SSD_list[9]				= 0;
	SSD_list[10]			= 0;
	SSD_list[11]			= 0;
	SSD_list[12]			= 0;
	SSD_list[13]			= 0;
	SSD_list[14]			= 0;
	SSD_list[15]			= 0;
	SSD_list[16]			= 0;
	SSD_list[17]			= 0;
	SSD_list[18]			= 0;
	SSD_list[19]			= 0;
	
 	SSD_floor 				= 0;	// for training to cancel consistently
 	SSD_ceil				= 0;	// for training to cancel consistently
	
	Cancl_time				= Max_saccade_time * 2;	// subject must hold fixation for this long on a stop trial to be deemed canceled
	Tone_Duration			= 30;	// how long should the error and success tones be presented?
	Exp_juice 				= 0;	// Exponential juice reward duration by reaction time
	Reward_Offset			= 600;	// how long after tone before juice is given (needed to seperate primary and secondary reinforcement)
	Base_Reward_time		= 60;	// medium time for the juice solonoid to remain open (monkeys are very interested in this varaible)
	Base_Punish_time		= 2000;	// medium time out for messing up (monkeys care less for this one)
	Max_move_ct				= 1;	// for training to be still with a motion detector
	Bmove_tout				= 2000;	// for training to be still with a motion detector
	TrainingStill			= 0;	// Indicates that we are using motion detector to train the monk to be still
	Canc_alert				= 0;	// Alert operator that the monk has canceled a trial (during training)
	Fixed_trl_length		= 0;	// 1 for fixed trial length, 0 for fixed inter trial intervals
	Trial_length			= 0; 	// fixed at this value (only works if Fixed_trl_length == 1) must figure out max time for this variable and include it in comments
	Inter_trl_int			= 1000;	// how long between trials (only works if Fixed_trl_length == 0)
	
	
	
	
	
	
	
	//--------------------------------------------------------------------------------------------------------------------
	// Xena
	if(monkey == xena)
		{		
		
		// GENERAL ACROSS ALL TASKS---------------------------------------------------------------------------------------
		// distance from center of subjects eyeball to screen
		if(room == 28)
			{
			Subj_dist	= 457.0;
			TrainingStill = 0;		
			}
		else if (room == 29)
			{
			Subj_dist	= 535.0;
			}
		// else if (room == 23)
			// {
			// }
			
		Set_tones = 1;
		
		Fix_win_size			= 3.5;
		Targ_win_size			= 5;	
		
		Allowed_fix_time		= 1000;
		Max_saccade_time		= 800;
		Base_Reward_time		= 50;
		Base_Punish_time		= 1000;
		
		// SEARCH TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_search_sess)
			{
			Trls_per_block 			= 10000;
			
			DR1_flag				= 0;
			
			Go_weight				= 100.0;
			Stop_weight				= 0.0;
			Ignore_weight			= 0.0;
				
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;			
			
			Eccentricity_list[0]	= 3;	
			Eccentricity_list[1]	= 6;
			Eccentricity_list[2]	= 9;
			Eccentricity_list[3]	= 6;
			Eccentricity_list[4]	= 6;	
			Eccentricity_list[5]	= 9;
			Eccentricity_list[6]	= 2;
			Eccentricity_list[7]	= 4;
			Eccentricity_list[8]	= 5;	
			Eccentricity_list[9]	= 6;
			Eccentricity_list[10]	= 8;
			Eccentricity_list[11]	= 9;
						
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 30;
			Angle_list[2]			= 60;
			Angle_list[3]			= 90;
			Angle_list[4]			= 120;
			Angle_list[5]			= 150;
			Angle_list[6]			= 180;
			Angle_list[7]			= 210;
			Angle_list[8]			= 240;
			Angle_list[9]			= 270;
			Angle_list[10]			= 300;
			Angle_list[11]			= 330;
			}		
	
		
		
		// STOP SIGNAL TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_cmd_sess)
			{
			Trls_per_block 			= 20;
			N_targ_pos = 2;
			DR1_flag				= 1;
			
			Go_weight				= 50.0;
			Stop_weight				= 50.0;
			Ignore_weight			= 0.0;
					
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;					
					
			Ignore_sig_color[r_]	= 63;	
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;

			
			SSD_list[0]				= 3;	
			SSD_list[1]				= 13;
			SSD_list[2]				= 23;
			SSD_list[3]				= 33;
			SSD_list[4]				= 43;
			SSD_list[5]				= 53;
			SSD_list[6]				= 63;
			SSD_list[7]				= 0;
			SSD_list[8]				= 0;
			SSD_list[9]				= 0;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;

			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;			
			}
		// Memory Guided TASK SPECIFIC--------------------------------------------------------------------------------------

		if (state == run_mg_sess)
			{	
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;
									
			Min_SOA = 600;
			Max_SOA = 1400;
			Expo_Jitter_SOA 		= 0;
			Exp_juice 				= 1;
			Trial_length			= 5000;
			Cancl_time				= 1200;
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation
			
			Max_saccade_time		= 1000;
			Base_Reward_time		= 30;
			Base_Punish_time		= 5000;
			
			N_targ_pos				= 8;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 0;	//63
			Ignore_sig_color[g_]	= 36;	
			Ignore_sig_color[b_]	= 0;	
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
	
			SOA_list[0] = 200;
			SOA_list[1] = 300;
			SOA_list[2] = 400;
			SOA_list[3] = 300;
			SOA_list[4] = 400;
			SOA_list[5] = 400;
			SOA_list[6] = 900;
			SOA_list[7] = 1000;
			SOA_list[8] = 0;
			SOA_list[9] = 0;
			SOA_list[10] = 0;
			SOA_list[11] = 0;
			SOA_list[12] = 0;
			SOA_list[13] = 0;
			SOA_list[14] = 0;
			SOA_list[15] = 0;
			SOA_list[16] = 0;
			SOA_list[17] = 0;
			SOA_list[18] = 0;
			SOA_list[19] = 0;
			
			}		
		// FIXATION TASK SPECIFIC----------------------------------------------------------------------------
		if (state == run_fix_sess)
			{
			N_targ_pos = 9;
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
			
			Color_list[8,r_]		= 35;
			Color_list[8,g_]		= 33;
			Color_list[8,b_]		= 27;
		
		
			Size_list[0]			= 0.5;	// size of each target individually (degrees)
			Size_list[1]			= 0.5;
			Size_list[2]			= 0.5;
			Size_list[3]			= 0.5;
			Size_list[4]			= 0.5;
			Size_list[5]			= 0.5;
			Size_list[6]			= 0.5;
			Size_list[7]			= 0.5;
			Size_list[8]			= 0.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 90;
			Angle_list[2]			= -90;
			Angle_list[3]			= 180;
			Angle_list[4]			= 0;
			Angle_list[5]			= 135;
			Angle_list[6]			= 45;
			Angle_list[7]			= -135;
			Angle_list[8]			= -45;
			
			Eccentricity_list[0]	= 0.0;	// distance of each target from center of screen individually (degrees)
			Eccentricity_list[1]	= 11.0;
			Eccentricity_list[2]	= 11.0;
			Eccentricity_list[3]	= 11.0;
			Eccentricity_list[4]	= 11.0;
			Eccentricity_list[5]	= 15.6;
			Eccentricity_list[6]	= 15.6;
			Eccentricity_list[7]	= 15.6;
			Eccentricity_list[8]	= 15.6;
			
			Fix_win_size = 0;
			Targ_win_size = 2.5;
			
			Allowed_fix_time = 1200;
			Max_saccade_time = 800;
			Targ_hold_time = 600; 
			}
		}
	
	
	if(monkey == broca)
		{		
		
		// GENERAL ACROSS ALL TASKS---------------------------------------------------------------------------------------
		// distance from center of subjects eyeball to screen
		if(room == 28)
			{
			Subj_dist	= 450.0;
			TrainingStill = 0;		
			}
		else if (room == 29)
			{
			Subj_dist	= 535.0;
			}
		// else if (room == 23)
			// {
			// }
			
		Set_tones = 1;
		
		Fix_win_size			= 3.5;
		Targ_win_size			= 6;	
		
		Allowed_fix_time		= 1000;
		Max_saccade_time		= 800;
		Base_Reward_time		= 50;
		Base_Punish_time		= 1000;
		
		
		// STOP SIGNAL TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_cmd_sess)
			{
			Trls_per_block 			= 20;
			
			DR1_flag				= 1;
			
			Go_weight				= 50.0;
			Stop_weight				= 50.0;
			Ignore_weight			= 0.0;
						
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;					
					
			Ignore_sig_color[r_]	= 63;	
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;
			
			SSD_list[0]				= 3;	
			SSD_list[1]				= 13;
			SSD_list[2]				= 23;
			SSD_list[3]				= 33;
			SSD_list[4]				= 43;
			SSD_list[5]				= 53;
			SSD_list[6]				= 63;
			SSD_list[7]				= 0;
			SSD_list[8]				= 0;
			SSD_list[9]				= 0;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;		
			}
			
			
	
		if (state == run_mg_sess)
			{	
			Go_weight				= 90;
			Stop_weight				= 10;
			Ignore_weight			= 0;
									
			Min_SOA = 600;
			Max_SOA = 1400;
			Expo_Jitter_SOA 		= 0;
			Exp_juice 				= 1;
			Trial_length			= 5000;
			Cancl_time				= 1200;
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation
			
			
			
			Max_saccade_time		= 400;
			Base_Reward_time		= 100;
			Base_Punish_time		= 1000;
			
			N_targ_pos				= 2;
					
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 0;
			Size_list[3]			= 0;
			Size_list[4]			= 0;
			Size_list[5]			= 0;
			Size_list[6]			= 0;
			Size_list[7]			= 0;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 180;
			Angle_list[2]			= 90;
			Angle_list[3]			= 135;
			Angle_list[4]			= 180;
			Angle_list[5]			= -135;
			Angle_list[6]			= -90;
			Angle_list[7]			= -45;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 0;	//63
			Ignore_sig_color[g_]	= 36;	
			Ignore_sig_color[b_]	= 0;	
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
	
			SOA_list[0]				= 50;	
			SOA_list[1]				= 60;
			SOA_list[2]				= 70;
			SOA_list[3]				= 80;
			SOA_list[4]				= 90;
			SOA_list[5]				= 0;
			SOA_list[6]				= 0;
			SOA_list[7]				= 0;
			SOA_list[8]				= 0;
			SOA_list[9]				= 0;
			SOA_list[10]			= 0;
			SOA_list[11]			= 0;
			SOA_list[12]			= 0;
			SOA_list[13]			= 0;
			SOA_list[14]			= 0;
			SOA_list[15]			= 0;
			SOA_list[16]			= 0;
			SOA_list[17]			= 0;
			SOA_list[18]			= 0;
			SOA_list[19]			= 0;
			}	
			

		}		
	
if(monkey == helmholtz)
		{		
		
		// GENERAL ACROSS ALL TASKS---------------------------------------------------------------------------------------
		// distance from center of subjects eyeball to screen
		if(room == 28)
			{
			Subj_dist	= 440.0;
			TrainingStill = 0;	//0 = body monitor off	
			}
		else if (room == 29)
			{
			Subj_dist	= 535.0;
			}
		// else if (room == 23)
			// {
			// }
			
		Set_tones = 1;
		
		Fix_win_size			= 3.5;
		Targ_win_size			= 6;	
		
		Allowed_fix_time		= 1000;
		Max_saccade_time		= 800;
		Base_Reward_time		= 30;
		Base_Punish_time		= 10000;
		
		
		// STOP SIGNAL TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_cmd_sess)
			{
			Trls_per_block 			= 10000;
			
			DR1_flag				= 0;
			
			Go_weight				= 100.0;
			Stop_weight				= 0.0;
			Ignore_weight			= 0.0;
					
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;					
					
			Ignore_sig_color[r_]	= 63;	
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;
			
			SSD_list[0]				= 3;	
			SSD_list[1]				= 13;
			SSD_list[2]				= 23;
			SSD_list[3]				= 33;
			SSD_list[4]				= 43;
			SSD_list[5]				= 53;
			SSD_list[6]				= 63;
			SSD_list[7]				= 0;
			SSD_list[8]				= 0;
			SSD_list[9]				= 0;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;		
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 45;
			Angle_list[2]			= 90;
			Angle_list[3]			= 135;
			Angle_list[4]			= 180;
			Angle_list[5]			= -135;
			Angle_list[6]			= -90;
			Angle_list[7]			= -45;
			}
		//GO NO-GO TASK SPECIFIC-----------------------------------------------------------------------------------		
		if (state == run_gonogo_sess)
			{	
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;

			Min_SOA = 0;
			Max_SOA = 1000;
			Expo_Jitter_SOA = 0;

			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 45;
			Angle_list[2]			= 135;
			Angle_list[3]			= 180;
			Angle_list[4]			= -135;
			Angle_list[5]			= -45;
			Angle_list[6]			= 0;
			Angle_list[7]			= 180;
			
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 63;	//63
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;	
			
			Mask_sig_color[r_]		= 	0;	//63
			Mask_sig_color[g_]		= 	0;	
			Mask_sig_color[b_]		= 	0;
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
			
			SSD_list[0]				= 3;	
			SSD_list[1]				= 8;
			SSD_list[2]				= 13;
			SSD_list[3]				= 18;
			SSD_list[4]				= 23;
			SSD_list[5]				= 28;
			SSD_list[6]				= 33;
			SSD_list[7]				= 38;
			SSD_list[8]				= 43;
			SSD_list[9]				= 48;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;
			}	
		// MEMORY GUIDED TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_mg_sess)
			{	
			
			TaskStim				= 1; // stimulation mode on; will auto-stim during various task periods; 0 = no stim
			
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;
									
			Min_SOA = 600;
			Max_SOA = 1400;
			Expo_Jitter_SOA 		= 0;
			Exp_juice 				= 1;
			Trial_length			= 5000;
			Cancl_time				= 1200;
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 500; // maximum time after fixation before target presentation
			
			Max_saccade_time		= 350;
			Base_Reward_time		= 30;
			Base_Punish_time		= 5000;
			
			N_targ_pos				= 8;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 0;	//63
			Ignore_sig_color[g_]	= 36;	
			Ignore_sig_color[b_]	= 0;	
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
	
/* 			 Color_list[0,r_]		= 35;	// gray
			Color_list[0,g_]		= 33;	// 
			Color_list[0,b_]		= 27;	// 

			Color_list[1,r_]		= 63;	// red
			Color_list[1,g_]		= 0;
			Color_list[1,b_]		= 0;
							
			Color_list[2,r_]		= 0;	// green
			Color_list[2,g_]		= 36;
			Color_list[2,b_]		= 0;
									
			Color_list[3,r_]		= 0;	// blue
			Color_list[3,g_]		= 0;
			Color_list[3,b_]		= 59;
							
			Color_list[4,r_]		= 100;	// yellow
			Color_list[4,g_]		= 100;
			Color_list[4,b_]		= 0;
									
			Color_list[5,r_]		= 255;	// magenta
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 255;
									
			Color_list[6,r_]		= 153;	// brown
			Color_list[6,g_]		= 76;
			Color_list[6,b_]		= 0;
									
			Color_list[7,r_]		= 255;	// white
			Color_list[7,g_]		= 255; 
			Color_list[7,b_]		= 255;  */	
	
	
			SOA_list[0] = 300;
			SOA_list[1] = 450;
			SOA_list[2] = 600;
			SOA_list[3] = 750;
			SOA_list[4] = 900;
			SOA_list[5] = 1050;
			SOA_list[6] = 1200;
			SOA_list[7] = 1350;
			SOA_list[8] = 0;
			SOA_list[9] = 0;
			SOA_list[10] = 0;
			SOA_list[11] = 0;
			SOA_list[12] = 0;
			SOA_list[13] = 0;
			SOA_list[14] = 0;
			SOA_list[15] = 0;
			SOA_list[16] = 0;
			SOA_list[17] = 0;
			SOA_list[18] = 0;
			SOA_list[19] = 0;
			
			}	
			

		

		// SEARCH TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_search_sess)
			{
			Trls_per_block 			= 100;
			Base_Punish_time		= 2000;
			Catch_Rew               = 1; // 1 = full base reward; allows us to set how much we divide base reward by on catch trials relative to target trials
			
			//// Probability cueing vars /////
			ProbCue					= 0; // 1= prob cue on, 0 = prob cue off
			ProbSide				= 1; // 0=right; 1=left more probable target location
			/// Ultrasound vars /////
			VarEcc					= 0; // 0 = off, 1 = on; variable eccentricity from list line 137 LOC_RAND.pro
			LatStruct				= 1; // For US detection task: 0 = search items only at lateral positions; 1 = normal search, all locations  
			Npulse					= 600; //number of pulses sent  
			PulseGap				= 1000; //gap between pulses
			StimInterval			= 60000; //10 minutes = 600000ms
			StimCond				= 0; //0 = stim starting block 1 (min 0), 1 = stim starting block 2 (min 10)
			
			////////// Training-specific variables - allow user to use fixed distractor locations and identities
			ArrStruct	 			= 1; // 1=structured arrays, 0=contextual cueing
			//TrainOrt 				= 1;
			TargTrainSet			= 1; //1=random loc, 2= fixed pos. 1, 3 = fixed pos 2., etc. up to max location number
			DistOrt					= 4; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT  
			TargOrt					= 3; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT  
			SearchEcc				= 8; //entricity in degrees; use to make fixed eccentricity 
			SingMode				= 0; //0=classic search, 1=singleton present/capture task, 2=variable singleton mode
			SingCol					= 2; 
			PercSingTrl				= 50; //Percentage of trials where singleton is present, see LOC_RAND.pro for code
			soa_mode				= 0;  //fixation response soa; 1=on, 0=off 
			
			///////// Use this variable to manipulate predictability of Fixation / Search ISI
			FixJitter			    = 0;  // 0 = random fixation-search ISI; 1 = Fixed; see sets_trl.pro
			//////////
			
			catch_hold_time			= 200;
			Perc_catch				= 0; //percent catch trials
			TargetType				= 2; //1 = L, 2 = T
			PlacPres				= 1; //1 = no placeholders,  2 = placeholders
			SetSize					= 8; //SS1 = 1, SS2 = 2, etc. up to set size 12;
			// Select Search task and Target/Distractor for Singleton Search
			SearchType				= 2; //Hetero = 1, Homo = 2, Homo Random = 3, 4 Singleton search mode (target/dist swap trial to trial)
			TargOrt1				= 2; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT 
			TargOrt2				= 2; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT
			
			//search_fix_time			= 0; //equiv to SOA - amount of time the fixation point stays on after target onset; fix off = go signal
			max_plactime			= 700;
			min_plactime			= 1000;
			
			targ_hold_time			= 200;
			Max_sacc_duration		= 50;
			Min_saccade_time		= 70;
			Max_saccade_time 		= 300;
			Min_Holdtime			= 300;  // minimum time after fixation before target presentation
			Max_Holdtime			= 800; // maximum time after fixation before target presentation		
					
			Go_weight				= 100.0;
			Stop_weight				= 0.0;
			Ignore_weight			= 0.0;
							
			NonSingleton_color[r_]		= 35;	
			NonSingleton_color[g_]		= 33;	
			NonSingleton_color[b_]		= 27; 
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;			
			
								
			// angle of each location individually (degrees) - only used for training/structured array mode
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;			
			}		
			
			SOA_list[0] = 300;
			SOA_list[1] = 450;
			SOA_list[2] = 600;
			SOA_list[3] = 750;
		// FIXATION TASK SPECIFIC----------------------------------------------------------------------------
		
		if (state == run_fix_sess)
			{
			N_targ_pos = 9;
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
			
			Color_list[8,r_]		= 35;
			Color_list[8,g_]		= 33;
			Color_list[8,b_]		= 27;
		
		
			Size_list[0]			= 0.5;	// size of each target individually (degrees)
			Size_list[1]			= 0.5;
			Size_list[2]			= 0.5;
			Size_list[3]			= 0.5;
			Size_list[4]			= 0.5;
			Size_list[5]			= 0.5;
			Size_list[6]			= 0.5;
			Size_list[7]			= 0.5;
			Size_list[8]			= 0.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 90;
			Angle_list[2]			= -90;
			Angle_list[3]			= 180;
			Angle_list[4]			= 0;
			Angle_list[5]			= 135;
			Angle_list[6]			= 45;
			Angle_list[7]			= -135;
			Angle_list[8]			= -45;
			
			Eccentricity_list[0]	= 0.0;	// distance of each target from center of screen individually (degrees)
			Eccentricity_list[1]	= 11.0;
			Eccentricity_list[2]	= 11.0;
			Eccentricity_list[3]	= 11.0;
			Eccentricity_list[4]	= 11.0;
			Eccentricity_list[5]	= 15.6;
			Eccentricity_list[6]	= 15.6;
			Eccentricity_list[7]	= 15.6;
			Eccentricity_list[8]	= 15.6;
			
			Fix_win_size = 0;
			Targ_win_size = 2.5;
			
			Allowed_fix_time = 1200;
			Max_saccade_time = 800;
			Targ_hold_time = 600;
			}

		// DELAYED SACCADE TASK SPECIFIC----------------------------------------------------------------------------
		
		if (state == run_delayed_sess)
			{	
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;
			
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation
			Min_SOA					= 200;	// minimum time between target onset and fixation offset (mem guided only)
			Max_SOA					= 200;	// maximum time between target onset and fixation offset (mem guided only)
			Reward_Offset			= 0;	// how long after tone before juice is given (needed to seperate primary and secondary reinforcement)
			Exp_juice 				= 0;
			
			N_targ_pos				= 4;
				
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;
		
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;
			
			
			SOA_list[0] = 200;
			SOA_list[1] = 200;
			SOA_list[2] = 300;
			SOA_list[3] = 300;
			SOA_list[4] = 400;
			SOA_list[5] = 1100;
			SOA_list[6] = 1200;
			SOA_list[7] = 1300;
			SOA_list[8] = 0;
			SOA_list[9] = 0;
			SOA_list[10] = 0;
			SOA_list[11] = 0;
			SOA_list[12] = 0;
			SOA_list[13] = 0;
			SOA_list[14] = 0;
			SOA_list[15] = 0;
			SOA_list[16] = 0;
			SOA_list[17] = 0;
			SOA_list[18] = 0;
			SOA_list[19] = 0; 
			}
		//--------------------------------------------------------------------------------------------------------------------
		// Flash task
		if (state == run_flash_sess)
			{
			Success_Tone_medR 	= 1600;
			Base_Reward_time 	= 100;
			Fix_win_size 		= 22;
			}
		}	


if(monkey == gauss)
		{		
		
		// GENERAL ACROSS ALL TASKS---------------------------------------------------------------------------------------
		// distance from center of subjects eyeball to screen
		if(room == 28)
			{
			Subj_dist	= 445.0;
			TrainingStill = 0;		
			}
		else if (room == 29)
			{
			Subj_dist	= 535.0;
			}
		// else if (room == 23)
			// {
			// }
			
		Set_tones = 1;
		
		Fix_win_size			= 3.5;
		Targ_win_size			= 6;	
		
		Allowed_fix_time		= 1000;
		Max_saccade_time		= 350;
		Base_Reward_time		= 30;
		Base_Punish_time		= 5000;
		
		
		// STOP SIGNAL TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_cmd_sess)
			{
			Trls_per_block 			= 10000;
			
			DR1_flag				= 0;
			
			Go_weight				= 100.0;
			Stop_weight				= 0.0;
			Ignore_weight			= 0.0;
			
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;					
					
			Ignore_sig_color[r_]	= 63;	
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;
						
			SSD_list[0]				= 3;	
			SSD_list[1]				= 13;
			SSD_list[2]				= 23;
			SSD_list[3]				= 33;
			SSD_list[4]				= 43;
			SSD_list[5]				= 53;
			SSD_list[6]				= 63;
			SSD_list[7]				= 0;
			SSD_list[8]				= 0;
			SSD_list[9]				= 0;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;		
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 45;
			Angle_list[2]			= 90;
			Angle_list[3]			= 135;
			Angle_list[4]			= 180;
			Angle_list[5]			= -135;
			Angle_list[6]			= -90;
			Angle_list[7]			= -45;
			}
		//GO NO-GO TASK SPECIFIC-----------------------------------------------------------------------------------		
		if (state == run_gonogo_sess)
			{	
			
			
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;

			Min_SOA = 0;
			Max_SOA = 1000;
			Expo_Jitter_SOA = 0;

			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 45;
			Angle_list[2]			= 135;
			Angle_list[3]			= 180;
			Angle_list[4]			= -135;
			Angle_list[5]			= -45;
			Angle_list[6]			= 0;
			Angle_list[7]			= 180;
			
			Stop_sig_color[r_]		= 0;	
			Stop_sig_color[g_]		= 36;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 63;	//63
			Ignore_sig_color[g_]	= 0;	
			Ignore_sig_color[b_]	= 0;	
			
			Mask_sig_color[r_]		= 	0;	//63
			Mask_sig_color[g_]		= 	0;	
			Mask_sig_color[b_]		= 	0;
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
			
			SSD_list[0]				= 3;	
			SSD_list[1]				= 8;
			SSD_list[2]				= 13;
			SSD_list[3]				= 18;
			SSD_list[4]				= 23;
			SSD_list[5]				= 28;
			SSD_list[6]				= 33;
			SSD_list[7]				= 38;
			SSD_list[8]				= 43;
			SSD_list[9]				= 48;
			SSD_list[10]			= 0;
			SSD_list[11]			= 0;
			SSD_list[12]			= 0;
			SSD_list[13]			= 0;
			SSD_list[14]			= 0;
			SSD_list[15]			= 0;
			SSD_list[16]			= 0;
			SSD_list[17]			= 0;
			SSD_list[18]			= 0;
			SSD_list[19]			= 0;
			}	
		// MEMORY GUIDED TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_mg_sess)
			{	
			
			TaskStim				= 1; // 1 = stimulation mode on; will auto-stim during various task periods; 0 = no stim

			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;
									
			Min_SOA = 300;
			Max_SOA = 1400;
			Expo_Jitter_SOA 		= 0;
			Exp_juice 				= 1;
			Trial_length			= 5000;
			Cancl_time				= 1200;
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation
			
			Max_saccade_time		= 350;
			Base_Reward_time		= 30;
			Base_Punish_time		= 5000;
			
			N_targ_pos				= 8;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;
			
			Stop_sig_color[r_]		= 63;	
			Stop_sig_color[g_]		= 0;	
			Stop_sig_color[b_]		= 0;
			                          
			Ignore_sig_color[r_]	= 0;	//63
			Ignore_sig_color[g_]	= 36;	
			Ignore_sig_color[b_]	= 0;	
			
			/* Color_list[0,r_]		= 35;	// gray
			Color_list[0,g_]		= 33;	// 
			Color_list[0,b_]		= 27;	// 

			Color_list[1,r_]		= 63;	// red
			Color_list[1,g_]		= 0;
			Color_list[1,b_]		= 0;
							
			Color_list[2,r_]		= 0;	// green
			Color_list[2,g_]		= 36;
			Color_list[2,b_]		= 0;
									
			Color_list[3,r_]		= 0;	// blue
			Color_list[3,g_]		= 0;
			Color_list[3,b_]		= 59;
							
			Color_list[4,r_]		= 100;	// yellow
			Color_list[4,g_]		= 100;
			Color_list[4,b_]		= 0;
									
			Color_list[5,r_]		= 255;	// magenta
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 255;
									
			Color_list[6,r_]		= 153;	// brown
			Color_list[6,g_]		= 76;
			Color_list[6,b_]		= 0;
									
			Color_list[7,r_]		= 255;	// white
			Color_list[7,g_]		= 255;
			Color_list[7,b_]		= 255;  */
	
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;  
	
		
	
			SOA_list[0] = 300;
			SOA_list[1] = 400;
			SOA_list[2] = 500;
			SOA_list[3] = 600;
			SOA_list[4] = 1200;
			SOA_list[5] = 1400;
			SOA_list[6] = 1600;
			SOA_list[7] = 1800;
			SOA_list[8] = 2000;
			SOA_list[9] = 0;
			SOA_list[10] = 0;
			SOA_list[11] = 0;
			SOA_list[12] = 0;
			SOA_list[13] = 0;
			SOA_list[14] = 0;
			SOA_list[15] = 0;
			SOA_list[16] = 0;
			SOA_list[17] = 0;
			SOA_list[18] = 0;
			SOA_list[19] = 0;
			
			}	
			
		// SEARCH TASK SPECIFIC--------------------------------------------------------------------------------------
		if (state == run_search_sess)
			{
			Trls_per_block 			= 100;
			Base_Punish_time		= 5000;
			Catch_Rew               = 1; // 1 = full base reward; allows us to set how much we divide base reward by on catch trials relative to target trials
			Consec_trl				= 0; //min number of consecutive correct trials (plus one) required to get reward
			
			//// Probability cueing vars /////
			ProbCue					= 0; // 1= prob cue on, 0 = prob cue off
			ProbSide				= 1; // 0=right; 1=left more probable target location

			/// Ultrasound vars /////
			VarEcc					= 0; // 0 = off, 1 = on; variable eccentricity from list line 137 LOC_RAND.pro
			LatStruct				= 1; // For US detection task: 0 = search items only at 4 corners; 1 = normal search, all locations  
			Npulse					= 600; //number of pulses sent  
			PulseGap				= 1000; //gap between pulses
			StimInterval			= 600000; //10 minutes = 600000ms
			StimCond				= 1; //0 = stim starting block 1 (min 0), 1 = stim starting block 2 (min 10)

			////////// Training-specific variables - allow user to use fixed distractor locations and identities
			ArrStruct	 			= 1; // 1 = Sets locations to fixed eccentricity and angle, set using SearchEcc below, 0 = contextual cueing
			//For Capture Task: 0 = normal target/dist positions, 1 = only lateral and/or up/down positions (lat only vs lat up/down depends on TgAng set in LOCRAND.pro being 2 vs 4)
			//TrainOrt 				= 1; // 1 = Sets orientations to fixed orient, using TargOrt and DistOrt below//
			TargTrainSet			= 1; //1 = random loc, 2= fixed pos. 1, 3 = fixed pos 2., etc. up to max location number
			DistOrt					= 4; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT,    
			TargOrt					= 2; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT 
			SearchEcc				= 8; //Eccentricity in degrees; use to make fixed eccentricity 
			SingMode				= 0; //0=classic search, 1=singleton present/capture task
			SingCol					= 1; 
			PercSingTrl				= 50; //Percentage of trials where singleton is present, see LOC_RAND.pro for code
			soa_mode				= 0; //fixation response soa; 1=on, 0=off 

			///////// Use this variable to manipulate predictability of Fixation / Search ISI
			FixJitter			    = 0;  // 0 = Random fixation-search ISI; 1 = Fixed; see sets_trl.pro
			//////////
			
			catch_hold_time			= 175;
			Perc_catch				= 0; //percent catch trials
			TargetType				= 1; //1 = L, 2 = T
			PlacPres				= 1; //1 = no placeholders,  2 = placeholders
			SetSize					= 8; //SS1 = 1, SS2 = 2, etc. up to set size 12
			// Select Search task and Target/Distractor for Singleton Search
			SearchType				= 2; //Hetero = 1, Homo = 2, Homo Random = 3, Singleton search mode = 4 (target/dist swap trial to trial), 5 = All Orientation of target, for detection only (area 45b pilot)
			//TargOrt variables below only necessary for singleton search mode
			TargOrt1				= 3; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT 
			TargOrt2				= 3; //T/L - 1=UP, 2=INV, 3=LEFT, 4=RIGHT 

			//search_fix_time			= 1000; //equiv to SOA - amount of time the fixation point stays on after target onset; fix off = go signal
			max_plactime			= 700;
			min_plactime			= 1000;
			
			targ_hold_time			= 200;
			Max_sacc_duration		= 50;
			Min_saccade_time		= 70;
			Max_saccade_time 		= 300;
			Min_Holdtime			= 300;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation		
					
			Go_weight				= 100.0;
			Stop_weight				= 0.0;
			Ignore_weight			= 0.0;
			
			NonSingleton_color[r_]		= 35;	
			NonSingleton_color[g_]		= 33;	
			NonSingleton_color[b_]		= 27; 

			
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;			
			
			Eccentricity_list[0]	= 3;	
			Eccentricity_list[1]	= 6;
			Eccentricity_list[2]	= 9;
			Eccentricity_list[3]	= 6;
			Eccentricity_list[4]	= 6;	
			Eccentricity_list[5]	= 9;
			Eccentricity_list[6]	= 2;
			Eccentricity_list[7]	= 4;
			Eccentricity_list[8]	= 5;	
			Eccentricity_list[9]	= 6;
			Eccentricity_list[10]	= 8;
			Eccentricity_list[11]	= 9;
			
			Angle_list[0]			= 90; //12:00	
			Angle_list[1]			= 45;
			Angle_list[2]			= 0; //3:00
			Angle_list[3]			= 315;
			Angle_list[4]			= 270; //6:00
			Angle_list[5]			= 225;
			Angle_list[6]			= 180; //9:00
			Angle_list[7]			= 135;
			
			SOA_list[0] = 250;
			SOA_list[1] = 300;
			SOA_list[2] = 350;
			SOA_list[3] = 400;

			}		
	
		// FIXATION TASK SPECIFIC----------------------------------------------------------------------------
		
		if (state == run_fix_sess)
			{
			N_targ_pos = 9;
			
			Color_list[0,r_]		= 35;	// color of each target individually
			Color_list[0,g_]		= 33;	// color of each target individually
			Color_list[0,b_]		= 27;	// color of each target individually
							
			Color_list[1,r_]		= 35;
			Color_list[1,g_]		= 33;
			Color_list[1,b_]		= 27;
							
			Color_list[2,r_]		= 35;
			Color_list[2,g_]		= 33;
			Color_list[2,b_]		= 27;
									
			Color_list[3,r_]		= 35;
			Color_list[3,g_]		= 33;
			Color_list[3,b_]		= 27;
							
			Color_list[4,r_]		= 35;
			Color_list[4,g_]		= 33;
			Color_list[4,b_]		= 27;
									
			Color_list[5,r_]		= 35;
			Color_list[5,g_]		= 33;
			Color_list[5,b_]		= 27;
									
			Color_list[6,r_]		= 35;
			Color_list[6,g_]		= 33;
			Color_list[6,b_]		= 27;
									
			Color_list[7,r_]		= 35;
			Color_list[7,g_]		= 33;
			Color_list[7,b_]		= 27;
			
			Color_list[8,r_]		= 35;
			Color_list[8,g_]		= 33;
			Color_list[8,b_]		= 27;
		
		
			Size_list[0]			= 0.5;	// size of each target individually (degrees)
			Size_list[1]			= 0.5;
			Size_list[2]			= 0.5;
			Size_list[3]			= 0.5;
			Size_list[4]			= 0.5;
			Size_list[5]			= 0.5;
			Size_list[6]			= 0.5;
			Size_list[7]			= 0.5;
			Size_list[8]			= 0.5;
			
			Angle_list[0]			= 0;	// angle of each target individually (degrees)
			Angle_list[1]			= 90;
			Angle_list[2]			= -90;
			Angle_list[3]			= 180;
			Angle_list[4]			= 0;
			Angle_list[5]			= 135;
			Angle_list[6]			= 45;
			Angle_list[7]			= -135;
			Angle_list[8]			= -45;
			
			Eccentricity_list[0]	= 0.0;	// distance of each target from center of screen individually (degrees)
			Eccentricity_list[1]	= 11.0;
			Eccentricity_list[2]	= 11.0;
			Eccentricity_list[3]	= 11.0;
			Eccentricity_list[4]	= 11.0;
			Eccentricity_list[5]	= 15.6;
			Eccentricity_list[6]	= 15.6;
			Eccentricity_list[7]	= 15.6;
			Eccentricity_list[8]	= 15.6;
			
			Fix_win_size = 0;
			Targ_win_size = 2.5;
			
			Allowed_fix_time = 1200;
			Max_saccade_time = 800;
			Targ_hold_time = 600;
			}

		// DELAYED SACCADE TASK SPECIFIC----------------------------------------------------------------------------
		
		if (state == run_delayed_sess)
			{	
			Go_weight				= 100;
			Stop_weight				= 0;
			Ignore_weight			= 0;
			
			Min_Holdtime			= 500;  // minimum time after fixation before target presentation
			Max_Holdtime			= 1000; // maximum time after fixation before target presentation
			Min_SOA					= 200;	// minimum time between target onset and fixation offset (mem guided only)
			Max_SOA					= 200;	// maximum time between target onset and fixation offset (mem guided only)
			Reward_Offset			= 0;	// how long after tone before juice is given (needed to seperate primary and secondary reinforcement)
			Exp_juice 				= 0;
			
			N_targ_pos				= 8;
		
			Angle_list[0]			= 90;	// angle of each target individually (degrees)
			Angle_list[1]			= 270;//270
			Angle_list[2]			= 0;
			Angle_list[3]			= 180;
			Angle_list[4]			= 45;
			Angle_list[5]			= 135;
			Angle_list[6]			= 225;
			Angle_list[7]			= 315;
		
			Size_list[0]			= 1.5;	// size of each target individually (degrees)
			Size_list[1]			= 1.5;
			Size_list[2]			= 1.5;
			Size_list[3]			= 1.5;
			Size_list[4]			= 1.5;
			Size_list[5]			= 1.5;
			Size_list[6]			= 1.5;
			Size_list[7]			= 1.5;
			Size_list[8]			= 1.5;
			Size_list[9]			= 1.5;
			Size_list[10]			= 1.5;
			Size_list[11]			= 1.5;
		
			SOA_list[0] = 300;
			SOA_list[1] = 300;
			SOA_list[2] = 400;
			SOA_list[3] = 400;
			SOA_list[4] = 500;
			SOA_list[5] = 400;
			SOA_list[6] = 900;
			SOA_list[7] = 1000;
			SOA_list[8] = 0;
			SOA_list[9] = 0;
			SOA_list[10] = 0;
			SOA_list[11] = 0;
			SOA_list[12] = 0;
			SOA_list[13] = 0;
			SOA_list[14] = 0;
			SOA_list[15] = 0;
			SOA_list[16] = 0;
			SOA_list[17] = 0;
			SOA_list[18] = 0;
			SOA_list[19] = 0;
			}
		//--------------------------------------------------------------------------------------------------------------------
		// Flash task
		if (state == run_flash_sess)
			{
			Success_Tone_medR 	= 1600;
			Base_Reward_time 	= 100;
			Fix_win_size 		= 22;
			}
	}	

		
}__HEADER__
DEL_PGS.pro
__FOOTER__
//modifed by Namsoo 5/23/2012

declare hide float 	Size;   																	// Global output will be sent as stobes...        										
declare hide float 	Angle;        																// ...by INFOS.pro at trial end.
declare hide float 	Eccentricity; 
declare hide int   	Color;								

declare DEL_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ);                       										// see GRAPHS.pro

process DEL_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ)	                       										// see GRAPHS.pro
	{										
											
	declare hide float 	pd_eccentricity;										
	declare hide float	pd_angle;										
	declare hide float 	opposite;										
	declare hide float	adjacent;										
	declare hide float	stim_ecc_x;										
	declare hide float	stim_ecc_y;										
	declare hide int   	open        = 0;										
	declare hide int   	fill        = 1;										
	
	// number the pgs that need to be drawn
	declare hide int   	blank       		= 0;	
	declare hide int	fixation_pd			= 1;										
	declare hide int	fixation    		= 2;
	declare hide int	fixation_target_pd	= 3;	
	declare hide int    fixation_target		= 4;
	declare hide int	target_pd   		= 5;	
	declare hide int	target       		= 6;	

	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Calculate screen coordinates for stimuli on this trial								
	size         = Size_list[curr_target];   													// Figure out the attributes of the current target 
	angle        = Angle_list[curr_target]; 													// THESE USER DEFINED GLOBALS ARE ARRAYS SO 
	eccentricity = Eccentricity_list[curr_target];												// THEY CANNOT BE PASSED INTO PROCESSES
	color        = curr_target + 1;																// zero is reserved for black.  see SET_CLRS.pro							
													
	stim_ecc_x = cos(angle) * eccentricity;														// find the center of the box in x and y space based on the angle and eccentricity...
	stim_ecc_y = sin(angle) * eccentricity * -1;												
	oMove(object_targ, stim_ecc_x*deg2pix_X, stim_ecc_y*deg2pix_Y);								// ...and move the animated graph object there.
	oSetAttribute(object_targ, aSIZE, size*deg2pix_X, size*deg2pix_Y);							// while we are at it, resize fixation object on animated graph
	oSetAttribute(object_fix, aSIZE, 1*deg2pix_X, 1*deg2pix_Y);									
	
	opposite = ((scr_height/2)-pd_bottom);														// Figure out angle and eccentricity of photodiode marker in pixels
	adjacent = ((scr_width/2)-pd_left);                                                         // NOTE: I am assuming your pd is in the lower left quadrant of your screen
	pd_eccentricity = sqrt((opposite * opposite) + (adjacent * adjacent));
	pd_angle = rad2deg(atan (opposite / adjacent));
	pd_angle = pd_angle + 180; 																	//change this for different quadrent or write some code for flexibility
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 1
	// print("fixation with photodiode");
	dsendf("rw %d,%d;\n",fixation_pd,fixation_pd); 												// draw second pg of video memory
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 2	  
	// print("fixation");
	dsendf("rw %d,%d;\n",fixation,fixation);   													// draw 3rd pg of video memory                                       
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 3	  
	// print("fixation and target with photodiode");
	dsendf("rw %d,%d;\n",fixation_target_pd,fixation_target_pd);   								// draw 4th pg of video memory                                       
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 4	 
	// print("fixation and target");
	dsendf("rw %d,%d;\n",fixation_target,fixation_target);  												// draw pg 5                                        
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
    nexttick;
	
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 5	  
	// print("target_pd");
	dsendf("rw %d,%d;\n",target_pd,target_pd);  														// draw pg 6                                        
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);         	// draw target
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 6	  
	// print("target_pd");
	dsendf("rw %d,%d;\n",target,target);  														// draw pg 6                                        
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);         	// draw target
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 0 (last is displayed first)	
	// print("blank"); 																			
	dsendf("rw %d,%d;\n",blank,blank);                                          				// draw the blank screen last so that it shows up first
	dsendf("cl:\n");                                                                            // clear screen (that's all)
	nexttick;
	}
	
	
	
	__HEADER__
DELAYED.pro
__FOOTER__
//Modified by Namsoo 5/23/2012

declare DELAYED();						

process DELAYED()     
	{
	declare hide int run_delayed_sess = 6;
	declare hide int run_idle		= 0;
			
	Trl_number				= 1;
	Block_number			= 1;
	LastStopOutcome			= 2;				// This is a kluge which tells END_TRIAL.pro that no change in stop signal has occurred
	Comp_Trl_number			= 0;
	
	if (Last_task != run_delayed_sess)				// Only do this if we have gone into another task or if this is first run of day.
		{
		system("dialog Select_Monkey");
		spawnwait DEFAULT(State,				// Set all globals to their default values.
						Monkey,					// subject 0 is just default values.  no monkey
						Room);			
		Last_task = run_delayed_sess;
		}
		
	dsend("DM RFRSH");         					// This code sets up a vdosync macro definition to wait a specified ...
	if (Room == 23)            					// ...number of vertical retraces based on the room in which we are    ...
		{                      					// ...recording.  This kluge is necessary because vdosync operates     ...
		dsendf("vw %d:\n",1);  					// ...differently in the different rooms.  In 028 a command to wait    ...
		}                      					// ...2 refresh cycles usually only waits for one and a command to     ...
	else                       					// ...wait for 1 usually only waits for 0.  Room 029 and 023 appear to ...
		{                      					// ...work properly.
		dsendf("vw %d:\n",2);					
		}
	dsend("EM RFRSH");
	
	while(!OK)									
		{
		nexttick;
		if(Set_monkey)
			{
			spawnwait DEFAULT(State,			// Set all globals to their default values based on the monkey.
						Monkey,					
						Room);	
			Set_monkey = 0;
			}
		}
	
	spawnwait GOODVARS(State);


	spawnwait SET_CLRS(n_targ_pos);
	
	spawnwait SETD_TRL(n_targ_pos,				// Select variables for the first mem guided...					
				min_holdtime,           		// ...trial.  This happens once outside of the while...
				max_holdtime,           		// ...loop just to set up for the first iteration. After...
				expo_jitter,            		// ...that SETM_TRL.pro will be called by END_TRL.pro.
				min_soa,
				max_soa,
				expo_jitter_soa);
				

	Event_fifo[Set_event] = DelayedHeader_;			// Set a strobe to identify this file as a mem guided session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = Identify_Room_;		// Set a strobe to identify this file as a Cmanding session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = Room;				// Set a strobe to identify this file as a Cmanding session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	
	Event_fifo[Set_event] = min_soa;			// Set a strobe to identify Min_soa		<- added by Namsoo
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = max_soa;			// Set a strobe to identify Max_soa
	Set_event = (Set_event + 1) % Event_fifo_N; //...incriment event queue.
	
	nexttick 10;								// to prevent buffer overflows after task reentry.
	
	CheckMotion = 1;							// set global for watching the motion detector
	spawn WATCHMTH;								// start watching the mouth motion detector if present
	spawn WATCHBOD;								// start watching motion detector for body if present
	
	while (State == run_delayed_sess)				// while the user has not yet terminated the mem guided task
		{
		

		spawnwait DELTRIAL(allowed_fix_time,	// run a trial with variables defined by SETM_TRL.pro
				curr_holdtime,
				curr_soa,			
				max_saccade_time, 		
				max_sacc_duration, 		
				targ_hold_time,			
				object_fix);			
		
		
		spawnwait END_TRL(trl_outcome);			// end a trial with trl_outcome set in MEMTRIAL.pro
				
		nexttick;								// wait at least one cycle and do it all again
		
		while(Pause)							// gives the user the ability to pause the task without ending it
			{
			nexttick;
			}
		
		}

												// the State global variables allow a control structure...
												// ...to impliment the task.
	State = run_idle;							// If we are out of the while loop the user wanted...
												// ...to stop mem guided.
	//CheckMotion = 0;							// stop watching for movement.
												
	oDestroy(object_fixwin);					// destroy all task graph objects
	oDestroy(object_targwin);
	oDestroy(object_fix);
	oDestroy(object_targ);
	oDestroy(object_eye);
	
	oSetGraph(gleft,aCLEAR);					// clear the left graph
	
		
	spawn IDLE;									// return control to IDLE.pro
    
	}__HEADER__
DELTRIAL.pro
__FOOTER__
//Modified by Namsoo 5/23/2012

declare hide int Trl_Outcome;			// Global output used in END_TRL
declare hide int Trl_Start_Time;		// Global output used in END_TRL
declare hide int ReactionTime;

declare DELTRIAL(allowed_fix_time,		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime, 			// see SETM_TRL.pro
				curr_soa,				// see SETM_TRL.pro
				max_saccade_time, 		// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,			// see ALL_VARS.pro and DEFAULT.pro
				object_fix);			// animated graph object

process DELTRIAL(allowed_fix_time, 		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime,     		// see SETM_TRL.pro
				curr_soa,				// see SETM_TRL.pro
				max_saccade_time,  		// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,    		// see ALL_VARS.pro and DEFAULT.pro
				object_fix)        		// animated graph object
	{
	
	
	// Number the trial stages to make them easier to read below
	declare hide int 	need_fix  	= 1;
	declare hide int 	fixating  	= 2;
	declare hide int 	targ_on   	= 3;
	declare hide int	fix_off		= 4;
	declare hide int 	in_flight 	= 5;
	declare hide int 	on_target 	= 6;	
	declare hide int 	stage;
	
	// Number the stimuli pages to make reading easier
	declare hide int   	blank       		= 0;
	declare hide int	fixation_pd 		= 1;
	declare hide int	fixation    		= 2;
	declare hide int	fixation_target_pd	= 3;
	declare hide int    fixation_target     = 4;
	declare hide int	target_pd   		= 5;	
	declare hide int	target       		= 6;	
	
	// Code all possible outcomes (codes are shared with countermanding for efficiency)
	declare hide int constant no_fix		= 1;	// never attained fixation
	declare hide int constant broke_fix		= 2;	// attained and then lost fixation before target presentation
	declare hide int constant sacc_out		= 5;	// made an inaccurate saccade out of the target box
	declare hide int constant broke_targ	= 6;	// didn't hold fixation at the target for long enough
	declare hide int constant early_sacc	= 9;	// made a saccade before fixation offset
	declare hide int constant no_sacc		= 10;	// didn't make a saccade after cued to do so
	declare hide int constant correct_sacc	= 11;	// correct saccade after cue
	declare hide int constant anticip_sacc  = 13;
	
	// Timing variables which will be used to time task
	declare hide float 	fix_on_time; 	
	declare hide float 	aquire_fix_time;
	declare hide float  targ_time;	
	declare hide float	fix_off_time;
	declare hide float  saccade_time;
	declare hide float	aquire_targ_time;	
	
	// This variable makes the while loop work
	declare hide int 	trl_running;
	
	
	
	// Have to be reset on every iteration since 
	// variable declaration only occurs at load time
	trl_running 		= 1;
	stage 				= need_fix;
	
	// Tell the user what's up
	printf(" \n");
	printf("# %d",Trl_number);
	printf(" (%d",Comp_Trl_number);
	printf(" correct)\n");

	
	
																			// HERE IS WHERE THE FUN BEGINS
	Event_fifo[Set_event] = TrialStart_;									// queue TrialStart_ strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	dsendf("vp %d\n",fixation_pd);											// flip the pg to the fixation stim with pd marker
	fix_on_time = time();  													// record the time
	Event_fifo[Set_event] = FixSpotOn_;										// queue strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	dsendf("XM RFRSH:\n"); 													// wait for one retrace
	dsendf("vp %d\n",fixation);												// flip the pg to the fixation stim without pd marker
	oSetAttribute(object_fix, aVISIBLE); 									// turn on the fixation point in animated graph
	
	
	while (trl_running)														// trials ending will set trl_running = 0
		{	
		
	//--------------------------------------------------------------------------------------------
	// STAGE need_fix (the fixation point is on, but the subject hasn't looked at it)
		if (stage == need_fix)
			{		
			if (In_FixWin)													// If the eyes have entered the fixation window (before time, see below)...
				{
				aquire_fix_time = time();									// ...function call to time to note current time and...
				Trl_Start_Time = aquire_fix_time;							// Global output for timing iti
				Event_fifo[Set_event] = Fixate_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = fixating;											// ...advance to the next stage.
				}
			else if (time() > fix_on_time + allowed_fix_time)				// But if time runs out...
				{
				Trl_Outcome = no_fix;    									// TRIAL OUTCOME ABORT (no fixation)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen,...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Aborted (no fixation)\n");							// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}			
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE fixating (the subject is looking at the fixation point waiting for target onset)		
		else if (stage == fixating)
			{
			if (!In_FixWin)													// If the eyes stray out of the fixation window...
				{
				Trl_Outcome = broke_fix;									// TRIAL OUTCOME ABORT (broke fixation)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Aborted (broke fixation)\n");						// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}
			else if (In_FixWin && time() > aquire_fix_time + curr_holdtime)	// But if the eyes are still in the window at end of holdtime...
				{
				dsendf("vp %d\n",fixation_target_pd);						// ...flip the pg to the target with pd marker...	
				targ_time = time(); 										// ...record the time...
				dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
				dsendf("vp %d\n",fixation_target);									// ...flip the pg to the fixation point without pd marker.
				Event_fifo[Set_event] = Target_;										// queue strobe
				Set_event = (Set_event + 1) % Event_fifo_N;
				oSetAttribute(object_targ, aVISIBLE); 						// ...show target in animated graph...
														
				stage = targ_on;											// Advance to the next trial stage.				
				}
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE targ_on (the target has been presented but the subject is still fixating)		
		else if (stage == targ_on)
			{		
			if (!In_FixWin)													// If the eyes leave the fixation window...
				{
				Trl_Outcome = early_sacc;									// TRIAL OUTCOME ERROR (sacc before cued to do so)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (early saccade)\n");							// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}
			
			else if (In_FixWin &&  											// But if no saccade occurs...
				time() > targ_time + curr_soa)	 							// ...and the stim onset asychrony passes...
				{
				printf("       soa = %d\n",curr_soa);
				dsendf("vp %d\n",target_pd);										// Flip the pg to the blank screen with the photodiode marker...
				dsendf("XM RFRSH:\n"); 
				dsendf("vp %d\n",target);
				fix_off_time = time();										// ...and record the time that the fixation point was extinguished.
				Event_fifo[Set_event] = FixSpotOff_;						// Queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				stage = fix_off;											// ...and advance to the next stage.
				}	
			}



	//--------------------------------------------------------------------------------------------
	// STAGE fix_off (the fixation point has been turned off but the subject is still fixating)		
		else if (stage == fix_off)
			{
			if (!In_FixWin)													// If the eyes leave the fixation window...			
				{															// ...we have a saccade, so...
				saccade_time = time();										// ...record the time...
				Event_fifo[Set_event] = Saccade_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				ReactionTime = saccade_time - fix_off_time;
				printf("           rt = %d\n",ReactionTime);	// ...tell the user whats up...
				stage = in_flight;											// ...and advance to the next stage.
				}
			
			else if (In_FixWin &&  											// But if no saccade occurs...
				time() > fix_off_time + max_saccade_time) 					// ...and time for a saccade runs out...
				{
				Trl_Outcome = no_sacc;           							// TRIAL OUTCOME ERROR (no saccade after cue)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (no saccade)\n");								// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}	
				
			//else if (In_FixWin && ReactionTime < 150)
			//	{
			//	Trl_Outcome = anticip_sacc;
			//	dsendf("vp %d\n",blank);
			//	oSetAttribute(object_targ, aINVISIBLE);
			//	oSetAttribute(object_fix, aINVISIBLE);
			//	printf("Error (anticipatory saccade)\n");
			}			
			
			
	//--------------------------------------------------------------------------------------------
	// STAGE in_flight (eyes have left fixation window but have not entered target window)		
		else if (stage == in_flight)
			{
			if (In_TargWin)													// If the eyes get into the target window...
				{
//				dsendf("vp %d\n",target);								// ...flip the pg to the target with pd marker...	
				aquire_targ_time = time(); 									// ...record the time...
//				dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
//				dsendf("vp %d\n",target_pd);									// ...flip the pg to the target without pd marker.
				Event_fifo[Set_event] = Decide_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = on_target;											// ...and advance to the next stage of the trial.
				}
			else if (time() > saccade_time + max_sacc_duration)				// But, if the eyes are out of the target window and time runs out...
				{
				Trl_Outcome = sacc_out;   									// TRIAL OUTCOME ERROR (innacurrate saccade)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (inaccurate saccade)\n");						// ...tell the user whats up...
				trl_running = 0; 											// ...and terminate the trial.
				}
			}
		
		
		
	//--------------------------------------------------------------------------------------------
	// STAGE on_target (eyes have entered the target window.  will they remain there for duration?)	
		else if (stage == on_target)
			{
			if (!In_TargWin)												// If the eyes left the target window...
				{			
				Trl_Outcome = broke_targ;									// TRIAL OUTCOME ERROR (broke target fixation)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (broke target fixation)\n");					// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}		
			else if (In_TargWin  											// But if the eyes are still in the target window...
				&&  time() > aquire_targ_time + targ_hold_time)				// ...and the target hold time is up...				
				{
				Trl_Outcome = correct_sacc;									//TRIAL OUTCOME CORRECT (correct sacc trial)
				Event_fifo[Set_event] = Correct_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				printf("Correct (saccade)\n");								// ...tell the user whats up...
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				trl_running = 0;											// ...and terminate the trial.
				}			
			}
			
		nexttick;
		}
	}
	__HEADER__
DIO.pro
__FOOTER__
/* DIO.PRO - Definitions for use with TEMPO's DIO module
** Copyright 1994-2002 Reflective Computing.  All rights reserved.
**
*/

// OR these in dioSetMode() function(s) to set output TTL ports.

hide constant PORTA =    0x1;
hide constant PORTB =    0x2;
hide constant PORTC =    0x4;



__HEADER__
DRW_L.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// process DRW_T(angle,eccentricity,color,fill)
// Draw a T on the video sync screen
//
// INPUT
//	 size         = how big do you want the square to be?  (must know your virtual coordiate system)
//	 angle 		  = in cartesian coordinates
//   eccentricity = once again you must know your virtual coordiate system
//   color        = color of box (must know the current pallettes you are using)
//   fill         = 0 (no fill) or 1 (fill)
//   deg2pixX     = scaling factor to go between degrees and pixels (see SEL_COOR.pro)
//   deg2pixY     = same as above
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013

declare DRW_L(float angle, float eccentricity, int color, float orientation, int fill, float conversion_X, float conversion_Y);

//Declare Variables - now declared in ALL_VARS.pro
//declare hide constant llength = 2;
//declare hide constant lwidth = 0.1;

	
process DRW_L(float angle, float eccentricity, int color, float orientation, int fill, float conversion_X, float conversion_Y)
	{
	
	//spawnwait L_ORIENT;
	
	declare hide float stim_ecc_x;
	declare hide float stim_ecc_y;
	declare hide float half_length;
	declare hide float half_width;
	
	declare hide float LHx1;
	declare hide float LHy1;
	declare hide float LHx2;
	declare hide float LHy2;

	declare hide float LVx1;
	declare hide float LVy1;
	declare hide float LVx2;
	declare hide float LVy2;


	
	// find the center of the box in x and y space based on the angle and eccentricity
	stim_ecc_x = cos(angle) * eccentricity;
	stim_ecc_y = sin(angle) * eccentricity;

	// find locations of upper left and lower right corners based on location of center and size
	half_length = llength/2;
	half_width = lwidth/2;

if (orientation == 1) //Upright L 
	{
	LHx1       = ((stim_ecc_x + half_length)*conversion_X);
	LHy1       = ((stim_ecc_y - half_length)*conversion_Y);
	LHx2       = ((stim_ecc_x - half_length)*conversion_X);
	LHy2       = ((stim_ecc_y - (half_length - lwidth))*conversion_Y);
	
	LVx1       = ((stim_ecc_x - half_length)*conversion_X);
	LVy1       = ((stim_ecc_y + half_length)*conversion_Y);
	LVx2       = ((stim_ecc_x - (half_length - lwidth))*conversion_X);
	LVy2       = ((stim_ecc_y - half_length)*conversion_Y); 
	}
 else if (orientation == 2) //Inverted L
	{
	LHx1       = ((stim_ecc_x - half_length)*conversion_X);
	LHy1       = ((stim_ecc_y + half_length)*conversion_Y);
	LHx2       = ((stim_ecc_x + half_length)*conversion_X);
	LHy2       = ((stim_ecc_y + (half_length - lwidth))*conversion_Y);
	
	LVx1       = ((stim_ecc_x - half_length)*conversion_X);
	LVy1       = ((stim_ecc_y + half_length)*conversion_Y);
	LVx2       = ((stim_ecc_x - (half_length - lwidth))*conversion_X);
	LVy2       = ((stim_ecc_y - half_length)*conversion_Y);
	}
 else if (orientation == 3) //Mirror L/left tilt
	{
	LHx1       = ((stim_ecc_x + half_length)*conversion_X);
	LHy1       = ((stim_ecc_y - half_length)*conversion_Y);
	LHx2       = ((stim_ecc_x - half_length)*conversion_X);
	LHy2       = ((stim_ecc_y - (half_length - lwidth))*conversion_Y);
	
	LVx1       = ((stim_ecc_x + half_length)*conversion_X);
	LVy1       = ((stim_ecc_y - half_length)*conversion_Y);
	LVx2       = ((stim_ecc_x + (half_length - lwidth))*conversion_X);
	LVy2       = ((stim_ecc_y + half_length)*conversion_Y);
	}
else if (orientation == 4) //Mirror Inverted L/right tilt
	{
	LHx1       = ((stim_ecc_x - half_length)*conversion_X);
	LHy1       = ((stim_ecc_y + half_length)*conversion_Y);
	LHx2       = ((stim_ecc_x + half_length)*conversion_X);
	LHy2       = ((stim_ecc_y + (half_length - lwidth))*conversion_Y);
	
	LVx1       = ((stim_ecc_x + half_length)*conversion_X);
	LVy1       = ((stim_ecc_y - half_length)*conversion_Y);
	LVx2       = ((stim_ecc_x + (half_length - lwidth))*conversion_X);
	LVy2       = ((stim_ecc_y + half_length)*conversion_Y);
    }
	 

// send video sync command to draw desired T orientation
	dsendf("co %d;\n",color);
	
	if(fill == 0)
		{
		dsendf("ru %d,%d,%d,%d\n", LHx1, LHy1, LHx2, LHy2);  // Horizontal line
		dsendf("ru %d,%d,%d,%d\n", LVx1, LVy1, LVx2, LVy2);  // Vertical line 
		}
	else
		{
		dsendf("rf %d,%d,%d,%d\n", LHx1, LHy1, LHx2, LHy2);  // Horizontal line
		dsendf("rf %d,%d,%d,%d\n", LVx1, LVy1, LVx2, LVy2);  // Vertical line 
		}

	}
	
	__HEADER__
DRW_PLAC.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// process DRW_T(angle,eccentricity,color,fill)
// Draw a T on the video sync screen
//
// INPUT
//	 size         = how big do you want the square to be?  (must know your virtual coordiate system)
//	 angle 		  = in cartesian coordinates
//   eccentricity = once again you must know your virtual coordiate system
//   color        = color of box (must know the current pallettes you are using)
//   fill         = 0 (no fill) or 1 (fill)
//   deg2pixX     = scaling factor to go between degrees and pixels (see SET_COOR.pro)
//   deg2pixY     = same as above
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013

declare DRW_PLAC(float angle, float eccentricity, int color, int fill, float conversion_X, float conversion_Y);

process DRW_PLAC(float angle, float eccentricity, int color, int fill, float conversion_X, float conversion_Y)
	{
	
	
	/////////////////////////Below code is identical to DRW_SQR.pro. If using smaller width stimuli should revert to commented code
	declare hide float stim_ecc_x;
	declare hide float stim_ecc_y;
	declare hide float half_size;
	declare hide int ulx;
	declare hide int uly;
	declare hide int lrx;
	declare hide int lry;
	
	// find the center of the box in x and y space based on the angle and eccentricity
	stim_ecc_x = cos(angle) * eccentricity;
	stim_ecc_y = sin(angle) * eccentricity;

	// find locations of upper left and lower right corners based on location of center and size

		half_size = llength/2;

	
	ulx       = round((stim_ecc_x - half_size)*conversion_X);
	uly       = round((stim_ecc_y + half_size)*conversion_Y);
	lrx       = round((stim_ecc_x + half_size)*conversion_X);
	lry       = round((stim_ecc_y - half_size)*conversion_Y);

	
	// send video sync command to draw desired square
	dsendf("co %d;\n",color);
	
	if(fill == 0)
		{
		dsendf("ru %d,%d,%d,%d;\n",ulx,uly,lrx,lry);
		}
	else
		{
		dsendf("rf %d,%d,%d,%d;\n",ulx,uly,lrx,lry);
		}
		
		
		
		
		
	/* 
	declare hide float stim_ecc_x;
	declare hide float stim_ecc_y;
	declare hide float half_length;
	declare hide float half_width;
	//top horizontal placeholder line
	declare hide float PH1x1;
	declare hide float PH1y1;
	declare hide float PH1x2;
	declare hide float PH1y2;
	//middle horizontal placeholder line
	declare hide float PH2x1;
	declare hide float PH2y1;
	declare hide float PH2x2;
	declare hide float PH2y2;
	//bottom horizontal placeholder line
	declare hide float PH3x1;
	declare hide float PH3y1;
	declare hide float PH3x2;
	declare hide float PH3y2;
	//left vertical placeholder line
	declare hide float PV1x1;
	declare hide float PV1y1;
	declare hide float PV1x2;
	declare hide float PV1y2;
	//middle vertical placeholder line
	declare hide float PV2x1;
	declare hide float PV2y1;
	declare hide float PV2x2;
	declare hide float PV2y2;
	//right vertical placeholder line
	declare hide float PV3x1;
	declare hide float PV3y1;
	declare hide float PV3x2;
	declare hide float PV3y2;	
	
	// find the center of the box in x and y space based on the angle and eccentricity
	stim_ecc_x = cos(angle) * eccentricity;
	stim_ecc_y = sin(angle) * eccentricity;

	// find locations of upper left and lower right corners based on location of center and size
	half_length = llength/2;
	half_width = lwidth/2;


// top horizontal
	PH1x1       = ((stim_ecc_x - half_length)*conversion_X);
	PH1y1       = ((stim_ecc_y + half_length)*conversion_Y);
	PH1x2       = ((stim_ecc_x + half_length)*conversion_X);
	PH1y2       = ((stim_ecc_y + (half_length - lwidth))*conversion_Y);
// middle horizontal
	PH2x1       = ((stim_ecc_x - half_length)*conversion_X);
	PH2y1       = ((stim_ecc_y + half_width)*conversion_Y);
	PH2x2       = ((stim_ecc_x + half_length)*conversion_X);
	PH2y2       = ((stim_ecc_y - half_width)*conversion_Y);
//bottom horizontal
	PH3x1       = ((stim_ecc_x + half_length)*conversion_X);
	PH3y1       = ((stim_ecc_y - half_length)*conversion_Y);
	PH3x2       = ((stim_ecc_x - half_length)*conversion_X);
	PH3y2       = ((stim_ecc_y - (half_length - lwidth))*conversion_Y);
//left vertical	
	PV1x1       = ((stim_ecc_x - half_length)*conversion_X);
	PV1y1       = ((stim_ecc_y + half_length)*conversion_Y);
	PV1x2       = ((stim_ecc_x - (half_length - lwidth))*conversion_X);
	PV1y2       = ((stim_ecc_y - half_length)*conversion_Y); 
//middle vertical
	PV2x1       = ((stim_ecc_x - half_width)*conversion_X);
	PV2y1       = ((stim_ecc_y - half_length)*conversion_Y);
	PV2x2       = ((stim_ecc_x + half_width)*conversion_X);
	PV2y2       = ((stim_ecc_y + half_length)*conversion_Y);
//right vertical
	PV3x1       = ((stim_ecc_x + half_length)*conversion_X);
	PV3y1       = ((stim_ecc_y - half_length)*conversion_Y);
	PV3x2       = ((stim_ecc_x + (half_length - lwidth))*conversion_X);
	PV3y2       = ((stim_ecc_y + half_length)*conversion_Y);

	
// send video sync command to draw desired T orientation
	dsendf("co %d;\n",color);
	
	if(fill == 0)
		{
		dsendf("ru %d,%d,%d,%d\n", PH1x1, PH1y1, PH1x2, PH1y2);  // top horizontal line
		dsendf("ru %d,%d,%d,%d\n", PH2x1, PH2y1, PH2x2, PH2y2);  // middle horizontal line
		dsendf("ru %d,%d,%d,%d\n", PH3x1, PH3y1, PH3x2, PH3y2);  // bottom horizontal line
		
		dsendf("ru %d,%d,%d,%d\n", PV1x1, PV1y1, PV1x2, PV1y2);  // left vertical line
		dsendf("ru %d,%d,%d,%d\n", PV2x1, PV2y1, PV2x2, PV2y2);  // middle vertical line
		dsendf("ru %d,%d,%d,%d\n", PV3x1, PV3y1, PV3x2, PV3y2);  // right vertical line
		}
	else
		{
		dsendf("rf %d,%d,%d,%d\n", PH1x1, PH1y1, PH1x2, PH1y2);  // top horizontal line
		dsendf("rf %d,%d,%d,%d\n", PH2x1, PH2y1, PH2x2, PH2y2);  // middle horizontal line
		dsendf("rf %d,%d,%d,%d\n", PH3x1, PH3y1, PH3x2, PH3y2);  // bottom horizontal line
		
		dsendf("rf %d,%d,%d,%d\n", PV1x1, PV1y1, PV1x2, PV1y2);  // left vertical line
		dsendf("rf %d,%d,%d,%d\n", PV2x1, PV2y1, PV2x2, PV2y2);  // middle vertical line
		dsendf("rf %d,%d,%d,%d\n", PV3x1, PV3y1, PV3x2, PV3y2);  // right vertical line 
		} */

	}
	
	__HEADER__
DRW_SQR.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// process DRW_SQR(size,angle,eccentricity,color,fill)
// Draw a square on the video sync screen
//
// INPUT
//	 size         = how big do you want the square to be?  (must know your virtual coordiate system)
//	 angle 		  = in cartesian coordinates
//   eccentricity = once again you must know your virtual coordiate system
//   color        = color of box (must know the current pallettes you are using)
//   fill         = 0 (no fill) or 1 (fill)
//   deg2pixX     = scaling factor to go between degrees and pixels (see SET_COOR.pro)
//   deg2pixY     = same as above
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare DRW_SQR(float size, float angle, float eccentricity, int color, int fill, float conversion_X, float conversion_Y);

process DRW_SQR(float size, float angle, float eccentricity, int color, int fill, float conversion_X, float conversion_Y)
	{
	declare hide float stim_ecc_x;
	declare hide float stim_ecc_y;
	declare hide float half_size;
	declare hide int ulx;
	declare hide int uly;
	declare hide int lrx;
	declare hide int lry;
	
	// find the center of the box in x and y space based on the angle and eccentricity
	stim_ecc_x = cos(angle) * eccentricity;
	stim_ecc_y = sin(angle) * eccentricity;

	// find locations of upper left and lower right corners based on location of center and size
	half_size = size/2;
	ulx       = round((stim_ecc_x - half_size)*conversion_X);
	uly       = round((stim_ecc_y + half_size)*conversion_Y);
	lrx       = round((stim_ecc_x + half_size)*conversion_X);
	lry       = round((stim_ecc_y - half_size)*conversion_Y);

	
	// send video sync command to draw desired square
	dsendf("co %d;\n",color);
	
	if(fill == 0)
		{
		dsendf("ru %d,%d,%d,%d;\n",ulx,uly,lrx,lry);
		}
	else
		{
		dsendf("rf %d,%d,%d,%d;\n",ulx,uly,lrx,lry);
		}

	}__HEADER__
DRW_T.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// process DRW_T(angle,eccentricity,color,fill)
// Draw a T on the video sync screen
//
// INPUT
//	 size         = how big do you want the square to be?  (must know your virtual coordiate system)
//	 angle 		  = in cartesian coordinates
//   eccentricity = once again you must know your virtual coordiate system
//   color        = color of box (must know the current pallettes you are using)
//   fill         = 0 (no fill) or 1 (fill)
//   deg2pixX     = scaling factor to go between degrees and pixels (see SET_COOR.pro)
//   deg2pixY     = same as above
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013

declare DRW_T(float angle, float eccentricity, int color, float orientation, int fill, float conversion_X, float conversion_Y);


//Declare Variables - now declared in ALL_VARS.pro
// declare hide constant llength = 2;
// declare hide constant lwidth = 0.1;

process DRW_T(float angle, float eccentricity, int color, float orientation, int fill, float conversion_X, float conversion_Y)
	{
	
	//spawnwait T_ORIENT;
	
	declare hide float stim_ecc_x;
	declare hide float stim_ecc_y;
	declare hide float half_length;
	declare hide float half_width;
	
	declare hide float THx1;
	declare hide float THy1;
	declare hide float THx2;
	declare hide float THy2;

	declare hide float TVx1;
	declare hide float TVy1;
	declare hide float TVx2;
	declare hide float TVy2;


	
	// find the center of the box in x and y space based on the angle and eccentricity
	stim_ecc_x = cos(angle) * eccentricity;
	stim_ecc_y = sin(angle) * eccentricity;

	// find locations of upper left and lower right corners based on location of center and size
	half_length = llength/2;
	half_width = lwidth/2;

if (orientation == 1) //Upright T 
	{
	THx1       = ((stim_ecc_x - half_length)*conversion_X);
	THy1       = ((stim_ecc_y + half_length)*conversion_Y);
	THx2       = ((stim_ecc_x + half_length)*conversion_X);
	THy2       = ((stim_ecc_y + (half_length - lwidth))*conversion_Y);
	
	TVx1       = ((stim_ecc_x - half_width)*conversion_X);
	TVy1       = ((stim_ecc_y - half_length)*conversion_Y);
	TVx2       = ((stim_ecc_x + half_width)*conversion_X);
	TVy2       = ((stim_ecc_y + half_length)*conversion_Y);
	}
else if (orientation == 2) //Inverted T 
	{
	THx1       = ((stim_ecc_x + half_length)*conversion_X);
	THy1       = ((stim_ecc_y - half_length)*conversion_Y);
	THx2       = ((stim_ecc_x - half_length)*conversion_X);
	THy2       = ((stim_ecc_y - (half_length - lwidth))*conversion_Y);
	
	TVx1       = ((stim_ecc_x - half_width)*conversion_X);
	TVy1       = ((stim_ecc_y - half_length)*conversion_Y);
	TVx2       = ((stim_ecc_x + half_width)*conversion_X);
	TVy2       = ((stim_ecc_y + half_length)*conversion_Y); 
	}
else if (orientation == 3) //Left Tilted T 
	{
	THx1       = ((stim_ecc_x - half_length)*conversion_X);
	THy1       = ((stim_ecc_y + half_width)*conversion_Y);
	THx2       = ((stim_ecc_x + half_length)*conversion_X);
	THy2       = ((stim_ecc_y - half_width)*conversion_Y);
	
	TVx1       = ((stim_ecc_x - half_length)*conversion_X);
	TVy1       = ((stim_ecc_y + half_length)*conversion_Y);
	TVx2       = ((stim_ecc_x - (half_length - lwidth))*conversion_X);
	TVy2       = ((stim_ecc_y - half_length)*conversion_Y); 
	}
else if (orientation == 4) //Right Tilted T 
	{
	THx1       = ((stim_ecc_x - half_length)*conversion_X);
	THy1       = ((stim_ecc_y + half_width)*conversion_Y);
	THx2       = ((stim_ecc_x + half_length)*conversion_X);
	THy2       = ((stim_ecc_y - half_width)*conversion_Y);
	
	TVx1       = ((stim_ecc_x + half_length)*conversion_X);
	TVy1       = ((stim_ecc_y - half_length)*conversion_Y);
	TVx2       = ((stim_ecc_x + (half_length - lwidth))*conversion_X);
	TVy2       = ((stim_ecc_y + half_length)*conversion_Y);
    }
	

// send video sync command to draw desired T orientation
	dsendf("co %d;\n",color);
	
	if(fill == 0)
		{
		dsendf("ru %d,%d,%d,%d\n", THx1, THy1, THx2, THy2);  // Horizontal line
		dsendf("ru %d,%d,%d,%d\n", TVx1, TVy1, TVx2, TVy2);  // Vertical line 
		}
	else
		{
		dsendf("rf %d,%d,%d,%d\n", THx1, THy1, THx2, THy2);  // Horizontal line
		dsendf("rf %d,%d,%d,%d\n", TVx1, TVy1, TVx2, TVy2);  // Vertical line 
		}

	}
	
	__HEADER__
END_TRL.pro
__FOOTER__
//-------------------------------------------------------------------------------------------------------
// 1) Look at the outcome from the last trial
// 2) Roll the dice a few times to mix up reward and punish times if the user asked for it
// 3) Call the appropriate processes to end the trial with the calculated timings
// written by david.c.godlove@vanderbilt.edu 	January, 2011

#include C:/TEMPO/ProcLib/ABORT.pro
#include C:/TEMPO/ProcLib/SUCCESS.pro
#include C:/TEMPO/ProcLib/FAILURE.pro


declare END_TRL(int trl_outcome);

process END_TRL(int trl_outcome)
	{	
	// Code all possible outcomes (both cmanding and mem guided)
	declare hide int constant no_fix		= 1;		// never attained fixation
	declare hide int constant broke_fix		= 2;		// attained and then lost fixation before target presentation
	declare hide int constant go_wrong		= 3;		// never made saccade on a go trial (cmanding)
	declare hide int constant nogo_correct	= 4;		// successfully canceled trial (cmanding)
	declare hide int constant sacc_out		= 5;		// made an inaccurate saccade out of the target box
	declare hide int constant broke_targ	= 6;		// didn't hold fixation at the target for long enough
	declare hide int constant go_correct	= 7;		// correct saccade on a go trial (cmanding)
	declare hide int constant nogo_wrong	= 8;		// error noncanceled trial 
	declare hide int constant early_sacc	= 9;		// made a saccade before fixation offset
	declare hide int constant no_sacc		= 10;		// didn't make a saccade after cued to do so (mem guided)
	declare hide int constant correct_sacc	= 11;		// correct saccade (mem guided)
	declare hide int constant body_move		= 12;		// error body movement (for training stillness)	
	declare hide int constant anticip_sacc  = 13;
	declare hide int constant too_fast      = 14;		// made a saccade too quickly while in training to slow down
	declare					  now;			

	declare hide float play_the_odds;					// see if subject will randomly be rewarded or punished on this trial and by how much
	
	//--------------------------------------------------------------------------------------------------
	// Setting up reward
	
	if (Catch == 1) // If its a catch trial.. (currently only occurs during search task)
		{
		Reward_duration = Base_Reward_time/Catch_Rew;			//Smaller than normal reward for catch trials, since he doesn't have to do shit.
		Success_tone = Success_Tone_medR;               //
	
		Punish_time = Base_Punish_time;					//GLOBAL for use in INFOS.pro
		Failure_tone = Failure_Tone_medP;               //GLOBAL for use in INFOS.pro
		}
	else if (Catch == 0) // If its not a cathc trial...
		{
		Reward_duration = Base_Reward_time;				//GLOBAL for use in INFOS.pro
		Success_tone = Success_Tone_medR;               //GLOBAL for use in INFOS.pro
	
		Punish_time = Base_Punish_time;					//GLOBAL for use in INFOS.pro
		Failure_tone = Failure_Tone_medP;               //GLOBAL for use in INFOS.pro
		}

	
	Event_fifo[Set_event] = Block_number + 2730;					// ...queue strobe for Neuro Explorer
	Set_event = (Set_event + 1) % Event_fifo_N;	
	
	//----------------------------------------------------------------------------------------------------
	// 1) Aborted trial
	if (	trl_outcome == no_fix 			||			// If the subject failed to initiate the trial properly...
			trl_outcome == broke_fix		||
			trl_outcome == body_move)	
		{
		spawnwait ABORT;								// ...abort the trial (no intertrial interval or punish time).
		}

	//----------------------------------------------------------------------------------------------------
	// 2) Correct trial
	else if (	trl_outcome == go_correct 	||			// If the subject got the trial right...
				trl_outcome == nogo_correct	||
				trl_outcome == correct_sacc	||
				play_the_odds < Bonus_weight)			// ...or if the trial is chosen as a surprise rewarded trial...
		{

  				
		if (State == run_search_sess) 
			{
			
			Comp_Trl_number = Comp_Trl_number + 1;
			Consec_corr = Consec_corr + 1; // allows me to set how many correct trials in a row to get reward
			
			if (TrialTp == 1)
				{ 
				if (SingMode == 0)
					{				
					Rand_Comp_Trl_number = Rand_Comp_Trl_number + 1;	
					}
				else if (SingMode == 1)
					{
					if (DistPres == 1111)
						{
						Rand_Comp_Trl_DA = Rand_Comp_Trl_DA + 1;	
						}
					else if (DistPres == 2222)	
						{
						Rand_Comp_Trl_DP = Rand_Comp_Trl_DP + 1;	
						}
					}
				}
		 	else
				{
				Rep_Comp_Trl_number = Rep_Comp_Trl_number + 1;
				}	 
			}	
		else
			{
			Comp_Trl_number = Comp_Trl_number + 1;			// THIS IS PLACED INCORRECTLY.  IF THE TRIAL WAS CORRECT BUT UNREWARDED THIS WILL NOT COUNT
			}											// DON'T HAVE TIME TO FIX RIGHT NOW
				
			spawnwait SUCCESS(trial_length,					// ...give rewards and wait for the proper iti.
			inter_trl_int,
			trl_start_time,
			fixed_trl_length,
			success_tone,
			tone_duration,
			reward_offset);
		
		}

	//----------------------------------------------------------------------------------------------------
	// 3) Error trial
	else if (	trl_outcome	== go_wrong		||			// If the subject made an error after trial initiation...
				trl_outcome == no_sacc		||
				trl_outcome == sacc_out		||
				trl_outcome == broke_targ	||
				trl_outcome == nogo_wrong	||
				trl_outcome == early_sacc	||
				trl_outcome == anticip_sacc	||
				trl_outcome == too_fast		||
				play_the_odds < Dealer_wins_weight)		// ...or if the trial is chosen as a surprise punished trial...
		{

				
		if (State == run_search_sess) 
			{
			Comp_Trl_number = Comp_Trl_number + 1;
			if (TrialTp == 1)
				{
				if (SingMode == 0)
					{				
					rand_inacc_sacc = rand_inacc_sacc + 1;
					}
				else if (SingMode == 1)
					{
					if (DistPres == 1111)
						{
						rand_inacc_sacc_DA = rand_inacc_sacc_DA + 1;
						}
					else if (DistPres == 2222)	
						{
						rand_inacc_sacc_DP = rand_inacc_sacc_DP + 1;
						}
					}	
				}
			else
				{
					rep_inacc_sacc = rep_inacc_sacc + 1;
				}
			}	
		else
			{
			Comp_Trl_number = Comp_Trl_number;			// THIS IS PLACED INCORRECTLY.  IF THE TRIAL WAS CORRECT BUT UNREWARDED THIS WILL NOT COUNT
			}	
		
		spawnwait FAILURE(trial_length,					// ...give negative reinforcement and wait for iti +  timeout.
				inter_trl_int,
				trl_start_time,
				fixed_trl_length,
				failure_tone,
				punish_time);
						
		
		}
	
	// Calculate accuracy for each type of search trial individually, used to display ACC to user in SCHTRIAL.pro
	
	
	if (SingMode == 0)
		{
		RandPerAcc = (Rand_Comp_Trl_number/(Rand_Comp_Trl_number + rand_inacc_sacc))*100;
		RepPerAcc = (Rep_Comp_Trl_number/(Rep_Comp_Trl_number + rep_inacc_sacc))*100;
		}
	else if (SingMode == 1)
		{
		RandPerAcc_DA = (Rand_Comp_Trl_DA/(Rand_Comp_Trl_DA + rand_inacc_sacc_DA))*100;
		RandPerAcc_DP = (Rand_Comp_Trl_DP/(Rand_Comp_Trl_DP + rand_inacc_sacc_DP))*100;
		RepPerAcc = (Rep_Comp_Trl_number/(Rep_Comp_Trl_number + rep_inacc_sacc))*100;
		}
	//-----------------------------------------------------------------------------------------------------
	// 4) If the animal moved, and we are training stillness, impose a punishment
	while (Move_ct > 0)
		{
		now = time();
		while (time() < now + bmove_tout)
			{
			nexttick;
			}
		Move_ct = Move_ct - 1;
		}
		
	Trl_number = Trl_number + 1;
	
	}__HEADER__
EVENTDEF.pro
__FOOTER__
// These codes are the numbers they are for historic reasons.
// Many are not currently being used and could be discarded.
// This is hold over garbage from the bad old days.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare hide constant FixSpotOn_		= 2301;
declare hide constant Fixate_			= 2660;
declare hide constant PlacOn_			= 2320;
declare hide constant Target_			= 2651; 
declare hide constant FixSpotOff_		= 2300;
declare hide constant StopSignal_		= 2653;
declare hide constant TrialStart_		= 1666;
declare hide constant FixError_			= 2750; //Must Check to be sure.
declare hide constant GoSaccade_		= 2751; //Must Check to be sure.
declare hide constant GoError_			= 2752; //Must Check to be sure.
declare hide constant NOGOWrong_		= 2753; //Must Check to be sure.
declare hide constant GoTargFixError_	= 2754; //Must Check to be sure.
declare hide constant Abort_ 			= 2620;
declare hide constant Correct_ 			= 2600;
declare hide constant GOCorrect_ 		= 2755;
declare hide constant NOGOCorrect_ 		= 2756;
declare hide constant CatchCorrect_ 	= 2757;
declare hide constant CatchIncorrectG_ 	= 2758;
declare hide constant CatchIncorrectNG_	= 2759;
declare hide constant BreakTFix_		= 2760;
declare hide constant EarlySaccade_		= 2761;
declare hide constant Reward_ 			= 2727;
declare hide constant Tone_				= 2001;
declare hide constant Error_tone		= 776;  //Strobe for Neuro Explorer
declare hide constant Reward_tone		= 777;	//Strobe for Neuro Explorer
declare hide constant Error_sacc		= 887;  //Strobe for Neuro Explorer
declare hide constant Correct_sacc		= 888;	//Strobe for Neuro Explorer
//Note that reward SIZE is being sent after this as it's own strobe
declare hide constant ExtraReward_ 		= 2777;
//Note that reward SIZE is being sent after this as it's own pulse
declare hide constant SoundOnReward_ 	= 2778;
declare hide constant SoundNoReward_ 	= 2779;
declare hide constant Eot_ 				= 1667;
declare hide constant CmanHeader_ 		= 1501;
declare hide constant MemHeader_		= 1502;
declare hide constant GONOGOHeader_		= 1503;
declare hide constant DelayedHeader_    = 1504;
declare hide constant SearchHeader_     = 1507;
declare hide constant CaptureHeader_     = 1508;
declare hide constant Identify_Room_	= 1500; // Room 28
declare hide constant ShamStim_ 		= 665;
declare hide constant Stimulation_ 		= 666;
declare hide constant EndStim_ 			= 667;
//Note that this is followed by a 1 or a 2 if MultElectrodeStimFlag is set depending on the stim channel
declare hide constant ZeroEyePosition_ 	= 2302;
declare hide constant VSyncSynced_		= 999; //This is a bit weird.  Looks like we are waiting to hear back from videosync that all commands are out of buffer?
declare hide constant Saccade_ 			= 2810;
//Note followed by another TTL == 2820 + trials[1] (looks like it classifies trial type)
declare hide constant Decide_ 			= 2811;
declare hide constant MouthBegin_ 		= 2655;
declare hide constant MouthEnd_ 		= 2656;
declare hide constant MapHeader_ 		= 1503;
declare hide constant FixWindow_ 		= 2770;
declare hide constant TargetWindow_		= 2771;

/* MUST CHECK ALL THAT FOLLOWS IN TRANSLATED VARIABLES (MY VERSION DIED WITHOUT NETWORK) */
declare hide constant Staircase_ 		= 2772;
declare hide constant Neg2Reinforcement_= 2773; //?????
declare hide constant Feedback_ 		= 2774; //????? 
declare hide constant RewardSize_ 		= 2927;
declare hide constant TrialInBlock 		= 2928;
// declare hide constant SendStimInfo_ 	= 7000; // MUST CHANGE. TOO BIG
declare hide constant SendPenatrInfo_ 	= 2929;
declare hide constant TargetPre_ 		= 2650; //?????
declare hide constant StopOn_ 			= 2654; //?????
declare hide constant StimFailed_ 		= 667;

declare hide constant StartInfos_		= 2998;
declare hide constant EndInfos_			= 2999;
declare hide float 	  InfosZero			= 3000.0;



__HEADER__
FAILURE.pro
__FOOTER__
//---------------------------------------------------------------------------------------------------------------------
// declare FAILURE(int trial_length,
				// int inter_trl_int,
				// int trl_start_time,
				// int fixed_trl_length,
				// int failure_tone,
				// int punish_time);
// Give negative reinforcement, set variables for the next trial, 
// send all trial event codes to plexon, and impose the correct 
// inter trial interval + timeout.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare FAILURE(int trial_length,									// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				int inter_trl_int,
				int trl_start_time,
				int fixed_trl_length,
				int failure_tone,
				int punish_time);
				
process FAILURE(int trial_length,									// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				int inter_trl_int,
				int trl_start_time,
				int fixed_trl_length,
				int failure_tone,
				int punish_time)
	{
	declare hide int trl_end_time;
	
	declare hide int run_cmd_sess = 1;								// state 1 is countermanding
	declare hide int run_mg_sess = 3;								// state 3 is mem guided sacc
	declare hide int run_gonogo_sess = 4;
	declare hide int run_delayed_sess = 6;
	declare hide int run_search_sess = 7;


	spawn TONE(failure_tone,tone_duration);							// present negative tone
	
	Event_fifo[Set_event] = Tone_;									// ...queue strobe...
	Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue...
	
	Event_fifo[Set_event] = Error_tone;								// ...queue strobe for Neuro Explorer...
	Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue...
	
	trl_end_time = time();											// record the time b/c the trial is now over
	
	Event_fifo[Set_event] = Eot_;									// ...queue strobe... for end of trial
	Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue...
	
	
	spawnwait INFOS();												// ...queue a big ole` pile-o-strobes for plexon
	nexttick 10;													// Give TEMPO a chance to catch its breath before attempting.. 
                                                                    // ...RDX communication with vdosync.
	                                                                // NOTE: if you add a bunch more strobes to INFOS.pro and you...
	                                                                // start getting buffer overflow errors increase the number of nextticks.
	
	if (State == run_cmd_sess)
		{
		spawn SETC_TRL(n_targ_pos,			
					go_weight,				
					stop_weight,        				// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
					ignore_weight,              
					staircase,                      
					n_SSDs,                         
					min_holdtime,                   
					max_holdtime,                   
					expo_jitter);  
		}
	else if (State == run_search_sess)
		{
		Consec_corr = 0; //reset consecutive correct counter
		spawnwait SETS_TRL(n_targ_pos,			
					go_weight,				
					stop_weight,        				// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
					ignore_weight,              
					staircase,                      
					n_SSDs,                         
					min_holdtime,                   
					max_holdtime,                   
					expo_jitter);  
		}	
	else if (State == run_mg_sess)
		{
		spawn SETMGTRL(n_targ_pos,							// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				 go_weight,
				 stop_weight,
				 ignore_weight,
				 n_SOAs,
				 min_holdtime,
				 max_holdtime,
				 expo_jitter,
				 expo_jitter_soa);
		}
	else if (State == run_gonogo_sess)
		{
		spawn	SETG_TRL(n_targ_pos,				// Select variables for the first mem guided...					
				min_holdtime,           		// ...trial.  This happens once outside of the while...
				max_holdtime,           		// ...loop just to set up for the first iteration. After...
				expo_jitter,            		// ...that SETM_TRL.pro will be called by END_TRL.pro.
				min_soa,
				max_soa,
				expo_jitter_soa);
		}
		
	else if (State == run_delayed_sess)
		{
		spawn	SETD_TRL(n_targ_pos,				// Select variables for the first mem guided...					
				min_holdtime,           		// ...trial.  This happens once outside of the while...
				max_holdtime,           		// ...loop just to set up for the first iteration. After...
				expo_jitter,            		// ...that SETM_TRL.pro will be called by END_TRL.pro.
				min_soa,
				max_soa,
				expo_jitter_soa);
		}	
		
	if(LastStopOutcome != 2)										// quick way to check if last trial was a stop trial
		{
		spawn UPD8_INH(curr_ssd, 									// update the inh graph
				laststopoutcome,
				decide_ssd);
		}
				
																	// Impose the correct intertrial interval and timeout based on user input
	if (fixed_trl_length)											// Did you want a fixed trial length?
		{                                                           
		while(time() < trl_start_time + trial_length + punish_time) // Then figure out how much time has elapsed since trial start...
			{                                                       
			nexttick;                                               // ...and continue to wait until time is up + timeout.
			}                                                       
		}                                                           
	else                                                            // Did you want a fixed intertrial interval?
		{                                                           
		while (time() < trl_end_time + inter_trl_int + punish_time) // Then watch the time since trial end...
			{                                                       
			nexttick;                                               // ...and wait until time is up + timeout.
			}		                                                
		}
	}__HEADER__
FIX_PGS.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// Figure out stimulus that will be needed on the next fixation trial and
// place it into video memory.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

							

declare FIX_PGS(int curr_target, 																// set SETC_TRL.pro				
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				int object_targ);                        										// see GRAPHS.pro

process FIX_PGS(int curr_target, 																// set SETC_TRL.pro				
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				int object_targ)                        										// see GRAPHS.pro
	{										
	declare hide float 	size;   																	// Global output will be sent as stobes...        										
	declare hide float 	angle;        																// ...by INFOS.pro at trial end.
	declare hide float 	eccentricity; 
	declare hide int   	color;									
										
	declare hide float	stim_ecc_x;										
	declare hide float	stim_ecc_y;										
	declare hide int   	open        = 0;										
	declare hide int   	fill        = 1;										
	
	// number the pgs that need to be drawn
	declare hide int   	blank       = 0;										
	declare hide int	target      = 1;
	
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Calculate screen coordinates for stimuli on this trial								
	size         = Size_list[curr_target];   													// Figure out the attributes of the current target 
	angle        = Angle_list[curr_target]; 													// THESE USER DEFINED GLOBALS ARE ARRAYS SO 
	eccentricity = Eccentricity_list[curr_target];												// THEY CANNOT BE PASSED INTO PROCESSES
	color        = curr_target + 1;																// zero is reserved for black.  see SET_CLRS.pro							
													
	stim_ecc_x = cos(angle) * eccentricity;														// find the center of the box in x and y space based on the angle and eccentricity...
	stim_ecc_y = sin(angle) * eccentricity * -1;												
	oMove(object_targ, stim_ecc_x*deg2pix_X, stim_ecc_y*deg2pix_Y);								// ...and move the animated graph object there.
	oSetAttribute(object_targ, aSIZE, size*deg2pix_X, size*deg2pix_Y);							// while we are at it, resize fixation object on animated graph
	oSetAttribute(object_fix, aSIZE, 1*deg2pix_X, 1*deg2pix_Y);									
	
	
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 1
	// print("target");
	dsendf("rw %d,%d;\n",target,target); 														// draw first pg of video memory
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
    
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 0 (last is displayed first)	
	// print("blank"); 																			
	dsendf("rw %d,%d;\n",blank,blank);                                          				// draw the blank screen last so that it shows up first
	dsendf("cl:\n");                                                                            // clear screen (that's all)
	
	
	}__HEADER__
FIXATION.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// This is the main fixation protocol.  It works like this.
// 1) Define all varialbes
// 2) Setup stimuli
// 3) Run a trial
// 4) repeat
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

#include C:/TEMPO/ProcLib/FIXTRIAL.pro
	
declare FIXATION();						

process FIXATION()     
	{
	declare hide int run_fix_sess	= 2;
	declare hide int run_idle		= 0;
	
	
		
		if (Last_task != run_fix_sess)				// Only do this if we have gone into another task or if this is first run of day.
			{
			system("dialog Select_Monkey");
			spawnwait DEFAULT(State,				// Set all globals to their default values.
							Monkey,						
							Room);	
			Last_task = run_fix_sess;
			}
		
		while(!OK)									
			{
			nexttick;
			if(Set_monkey)
				{
				spawnwait DEFAULT(State,			// Set all globals to their default values based on the monkey.
							Monkey,					
							Room);	
				Set_monkey = 0;
				}
			}
			
	if (fix_manual == 1)
	{
		Trl_number				= 1;
		
		system("key currt = spawn KEY_T_UP");		// define right key macro
		system("key curlf = spawn KEY_T_DN");		// define left key macro
		system("key curup = spawn KEY_REWD");		// define up key macro
		system("key curdn = OK = 1");				// define down to start task	
		spawnwait GOODVARS(State);

		spawnwait SET_CLRS(n_targ_pos);
			
			
		nexttick 10;									// to prevent buffer overflows after task reentry.
		while (State == run_fix_sess)					// while the user has not yet terminated the countermanding task
			{		
			
			
			spawnwait WINDOWS(fixation_target,			// GLOBAL set by F_DFAULT and KEY_TARG (key macros KEY_T_UP and KEY_T_DN)
						fix_win_size,  					// see DEFAULT.pro and ALL_VARS.pro
						targ_win_size, 					// see DEFAULT.pro and ALL_VARS.pro
						object_fixwin, 					// animated graph object
						object_targwin,					// animated graph object
						deg2pix_X,     					// see SET_COOR.pro
						deg2pix_Y);    					// see SET_COOR.pro
			oSetAttribute(object_fixwin, aINVISIBLE);			
			
			spawnwait FIX_PGS(fixation_target, 			// GLOBAL set by F_DFAULT and KEY_TARG (key macros KEY_T_UP and KEY_T_DN)			
					deg2pix_X,                			// see SET_COOR.pro
					deg2pix_Y,                			// see SET_COOR.pro
					object_targ);                		// see GRAPHS.pro
					
			
			spawnwait FIXTRIAL(allowed_fix_time,		// see ALL_VARS.pro and DEFAULT.pro
					max_saccade_time, 					// see ALL_VARS.pro and DEFAULT.pro
					targ_hold_time,						// see ALL_VARS.pro and DEFAULT.pro
					object_targ);						// animated graph object
			
			
			Trl_number = Trl_number + 1;			
			nexttick;									// wait at least one cycle and do it all again
			wait Inter_trl_int;							// wait for the intertrial interval
			}

														// the State global variables allow a control structure...
														// ...to impliment the task.
		State = run_idle;								// If we are out of the while loop the user wanted...
														// ...to stop cmanding.
													
		oDestroy(object_fixwin);						// destroy all graph objects
		oDestroy(object_targwin);
		oDestroy(object_fix);
		oDestroy(object_targ);
		oDestroy(object_eye);
		
		oSetGraph(gleft,aCLEAR);						// clear the left graph
		
		system("key currt = ");							// clear right key macro
		system("key curlf = ");							// clear left key macro
		system("key curup = ");							// clear up key macro
		system("key curdn = ");							// clear down key macro
			
		spawn IDLE;										// return control to IDLE.pro
    }
	else if (fix_manual == 0)
	{
		Trl_number				= 1;
		Inter_trl_int 			= 1500;
		
		spawnwait GOODVARS(State);

		spawnwait SET_CLRS(n_targ_pos);
			
			
		nexttick 10;									// to prevent buffer overflows after task reentry.
		while (State == run_fix_sess)					// while the user has not yet terminated the countermanding task
			{		
			fixation_target = random(9);
			
			spawnwait WINDOWS(fixation_target,			// GLOBAL set by F_DFAULT and KEY_TARG (key macros KEY_T_UP and KEY_T_DN)
						fix_win_size,  					// see DEFAULT.pro and ALL_VARS.pro
						targ_win_size, 					// see DEFAULT.pro and ALL_VARS.pro
						object_fixwin, 					// animated graph object
						object_targwin,					// animated graph object
						deg2pix_X,     					// see SET_COOR.pro
						deg2pix_Y);    					// see SET_COOR.pro
			oSetAttribute(object_fixwin, aINVISIBLE);			
			
			spawnwait FIX_PGS(fixation_target, 			// GLOBAL set by F_DFAULT and KEY_TARG (key macros KEY_T_UP and KEY_T_DN)			
					deg2pix_X,                			// see SET_COOR.pro
					deg2pix_Y,                			// see SET_COOR.pro
					object_targ);                		// see GRAPHS.pro
					
			
			spawnwait FIXTRIAL(allowed_fix_time,		// see ALL_VARS.pro and DEFAULT.pro
					max_saccade_time, 					// see ALL_VARS.pro and DEFAULT.pro
					targ_hold_time,						// see ALL_VARS.pro and DEFAULT.pro
					object_targ);						// animated graph object
			
			
			Trl_number = Trl_number + 1;			
			nexttick;									// wait at least one cycle and do it all again
			wait Inter_trl_int;							// wait for the intertrial interval
			}

														// the State global variables allow a control structure...
														// ...to impliment the task.
		State = run_idle;								// If we are out of the while loop the user wanted...
														// ...to stop cmanding.
													
		oDestroy(object_fixwin);						// destroy all graph objects
		oDestroy(object_targwin);
		oDestroy(object_fix);
		oDestroy(object_targ);
		oDestroy(object_eye);
		
		oSetGraph(gleft,aCLEAR);						//
		
		spawn IDLE;
		}
		
	}__HEADER__
FIXTRIAL.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// Run a fixation trial based on the variables calculated by SETF_TRL.pro and those 
// given by the user.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011


declare FIXTRIAL(allowed_fix_time,		// see ALL_VARS.pro and DEFAULT.pro
				max_saccade_time, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,			// see ALL_VARS.pro and DEFAULT.pro
				object_targ);			// animated graph object

process FIXTRIAL(allowed_fix_time,		// see ALL_VARS.pro and DEFAULT.pro
				max_saccade_time, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,			// see ALL_VARS.pro and DEFAULT.pro
				object_targ)			// animated graph object
	{

	
	// Number the trial stages to make them easier to read below
	declare hide int 	need_targ  	= 1;
	declare hide int 	fixating  	= 2;

	
	// Number the stimuli pages to make reading easier
	declare hide int   	blank       = 0;
	declare hide int	target      = 1;

	                                        
	// Timing variables which will be used to time task
	declare hide float  targ_time; 					
	declare hide float	aquire_targ_time;	
	
	// These variables make the while loop work
	declare hide int 	trl_running;
	declare hide int	stage;
	
		
	// Have to be reset on every iteration since 
	// variable declaration only occurs at load time
	trl_running 		= 1;
	stage 				= need_targ;
	

	
	
																			// HERE IS WHERE THE FUN BEGINS
	dsendf("vp %d\n",target);												// flip the pg to the target stim 
	targ_time = time();  													// record the time
	oSetAttribute(object_targ, aVISIBLE); 									// turn on the target in animated graph	
	
	while (trl_running)														// trials ending will set trl_running = 0
		{	
		
	//--------------------------------------------------------------------------------------------
	// STAGE need_targ (the target is on, but the subject hasn't looked at it)
		if (stage == need_targ)
			{		
			if (In_TargWin)													// If the eyes have entered the fixation window (before time, see below)...
				{
				aquire_targ_time = time();									// ...function call to time to note current time and...
				stage = fixating;											// ...advance to the next stage.
				}
			else if (time() > targ_time + max_saccade_time)					// But if time runs out...
				{
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen,...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				trl_running = 0;											// ...and terminate the trial.
				}			
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE fixating (the subject is looking at the target waiting for reward)		
		else if (stage == fixating)
			{
			if (!In_TargWin)												// If the eyes stray out of the target window...
				{
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				print("broke");
				trl_running = 0;											// ...and terminate the trial.
				}
			else if (In_TargWin && time() > 
					aquire_targ_time + targ_hold_time) 						// But if the eyes are still in the window at end of holdtime...
				{
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				spawn TONE(success_Tone_medR,tone_duration);				// give the secondary reinforcer tone
				spawn JUICE(juice_channel,Base_Reward_time);				// YEAH BABY!  THAT'S WHAT IT'S ALL ABOUT!
				trl_running = 0;											// ...and terminate the trial.
				
				}
			}
			
			
					
		nexttick;
		}		
	}__HEADER__
FLS_PGS.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// process FLS_PGS();


declare FLS_PGS(float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ);                       										// see GRAPHS.pro

process FLS_PGS(float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ)                        										// see GRAPHS.pro
	{										
											
	declare hide float 	pd_eccentricity;										
	declare hide float	pd_angle;								
	declare hide int   	fill        = 1;	
	declare hide float 	opposite;										
	declare hide float	adjacent;	
	
	// number the pgs that need to be drawn
	declare hide int   	blank	= 0;										
	declare hide int	flash	= 1;										
	
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Calculate screen coordinates for stimuli on this trial								
	oSetAttribute(object_fix, aSIZE, 1*deg2pix_X, 1*deg2pix_Y);									
	
	opposite = ((scr_height/2)-pd_bottom);														// Figure out angle and eccentricity of photodiode marker in pixels
	adjacent = ((scr_width/2)-pd_left);                                                         // NOTE: I am assuming your pd is in the lower left quadrant of your screen
	pd_eccentricity = sqrt((opposite * opposite) + (adjacent * adjacent));
	pd_angle = rad2deg(atan (opposite / adjacent));
	pd_angle = pd_angle + 180; 																	//change this for different quadrent or write some code for flexibility
	
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 1
	// print("fixation with photodiode");
	dsendf("rw %d,%d;\n",flash,flash); 															// draw first pg of video memory
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(40.0, 0.0, 0.0, 15, fill, deg2pix_X, deg2pix_Y);   						// draw fixation point
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 0 (last is displayed first)	
	// print("blank"); 																			
	dsendf("rw %d,%d;\n",blank,blank);                                          				// draw the blank screen last so that it shows up first
	dsendf("cl:\n");                                                                            // clear screen (that's all)
	
	
	}__HEADER__
FLSHSCRN.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// This is the main flash protocol.  
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

	
declare FLSHSCRN();						

process FLSHSCRN()     
	{
	declare hide int run_flash_sess	= 5;
	declare hide int run_idle		= 0;
	declare hide int blank			= 0;
	declare hide int flash			= 1;
	declare int		 trl_ct			= 0;
	//declare hide float flashTime;
	//declare hide float IFI;
	declare hide float flashStart;
	declare hide float offTime;
	declare hide int flashOnEv = 9999;
	declare hide int flashFailEv = 9998;
	declare hide int flashSuccEv = 9997;
	declare hide int flashSessEnd = 9991;
	declare hide int flashSessStart = 9990;
	
	// Number the trial stages to make them easier to read below
	declare hide int 	need_fix  	= 1;
	declare hide int 	wait_flash 	= 2;
	declare hide int 	waitIFI 	= 3;
	declare hide int 	stage;
	
	// This variable makes the while loop work
	declare hide int 	trl_running;
	
	trl_ct = 0;
	
	dsend("DM RFRSH");                			// This code sets up a vdosync macro definition to wait a specified ...
	if (Room == 23)                   			// ...number of vertical retraces based on the room in which we are    ...
		{                             			// ...recording.  This kluge is necessary because vdosync operates     ...
		dsendf("vw %d:\n",1);         			// ...differently in the different rooms.  In 028 a command to wait    ...
		}                             			// ...2 refresh cycles usually only waits for one and a command to     ...
	else                              			// ...wait for 1 usually only waits for 0.  Room 029 and 023 appear to ...
		{                             			// ...work properly.
		dsendf("vw %d:\n",2);
		}
	dsend("EM RFRSH");
	
	//system("dialog Flash_Vars");
		
	if (Last_task != run_flash_sess)			// Only do this if we have gone into another task or if this is first run of day.
		{
		system("dialog Select_Monkey");
		spawnwait DEFAULT(State,				// Set all globals to their default values.
						Monkey,						
						Room);	
		Last_task = run_flash_sess;
		}
	
	while(!OK)									
		{
		nexttick;
		if(Set_monkey)
			{
			spawnwait DEFAULT(State,			// Set all globals to their default values based on the monkey.
						Monkey,					
						Room);	
			Set_monkey = 0;
			}
		}
			
	nexttick 10;									// to prevent buffer overflows after task reentry.
	
	// Let's identify the next section of trials as a flash session
	Event_fifo[Set_event] = flashSessStart;									// queue TrialStart_ strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
		
	while (State == run_flash_sess)					// while the user has not yet terminated the countermanding task
		{		
		
		
		spawnwait WINDOWS(fixation_target,			// GLOBAL set by F_DFAULT and KEY_TARG (key macros KEY_T_UP and KEY_T_DN)
					fix_win_size,  					// see DEFAULT.pro and ALL_VARS.pro
					targ_win_size, 					// see DEFAULT.pro and ALL_VARS.pro
					object_fixwin, 					// animated graph object
					object_targwin,					// animated graph object
					deg2pix_X,     					// see SET_COOR.pro
					deg2pix_Y);    					// see SET_COOR.pro
		oSetAttribute(object_targwin, aINVISIBLE);	
		
		spawnwait FLS_PGS(scr_width,              	// see RIGSETUP.pro
					scr_height,                   	// see RIGSETUP.pro
					pd_left,                      	// see RIGSETUP.pro
					pd_bottom,                    	// see RIGSETUP.pro
					pd_size,                      	// see RIGSETUP.pro
					deg2pix_X,                    	// see SET_COOR.pro
					deg2pix_Y,                    	// see SET_COOR.pro
					unit2pix_X,                   	// see SET_COOR.pro
					unit2pix_Y,                   	// see SET_COOR.pro
					object_targ);               	// see GRAPHS.pro
		
		// Start the trial running
		trl_running=1;
		stage = need_fix;
		while (trl_running)
			{
			// Flash the stimulus when in fix window
			if (stage == need_fix)
				{
				if (In_FixWin)
					{
					Event_fifo[Set_event] = flashOnEv;									// queue TrialStart_ strobe
					Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
					dsendf("vp %d\n",flash);
					flashStart = time();
					stage = wait_flash;
					}
				}
			// Now wait for the flash to finish, eyes need to stay in window
			if (stage == wait_flash)
				{
				if (!In_FixWin)
					{
					Event_fifo[Set_event] = flashFailEv;									// queue TrialStart_ strobe
					Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
					dsendf("vp %d\n",blank);
					stage = need_fix;
					printf("Broke fixation\n");
					//printf("Stage = %d",stage);
					trl_running = 0;
					}
				else if (In_FixWin && time() > flashStart + flashTime)
					{
						dsendf("XM RFRSH:\n");
						dsendf("vp %d\n",blank);
						//printf("Stim turned off...");
						offTime = time();
						stage = waitIFI;
						Event_fifo[Set_event] = flashSuccEv;									// queue TrialStart_ strobe
						Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
						//spawn TONE(success_Tone_medR,tone_duration);				// give the secondary reinforcer tone
						spawn JUICE(juice_channel,Base_Reward_time);				// YEAH BABY!  THAT'S WHAT IT'S ALL ABOUT!
						trl_ct = trl_ct + 1;
						print(trl_ct);
						//printf("Stage = %d",stage);
						//nexttick;
					}
				/*else
					{
					//printf("Waiting...");
					}
				*/
				}
			// Wait for an IFI
			if (stage == waitIFI)
				{
				if (time() > offTime + IFI)
					{
					//printf(IFI);
					//printf("Waiting for IFI\n");
					trl_running = 0;
					}
				}
				
			nexttick;									// wait at least one cycle and do it all again
			}
			
			while (Pause)
				{
				nexttick;
				}
		}
	
	Event_fifo[Set_event] = flashSessEnd;									// queue TrialStart_ strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
						
													// the State global variables allow a control structure...
													// ...to impliment the task.
	State = run_idle;								// If we are out of the while loop the user wanted...
													// ...to stop cmanding.
												
	oDestroy(object_fixwin);						// destroy all graph objects
	oDestroy(object_targwin);
	oDestroy(object_fix);
	oDestroy(object_targ);
	oDestroy(object_eye);
	
	oSetGraph(gleft,aCLEAR);						// clear the left graph
	
	system("key currt = ");							// clear right key macro
	system("key curlf = ");							// clear left key macro
	system("key curup = ");							// clear up key macro
	system("key curdn = ");							// clear down key macro
		
	spawn IDLE;										// return control to IDLE.pro
    }
	
		__HEADER__
GNG_PGS.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// process MEM_PGS(int curr_target, 															// set SETC_TRL.pro
// 				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
// 				int fixation_color,                     										// see SET_CLRS.pro
// 				float scr_width,                        										// see RIGSETUP.pro
// 				float scr_height,                       										// see RIGSETUP.pro
// 				float pd_left,                          										// see RIGSETUP.pro
// 				float pd_bottom,                        										// see RIGSETUP.pro
// 				float pd_size,                          										// see RIGSETUP.pro
// 				float deg2pix_X,                        										// see SET_COOR.pro
// 				float deg2pix_Y,                        										// see SET_COOR.pro
// 				float unit2pix_X,                       										// see SET_COOR.pro
// 				float unit2pix_Y,                       										// see SET_COOR.pro
// 				int object_targ);
// Figure out all stimuli that will be needed on the next mem guided trial and
// place it all into video memory.
//
// written by david.c.godlove@vanderbilt.edu 	July, 2011


declare hide float 	Size;   																	// Global output will be sent as stobes...        										
declare hide float 	Angle;        																// ...by INFOS.pro at trial end.
declare hide float 	Eccentricity; 
declare hide int   	Color;								

declare GNG_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				int sig_color,
				int maskcolor,
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ);                       										// see GRAPHS.pro

process GNG_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				int sig_color,
				int maskcolor,					
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ)	                       										// see GRAPHS.pro
	{										
											
	declare hide float 	pd_eccentricity;										
	declare hide float	pd_angle;										
	declare hide float 	opposite;										
	declare hide float	adjacent;										
	declare hide float	stim_ecc_x;										
	declare hide float	stim_ecc_y;										
	declare hide int   	open        = 0;										
	declare hide int   	fill        = 1;										
	
	// number the pgs that need to be drawn
	declare hide int   	blank       		= 0;
	declare hide int	fixation_pd			= 1;										
	declare hide int	fixation    		= 2;
	declare hide int	fixation_target_pd	= 3;
	declare hide int	signal_pd_T			= 4;					//temporal training
	declare hide int	signal_pd_S			= 5;					//temporal training
	declare hide int	target				= 6;					//temporal training
	declare hide int	atarget				= 7;					//temporal training
	//declare hide int	signal_pd			= 4;
	//declare hide int  signal				= 5;
	//declare hide int	target_pd   		= 6;										
	//declare hide int	target      		= 7;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Calculate screen coordinates for stimuli on this trial								
	size         = Size_list[curr_target];   													// Figure out the attributes of the current target 
	angle        = Angle_list[curr_target]; 													// THESE USER DEFINED GLOBALS ARE ARRAYS SO 
	eccentricity = Eccentricity_list[curr_target];												// THEY CANNOT BE PASSED INTO PROCESSES
	color        = curr_target + 1;																// zero is reserved for black.  see SET_CLRS.pro							
	
	
	stim_ecc_x = cos(angle) * eccentricity;														// find the center of the box in x and y space based on the angle and eccentricity...
	stim_ecc_y = sin(angle) * eccentricity * -1;												
	oMove(object_targ, stim_ecc_x*deg2pix_X, stim_ecc_y*deg2pix_Y);								// ...and move the animated graph object there.
	oSetAttribute(object_targ, aSIZE, size*deg2pix_X, size*deg2pix_Y);							// while we are at it, resize fixation object on animated graph
	oSetAttribute(object_fix, aSIZE, 1*deg2pix_X, 1*deg2pix_Y);									
	
	opposite = ((scr_height/2)-pd_bottom);														// Figure out angle and eccentricity of photodiode marker in pixels
	adjacent = ((scr_width/2)-pd_left);                                                         // NOTE: I am assuming your pd is in the lower left quadrant of your screen
	pd_eccentricity = sqrt((opposite * opposite) + (adjacent * adjacent));
	pd_angle = rad2deg(atan (opposite / adjacent));
	pd_angle = pd_angle + 180; 																	//change this for different quadrent or write some code for flexibility
	

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 1
	// print("fixation with photodiode");
	dsendf("rw %d,%d;\n",fixation_pd,fixation_pd); 												// draw second pg of video memory
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 2	  
	// print("fixation");
	dsendf("rw %d,%d;\n",fixation,fixation);   													// draw 3rd pg of video memory                                       
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 3	  
	// print("fixation target and photodiode");
	dsendf("rw %d,%d;\n",fixation_target_pd,fixation_target_pd);   								// draw 4th pg of video memory                                       
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    nexttick;

	
    ////--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	//// Draw pg 4	 
	//// print("signal with photodiode");
	//dsendf("rw %d,%d;\n",signal_pd,signal_pd);   												// draw pg 6                                       					
	//dsendf("cl:\n");																			// clear screen
	//spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);   		// draw stop signal/ignore stim
	//spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);
	//spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); 
	//nexttick;
	
	//temporal training---------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 4	 
	// print("signal with photodiode for go");
	dsendf("rw %d,%d;\n",signal_pd_T,signal_pd_T);   												// draw pg 6                                       					
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);   		// draw stop signal/ignore stim
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); 
	spawnwait DRW_SQR(size, angle, eccentricity, maskcolor, fill, deg2pix_X, deg2pix_Y);
	nexttick;
	
	//temporal training---------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 5	 
	// print("signal with photodiode for stop");
	dsendf("rw %d,%d;\n",signal_pd_S,signal_pd_S);   												// draw pg 6                                       					
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);   		// draw stop signal/ignore stim
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); 
	nexttick;
	
	//temporal training--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 6	  
	// print("target");
	dsendf("rw %d,%d;\n",target,target);  														// draw pg 6                                        
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); 
	spawnwait DRW_SQR(size, angle, eccentricity, maskcolor, fill, deg2pix_X, deg2pix_Y);         	// draw target
    nexttick;
	
	
	//temporal training--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 7	  
	// print("target");
	dsendf("rw %d,%d;\n",atarget,atarget);  														// draw pg 6                                        
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); 
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);         	// draw target
    nexttick;
	
    ////--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	//// Draw pg 5	 
	//// print("signal");
	//dsendf("rw %d,%d;\n",signal,signal);   														// draw pg 6                                       					
	//dsendf("cl:\n");																			// clear screen
	//spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);   		// draw stop signal/ignore stim
	//spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); 
	//nexttick; 
		
	////--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	//// Draw pg 6	 
	//// print("target with photodiode");
	//dsendf("rw %d,%d;\n",target_pd,target_pd);  												// draw pg 5                                        
	//dsendf("cl:\n");																			// clear screen
	//spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
	//spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);
	//spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); 
	//spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    //nexttick;
	
	////--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	//// Draw pg 7	  
	//// print("target");
	//dsendf("rw %d,%d;\n",target,target);  														// draw pg 6                                        
	//dsendf("cl:\n");																			// clear screen
	//spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);
	//spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); 
	//spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);         	// draw target
    //nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 0 (last is displayed first)	
	// print("blank"); 																			
	dsendf("rw %d,%d;\n",blank,blank);                                          				// draw the blank screen last so that it shows up first
	dsendf("cl:\n");                                                                            // clear screen (that's all)
	
	}__HEADER__
GNGTRIAL.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// Run a memory guided saccade trial based on the variables calculated by SETM_TRL.pro and 
// those given by the user.  Adapted from CMDTRIAL.
//
// written by david.c.godlove@vanderbilt.edu 	July, 2011

declare hide int Trl_Outcome;			// Global output used in END_TRL
declare hide int Trl_Start_Time;		// Global output used in END_TRL
declare hide int LastStopOutcome = 2;	// Global output used to staircase SSD

declare GNGTRIAL(allowed_fix_time,		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime, 			// see SETM_TRL.pro
				trl_type,
				max_saccade_time,
				curr_soa,				// see SETM_TRL.pro
				cancl_time,		 		// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,			// see ALL_VARS.pro and DEFAULT.pro
				object_fix);			// animated graph object
				
							
process GNGTRIAL(allowed_fix_time, 		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime,     		// see SETM_TRL.pro
				trl_type,
				max_saccade_time,
				curr_soa,				// see SETM_TRL.pro
				cancl_time,  		// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,    		// see ALL_VARS.pro and DEFAULT.pro
				object_fix)        		// animated graph object
	{
	
	// Number the trial types to make them easier to read below
	declare hide int 	go_trl 		= 0;
	declare hide int 	stop_trl 	= 1;
	declare hide int 	ignore_trl 	= 2;
	
	// Number the trial stages to make them easier to read below
	declare hide int 	need_fix  	= 1;
	declare hide int 	fixating  	= 2;
	declare hide int 	targ_on   	= 3;
	declare hide int	fix_off		= 4;
	declare hide int 	in_flight 	= 5;
	declare hide int 	on_target 	= 6;	
	declare hide int 	stage;
	
	// Number the stimuli pages to make reading easier
	declare hide int   	blank       		= 0;
	declare hide int	fixation_pd			= 1;										
	declare hide int	fixation    		= 2;
	declare hide int	fixation_target_pd	= 3;
	declare hide int	signal_pd_T			= 4;					//temporal training
	declare hide int	signal_pd_S			= 5;					//temporal training
	declare hide int	target				= 6;					//temporal training
	declare hide int	atarget				= 7;					//temporal training
	
	//declare hide int	signal_pd			= 4;
	//declare hide int  signal				= 5;
	//declare hide int	target_pd   		= 6;										
	//declare hide int	target      		= 7;
	
	// Assign values to success and failure so they are more readable
	declare hide int	success		= 1;
	declare hide int	failure		= 0;
	declare hide int	no_change	= 2;
	
	// Code all possible outcomes (codes are shared with countermanding for efficiency)
	declare hide int constant no_fix		= 1;	// never attained fixation
	declare hide int constant broke_fix		= 2;	// attained and then lost fixation before target presentation
	declare hide int constant go_wrong		= 3;	// never made saccade on a go trial
	declare hide int constant nogo_correct	= 4;	// successfully canceled trial
	declare hide int constant sacc_out		= 5;	// made an inaccurate saccade out of the target box
	declare hide int constant broke_targ	= 6;	// didn't hold fixation at the target for long enough
	declare hide int constant go_correct	= 7;
	declare hide int constant nogo_wrong	= 8;	// error noncanceled trial
	declare hide int constant early_sacc	= 9;	// made a saccade before fixation offset
	declare hide int constant no_sacc		= 10;	// didn't make a saccade after cued to do so
	//declare hide int constant correct_sacc	= 11;	// correct saccade after cue
	  
	// Timing variables which will be used to time task
	declare hide float 	fix_on_time; 	
	declare hide float 	aquire_fix_time;
	declare hide float  targ_time;	
	declare hide float	fix_off_time;
	declare hide float  saccade_time;
	declare hide float	aquire_targ_time;	
	
	// This variable makes the while loop work
	declare hide int 	trl_running;
	
	// Have to be reset on every iteration since 
	// variable declaration only occurs at load time
	trl_running 		= 1;
	stage 				= need_fix;
	
	
	// Tell the user what's up
	printf(" \n");
	printf("# %d",Trl_number);
	printf(" (%d",Comp_Trl_number);
	printf(" correct)\n");
	if (trl_type == go_trl)
		{
		printf("GO\n");
		printf("holdtime = %d\n",curr_holdtime);
		}
	if (trl_type == stop_trl)
		{
		printf("STOP\n");
		printf("holdtime = %d\n",curr_holdtime);
		printf("               SOA = %d\n",Curr_soa);
		}
	if (trl_type == ignore_trl)
		{
		printf("IGNORE\n");
		printf("holdtime = %d\n",curr_holdtime);
		printf("               SOA = %d\n",Curr_soa);
		}
	
																			// HERE IS WHERE THE FUN BEGINS
	Event_fifo[Set_event] = TrialStart_;									// queue TrialStart_ strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	dsendf("vp %d\n",fixation_pd);											// flip the pg to the fixation stim with pd marker
	fix_on_time = time();  													// record the time
	Event_fifo[Set_event] = FixSpotOn_;										// queue strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	dsendf("XM RFRSH:\n"); 													// wait for one retrace
	dsendf("vp %d\n",fixation);												// flip the pg to the fixation stim without pd marker
	oSetAttribute(object_fix, aVISIBLE); 									// turn on the fixation point in animated graph
	
	
	while (trl_running)														// trials ending will set trl_running = 0
		{	
	//--------------------------------------------------------------------------------------------
	// STAGE need_fix (the fixation point is on, but the subject hasn't looked at it)
		if (stage == need_fix)
			{		
			if (In_FixWin)													// If the eyes have entered the fixation window (before time, see below)...
				{
				aquire_fix_time = time();									// ...function call to time to note current time and...
				Trl_Start_Time = aquire_fix_time;							// Global output for timing iti
				Event_fifo[Set_event] = Fixate_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = fixating;											// ...advance to the next stage.
				}
			else if (time() > fix_on_time + allowed_fix_time)				// But if time runs out...
				{
				Trl_Outcome = no_fix;    									// TRIAL OUTCOME ABORT (no fixation)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen,...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Aborted (no fixation)\n");							// ...tell the user whats up...
				
				trl_running = 0;											// ...and terminate the trial.
				nexttick;
				}			
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE fixating (the subject is looking at the fixation point waiting for target onset)		
		else if (stage == fixating)
			{
			if (!In_FixWin)													// If the eyes stray out of the fixation window...
				{
				Trl_Outcome = broke_fix;									// TRIAL OUTCOME ABORT (broke fixation)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Aborted (broke fixation)\n");						// ...tell the user whats up...
				stage = need_fix;
				trl_running = 0;											// ...and terminate the trial.
				nexttick;
				}
			else if (In_FixWin && time() > aquire_fix_time + curr_holdtime)	// But if the eyes are still in the window at end of holdtime...
				{
				dsendf("vp %d\n",fixation_target_pd);						// ...flip the pg to the target with pd marker...	
				targ_time = time(); 										// ...record the time...
				dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
				dsendf("vp %d\n",fixation);									// ...flip the pg to the fixation point without pd marker.
				Event_fifo[Set_event] = Target_;							// Queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
		
					
		
//SHOULD PROBABLY STROBE THAT THE TARGET WAS PRESENTED AT THIS POINT.
//MUST MAKE SURE IT DOESN'T SCREW UP TRANSLATION
				oSetAttribute(object_targ, aVISIBLE); 						// ...show target in animated graph...
														
				stage = targ_on;											// Advance to the next trial stage.				
				}
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE targ_on (the target has been presented but the subject is still fixating)		
		else if (stage == targ_on)
			{		
			if (!In_FixWin)													// If the eyes leave the fixation window...
				{
				Trl_Outcome = early_sacc;									// TRIAL OUTCOME ERROR (sacc before cued to do so)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (early saccade)\n");							// ...tell the user whats up...
				stage = need_fix;
				trl_running = 0;											// ...and terminate the trial.
				nexttick;
				}
			
			else if (In_FixWin &&  											// But if no saccade occurs...
				time() > targ_time + curr_soa && trl_type == ignore_trl )	 							// ...and the stim onset asychrony passes...
				{
				//dsendf("vp %d\n",signal_pd);								// Flip the pg to the blank screen with the photodiode marker...
				dsendf("vp %d\n",signal_pd_T); //temporal training
				fix_off_time = time();										// ...and record the time that the fixation point was extinguished.
				Event_fifo[Set_event] = FixSpotOff_;						// Queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
				//dsendf("vp %d\n",signal);									// ...flip the pg to the blank screen without pd marker.
				dsendf("vp %d\n",target);
	//			oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				stage = fix_off;											// ...and advance to the next stage.
				}
			else if (In_FixWin &&  											// temporal training ....
				time() > targ_time + curr_soa && trl_type == stop_trl )	 	//						
				{															//			
				//dsendf("vp %d\n",signal_pd);								//
				dsendf("vp %d\n",signal_pd_S); //temporal training			//
				fix_off_time = time();										//
				Event_fifo[Set_event] = FixSpotOff_;						//
				Set_event = (Set_event + 1) % Event_fifo_N;					//
				dsendf("XM RFRSH:\n"); 										//
				//dsendf("vp %d\n",signal);									//
				dsendf("vp %d\n",signal_pd_S);									//
	//			oSetAttribute(object_fix, aINVISIBLE); 						//
				stage = fix_off;											// ...... temporal training
				}
			}



	//--------------------------------------------------------------------------------------------
	// STAGE fix_off (the fixation point has been turned off but the subject is still fixating)		
		else if (stage == fix_off)
			{
			if (!In_FixWin)													// If the eyes leave the fixation window...			
				{															// ...we have a saccade, so...
				saccade_time = time();										// ...record the time...
				Event_fifo[Set_event] = Saccade_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				printf("                          rt = %d\n",saccade_time - fix_off_time);	// ...tell the user whats up...
				stage = in_flight;											// ...and advance to the next stage.
				}
									
			else if (In_FixWin &&  											// But if no saccade occurs...
				time() > fix_off_time + max_saccade_time &&
				(trl_type == go_trl || trl_type == ignore_trl)) 			// ...and time for a saccade runs out...
				{
				Trl_Outcome = go_wrong;           							// TRIAL OUTCOME ERROR (incorrect go trial)
				LastStopOutcome = no_change;								// Don't change SSD
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (no saccade)\n");								// ...tell the user whats up...
				spawn SVR_BELL();
				stage = need_fix;
				trl_running = 0;											// ...and terminate the trial.
				nexttick;
				}
				
			else if (In_FixWin &&											// But if no saccade occurs...
				time() > fix_off_time + cancl_time && 						// ...and time for a saccade runs out...
				trl_type == stop_trl)										// ...and a saccade was NOT supposed to be made...
				{
				Trl_Outcome = nogo_correct;   								// TRIAL OUTCOME CORRECT (canceled trial)
				LastStopOutcome = no_change;								// set the global for staircasing...
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				Event_fifo[Set_event] = Correct_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				printf("Correct (canceled)\n");								// ...tell the user whats up...
				if (Canc_alert)
					{
					spawn SVR_BEL2();										// for training purposes
					}
					stage = need_fix;
				trl_running = 0;  											// ...and terminate the trial.
				nexttick;
				}	
			}			
			
			
	//--------------------------------------------------------------------------------------------
	// STAGE in_flight (eyes have left fixation window but have not entered target window)		
		else if (stage == in_flight)
			{
			if (In_TargWin)													// If the eyes get into the target window...
				{
				//dsendf("vp %d\n",target_pd);								// ...flip the pg to the target with pd marker...	
				aquire_targ_time = time(); 									// ...record the time...
				if (trl_type == ignore_trl)
				{
				dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
				dsendf("vp %d\n",atarget);									// ...flip the pg to the target without pd marker.
				}
				Event_fifo[Set_event] = Decide_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = on_target;											// ...and advance to the next stage of the trial.
				if (trl_type == stop_trl)									// But if a saccade was the wrong thing to do...
					{												
					Event_fifo[Set_event] = Error_sacc;						// ...queue strobe for Neuro Explorer
					Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.
					}
				else 														// Otherwise...
					{								
					Event_fifo[Set_event] = Correct_sacc;					// ...queue strobe for Neuro Explorer
					Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.					
					}
				}
			else if (time() > saccade_time + max_sacc_duration)				// But, if the eyes are out of the target window and time runs out...
				{
				Trl_Outcome = sacc_out;   									// TRIAL OUTCOME ERROR (innacurrate saccade)
				if (trl_type == stop_trl)									// But if a saccade was the wrong thing to do...
					{												
					LastStopOutcome = no_change;								// ...record the failure.
					}
				else 														// Otherwise...
					{								
					LastStopOutcome = no_change;							// ...make sure that the last outcome is cleared.						
					}
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (inaccurate saccade)\n");						// ...tell the user whats up...
				stage = need_fix;
				trl_running = 0; 											// ...and terminate the trial.
				nexttick;
				}
			}
		
		
		
	//--------------------------------------------------------------------------------------------
	// STAGE on_target (eyes have entered the target window.  will they remain there for duration?)	
		else if (stage == on_target)
			{
			if (!In_TargWin)												// If the eyes left the target window...
				{			
				Trl_Outcome = broke_targ;									// TRIAL OUTCOME ERROR (broke target fixation)
				if (trl_type == stop_trl)									// But if a saccade was the wrong thing to do...
					{												
					LastStopOutcome = no_change;
					}
				else 														// Otherwise...
					{								
					LastStopOutcome = no_change;							// ...make sure that the last outcome is cleared.						
					}
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (broke target fixation)\n");					// ...tell the user whats up...
				stage = need_fix;
				trl_running = 0;											// ...and terminate the trial.
				nexttick;
				}		
			else if (In_TargWin  											// But if the eyes are still in the target window...
				&&  time() > aquire_targ_time + targ_hold_time)				// ...and the target hold time is up...				
				{
				if (trl_type == go_trl || trl_type == ignore_trl)			// ...and a saccade was the correct thing to do...
					{
					Trl_Outcome = go_correct;								//TRIAL OUTCOME CORRECT (correct go trial)
					LastStopOutcome = no_change;							// Don't change SSD
					Event_fifo[Set_event] = Correct_;						// ...queue strobe...
					Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue...
					printf("Correct (saccade)\n");							// ...tell the user whats up...
					}
				else if (trl_type == stop_trl)								// But if a saccade was the wrong thing to do...
					{
					Trl_Outcome = nogo_wrong;								//TRIAL OUTCOME ERROR (noncanceled trial)
					LastStopOutcome = no_change;
					printf("Error (noncanceled)\n");						// ...tell the user whats up...
					}							// ...tell the user whats up...
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				stage = need_fix;
				trl_running = 0;											// ...and terminate the trial.
				nexttick;
				}			
			}
		nexttick;
		}
	}__HEADER__
GONOGO.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// This is the main mem guided sacc protocol.  It works like this.
// 1) Define all varialbes
// 2) Setup random variables needed for a trial
// start loop
// 3) Run a trial
// 4) End the trial
// 		a) deliver rewards and punishments
//		b) take care of ITI
// 		c) set up variables for next run
//
// written by david.c.godlove@vanderbilt.edu 	July, 2011
	
declare GONOGO();						

process GONOGO()     
	{
	declare hide int run_gonogo_sess	= 4;
	declare hide int run_idle		= 0;
			
	Trl_number				= 1;
	Block_number			= 0;
	LastStopOutcome			= 2;				// This is a kluge which tells END_TRIAL.pro that no change in stop signal has occurred
	
	if (Last_task != run_gonogo_sess)				// Only do this if we have gone into another task or if this is first run of day.
		{
		system("dialog Select_Monkey");
		spawnwait DEFAULT(State,				// Set all globals to their default values.
						Monkey,					// subject 0 is just default values.  no monkey
						Room);			
		Last_task = run_gonogo_sess;
		}
		
	dsend("DM RFRSH");         					// This code sets up a vdosync macro definition to wait a specified ...
	if (Room == 23)            					// ...number of vertical retraces based on the room in which we are    ...
		{                      					// ...recording.  This kluge is necessary because vdosync operates     ...
		dsendf("vw %d:\n",1);  					// ...differently in the different rooms.  In 028 a command to wait    ...
		}                      					// ...2 refresh cycles usually only waits for one and a command to     ...
	else                       					// ...wait for 1 usually only waits for 0.  Room 029 and 023 appear to ...
		{                      					// ...work properly.
		dsendf("vw %d:\n",2);					
		}
	dsend("EM RFRSH");
	
	while(!OK)									
		{
		nexttick;
		if(Set_monkey)
			{
			spawnwait DEFAULT(State,			// Set all globals to their default values based on the monkey.
						Monkey,					
						Room);	
			Set_monkey = 0;
			}
		}
	
	spawnwait GOODVARS(State);


	spawnwait SET_CLRS(n_targ_pos);
	
	
	spawnwait SETG_TRL(n_targ_pos,				// Select variables for the first mem guided...					
				min_holdtime,           		// ...trial.  This happens once outside of the while...
				max_holdtime,           		// ...loop just to set up for the first iteration. After...
				expo_jitter,            		// ...that SETM_TRL.pro will be called by END_TRL.pro.
				min_soa,
				max_soa,
				expo_jitter_soa);
				

	Event_fifo[Set_event] = MemHeader_;			// Set a strobe to identify this file as a mem guided session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = Identify_Room_;		// Set a strobe to identify this file as a Cmanding session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = Room;				// Set a strobe to identify this file as a Cmanding session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	
	Event_fifo[Set_event] = min_soa;			// Set a strobe to identify Min_soa		<- added by Namsoo
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = max_soa;			// Set a strobe to identify Max_soa
	Set_event = (Set_event + 1) % Event_fifo_N; //...incriment event queue.
	
	nexttick 10;								// to prevent buffer overflows after task reentry.
	
	CheckMotion = 0;							// set global for watching the motion detector
	spawn WATCHMTH;								// start watching the mouth motion detector if present
	spawn WATCHBOD;								// start watching motion detector for body if present
	
	while (State == run_gonogo_sess)				// while the user has not yet terminated the mem guided task
		{
	
		spawnwait GNGTRIAL(	allowed_fix_time, 	// run a trial with variables defined in SETC_TRL.pro
							curr_holdtime, 
							trl_type, 
							max_saccade_time, 
							curr_soa, 
							cancl_time, 
							max_sacc_duration, 
							targ_hold_time,
							object_fix);
							
		spawnwait END_TRL(trl_outcome);			// end a trial with trl_outcome set in MEMTRIAL.pro
				
		nexttick;								// wait at least one cycle and do it all again
		
		while(Pause)							// gives the user the ability to pause the task without ending it
			{
			nexttick;
			}
		
		}

												// the State global variables allow a control structure...
												// ...to impliment the task.
	State = run_idle;							// If we are out of the while loop the user wanted...
												// ...to stop mem guided.
	CheckMotion = 0;							// stop watching for movement.
												
	oDestroy(object_fixwin);					// destroy all task graph objects
	oDestroy(object_targwin);
	oDestroy(object_fix);
	oDestroy(object_targ);
	oDestroy(object_eye);
	
	oSetGraph(gleft,aCLEAR);					// clear the left graph
	
		
	spawn IDLE;									// return control to IDLE.pro
    }
	
	__HEADER__
GOODVARS.pro
__FOOTER__
//-------------------------------------------------------------------------------------------------------------------------
// perform a few checks to try to guard against poor user input

declare GOODVARS(state);

process GOODVARS(state)
	{	
	declare hide int i;
	
	declare hide int run_cmd_sess = 1;		// state 1 is countermanding
	declare hide int run_fix_sess = 2;		// state 2 is fixation
	declare hide int run_mg_sess = 3;		// state 3 is mem guided sacc
	declare hide int run_gonogo_sess = 4;
	declare hide int run_delayed_sess = 6;
	
	//---------------------------------------------------------------------------------------------------------------------------	
		
	if (state == run_cmd_sess)
		{
		if (Go_weight				
			+ Stop_weight
			+ Ignore_weight != 100)
			{
			printf("WARNING!!!\n");
			printf("Trial weights do not sum to 100.\n");
			printf("CHANGE PARAMETERS BEFORE RECORDING\n");
			State = 0;  					// hook the user back into IDLE()
			system("dpop");					// clear dialogs
			}
		
		
		i = 0;								// count up the target locations based on Size_list
		N_targ_pos = 0;
		while(i < 8)
			{
			if(Size_list[i] != 0)
				{
				N_targ_pos = N_targ_pos + 1;
				}
			i = i + 1;
			nexttick;
			}
			
		i = 0;								// count up the SSDs
		N_SSDs = 0;
		while(i < 20)
			{
			if(SSD_list[i] != 0)
				{
				N_SSDs = N_SSDs + 1;
				}
			i = i + 1;
			nexttick;
			}
		
		Max_SSD = SSD_list[N_SSDs-1];
		Max_SSD = ceil(Max_SSD * (1000.0/Refresh_rate));
		Min_SSD = SSD_list[0];
		Min_SSD = ceil(Min_SSD * (1000.0/Refresh_rate));
		
		if (Max_SSD > Max_saccade_time)
			{
			printf("WARNING!!!\n");
			printf("SSDs exceed Max time allowed...\n");
			printf("...for saccade to target.\n");
			printf("CHANGE PARAMETERS BEFORE RECORDING\n");
			State = 0;  					// hook the user back into IDLE()
			system("dpop");					// clear dialogs
			}
		
		if(Trial_length < Max_Holdtime
						+ Max_SSD
						+ Cancl_time
						+ Tone_Duration
						+ Reward_Offset
						+ Base_Reward_time * 2
						+ 100) 				// maximum time a trial can take including 100ms for iti calculations (generous)
			{
			Trial_length = Max_Holdtime
						+ Max_SSD
						+ Cancl_time
						+ Tone_Duration
						+ Reward_Offset
						+ Base_Reward_time * 2
						+ 100;
			printf("WARNING!!!\n");
			printf("Trial length too short\n");
			printf("Extending trial length to %d\n",Trial_length);
			}
			
		if (Set_tones == 1)
			{
			Success_Tone_bigR		= 3200;	// positive secondary reinforcer in Hz (large reward)
			Success_Tone_medR		= 1600;	// positive secondary reinforcer in Hz (medium reward)
			Success_Tone_smlR		= 800;	// positive secondary reinforcer in Hz (small reward)		
			Failure_Tone_smlP		= 400;	// negative secondary reinforcer in Hz (short timeout)
			Failure_Tone_medP		= 200;	// negative secondary reinforcer in Hz (medium timeout)
			Failure_Tone_bigP		= 100;	// negative secondary reinforcer in Hz (long timeout)
			}
		else
			{
			Success_Tone_bigR		= 100;	// positive secondary reinforcer in Hz (large reward)
			Success_Tone_medR		= 200;	// positive secondary reinforcer in Hz (medium reward)
			Success_Tone_smlR		= 400;	// positive secondary reinforcer in Hz (small reward)		
			Failure_Tone_smlP		= 800;	// negative secondary reinforcer in Hz (short timeout)
			Failure_Tone_medP		= 1600;	// negative secondary reinforcer in Hz (medium timeout)
			Failure_Tone_bigP		= 3200;	// negative secondary reinforcer in Hz (long timeout)
			}
		}
		
	//---------------------------------------------------------------------------------------------------------------------------	
	

	if (state == run_mg_sess)
	{
		if (Go_weight				
			+ Stop_weight
			+ Ignore_weight != 100)
			{
			printf("WARNING!!!\n");
			printf("Trial weights do not sum to 100.\n");
			printf("CHANGE PARAMETERS BEFORE RECORDING\n");
			State = 0;  					// hook the user back into IDLE()
			system("dpop");					// clear dialogs
			}
		
		
		i = 0;								// count up the target locations based on Size_list
		N_targ_pos = 0;
		while(i < 8)
			{
			if(Size_list[i] != 0)
				{
				N_targ_pos = N_targ_pos + 1;
				}
			i = i + 1;
			nexttick;
			}
			
		i = 0;								// count up the SSDs
		N_SOAs = 0;
		while(i < 20)
			{
			if(SOA_list[i] != 0)
				{
				N_SOAs = N_SOAs + 1;
				}
			i = i + 1;
			nexttick;
			}
		
		Max_SOA = SOA_list[N_SOAs-1];
		Max_SOA = ceil(Max_SOA * (1000.0/Refresh_rate));
		Min_SOA = SOA_list[0];
		Min_SOA = ceil(Min_SOA * (1000.0/Refresh_rate));
		
//		if (Max_SOA > Max_saccade_time)
//			{
//			printf("WARNING!!!\n");
//			printf("SSDs exceed Max time allowed...\n");
//			printf("...for saccade to target.\n");
//			printf("CHANGE PARAMETERS BEFORE RECORDING\n");
//			State = 0;  					// hook the user back into IDLE()
//			system("dpop");					// clear dialogs
//			}
		
		if(Trial_length < Max_Holdtime
						+ Max_SOA
						+ Cancl_time
						+ Tone_Duration
						+ Reward_Offset
						+ Base_Reward_time * 2
						+ 100) 				// maximum time a trial can take including 100ms for iti calculations (generous)
			{
			Trial_length = Max_Holdtime
						+ Max_SOA
						+ Cancl_time
						+ Tone_Duration
						+ Reward_Offset
						+ Base_Reward_time * 2
						+ 100;
			printf("WARNING!!!\n");
			printf("Trial length too short\n");
			printf("Extending trial length to %d\n",Trial_length);
			}
			
		if (Set_tones == 1)
			{
			Success_Tone_bigR		= 3200;	// positive secondary reinforcer in Hz (large reward)
			Success_Tone_medR		= 1600;	// positive secondary reinforcer in Hz (medium reward)
			Success_Tone_smlR		= 800;	// positive secondary reinforcer in Hz (small reward)		
			Failure_Tone_smlP		= 400;	// negative secondary reinforcer in Hz (short timeout)
			Failure_Tone_medP		= 200;	// negative secondary reinforcer in Hz (medium timeout)
			Failure_Tone_bigP		= 100;	// negative secondary reinforcer in Hz (long timeout)
			}
		else
			{
			Success_Tone_bigR		= 100;	// positive secondary reinforcer in Hz (large reward)
			Success_Tone_medR		= 200;	// positive secondary reinforcer in Hz (medium reward)
			Success_Tone_smlR		= 400;	// positive secondary reinforcer in Hz (small reward)		
			Failure_Tone_smlP		= 800;	// negative secondary reinforcer in Hz (short timeout)
			Failure_Tone_medP		= 1600;	// negative secondary reinforcer in Hz (medium timeout)
			Failure_Tone_bigP		= 3200;	// negative secondary reinforcer in Hz (long timeout)
			}
		}
		
	//---------
		
			
	}
	
	
	__HEADER__
GRAPHS.pro
__FOOTER__
// Modified version of OBJECT.pro which sets globals neccessary for use with
// animated graphs and also sets graphs up for countermanding task.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

// Graph references used in oCreate() and oSetGraph()

hide constant gLEFT           =0;             						// Left graph
hide constant gRIGHT          =1;             						// Right graph
						
// Object types for use with oCreate()						
						
hide constant tPOINT          =1;             						// A single pixel
hide constant tBOX            =2;             						// A rectangle
hide constant tCROSS          =3;             						// '+' Horizontal/Vertical Cross
hide constant tXCROSS         =4;             						// 'x' Diagonal Cross
hide constant tELLIPSE        =5;             						// An ellipse (VideoSYNC only)
						
// Object attributes used by oSetAttribute()						
						
hide constant aXOR            =1;             						// Erase object when moving
hide constant aREPLACE        =2;             						// Replace pixels
hide constant aVISIBLE        =3;             						// Make object visible
hide constant aINVISIBLE      =4;             						// Don't draw object
hide constant aFILLED         =5;             						// Filled rectangle
hide constant aUNFILLED       =6;             						// Hollow rectangle
hide constant aSIZE           =7;             						// Resize box, cross, plus
			
// Graph attributes used by oSetGraph()			
			
hide constant aRANGE          =1;									// Define graph coordinate system
hide constant aTITLE          =2;									// Define graph title
hide constant aCLEAR          =3;									// Clear graph
			
declare hide object_fixwin,											// Eye and Box objects (left graph)
			object_eye,
			object_targwin,
			object_fix,
			object_targ;
			                 	  



declare GRAPHS(int scr_pixX, 
				int scr_pixY,
				float deg2pix_X,
				float deg2pix_Y);

process GRAPHS(int scr_pixX, 
				int scr_pixY,
				float deg2pix_X,
				float deg2pix_Y)
	{
	
	declare hide int left, right, down, up;
	
	
	
	oSetGraph(gleft, aCLEAR);
	
	// SETUP UP TARGET & EYE OBJECTS IN LEFT GRAPH
	left 	= Scr_pixX/-2;
	right 	= Scr_pixX/2;
	up 		= Scr_pixY/-2;
	down 	= Scr_pixY/2;
	
    oSetGraph(gleft, aRANGE, left, right, up, down);				// Object graph virt. coord
	oSetGraph(gleft, aTITLE, "*** TASK ***");						// Graph title
				
    object_fixwin = oCreate(tBOX, gLEFT, 0, 0);						// Create fix window object
    oSetAttribute(object_fixwin, aINVISIBLE);						// Not visible yet	
				
	object_targwin = oCreate(tBOX, gLEFT, 0, 0);					// Create target window object
    oSetAttribute(object_targwin, aINVISIBLE);						// Not visible yet
				
	object_fix = oCreate(tBOX, gLEFT, 0, 0);						// Create fix window object
    oSetAttribute(object_fix,aFILLED);								// Draw it filled
	oSetAttribute(object_fix, aINVISIBLE);							// Not visible yet	
				
	object_targ = oCreate(tBOX, gLEFT, 0, 0);						// Create target window object
	oSetAttribute(object_targ,aFILLED);								// Draw it filled
    oSetAttribute(object_targ, aINVISIBLE);							// Not visible yet
	
    object_eye = oCreate(tCross, gLEFT, 2*deg2pix_X, 2*deg2pix_Y);	// Create EYE object
	oSetAttribute(object_eye, aVISIBLE);							// It's always visible
	

	
	
	
	
	
	
	}		__HEADER__
INFOS.pro
__FOOTER__
//-------------------------------------------------------------------------------------------------------------------
// Records all of the parameters for a trial.  Should be sent during the inter trial interval while
// the communication lines are clear (no rdx communication with vdosync).  
// NOTES:
// 1) The order of these params is very important.  Matlab translation code identifies these parameters based on their
// order, so if you add more events, make sure to keep them in the same order in the matlab translation code.  (
// 2) This process relies heavily on globals (since it is grabbing stuff from all over the protocol).
//
// written by joshua.d.cosman@vanderbilt.edu 	January, 2014


declare int stop_sig_color_r, stop_sig_color_g, stop_sig_color_b;
declare int ignore_sig_color_r, ignore_sig_color_g, ignore_sig_color_b;
declare int fixation_color_r, fixation_color_g, fixation_color_b;
declare int target_color_r, target_color_g, target_color_b;
		
		
declare INFOS();

	process INFOS()
			{
			
			if (State == run_search_sess) 
				{
				Event_fifo[Set_event] = StartInfos_;								// Let Matlab know that trial infos are going to start streaming in...
				Set_event = (Set_event + 1) % Event_fifo_N;							// ...incriment event queue.
					
				//---------------------------------------------------------------------------------------------------------------------------------------
					
					Event_fifo[Set_event] = InfosZero + 999;						// 4000'set a strobe to identify the start of Search Vars (4000) not specfic to search and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
					
					Event_fifo[Set_event] = ArrStruct + 4001;							// Set a strobe to identify the type of search (typical vs. contextual cue) and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
					
					Event_fifo[Set_event] = SearchType + 4050;						// Set a strobe to identify the type of search (homo, hetero, etc.) and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
					
					Event_fifo[Set_event] = SingMode + 4060;						// Set a strobe to tell us if we should expect a singleton distractor 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue
					
					Event_fifo[Set_event] = SetSize + 4100;							// Set a strobe to identify Set Size and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event
					
					Event_fifo[Set_event] = TargetType + 4150;						// Set a strobe to identify the identity of the target and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event
				
					Event_fifo[Set_event] = TrialTp + 4200;							// Set a strobe to identify Trial Type (random vs repeated displays) (set in SEL_LOCS)	
					Set_event = (Set_event + 1) % Event_fifo_N;	
					
					Event_fifo[Set_event] = SearchEcc + 4250;						// Set a strobe to identify Trial Type (random vs repeated displays) (set in SEL_LOCS)	
					Set_event = (Set_event + 1) % Event_fifo_N;	
					
					Event_fifo[Set_event] = DistPres;								// Set a strobe to identify Singleton presence (set in LOC_RAND)	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event
					
					Event_fifo[Set_event] = THemi;									// Set a strobe to identify the target hemifield (set in LOC_RAND)	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event
					
					Event_fifo[Set_event] = DHemi;									// Set a strobe to identify the distractor hemifield (set in LOC_RAND)	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event
					
					Event_fifo[Set_event] = Rand_targ_angle + 5000;					// Set a strobe to identify actual target location	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event
					
					Event_fifo[Set_event] = Rand_d1_angle + 5500;					// Set a strobe to identify actual distractor location	
					Set_event = (Set_event + 1) % Event_fifo_N;	
					
					Event_fifo[Set_event] = CatchCode + 3800;						// Set a strobe to identify catch trials	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event 
					
					Event_fifo[Set_event] = SingCol + 4650;							// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue
					
					Event_fifo[Set_event] = DistOrt + 4660;							// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue
					
					Event_fifo[Set_event] = TargOrt + 4670;							// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queu
					
					Event_fifo[Set_event] = PercSingTrl + 4700;						// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue
					
					Event_fifo[Set_event] = Perc_catch + 4800;						// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue
					
					Event_fifo[Set_event] = Block_number + 4900;					// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue
									
					Event_fifo[Set_event] = Curr_soa + 6000;						// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue
									
					Event_fifo[Set_event] = InfosZero + Trl_Outcome;				// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
							
					Event_fifo[Set_event] = InfosZero + Max_sacc_duration;			// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
							
					Event_fifo[Set_event] = InfosZero + Max_saccade_time;			// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
							
					Event_fifo[Set_event] = InfosZero + Punish_time;				// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
							
					Event_fifo[Set_event] = InfosZero + Reward_Duration;			// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
							
					Event_fifo[Set_event] = InfosZero + Reward_Offset;				// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
							
					Event_fifo[Set_event] = InfosZero + Targ_hold_time;				// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
							
					Event_fifo[Set_event] = InfosZero + Tone_Duration;				// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
							
					Event_fifo[Set_event] = InfosZero + (X_Gain * 100) + 1000;		// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
					Event_fifo[Set_event] = InfosZero + (X_Offset * 100) + 1000;	// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
							
					Event_fifo[Set_event] = InfosZero + (Y_Gain * 100) + 1000;		// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
					Event_fifo[Set_event] = InfosZero + (Y_Offset * 100) + 1000;	// Send event and...	
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.

				    Event_fifo[Set_event] = DistFix + 4680;							// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queu

				    Event_fifo[Set_event] = ProbCue + 4690;							// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queu
					
				    Event_fifo[Set_event] = ProbSide + 4790;							// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queu		

				    Event_fifo[Set_event] = StimTm + 5100;							// Send event and... 
					Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queu						
				//---------------------------------------------------------------------------------------------------------------------------------------
					
				Event_fifo[Set_event] = EndInfos_;									// Let Matlab know that trial infos are finished streaming in...
				Set_event = (Set_event + 1) % Event_fifo_N;							// ...incriment event queue.	
				
				}

			else
				{
			
				stop_sig_color_r	= Stop_sig_color[0];
				stop_sig_color_g	= Stop_sig_color[1];
				stop_sig_color_b	= Stop_sig_color[2];
									 
				ignore_sig_color_r	= Ignore_sig_color[0];
				ignore_sig_color_g	= Ignore_sig_color[1];
				ignore_sig_color_b	= Ignore_sig_color[2];
				
				fixation_color_r	= Fixation_color[0];
				fixation_color_g	= Fixation_color[1];
				fixation_color_b	= Fixation_color[2];
									
				target_color_r		= Color_list[Curr_target,0];
				target_color_g		= Color_list[Curr_target,1];
				target_color_b		= Color_list[Curr_target,2];
				
				Event_fifo[Set_event] = StartInfos_;								// Let Matlab know that trial infos are going to start streaming in...
				Set_event = (Set_event + 1) % Event_fifo_N;							// ...incriment event queue.
				
			//---------------------------------------------------------------------------------------------------------------------------------------
						

						
				Event_fifo[Set_event] = InfosZero + Fixed_trl_length;			// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + (Ignore_weight * 100);		// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
					
				Event_fifo[Set_event] = InfosZero + Inter_trl_int;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Max_holdtime;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Max_sacc_duration;			// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Max_saccade_time;			// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Min_holdtime;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + N_SSDs;						// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Punish_time;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Reward_Duration;			// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Reward_Offset;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
							
				Event_fifo[Set_event] = InfosZero + Staircase;					// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + stop_sig_color_b;			// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + stop_sig_color_g;			// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + stop_sig_color_r;			// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + (Stop_weight * 100);		// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Success_Tone;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + (Targ_win_size * 100);		// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Angle;						// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.

				Event_fifo[Set_event] = InfosZero + color;						// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue
				
				Event_fifo[Set_event] = InfosZero + target_color_b;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + target_color_g;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + target_color_r;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + (Eccentricity * 100);		// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Targ_hold_time;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + (Size * 100);				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Tone_Duration;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Trial_length;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.	
						
				Event_fifo[Set_event] = InfosZero + Trl_Outcome;				// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + Trl_type;					// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + (X_Gain * 100) + 1000;		// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
					
				Event_fifo[Set_event] = InfosZero + (X_Offset * 100) + 1000;	// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
						
				Event_fifo[Set_event] = InfosZero + (Y_Gain * 100) + 1000;		// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
					
				Event_fifo[Set_event] = InfosZero + (Y_Offset * 100) + 1000;	// Send event and...	
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue.
				
				Event_fifo[Set_event] = InfosZero + Curr_soa;					// Send event and... <-- added by Namsoo
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue
						
				Event_fifo[Set_event] = InfosZero + Block_number;				// Send event and... <-- added by DCG
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue

				Event_fifo[Set_event] = InfosZero + StimTm + 1000;				// Send event and... <-- added by DCG
				Set_event = (Set_event + 1) % Event_fifo_N;						// ...incriment event queue
				//---------------------------------------------------------------------------------------------------------------------------------------
				
				Event_fifo[Set_event] = EndInfos_;									// Let Matlab know that trial infos are finished streaming in...
				Set_event = (Set_event + 1) % Event_fifo_N;							// ...incriment event queue.	
				
			
				}
	}		__HEADER__
JUICE.pro
__FOOTER__
//------------------------------------------------------------------------
// process JUICE(int channel, int duration)
// Deliver a juice reward to the animal
// INPUT
//	 channel  = rig specific TTL channel connected to solenoid (channel 9 in 028)
//	 duration = amount of time (in ms) to leave solenoid open
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare JUICE(int channel, int duration);

process JUICE(int channel, int duration)
	{
	declare hide int open   = 1;	
	declare hide int closed = 0;	
	
	mio_dig_set(channel,open);		// Start sending the TTL
	wait(duration);					// Wait for user defined period of time (ms)
	mio_dig_set(channel,closed);	// Stop sending the TTL
	}__HEADER__
KEY_REWD.pro
__FOOTER__
//------------------------------------------------------------------------
// process KEY_REWD()
// Give reward and play a tone when the button is pressed.  Had to be written
// b/c can't spawn processes with input at command prompt (stupid). 
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare KEY_REWD();

process KEY_REWD()
	{
	declare hide int juice_duration, tone_freq, tone_durr;			
	
	if (Base_Reward_time == 0)				//Don't know if these user defined globals have values yet
		{
		juice_duration = 80;
		}
	else
		{
		juice_duration = Base_Reward_time;
		}
		
	if (Success_Tone_medR == 0)				//Don't know if these user defined globals have values yet
		{
		tone_freq = 600;
		}
	else
		{
		tone_freq = Success_Tone_medR;
		}
	
	if (Tone_Duration == 0)					//Don't know if these user defined globals have values yet
		{
		tone_durr = 30;
		}
	else
		{
		tone_durr = Tone_Duration;
		}
	
	spawn JUICE(juice_channel,juice_duration);
	spawn TONE(tone_freq,tone_durr);
	
	}__HEADER__
KEY_STIM.pro
__FOOTER__
//------------------------------------------------------------------------
// process KEY_STIM()
// Give microstim when the button is pressed.  Had to be written
// b/c can't spawn processes with input at command prompt (stupid). 
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare KEY_STIM();

process KEY_STIM()
	{
	
	spawn STIM(stim_channel);
	
	}__HEADER__
KEY_STIM.txt
__FOOTER__
//------------------------------------------------------------------------
// process KEY_STIM()
// Give microstim when the button is pressed.  Had to be written
// b/c can't spawn processes with input at command prompt (stupid). 
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare KEY_STIM();

process KEY_STIM()
	{
	
	spawn STIM(stim_channel);
	
	}__HEADER__
KEY_TARG.pro
__FOOTER__
// This had be be written in this klugey way for 2 reasons
// 1) This has to only happen during fixation.  Otherwise, an accidental
// button press could upset the apple cart during cmanding.
// 2) There is no way to give user defined input to processes at the
// command promt (lame).

//------------------------------------------------------------------------
// process KEY_T_UP()
// Advance to the next target during the fixation task based on a user button press
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare KEY_T_UP();

process KEY_T_UP()
	{
	if (State == 2)									// Global which defines which task we are running (2 = fixation)
		{
		Fixation_Target = (Fixation_Target + 1) % 9;
		}
	}
	
	
//------------------------------------------------------------------------
// process KEY_T_DN()
// Advance to the next target during the fixation task based on a user button press
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare KEY_T_DN();

process KEY_T_DN()
	{
	if (State == 2)									// Global which defines which task we are running (2 = fixation)
		{
		Fixation_Target = Fixation_Target - 1;
		if (Fixation_Target == -1)
			{
			Fixation_Target = 8;
			}
		}	
	}__HEADER__
LOC_ASYM.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// This code selects RANDOM array locations. Any task using repeated locations uses LOC_REP 
// 
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013


//declare hide int 	pos_jitter = 10;   //  1-15 pixels position jitter 
declare hide int	numTargAngles = 4;
// declare hide int	numTargEcc = 12;
declare hide int	numDistAngles = 8;
declare hide int	numDistEcc = 9;

declare hide 		TgAng;
//declare hide int	THemi; //0=vertical meridian, 1=left hemi, 2=right hemi

//move to ALLVARS.pro
	//declare Rand_targ_angle;
	declare Rand_d1_angle;
	declare Rand_d2_angle;
	declare Rand_d3_angle;
	declare Rand_d4_angle;
	declare Rand_d5_angle;
	declare Rand_d6_angle;
	declare Rand_d7_angle;

	declare Rand_targ_ecc;
	declare Rand_d1_ecc;
	declare Rand_d2_ecc;
	declare Rand_d3_ecc;
	declare Rand_d4_ecc;
	declare Rand_d5_ecc;
	declare Rand_d6_ecc;
	declare Rand_d7_ecc;	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Declaring/setting up background processes that select target and distractor positions (only used in contextual cueing, since locations fixed in typical search)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

declare LOC_ASYM();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The fun begins.....	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
process LOC_ASYM
{		
		d1color = 250; // nonsalient distractor color = gray
		if (ArrStruct == 1) // structured array mode
			{	
			if (ProbCue == 0) // in this probability cueing case, 1 means probability cueing is turned on
				{
				TgAng = Random(8);
				
				if (TgAng == 0)
					{
					THemi = 0;
					Rand_targ_angle = Angle_list[0]; //Top location  
					Rand_d1_angle = Angle_list[4];	
					Rand_d2_angle = Angle_list[2];
					Rand_d3_angle = Angle_list[6]; 
					Rand_d4_angle = Angle_list[1];	
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
					}
				else if (TgAng == 1)
					{
					THemi = 1;
					Rand_targ_angle = Angle_list[1];      
					Rand_d1_angle = Angle_list[5];	
					Rand_d2_angle = Angle_list[3];
					Rand_d3_angle = Angle_list[7];
					Rand_d4_angle = Angle_list[2];	
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 	
					}
				else if (TgAng == 2)
					{
					THemi = 1;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[6];	
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[1];	
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
					}
				else if (TgAng == 3)
					{
					THemi = 1;
					Rand_targ_angle = Angle_list[3];      
					Rand_d1_angle = Angle_list[7];	
					Rand_d2_angle = Angle_list[5];
					Rand_d3_angle = Angle_list[1];
					Rand_d4_angle = Angle_list[2];	
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 				
					} 
				else if (TgAng == 4)
					{
					THemi = 0;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[0];	
					Rand_d2_angle = Angle_list[2];
					Rand_d3_angle = Angle_list[6]; 
					Rand_d4_angle = Angle_list[1];	
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
					}
				else if (TgAng == 5)
					{
					THemi = 2;
					Rand_targ_angle = Angle_list[5];      
					Rand_d1_angle = Angle_list[1];	
					Rand_d2_angle = Angle_list[7];
					Rand_d3_angle = Angle_list[3];
					Rand_d4_angle = Angle_list[2];	
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 	
					}
				else if (TgAng == 6)
					{
					THemi = 2;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[2];	
					Rand_d2_angle = Angle_list[0];
					Rand_d3_angle = Angle_list[4]; 
					Rand_d4_angle = Angle_list[1];	
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
					}
				else if (TgAng == 7)
					{
					THemi = 2;
					Rand_targ_angle = Angle_list[7];      
					Rand_d1_angle = Angle_list[3];	
					Rand_d2_angle = Angle_list[1];
					Rand_d3_angle = Angle_list[5];
					Rand_d4_angle = Angle_list[2];	
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 				
					} 						
				}
			else if (ProbCue == 1) // in this probability cueing case, 1 means probability cueing is turned on
				{
				TgAng = Random(12);
				
				if (ProbSide == 0) //right side more probable					
					{
					if (TgAng <= 2)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[1];      
						Rand_d1_angle = Angle_list[5];	
						Rand_d2_angle = Angle_list[3];
						Rand_d3_angle = Angle_list[7];
						Rand_d4_angle = Angle_list[2];	
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 	
						}
					else if (TgAng >= 3 && TgAng <= 5)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[2];      
						Rand_d1_angle = Angle_list[6];	
						Rand_d2_angle = Angle_list[4];
						Rand_d3_angle = Angle_list[0]; 
						Rand_d4_angle = Angle_list[1];	
						Rand_d5_angle = Angle_list[3];
						Rand_d6_angle = Angle_list[5]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng >= 6 && TgAng <= 8)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[3];      
						Rand_d1_angle = Angle_list[7];	
						Rand_d2_angle = Angle_list[5];
						Rand_d3_angle = Angle_list[1];
						Rand_d4_angle = Angle_list[2];	
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 				
						} 
					else if (TgAng == 9)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[5];      
						Rand_d1_angle = Angle_list[1];	
						Rand_d2_angle = Angle_list[7];
						Rand_d3_angle = Angle_list[3];
						Rand_d4_angle = Angle_list[2];	
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 	
						}
					else if (TgAng == 10)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[6];      
						Rand_d1_angle = Angle_list[2];	
						Rand_d2_angle = Angle_list[0];
						Rand_d3_angle = Angle_list[4]; 
						Rand_d4_angle = Angle_list[1];	
						Rand_d5_angle = Angle_list[3];
						Rand_d6_angle = Angle_list[5]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng == 11)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[7];      
						Rand_d1_angle = Angle_list[3];	
						Rand_d2_angle = Angle_list[1];
						Rand_d3_angle = Angle_list[5];
						Rand_d4_angle = Angle_list[2];	
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 				
						} 
					}
				else if (ProbSide == 1) //left side more probable					
					{
					if (TgAng <= 2)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[5];      
						Rand_d1_angle = Angle_list[1];	
						Rand_d2_angle = Angle_list[3];
						Rand_d3_angle = Angle_list[7];
						Rand_d4_angle = Angle_list[2];	
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 	
						}
					else if (TgAng >= 3 && TgAng <= 5)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[6];      
						Rand_d1_angle = Angle_list[2];	
						Rand_d2_angle = Angle_list[4];
						Rand_d3_angle = Angle_list[0]; 
						Rand_d4_angle = Angle_list[1];	
						Rand_d5_angle = Angle_list[3];
						Rand_d6_angle = Angle_list[5]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng >= 6 && TgAng <= 8)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[7];      
						Rand_d1_angle = Angle_list[3];	
						Rand_d2_angle = Angle_list[5];
						Rand_d3_angle = Angle_list[1];
						Rand_d4_angle = Angle_list[2];	
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 				
						} 
					else if (TgAng == 9)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[1];      
						Rand_d1_angle = Angle_list[5];	
						Rand_d2_angle = Angle_list[7];
						Rand_d3_angle = Angle_list[3];
						Rand_d4_angle = Angle_list[2];	
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 	
						}
					else if (TgAng == 10)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[2];      
						Rand_d1_angle = Angle_list[6];	
						Rand_d2_angle = Angle_list[0];
						Rand_d3_angle = Angle_list[4]; 
						Rand_d4_angle = Angle_list[1];	
						Rand_d5_angle = Angle_list[3];
						Rand_d6_angle = Angle_list[5]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng == 11)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[3];      
						Rand_d1_angle = Angle_list[7];	
						Rand_d2_angle = Angle_list[1];
						Rand_d3_angle = Angle_list[5];
						Rand_d4_angle = Angle_list[2];	
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 				
						} 
					}	
				}				
			//The variable below is set in DEFAULT.PRO and can be any integer between 0 and the end of the screen
			
			Rand_targ_ecc = SearchEcc;	//Sets fixed eccentricity for all training items. See DEFAULT.pros for setting each of these variables
			Rand_d1_ecc = SearchEcc;
			Rand_d2_ecc = SearchEcc;
			Rand_d3_ecc = SearchEcc;
			Rand_d4_ecc = SearchEcc;
			Rand_d5_ecc = SearchEcc;
			Rand_d6_ecc = SearchEcc;
			Rand_d7_ecc = SearchEcc;
			}		
	}__HEADER__
LOC_RAND-NoUS.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// This code selects RANDOM array locations. Any task using repeated locations uses LOC_REP 
// 
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013


//declare hide int 	pos_jitter = 10;   //  1-15 pixels position jitter 
declare hide int	numTargAngles = 4;
// declare hide int	numTargEcc = 12;
declare hide int	numDistAngles = 8;
declare hide int	numDistEcc = 9;

declare hide 		TgAng;
//declare hide int	THemi; //0=vertical meridian, 1=left hemi, 2=right hemi

//move to ALLVARS.pro
	//declare Rand_targ_angle;
	declare Rand_d1_angle;
	declare Rand_d2_angle;
	declare Rand_d3_angle;
	declare Rand_d4_angle;
	declare Rand_d5_angle;
	declare Rand_d6_angle;
	declare Rand_d7_angle;
	// declare Rand_d8_angle;
	// declare Rand_d9_angle;
	// declare Rand_d10_angle;
	// declare Rand_d11_angle;

	declare Rand_targ_ecc;
	declare Rand_d1_ecc;
	declare Rand_d2_ecc;
	declare Rand_d3_ecc;
	declare Rand_d4_ecc;
	declare Rand_d5_ecc;
	declare Rand_d6_ecc;
	declare Rand_d7_ecc;
	declare Rand_d8_ecc;
	declare Rand_d9_ecc;
	declare Rand_d10_ecc;
	declare Rand_d11_ecc;	

	
		
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Declaring/setting up background processes that select target and distractor positions (only used in contextual cueing, since locations fixed in typical search)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

declare RandomizeRanDistAngles();
declare RandomizeRanDistEccentricities();
	
declare RandomizeRanTargAngles();
/* declare RandomizeRanTargEccentricities();
 */
declare LOC_RAND();


process RandomizeRanDistAngles() 
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numDistAngles)			//Run loop while i < total # items in locX array
		{
		j = random(numDistAngles) ; 			//randomly select one of six positions in X location array
		temp = Dist_Ang_list[i];			//stick one of the other locations in temp
		Dist_Ang_list[i] = Dist_Ang_list[j];
		Dist_Ang_list[j] = temp;
		i = i + 1;
		}
	}	

process RandomizeRanDistEccentricities()	
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numDistEcc)			//Run loop while i < total # items in locX array
		{
		j = random(numDistEcc); 			//randomly select one of six positions in X location array
		temp = Dist_Ecc_list[i];			//stick one of the other locations in temp
		Dist_Ecc_list[i] = Dist_Ecc_list[j];
		Dist_Ecc_list[j] = temp;
		i = i + 1;
		}
	}	
	

//////////////////////////////////////////////	
// Selecting Target ocations on each trial //	
////////////////////////////////////////////	
	


process RandomizeRanTargAngles() 
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numTargAngles)			//Run loop while i < total # items in locX array
		{
		j = random(numTargAngles) ; 			//randomly select one of six positions in X location array
		temp = RanTarg_Ang_list[i];			//stick one of the other locations in temp
		RanTarg_Ang_list[i] = RanTarg_Ang_list[j];
		RanTarg_Ang_list[j] = temp;
		i = i + 1;
		}
	}	

/* process RandomizeRanTargEccentricities()	
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numEcc)			//Run loop while i < total # items in locX array
		{
		j = random(numEcc); 			//randomly select one of six positions in X location array
		temp = Ecc_list[i];			//stick one of the other locations in temp
		Ecc_list[i] = Ecc_list[j];
		Ecc_list[j] = temp;
		i = i + 1;
		}
	} */
	


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The fun begins.....	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	

process LOC_RAND
{

////////////////// If turned on, selects eccentricity randomly from trial to trial ////////////////
if (VarEcc == 1)
	{
	if (SelEcc == 0)
		{
		SearchEcc = 6;
		}
	else if (SelEcc == 1)
		{
		SearchEcc = 8;
		}
	else if (SelEcc == 2)
		{
		SearchEcc = 12;
		}
	}
//////////////////////////////////////////////
		
	if (SingMode == 0)
	{
		d1color = 250;
		if (ArrStruct == 1) // structured array mode
			{	
			if (TargTrainSet == 1) // random target location on each trial
				{
				TgAng = Random(4);
				
				if (TgAng == 0)
					{
					THemi = 1;
					Rand_targ_angle = Angle_list[1];      
					Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[2];
					Rand_d3_angle = Angle_list[6]; 
					Rand_d4_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
					}
				else if (TgAng == 1)
					{
					THemi = 1;
					Rand_targ_angle = Angle_list[3];      
					Rand_d1_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[1];
					Rand_d3_angle = Angle_list[7];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 	
					}
				else if (TgAng == 2)
					{
					THemi = 1;
					Rand_targ_angle = Angle_list[5];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[2]; 
					Rand_d7_angle = Angle_list[7]; 
					}
				else if (TgAng == 3)
					{
					THemi = 2;
					Rand_targ_angle = Angle_list[7];      
					Rand_d1_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[5];
					Rand_d3_angle = Angle_list[1];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 				
					} 
				else if (TgAng == 4)
					{
					THemi = 0;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[2];
					Rand_d3_angle = Angle_list[6]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
					}
				else if (TgAng == 5)
					{
					THemi = 1;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[7];
					Rand_d3_angle = Angle_list[3];
					Rand_d4_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 	
					}
				else if (TgAng == 6)
					{
					THemi = 0;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[0];
					Rand_d3_angle = Angle_list[6]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
					}
				else if (TgAng == 7)
					{
					THemi = 2;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[1];
					Rand_d3_angle = Angle_list[5];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[0]; 
					Rand_d7_angle = Angle_list[7]; 				
					} 						
				}
				
			else if (TargTrainSet == 2) // Target always at 12:00, etc. in clockwise fashion
				{
				THemi = 0;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[6]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
				}
			else if (TargTrainSet == 3)
				{
					Rand_targ_angle = Angle_list[1];      
					Rand_d1_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[5];
					Rand_d3_angle = Angle_list[7];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 
				}
			else if (TargTrainSet == 4)
				{
				THemi = 1;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
				}
			else if (TargTrainSet == 5)
				{
				THemi = 1;
					Rand_targ_angle = Angle_list[3];      
					Rand_d1_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[5];
					Rand_d3_angle = Angle_list[1];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 
				}
			else if (TargTrainSet == 6)
				{
				THemi = 0;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[2];
					Rand_d3_angle = Angle_list[6]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7];			
				}
			else if (TargTrainSet == 7)
				{
				THemi = 2;
					Rand_targ_angle = Angle_list[5];      
					Rand_d1_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[7];
					Rand_d3_angle = Angle_list[3];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 			
				}
			else if (TargTrainSet == 8)
				{
				THemi = 2;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[0];
					Rand_d3_angle = Angle_list[4]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7];  			
				}
			else if (TargTrainSet == 9)
				{
				THemi = 2;
					Rand_targ_angle = Angle_list[7];      
					Rand_d1_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[1];
					Rand_d3_angle = Angle_list[5];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0];			
				}
			
			//This variable is set in DEFAULT.PRO and can be any integer between 0 and the end of the screen
			Rand_targ_ecc = SearchEcc;	//Sets fixed eccentricity for all training items. See DEFAULT.pros for setting each of these variables
			Rand_d1_ecc = SearchEcc;
			Rand_d2_ecc = SearchEcc;
			Rand_d3_ecc = SearchEcc;
			Rand_d4_ecc = SearchEcc;
			Rand_d5_ecc = SearchEcc;
			Rand_d6_ecc = SearchEcc;
			Rand_d7_ecc = SearchEcc;

			}
	
		if(ArrStruct == 0) //contextual cueing mode
			{
			
			// The two processes below select random angles and eccentricities for each search item, creating an entirely unstructured search array
			// Importantly, this also selects from the angle and eccentricity lists that are housed in ALL_VARS.pro, as opposed to the above ecccs and angles, which 
			// come from DEFAULT.PRO and can be hard coded on the fly.

			spawn RandomizeRanDistAngles;                         // Runs RandomizeRanAngles
			waitforprocess RandomizeRanDistAngles;                // Waits for it to finish
			
			spawn RandomizeRanDistEccentricities;                         // Runs RandomizeREccentricities
			waitforprocess RandomizeRanDistEccentricities;                // Waits for it to finish
			
			spawn RandomizeRanTargAngles;                         // Runs RandomizeRanTargAngles
			waitforprocess RandomizeRanTargAngles;                // Waits for it to finish 
			 
			 
			// Note to self: if it ever becomes necessary for contextual cueing, can use a for loop to state that if (Ang_list[X] = Rand_targ_angle 
			// that gets selected AT THE BEGINNING OF THE SESSION, switch it to location Ang_list[setsize - 1]. would have to 
			// add a thirteenth location for this to work with setsize twelve, this would allow me to select locations for targets in the random session without acceindetal overlap between targets and later 'random' distractors
			
			//Random array angles	
			Rand_targ_angle = RanTarg_Ang_list[0];					
			Rand_d1_angle = Dist_Ang_list[1];
			Rand_d2_angle = Dist_Ang_list[2];
			Rand_d3_angle = Dist_Ang_list[3];
			Rand_d4_angle = Dist_Ang_list[4];
			Rand_d5_angle = Dist_Ang_list[5];
			Rand_d6_angle = Dist_Ang_list[6];
			Rand_d7_angle = Dist_Ang_list[7];
			// Rand_d8_angle = Ang_list[8];
			// Rand_d9_angle = Ang_list[9];
			// Rand_d10_angle = Ang_list[10];
			// Rand_d11_angle = Ang_list[11];
			
			//Random Array Eccentricities
			Rand_targ_ecc = SearchEcc;
			Rand_d1_ecc = Dist_Ecc_List[1];
			Rand_d2_ecc = Dist_Ecc_List[2];
			Rand_d3_ecc = Dist_Ecc_List[3];
			Rand_d4_ecc = Dist_Ecc_List[4];
			Rand_d5_ecc = Dist_Ecc_List[5];
			Rand_d6_ecc = Dist_Ecc_List[6];
			Rand_d7_ecc = Dist_Ecc_List[7];
			Rand_d8_ecc = Dist_Ecc_List[8];
			// Rand_d9_ecc = Dist_Ecc_List[9];
			// Rand_d10_ecc = Dist_Ecc_List[10];
			// Rand_d11_ecc = Dist_Ecc_List[11];
			} 
	}		
			
		
			
	else if (SingMode == 1)
		{	
			
			//This snippet allows us to select the proportion of trials on which a singleton appear, default is set in DEFAULT.pro
			SingFreq = Random(100); 
			if (SingFreq < PercSingTrl)
			{
			d1color = 251;
			DistPres = 2222; //singleton distractor present, for strobing
			}
			else
			{
			d1color = 250;
			DistPres = 1111; //singleton distractor absent, for strobing
			}
		if (ArrStruct == 1)
			{
			
			if (LatStruct == 1)
				{
				TgAng = Random(2); // change to 4 if we want to include up/down positions; change to 2 if just wanting lateral positions
					
				if (TgAng == 0) //Left target, right distractor
					{
					THemi = 8100;
					DHemi = 8200;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}
				if (TgAng == 1) //Right target, left distractor
					{
					THemi = 8200;
					DHemi = 8100;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}	
				if (TgAng == 2) //Top target, bottom distractor
					{
					THemi = 8100;
					DHemi = 8200;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}
				if (TgAng == 3) //Bottom target, Top distractor
					{
					THemi = 8200;
					DHemi = 8100;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}		
			
							
				//Target eccentricity - This variable is set in DEFAULT.PRO and can be any integer between 0 and the end of the screen
					Rand_targ_ecc = SearchEcc;	//Sets fixed eccentricity for all training items. See DEFAULT.pros for setting each of these variables
					Rand_d1_ecc = SearchEcc;
					Rand_d2_ecc = SearchEcc;
					Rand_d3_ecc = SearchEcc;
					Rand_d4_ecc = SearchEcc;
					Rand_d5_ecc = SearchEcc;
					Rand_d6_ecc = SearchEcc;
					Rand_d7_ecc = SearchEcc;
				}
			
			else
				{
				TgAng = Random(12);
				
				if (TgAng == 0) //Top vertical target, right distractor
					{
					THemi = 8888;
					DHemi = 8200;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[4]; 
					Rand_d4_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}
				if (TgAng == 1) //Top vertical target, left distractor
					{
					THemi = 8888;
					DHemi = 8100;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}				
				if (TgAng == 2) //Bottom vertical target, right distractor
					{
					THemi = 8888;
					DHemi = 8200;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[7]; 
					}
				if (TgAng == 3) //Bottom vertical target, left distractor
					{
					THemi = 8888;
					DHemi = 8100;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[2];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}					
				if (TgAng == 4) //Left target, vertical top distractor
					{
					THemi = 8100;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[1]; 
					}					
				if (TgAng == 5) //Left target, vertical bottom distractor
					{
					THemi = 8100;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[2];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[1]; 
					}			
				if (TgAng == 6) //Right target, vertical top distractor
					{
					THemi = 8200;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[4]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[7];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}					
				if (TgAng == 7) //Right target, vertical bottom distractor
					{
					THemi = 8200;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[7];
					Rand_d6_angle = Angle_list[1]; 
					Rand_d7_angle = Angle_list[5]; 
					}		
				if (TgAng == 8) //Left target, right distractor
					{
					THemi = 8100;
					DHemi = 8200;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}
				if (TgAng == 9) //Right target, left distractor
					{
					THemi = 8200;
					DHemi = 8100;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}	
				if (TgAng == 10) //Top target, bottom distractor
					{
					THemi = 8888;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}
				if (TgAng == 11) //Bottom target, Top distractor
					{
					THemi = 8888;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}		
			
							
				//Target eccentricity - This variable is set in DEFAULT.PRO and can be any integer between 0 and the end of the screen
					Rand_targ_ecc = SearchEcc;	//Sets fixed eccentricity for all training items. See DEFAULT.pros for setting each of these variables
					Rand_d1_ecc = SearchEcc;
					Rand_d2_ecc = SearchEcc;
					Rand_d3_ecc = SearchEcc;
					Rand_d4_ecc = SearchEcc;
					Rand_d5_ecc = SearchEcc;
					Rand_d6_ecc = SearchEcc;
					Rand_d7_ecc = SearchEcc;
			
				}
			}
		if(ArrStruct == 0) //contextual cueing mode
			{
			
			// The two processes below select random angles and eccentricities for each search item, creating an entirely unstructured search array
			// Importantly, this also selects from the angle and eccentricity lists that are housed in ALL_VARS.pro, as opposed to the above ecccs and angles, which 
			// come from DEFAULT.PRO and can be hard coded on the fly.

			spawn RandomizeRanDistAngles;                         // Runs RandomizeRanAngles
			waitforprocess RandomizeRanDistAngles;                // Waits for it to finish
			
			spawn RandomizeRanDistEccentricities;                         // Runs RandomizeREccentricities
			waitforprocess RandomizeRanDistEccentricities;                // Waits for it to finish
			
			spawn RandomizeRanTargAngles;                         // Runs RandomizeRanTargAngles
			waitforprocess RandomizeRanTargAngles;                // Waits for it to finish 
			 
			 
			// Note to self: if it ever becomes necessary for contextual cueing, can use a for loop to state that if (Ang_list[X] = Rand_targ_angle 
			// that gets selected AT THE BEGINNING OF THE SESSION, switch it to location Ang_list[setsize - 1]. would have to 
			// add a thirteenth location for this to work with setsize twelve, this would allow me to select locations for targets in the random session without acceindetal overlap between targets and later 'random' distractors
			
			//Random array angles	
			Rand_targ_angle = RanTarg_Ang_list[0];					
			Rand_d1_angle = Dist_Ang_list[1];
			Rand_d2_angle = Dist_Ang_list[2];
			Rand_d3_angle = Dist_Ang_list[3];
			Rand_d4_angle = Dist_Ang_list[4];
			Rand_d5_angle = Dist_Ang_list[5];
			Rand_d6_angle = Dist_Ang_list[6];
			Rand_d7_angle = Dist_Ang_list[7];
			// Rand_d8_angle = Ang_list[8];
			// Rand_d9_angle = Ang_list[9];
			// Rand_d10_angle = Ang_list[10];
			// Rand_d11_angle = Ang_list[11];
			
			//Random Array Eccentricities
			Rand_targ_ecc = SearchEcc;
			Rand_d1_ecc = Dist_Ecc_List[1];
			Rand_d2_ecc = Dist_Ecc_List[2];
			Rand_d3_ecc = Dist_Ecc_List[3];
			Rand_d4_ecc = Dist_Ecc_List[4];
			Rand_d5_ecc = Dist_Ecc_List[5];
			Rand_d6_ecc = Dist_Ecc_List[6];
			Rand_d7_ecc = Dist_Ecc_List[7];
			Rand_d8_ecc = Dist_Ecc_List[8];
			// Rand_d9_ecc = Dist_Ecc_List[9];
			// Rand_d10_ecc = Dist_Ecc_List[10];
			// Rand_d11_ecc = Dist_Ecc_List[11];
			}			
		}
	}	__HEADER__
LOC_RAND.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// This code selects RANDOM array locations. Any task using repeated locations uses LOC_REP 
// 
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013


//declare hide int 	pos_jitter = 10;   //  1-15 pixels position jitter 
declare hide int	numTargAngles = 4;
// declare hide int	numTargEcc = 12;
declare hide int	numDistAngles = 8;
declare hide int	numDistEcc = 9;

declare hide 		TgAng;
//declare hide int	THemi; //0=vertical meridian, 1=left hemi, 2=right hemi

//move to ALLVARS.pro
	//declare Rand_targ_angle;
	declare Rand_d1_angle;
	declare Rand_d2_angle;
	declare Rand_d3_angle;
	declare Rand_d4_angle;
	declare Rand_d5_angle;
	declare Rand_d6_angle;
	declare Rand_d7_angle;
	// declare Rand_d8_angle;
	// declare Rand_d9_angle;
	// declare Rand_d10_angle;
	// declare Rand_d11_angle;

	declare Rand_targ_ecc;
	declare Rand_d1_ecc;
	declare Rand_d2_ecc;
	declare Rand_d3_ecc;
	declare Rand_d4_ecc;
	declare Rand_d5_ecc;
	declare Rand_d6_ecc;
	declare Rand_d7_ecc;
	declare Rand_d8_ecc;
	declare Rand_d9_ecc;
	declare Rand_d10_ecc;
	declare Rand_d11_ecc;	

	
		
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Declaring/setting up background processes that select target and distractor positions (only used in contextual cueing, since locations fixed in typical search)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

declare RandomizeRanDistAngles();
declare RandomizeRanDistEccentricities();
	
declare RandomizeRanTargAngles();
/* declare RandomizeRanTargEccentricities();
 */
declare LOC_RAND();


process RandomizeRanDistAngles() 
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numDistAngles)			//Run loop while i < total # items in locX array
		{
		j = random(numDistAngles) ; 			//randomly select one of six positions in X location array
		temp = Dist_Ang_list[i];			//stick one of the other locations in temp
		Dist_Ang_list[i] = Dist_Ang_list[j];
		Dist_Ang_list[j] = temp;
		i = i + 1;
		}
	}	

process RandomizeRanDistEccentricities()	
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numDistEcc)			//Run loop while i < total # items in locX array
		{
		j = random(numDistEcc); 			//randomly select one of six positions in X location array
		temp = Dist_Ecc_list[i];			//stick one of the other locations in temp
		Dist_Ecc_list[i] = Dist_Ecc_list[j];
		Dist_Ecc_list[j] = temp;
		i = i + 1;
		}
	}	
	

//////////////////////////////////////////////	
// Selecting Target ocations on each trial //	
////////////////////////////////////////////	
	


process RandomizeRanTargAngles() 
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numTargAngles)			//Run loop while i < total # items in locX array
		{
		j = random(numTargAngles) ; 			//randomly select one of six positions in X location array
		temp = RanTarg_Ang_list[i];			//stick one of the other locations in temp
		RanTarg_Ang_list[i] = RanTarg_Ang_list[j];
		RanTarg_Ang_list[j] = temp;
		i = i + 1;
		}
	}	

/* process RandomizeRanTargEccentricities()	
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numEcc)			//Run loop while i < total # items in locX array
		{
		j = random(numEcc); 			//randomly select one of six positions in X location array
		temp = Ecc_list[i];			//stick one of the other locations in temp
		Ecc_list[i] = Ecc_list[j];
		Ecc_list[j] = temp;
		i = i + 1;
		}
	} */
	


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The fun begins.....	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	

process LOC_RAND
{

////////////////// If turned on, selects eccentricity randomly from trial to trial ////////////////
if (VarEcc == 1)
	{
	if (SelEcc == 0)
		{
		SearchEcc = 6;
		}
	else if (SelEcc == 1)
		{
		SearchEcc = 8;
		}
	else if (SelEcc == 2)
		{
		SearchEcc = 12;
		}
	// else if (SelEcc == 3)
		// {
		// SearchEcc = 18;
		// }	
	}
//////////////////////////////////////////////
		
	if (SingMode == 0)
	{
		d1color = 250;
		if (ArrStruct == 1) // structured array mode
			{	
			if (TargTrainSet == 1) // random target location on each trial
				{
				if (LatStruct == 0) // here LatStruct == 0 presents items ONLY at the 4 square locations; developed for ultrasound
					{
					TgAng = Random(6);
					
					if (TgAng == 0)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[1];      
						Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[2];
						Rand_d3_angle = Angle_list[6]; 
						Rand_d4_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[3];
						Rand_d6_angle = Angle_list[5]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng == 1)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[2];      
						Rand_d1_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[1];
						Rand_d3_angle = Angle_list[7];
						Rand_d4_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 	
						}
					else if (TgAng == 2)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[3];      
						Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[4];
						Rand_d3_angle = Angle_list[0]; 
						Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[5];
						Rand_d6_angle = Angle_list[2]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng == 3)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[5];      
						Rand_d1_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[7];
						Rand_d3_angle = Angle_list[1];
						Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 				
						} 					

					else if (TgAng == 4)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[6];      
						Rand_d1_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[4];
						Rand_d3_angle = Angle_list[0]; 
						Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[3];
						Rand_d6_angle = Angle_list[2]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng == 5)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[7];      
						Rand_d1_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[5];
						Rand_d3_angle = Angle_list[1];
						Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 				
						} 
						}
				if (LatStruct == 1)	
					{
						TgAng = Random(8);
					
					if (TgAng == 0)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[1];      
						Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[2];
						Rand_d3_angle = Angle_list[6]; 
						Rand_d4_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[3];
						Rand_d6_angle = Angle_list[5]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng == 1)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[3];      
						Rand_d1_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[1];
						Rand_d3_angle = Angle_list[7];
						Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 	
						}
					else if (TgAng == 2)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[5];      
						Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[4];
						Rand_d3_angle = Angle_list[0]; 
						Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[3];
						Rand_d6_angle = Angle_list[2]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng == 3)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[7];      
						Rand_d1_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[5];
						Rand_d3_angle = Angle_list[1];
						Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 				
						} 
					else if (TgAng == 4)
						{
						THemi = 0;
						Rand_targ_angle = Angle_list[0];      
						Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[2];
						Rand_d3_angle = Angle_list[6]; 
						Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[3];
						Rand_d6_angle = Angle_list[5]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng == 5)
						{
						THemi = 1;
						Rand_targ_angle = Angle_list[2];      
						Rand_d1_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[7];
						Rand_d3_angle = Angle_list[3];
						Rand_d4_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[6]; 
						Rand_d7_angle = Angle_list[0]; 	
						}
					else if (TgAng == 6)
						{
						THemi = 0;
						Rand_targ_angle = Angle_list[4];      
						Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[0];
						Rand_d3_angle = Angle_list[6]; 
						Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[3];
						Rand_d6_angle = Angle_list[5]; 
						Rand_d7_angle = Angle_list[7]; 
						}
					else if (TgAng == 7)
						{
						THemi = 2;
						Rand_targ_angle = Angle_list[6];      
						Rand_d1_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
						Rand_d2_angle = Angle_list[1];
						Rand_d3_angle = Angle_list[5];
						Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
						Rand_d5_angle = Angle_list[4];
						Rand_d6_angle = Angle_list[0]; 
						Rand_d7_angle = Angle_list[7]; 				
						} 
					}
				}
				
			else if (TargTrainSet == 2) // Target always at 12:00, etc. in clockwise fashion
				{
				THemi = 0;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[6]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
				}
			else if (TargTrainSet == 3)
				{
					Rand_targ_angle = Angle_list[1];      
					Rand_d1_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[5];
					Rand_d3_angle = Angle_list[7];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 
				}
			else if (TargTrainSet == 4)
				{
				THemi = 1;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7]; 
				}
			else if (TargTrainSet == 5)
				{
				THemi = 1;
					Rand_targ_angle = Angle_list[3];      
					Rand_d1_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[5];
					Rand_d3_angle = Angle_list[1];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 
				}
			else if (TargTrainSet == 6)
				{
				THemi = 0;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[2];
					Rand_d3_angle = Angle_list[6]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7];			
				}
			else if (TargTrainSet == 7)
				{
				THemi = 2;
					Rand_targ_angle = Angle_list[5];      
					Rand_d1_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[7];
					Rand_d3_angle = Angle_list[3];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0]; 			
				}
			else if (TargTrainSet == 8)
				{
				THemi = 2;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[0];
					Rand_d3_angle = Angle_list[4]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[5]; 
					Rand_d7_angle = Angle_list[7];  			
				}
			else if (TargTrainSet == 9)
				{
				THemi = 2;
					Rand_targ_angle = Angle_list[7];      
					Rand_d1_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[1];
					Rand_d3_angle = Angle_list[5];
					Rand_d4_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[4];
					Rand_d6_angle = Angle_list[6]; 
					Rand_d7_angle = Angle_list[0];			
				}
			
			//This variable is set in DEFAULT.PRO and can be any integer between 0 and the end of the screen
			Rand_targ_ecc = SearchEcc;	//Sets fixed eccentricity for all training items. See DEFAULT.pros for setting each of these variables
			Rand_d1_ecc = SearchEcc;
			Rand_d2_ecc = SearchEcc;
			Rand_d3_ecc = SearchEcc;
			Rand_d4_ecc = SearchEcc;
			Rand_d5_ecc = SearchEcc;
			Rand_d6_ecc = SearchEcc;
			Rand_d7_ecc = SearchEcc;

			}
	
		if(ArrStruct == 0) //contextual cueing mode
			{
			
			// The two processes below select random angles and eccentricities for each search item, creating an entirely unstructured search array
			// Importantly, this also selects from the angle and eccentricity lists that are housed in ALL_VARS.pro, as opposed to the above ecccs and angles, which 
			// come from DEFAULT.PRO and can be hard coded on the fly.

			spawn RandomizeRanDistAngles;                         // Runs RandomizeRanAngles
			waitforprocess RandomizeRanDistAngles;                // Waits for it to finish
			
			spawn RandomizeRanDistEccentricities;                         // Runs RandomizeREccentricities
			waitforprocess RandomizeRanDistEccentricities;                // Waits for it to finish
			
			spawn RandomizeRanTargAngles;                         // Runs RandomizeRanTargAngles
			waitforprocess RandomizeRanTargAngles;                // Waits for it to finish 
			 
			 
			// Note to self: if it ever becomes necessary for contextual cueing, can use a for loop to state that if (Ang_list[X] = Rand_targ_angle 
			// that gets selected AT THE BEGINNING OF THE SESSION, switch it to location Ang_list[setsize - 1]. would have to 
			// add a thirteenth location for this to work with setsize twelve, this would allow me to select locations for targets in the random session without acceindetal overlap between targets and later 'random' distractors
			
			//Random array angles	
			Rand_targ_angle = RanTarg_Ang_list[0];					
			Rand_d1_angle = Dist_Ang_list[1];
			Rand_d2_angle = Dist_Ang_list[2];
			Rand_d3_angle = Dist_Ang_list[3];
			Rand_d4_angle = Dist_Ang_list[4];
			Rand_d5_angle = Dist_Ang_list[5];
			Rand_d6_angle = Dist_Ang_list[6];
			Rand_d7_angle = Dist_Ang_list[7];
			// Rand_d8_angle = Ang_list[8];
			// Rand_d9_angle = Ang_list[9];
			// Rand_d10_angle = Ang_list[10];
			// Rand_d11_angle = Ang_list[11];
			
			//Random Array Eccentricities
			Rand_targ_ecc = SearchEcc;
			Rand_d1_ecc = Dist_Ecc_List[1];
			Rand_d2_ecc = Dist_Ecc_List[2];
			Rand_d3_ecc = Dist_Ecc_List[3];
			Rand_d4_ecc = Dist_Ecc_List[4];
			Rand_d5_ecc = Dist_Ecc_List[5];
			Rand_d6_ecc = Dist_Ecc_List[6];
			Rand_d7_ecc = Dist_Ecc_List[7];
			Rand_d8_ecc = Dist_Ecc_List[8];
			// Rand_d9_ecc = Dist_Ecc_List[9];
			// Rand_d10_ecc = Dist_Ecc_List[10];
			// Rand_d11_ecc = Dist_Ecc_List[11];
			} 
	}		
			
		
			
	else if (SingMode == 1)
		{	
			
			//This snippet allows us to select the proportion of trials on which a singleton appear, default is set in DEFAULT.pro
			SingFreq = Random(100); 
			if (SingFreq < PercSingTrl)
			{
			d1color = 251;
			DistPres = 2222; //singleton distractor present, for strobing
			}
			else
			{
			d1color = 250;
			DistPres = 1111; //singleton distractor absent, for strobing
			}
		if (ArrStruct == 1)
			{
			
			if (LatStruct == 0)
				{
				TgAng = Random(4); // change to 4 if we want to include up/down positions; change to 2 if just wanting lateral positions
					
				if (TgAng == 0) //Left target, right distractor
					{
					THemi = 8100;
					DHemi = 8200;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}
				if (TgAng == 1) //Right target, left distractor
					{
					THemi = 8200;
					DHemi = 8100;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}	
				if (TgAng == 2) //Top target, bottom distractor
					{
					THemi = 8100;
					DHemi = 8200;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}
				if (TgAng == 3) //Bottom target, Top distractor
					{
					THemi = 8200;
					DHemi = 8100;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}		
			
							
				//Target eccentricity - This variable is set in DEFAULT.PRO and can be any integer between 0 and the end of the screen
					Rand_targ_ecc = SearchEcc;	//Sets fixed eccentricity for all training items. See DEFAULT.pros for setting each of these variables
					Rand_d1_ecc = SearchEcc;
					Rand_d2_ecc = SearchEcc;
					Rand_d3_ecc = SearchEcc;
					Rand_d4_ecc = SearchEcc;
					Rand_d5_ecc = SearchEcc;
					Rand_d6_ecc = SearchEcc;
					Rand_d7_ecc = SearchEcc;
				}
			
			else
				{
				TgAng = Random(12);
				
				if (TgAng == 0) //Top vertical target, right distractor
					{
					THemi = 8888;
					DHemi = 8200;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[4]; 
					Rand_d4_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}
				if (TgAng == 1) //Top vertical target, left distractor
					{
					THemi = 8888;
					DHemi = 8100;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}				
				if (TgAng == 2) //Bottom vertical target, right distractor
					{
					THemi = 8888;
					DHemi = 8200;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[7]; 
					}
				if (TgAng == 3) //Bottom vertical target, left distractor
					{
					THemi = 8888;
					DHemi = 8100;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[2];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}					
				if (TgAng == 4) //Left target, vertical top distractor
					{
					THemi = 8100;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[1]; 
					}					
				if (TgAng == 5) //Left target, vertical bottom distractor
					{
					THemi = 8100;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[2];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[5];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[3];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[1]; 
					}			
				if (TgAng == 6) //Right target, vertical top distractor
					{
					THemi = 8200;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[4]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[7];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}					
				if (TgAng == 7) //Right target, vertical bottom distractor
					{
					THemi = 8200;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[3];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[7];
					Rand_d6_angle = Angle_list[1]; 
					Rand_d7_angle = Angle_list[5]; 
					}		
				if (TgAng == 8) //Left target, right distractor
					{
					THemi = 8100;
					DHemi = 8200;
					Rand_targ_angle = Angle_list[6];      
					Rand_d1_angle = Angle_list[2];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}
				if (TgAng == 9) //Right target, left distractor
					{
					THemi = 8200;
					DHemi = 8100;
					Rand_targ_angle = Angle_list[2];      
					Rand_d1_angle = Angle_list[6];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[4];
					Rand_d3_angle = Angle_list[0]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}	
				if (TgAng == 10) //Top target, bottom distractor
					{
					THemi = 8888;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[0];      
					Rand_d1_angle = Angle_list[4];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[7];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[1];
					Rand_d6_angle = Angle_list[3]; 
					Rand_d7_angle = Angle_list[5]; 
					}
				if (TgAng == 11) //Bottom target, Top distractor
					{
					THemi = 8888;
					DHemi = 8888;
					Rand_targ_angle = Angle_list[4];      
					Rand_d1_angle = Angle_list[0];	//See DEFAULT.pros for setting each of these variables
					Rand_d2_angle = Angle_list[6];
					Rand_d3_angle = Angle_list[2]; 
					Rand_d4_angle = Angle_list[1];	//See DEFAULT.pros for setting each of these variables
					Rand_d5_angle = Angle_list[5];
					Rand_d6_angle = Angle_list[7]; 
					Rand_d7_angle = Angle_list[3]; 
					}		
			
							
				//Target eccentricity - This variable is set in DEFAULT.PRO and can be any integer between 0 and the end of the screen
					Rand_targ_ecc = SearchEcc;	//Sets fixed eccentricity for all training items. See DEFAULT.pros for setting each of these variables
					Rand_d1_ecc = SearchEcc;
					Rand_d2_ecc = SearchEcc;
					Rand_d3_ecc = SearchEcc;
					Rand_d4_ecc = SearchEcc;
					Rand_d5_ecc = SearchEcc;
					Rand_d6_ecc = SearchEcc;
					Rand_d7_ecc = SearchEcc;
			
				}
			}
		if(ArrStruct == 0) //contextual cueing mode
			{
			
			// The two processes below select random angles and eccentricities for each search item, creating an entirely unstructured search array
			// Importantly, this also selects from the angle and eccentricity lists that are housed in ALL_VARS.pro, as opposed to the above ecccs and angles, which 
			// come from DEFAULT.PRO and can be hard coded on the fly.

			spawn RandomizeRanDistAngles;                         // Runs RandomizeRanAngles
			waitforprocess RandomizeRanDistAngles;                // Waits for it to finish
			
			spawn RandomizeRanDistEccentricities;                         // Runs RandomizeREccentricities
			waitforprocess RandomizeRanDistEccentricities;                // Waits for it to finish
			
			spawn RandomizeRanTargAngles;                         // Runs RandomizeRanTargAngles
			waitforprocess RandomizeRanTargAngles;                // Waits for it to finish 
			 
			 
			// Note to self: if it ever becomes necessary for contextual cueing, can use a for loop to state that if (Ang_list[X] = Rand_targ_angle 
			// that gets selected AT THE BEGINNING OF THE SESSION, switch it to location Ang_list[setsize - 1]. would have to 
			// add a thirteenth location for this to work with setsize twelve, this would allow me to select locations for targets in the random session without acceindetal overlap between targets and later 'random' distractors
			
			//Random array angles	
			Rand_targ_angle = RanTarg_Ang_list[0];					
			Rand_d1_angle = Dist_Ang_list[1];
			Rand_d2_angle = Dist_Ang_list[2];
			Rand_d3_angle = Dist_Ang_list[3];
			Rand_d4_angle = Dist_Ang_list[4];
			Rand_d5_angle = Dist_Ang_list[5];
			Rand_d6_angle = Dist_Ang_list[6];
			Rand_d7_angle = Dist_Ang_list[7];
			// Rand_d8_angle = Ang_list[8];
			// Rand_d9_angle = Ang_list[9];
			// Rand_d10_angle = Ang_list[10];
			// Rand_d11_angle = Ang_list[11];
			
			//Random Array Eccentricities
			Rand_targ_ecc = SearchEcc;
			Rand_d1_ecc = Dist_Ecc_List[1];
			Rand_d2_ecc = Dist_Ecc_List[2];
			Rand_d3_ecc = Dist_Ecc_List[3];
			Rand_d4_ecc = Dist_Ecc_List[4];
			Rand_d5_ecc = Dist_Ecc_List[5];
			Rand_d6_ecc = Dist_Ecc_List[6];
			Rand_d7_ecc = Dist_Ecc_List[7];
			Rand_d8_ecc = Dist_Ecc_List[8];
			// Rand_d9_ecc = Dist_Ecc_List[9];
			// Rand_d10_ecc = Dist_Ecc_List[10];
			// Rand_d11_ecc = Dist_Ecc_List[11];
			}			
		}
	}	__HEADER__
LOC_REP.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// This code selects REPEATED array locations 
// 
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013


//declare hide int 	pos_jitter = 10;   //  1-15 pixels position jitter 
declare hide int	numTargAngles = 4;
// declare hide int	numTargEcc = 12;
declare hide int	numDistAngles = 8;
declare hide int	numDistEcc = 9; 

//Move to ALLVARS.pro
	declare R1_targ_angle;
	declare R1_d1_angle;
	declare R1_d2_angle;
	declare R1_d3_angle;
	declare R1_d4_angle;
	declare R1_d5_angle;
	declare R1_d6_angle;
	declare R1_d7_angle;
	declare R1_d8_angle;
	declare R1_d9_angle;
	declare R1_d10_angle;
	declare R1_d11_angle;
	
	declare R1_targ_ecc;
	declare R1_d1_ecc;
	declare R1_d2_ecc;
	declare R1_d3_ecc;
	declare R1_d4_ecc;
	declare R1_d5_ecc;
	declare R1_d6_ecc;
	declare R1_d7_ecc;
	declare R1_d8_ecc;
	declare R1_d9_ecc;
	declare R1_d10_ecc;
	declare R1_d11_ecc;
	
	declare R2_targ_angle;
	declare R2_d1_angle;
	declare R2_d2_angle;
	declare R2_d3_angle;
	declare R2_d4_angle;
	declare R2_d5_angle;
	declare R2_d6_angle;
	declare R2_d7_angle;
	declare R2_d8_angle;
	declare R2_d9_angle;
	declare R2_d10_angle;
	declare R2_d11_angle;

	declare R2_targ_ecc;
	declare R2_d1_ecc;
	declare R2_d2_ecc;
	declare R2_d3_ecc;
	declare R2_d4_ecc;
	declare R2_d5_ecc;
	declare R2_d6_ecc;
	declare R2_d7_ecc;
	declare R2_d8_ecc;
	declare R2_d9_ecc;
	declare R2_d10_ecc;
	declare R2_d11_ecc;	
	
	declare R3_targ_angle;
	declare R3_d1_angle;
	declare R3_d2_angle;
	declare R3_d3_angle;
	declare R3_d4_angle;
	declare R3_d5_angle;
	declare R3_d6_angle;
	declare R3_d7_angle;
	declare R3_d8_angle;
	declare R3_d9_angle;
	declare R3_d10_angle;
	declare R3_d11_angle;
	
	declare R3_targ_ecc;
	declare R3_d1_ecc;
	declare R3_d2_ecc;
	declare R3_d3_ecc;
	declare R3_d4_ecc;
	declare R3_d5_ecc;
	declare R3_d6_ecc;
	declare R3_d7_ecc;
	declare R3_d8_ecc;
	declare R3_d9_ecc;
	declare R3_d10_ecc;
	declare R3_d11_ecc;	
 	
	declare R4_targ_angle;
	declare R4_d1_angle;
	declare R4_d2_angle;
	declare R4_d3_angle;
	declare R4_d4_angle;
	declare R4_d5_angle;
	declare R4_d6_angle;
	declare R4_d7_angle;
	declare R4_d8_angle;
	declare R4_d9_angle;
	declare R4_d10_angle;
	declare R4_d11_angle;	

	declare R4_targ_ecc;
	declare R4_d1_ecc;
	declare R4_d2_ecc;
	declare R4_d3_ecc;
	declare R4_d4_ecc;
	declare R4_d5_ecc;
	declare R4_d6_ecc;
	declare R4_d7_ecc;
	declare R4_d8_ecc;
	declare R4_d9_ecc;
	declare R4_d10_ecc;
	declare R4_d11_ecc;
	
	declare R5_targ_angle;
	declare R5_d1_angle;
	declare R5_d2_angle;
	declare R5_d3_angle;
	declare R5_d4_angle;
	declare R5_d5_angle;
	declare R5_d6_angle;
	declare R5_d7_angle;
	declare R5_d8_angle;
	declare R5_d9_angle;
	declare R5_d10_angle;
	declare R5_d11_angle;
	
	declare R5_targ_ecc;
	declare R5_d1_ecc;
	declare R5_d2_ecc;
	declare R5_d3_ecc;
	declare R5_d4_ecc;
	declare R5_d5_ecc;
	declare R5_d6_ecc;
	declare R5_d7_ecc;
	declare R5_d8_ecc;
	declare R5_d9_ecc;
	declare R5_d10_ecc;
	declare R5_d11_ecc;

	declare R6_targ_angle;
	declare R6_d1_angle;
	declare R6_d2_angle;
	declare R6_d3_angle;
	declare R6_d4_angle;
	declare R6_d5_angle;
	declare R6_d6_angle;
	declare R6_d7_angle;
	declare R6_d8_angle;
	declare R6_d9_angle;
	declare R6_d10_angle;
	declare R6_d11_angle;
	
	declare R6_targ_ecc;
	declare R6_d1_ecc;
	declare R6_d2_ecc;
	declare R6_d3_ecc;
	declare R6_d4_ecc;
	declare R6_d5_ecc;
	declare R6_d6_ecc;
	declare R6_d7_ecc;
	declare R6_d8_ecc;
	declare R6_d9_ecc;
	declare R6_d10_ecc;
	declare R6_d11_ecc;


declare REP1_LOC();
declare REP2_LOC();
declare REP3_LOC();
declare REP4_LOC();
declare REP5_LOC();
declare REP6_LOC();
// declare REP7_LOC();
// declare REP8_LOC();


declare RandomizeRepDistAngles();
declare RandomizeRepDistEccentricities();
	
declare RandomizeRepTargAngles();
/* declare RandomizeRanTargEccentricities();
 */
declare LOC_REP();


	
process LOC_REP
	{
	//spawn RandomizeAngles;
	//spawn RandomizeEccentricities;
	spawn REP1_LOC;
	spawn REP2_LOC;
	spawn REP3_LOC;
	spawn REP4_LOC;
	spawn REP5_LOC;
	spawn REP6_LOC;
	}

process RandomizeRepDistAngles() 
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numDistAngles)			//Run loop while i < total # items in locX array
		{
		j = random(numDistAngles) ; 			//randomly select one of six positions in X location array
		temp = Dist_Ang_list[i];			//stick one of the other locations in temp
		Dist_Ang_list[i] = Dist_Ang_list[j];
		Dist_Ang_list[j] = temp;
		i = i + 1;
		}
	}	

process RandomizeRepDistEccentricities()	
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numDistEcc)			//Run loop while i < total # items in locX array
		{
		j = random(numDistEcc); 			//randomly select one of six positions in X location array
		temp = Dist_Ecc_list[i];			//stick one of the other locations in temp
		Dist_Ecc_list[i] = Dist_Ecc_list[j];
		Dist_Ecc_list[j] = temp;
		i = i + 1;
		}
	}	
	

//////////////////////////////////////////////	
// Selecting Target ocations on each trial //	
////////////////////////////////////////////	
	


process RandomizeRepTargAngles() 
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numTargAngles)			//Run loop while i < total # items in locX array
		{
		j = random(numTargAngles) ; 			//randomly select one of six positions in X location array
		temp = RepTarg_Ang_list[i];			//stick one of the other locations in temp
		RepTarg_Ang_list[i] = RepTarg_Ang_list[j];
		RepTarg_Ang_list[j] = temp;
		i = i + 1;
		}
	}	
		


		
		
	process REP1_LOC  // Select repeated array 1 locations
		{ 	
			
			spawn RandomizeRepDistAngles;                         // Runs RandomizeRanAngles
			waitforprocess RandomizeRepDistAngles;                // Waits for it to finish
			
			spawn RandomizeRepDistEccentricities;                         // Runs RandomizeREccentricities
			waitforprocess RandomizeRepDistEccentricities;                // Waits for it to finish
			
			spawn RandomizeRepTargAngles;                         // Runs RandomizeRanTargAngles
			waitforprocess RandomizeRepTargAngles;                // Waits for it to finish 
		
		
		R1_targ_angle = RepTarg_Ang_list[0];					
		R1_d1_angle = Dist_Ang_list[1];
		R1_d2_angle = Dist_Ang_list[2];
		R1_d3_angle = Dist_Ang_list[3];
		R1_d4_angle = Dist_Ang_list[4];
		R1_d5_angle = Dist_Ang_list[5];
		R1_d6_angle = Dist_Ang_list[6];
		R1_d7_angle = Dist_Ang_list[7];
		// R1_d8_angle = Dist_Ang_list[8];
		// R1_d9_angle = Dist_Ang_list[9];
		// R1_d10_angle = Dist_Ang_list[10];
		// R1_d11_angle = Dist_Ang_list[11];
		
		
		R1_targ_ecc = SearchEcc;
		R1_d1_ecc = SearchEcc;
		R1_d2_ecc = SearchEcc;
		R1_d3_ecc = SearchEcc;
		R1_d4_ecc = SearchEcc;
		R1_d5_ecc = SearchEcc;
		R1_d6_ecc = SearchEcc;
		R1_d7_ecc = SearchEcc;
		R1_d8_ecc = SearchEcc;
		// R1_d9_ecc = Dist_Ecc_list[9];
		// R1_d10_ecc = Dist_Ecc_list[10];
		// R1_d11_ecc = Dist_Ecc_list[11];
		
		}	

	process REP2_LOC
		{ 
		
			spawn RandomizeRepDistAngles;                         // Runs RandomizeRanAngles
			waitforprocess RandomizeRepDistAngles;                // Waits for it to finish
			
			spawn RandomizeRepDistEccentricities;                         // Runs RandomizeREccentricities
			waitforprocess RandomizeRepDistEccentricities;                // Waits for it to finish
			
			spawn RandomizeRepTargAngles;                         // Runs RandomizeRanTargAngles
			waitforprocess RandomizeRepTargAngles;                // Waits for it to finish 
		
		
		R2_targ_angle = RepTarg_Ang_list[0];					
		R2_d1_angle = Dist_Ang_list[1];
		R2_d2_angle = Dist_Ang_list[2];
		R2_d3_angle = Dist_Ang_list[3];
		R2_d4_angle = Dist_Ang_list[4];
		R2_d5_angle = Dist_Ang_list[5];
		R2_d6_angle = Dist_Ang_list[6];
		R2_d7_angle = Dist_Ang_list[7];
		// R2_d8_angle = Dist_Ang_list[8];
		// R2_d9_angle = Dist_Ang_list[9];
		// R2_d10_angle = Dist_Ang_list[10];
		// R2_d11_angle = Dist_Ang_list[11];
		
		
		R2_targ_ecc = SearchEcc;
		R2_d1_ecc = SearchEcc;
		R2_d2_ecc = SearchEcc;
		R2_d3_ecc = SearchEcc;
		R2_d4_ecc = SearchEcc;
		R2_d5_ecc = SearchEcc;
		R2_d6_ecc = SearchEcc;
		R2_d7_ecc = SearchEcc;
		R2_d8_ecc = SearchEcc;
		// R2_d9_ecc = Dist_Ecc_list[9];
		// R2_d10_ecc = Dist_Ecc_list[10];
		// R2_d11_ecc = Dist_Ecc_list[11];
		
		
		}	

	process REP3_LOC
		{

			spawn RandomizeRepDistAngles;                         // Runs RandomizeRanAngles
			waitforprocess RandomizeRepDistAngles;                // Waits for it to finish
			
			spawn RandomizeRepDistEccentricities;                         // Runs RandomizeREccentricities
			waitforprocess RandomizeRepDistEccentricities;                // Waits for it to finish
			
			spawn RandomizeRepTargAngles;                         // Runs RandomizeRanTargAngles
			waitforprocess RandomizeRepTargAngles;                // Waits for it to finish 
		
		
		R3_targ_angle = RepTarg_Ang_list[0];					
		R3_d1_angle = Dist_Ang_list[1];
		R3_d2_angle = Dist_Ang_list[2];
		R3_d3_angle = Dist_Ang_list[3];
		R3_d4_angle = Dist_Ang_list[4];
		R3_d5_angle = Dist_Ang_list[5];
		R3_d6_angle = Dist_Ang_list[6];
		R3_d7_angle = Dist_Ang_list[7];
		// R3_d8_angle = Dist_Ang_list[8];
		// R3_d9_angle = Dist_Ang_list[9];
		// R3_d10_angle = Dist_Ang_list[10];
		// R3_d11_angle = Dist_Ang_list[11];
		
		R3_targ_ecc = SearchEcc;
		R3_d1_ecc = SearchEcc;
		R3_d2_ecc = SearchEcc;
		R3_d3_ecc = SearchEcc;
		R3_d4_ecc = SearchEcc;
		R3_d5_ecc = SearchEcc;
		R3_d6_ecc = SearchEcc;
		R3_d7_ecc = SearchEcc;
		R3_d8_ecc = SearchEcc;
		// R3_d9_ecc = Dist_Ecc_list[9];
		// R3_d10_ecc = Dist_Ecc_list[10];
		// R3_d11_ecc = Dist_Ecc_list[11];
		
		}	
		
	process REP4_LOC
		{ 

			spawn RandomizeRepDistAngles;                         // Runs RandomizeRanAngles
			waitforprocess RandomizeRepDistAngles;                // Waits for it to finish
			
			spawn RandomizeRepDistEccentricities;                         // Runs RandomizeREccentricities
			waitforprocess RandomizeRepDistEccentricities;                // Waits for it to finish
			
			spawn RandomizeRepTargAngles;                         // Runs RandomizeRanTargAngles
			waitforprocess RandomizeRepTargAngles;                // Waits for it to finish 
		
		
		R4_targ_angle = RepTarg_Ang_list[0];					
		R4_d1_angle = Dist_Ang_list[1];
		R4_d2_angle = Dist_Ang_list[2];
		R4_d3_angle = Dist_Ang_list[3];
		R4_d4_angle = Dist_Ang_list[4];
		R4_d5_angle = Dist_Ang_list[5];
		R4_d6_angle = Dist_Ang_list[6];
		R4_d7_angle = Dist_Ang_list[7];
		// R4_d8_angle = Dist_Ang_list[8];
		// R4_d9_angle = Dist_Ang_list[9];
		// R4_d10_angle = Dist_Ang_list[10];
		// R4_d11_angle = Dist_Ang_list[11];
		
		
		R4_targ_ecc = SearchEcc;
		R4_d1_ecc = SearchEcc;
		R4_d2_ecc = SearchEcc;
		R4_d3_ecc = SearchEcc;
		R4_d4_ecc = SearchEcc;
		R4_d5_ecc = SearchEcc;
		R4_d6_ecc = SearchEcc;
		R4_d7_ecc = SearchEcc;
		R4_d8_ecc = SearchEcc;
		// R4_d9_ecc = Dist_Ecc_list[9];
		// R4_d10_ecc = Dist_Ecc_list[10];
		// R4_d11_ecc = Dist_Ecc_list[11];
		
		}	
		
	process REP5_LOC
		{ 
		
			spawn RandomizeRepDistAngles;                         // Runs RandomizeRanAngles
			waitforprocess RandomizeRepDistAngles;                // Waits for it to finish
			
			spawn RandomizeRepDistEccentricities;                         // Runs RandomizeREccentricities
			waitforprocess RandomizeRepDistEccentricities;                // Waits for it to finish
			
			spawn RandomizeRepTargAngles;                         // Runs RandomizeRanTargAngles
			waitforprocess RandomizeRepTargAngles;                // Waits for it to finish 
		
		
		R5_targ_angle = RepTarg_Ang_list[0];					
		R5_d1_angle = Dist_Ang_list[1];
		R5_d2_angle = Dist_Ang_list[2];
		R5_d3_angle = Dist_Ang_list[3];
		R5_d4_angle = Dist_Ang_list[4];
		R5_d5_angle = Dist_Ang_list[5];
		R5_d6_angle = Dist_Ang_list[6];
		R5_d7_angle = Dist_Ang_list[7];
		// R5_d8_angle = Dist_Ang_list[8];
		// R5_d9_angle = Dist_Ang_list[9];
		// R5_d10_angle = Dist_Ang_list[10];
		// R5_d11_angle = Dist_Ang_list[11];
		
		R5_targ_ecc = SearchEcc;
		R5_d1_ecc = SearchEcc;
		R5_d2_ecc = SearchEcc;
		R5_d3_ecc = SearchEcc;
		R5_d4_ecc = SearchEcc;
		R5_d5_ecc = SearchEcc;
		R5_d6_ecc = SearchEcc;
		R5_d7_ecc = SearchEcc;
		R5_d8_ecc = SearchEcc;
		// R5_d9_ecc = Dist_Ecc_list[9];
		// R5_d10_ecc = Dist_Ecc_list[10];
		// R5_d11_ecc = Dist_Ecc_list[11];
		
		}	
		
	process REP6_LOC
		{ 	
		

		
			spawn RandomizeRepDistAngles;                         // Runs RandomizeRanAngles
			waitforprocess RandomizeRepDistAngles;                // Waits for it to finish
			
			spawn RandomizeRepDistEccentricities;                         // Runs RandomizeREccentricities
			waitforprocess RandomizeRepDistEccentricities;                // Waits for it to finish
			
			spawn RandomizeRepTargAngles;                         // Runs RandomizeRanTargAngles
			waitforprocess RandomizeRepTargAngles;                // Waits for it to finish 
		
		
		R6_targ_angle = RepTarg_Ang_list[0];					
		R6_d1_angle = Dist_Ang_list[1];
		R6_d2_angle = Dist_Ang_list[2];
		R6_d3_angle = Dist_Ang_list[3];
		R6_d4_angle = Dist_Ang_list[4];
		R6_d5_angle = Dist_Ang_list[5];
		R6_d6_angle = Dist_Ang_list[6];
		R6_d7_angle = Dist_Ang_list[7];
		// R6_d8_angle = Dist_Ang_list[8];
		// R6_d9_angle = Dist_Ang_list[9];
		// R6_d10_angle = Dist_Ang_list[10];
		// R6_d11_angle = Dist_Ang_list[11];
		
		R6_targ_ecc = SearchEcc;
		R6_d1_ecc = SearchEcc;
		R6_d2_ecc = SearchEcc;
		R6_d3_ecc = SearchEcc;
		R6_d4_ecc = SearchEcc;
		R6_d5_ecc = SearchEcc;
		R6_d6_ecc = SearchEcc;
		R6_d7_ecc = SearchEcc;
		R6_d8_ecc = SearchEcc;
		// R6_d9_ecc = Dist_Ecc_list[9];
		// R6_d10_ecc = Dist_Ecc_list[10];
		// R6_d11_ecc = Dist_Ecc_list[11];
		
		}		

	
	
	
	__HEADER__
LOC_TARG.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// This code selects RANDOM array locations 
// 
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013


//declare hide int 	pos_jitter = 10;   //  1-15 pixels position jitter 
declare hide int	numAngles = 12;
declare hide int	numEcc = 12;

/* declare float	Ecc_list[12] = {5, 8, 11, 14, 5, 8, 11, 14, 5, 8, 11, 14};	// distance of each target from center of screen individually (degrees)	declare hide float 	targ_angle;
declare float	Ang_list[12] = {0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330}; */


//move to ALLVARS.pro
	


	
	
	declare Rand_targ_angle;
	declare R1_targ_angle;
	declare R2_targ_angle;
	declare R3_targ_angle;
	declare R4_targ_angle;
	declare R5_targ_angle;
	declare R6_targ_angle;
	
	declare Rand_targ_ecc;
	declare R1_targ_ecc;
	declare R2_targ_ecc;
	declare R3_targ_ecc;
	declare R4_targ_ecc;
	declare R5_targ_ecc;
	declare R6_targ_ecc;

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

declare RandomizeRAngles();
declare RandomizeREccentricities();
declare RAND_LOC();

declare LOC_RAND();


	
process LOC_RAND
	{
	spawnwait RandomizeRAngles;
	spawnwait RandomizeREccentricities;
	spawnwait RAND_LOC;
	}


process RandomizeRAngles() 
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numAngles)			//Run loop while i < total # items in locX array
		{
		j = random(numAngles) ; 			//randomly select one of six positions in X location array
		temp = Ang_list[i];			//stick one of the other locations in temp
		Ang_list[i] = Ang_list[j];
		Ang_list[j] = temp;
		i = i + 1;
		}
	}	

process RandomizeREccentricities()	
	{
	
	int	i, j, temp;
	i = 0;
	while (i < numEcc)			//Run loop while i < total # items in locX array
		{
		j = random(numEcc); 			//randomly select one of six positions in X location array
		temp = Ecc_list[i];			//stick one of the other locations in temp
		Ecc_list[i] = Ecc_list[j];
		Ecc_list[j] = temp;
		i = i + 1;
		}
	}	
	

// The processes below use the shuffled arrays, and select values from those arrays to produce either trial by trial coordinates 
// in random arrays) or experiment-wide trial coordinates (for repeated arrays, selected at beginning of trial).


process RAND_LOC
	{

	spawn RandomizeRAngles;                         // Runs RandomizeXLocations
    waitforprocess RandomizeRAngles;                // Waits for it to finish
	
	spawn RandomizeREccentricities;                         // Runs RandomizeYLocations
    waitforprocess RandomizeREccentricities;                // Waits for it to finish
	
	//Random Array Angles
	Rand_targ_angle = Ang_list[0];					// Set random target/distractor locations each trial
	Rand_d1_angle = Ang_list[1];
	Rand_d2_angle = Ang_list[2];
	Rand_d3_angle = Ang_list[3];
	Rand_d4_angle = Ang_list[4];
	Rand_d5_angle = Ang_list[5];
	Rand_d6_angle = Ang_list[6];
	Rand_d7_angle = Ang_list[7];
	Rand_d8_angle = Ang_list[8];
	Rand_d9_angle = Ang_list[9];
	Rand_d10_angle = Ang_list[10];
	Rand_d11_angle = Ang_list[11];
	
	//Random Array Eccentricities
	Rand_targ_ecc = Ecc_List[0];
	Rand_d1_ecc = Ecc_List[1];
	Rand_d2_ecc = Ecc_List[2];
	Rand_d3_ecc = Ecc_List[3];
	Rand_d4_ecc = Ecc_List[4];
	Rand_d5_ecc = Ecc_List[5];
	Rand_d6_ecc = Ecc_List[6];
	Rand_d7_ecc = Ecc_List[7];
	Rand_d8_ecc = Ecc_List[8];
	Rand_d9_ecc = Ecc_List[9];
	Rand_d10_ecc = Ecc_List[10];
	Rand_d11_ecc = Ecc_List[11];
	}__HEADER__
LOCATE_I.pro
__FOOTER__
//----------------------------------------------------------------------
// LOCATE_I - Updates the global variables In_FixWin and In_TargWin 
// which tell where the eyes are.  This is called by WATCHEYE.pro every
// time the eye position changes.
//
// IN
//      No args
//      eye_x
// 		eye_y                   Mouse/eye position
//      fix_win_left		    Target and Fixation window positions
// 		fix_win_right
// 		fix_win_down
// 		fix_win_up
// 		targ_win_left
// 		targ_win_right
// 		targ_win_down
// 		targ_win_up
//
// OUT
//      In_FixWin                1 for yes, 0 for no
//		In_TargWin
//
// NOTE:  The logic of this function does not preclude the eyes being
// both at fixaion and at the target simultaneously.  This could 
// happen if the user accidentally made two overlapping windows in the
// setup.  It is up to the user to handle this with input or in the 
// protocol.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare int In_FixWin, In_TargWin;

declare LOCATE_I(float eye_x,
				float eye_y,
				float fix_win_left,
				float fix_win_right,
                float fix_win_down, 
				float fix_win_up,
				float targ_win_left, 
				float targ_win_right,
				float targ_win_down, 
				float targ_win_up);
				
process LOCATE_I(float eye_x,
                float eye_y,
                float fix_win_left,
                float fix_win_right,
                float fix_win_down, 
                float fix_win_up,
                float targ_win_left, 
                float targ_win_right,
                float targ_win_down, 
                float targ_win_up)
	{

	// See if subject is in the fixation window
	if (eye_x >= fix_win_left  &&
		eye_x <= fix_win_right &&
		eye_y <= fix_win_down  &&
		eye_y >= fix_win_up)
		{
		In_FixWin = 1;               // Subject is inside fixation window
		}
	else
		In_FixWin = 0;               // Subject is not inside fixation window
		
		
	// See if subject is in the target window
	if (eye_x >= targ_win_left  &&
		eye_x <= targ_win_right &&
		eye_y <= targ_win_down  &&
		eye_y >= targ_win_up)
		{
		In_TargWin = 1;               // Subject is inside target window
		}
	else
		In_TargWin = 0;               // Subject is not inside taraget window		

	}__HEADER__
LSCH_PGS.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// process LSCH_PGS(int curr_target, 
				// float fixation_size, 
				// int fixation_color, 
				// int sig_color, 
				// float scr_width, 
				// float scr_height, 
				// float pd_left, 
				// float pd_bottom, 
				// float pd_size);
// Figure out all stimuli that will be needed on the next search trial and
// place it all into video memory.
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013


declare hide float 	Size;   																	// Global output will be sent as stobes...        										
declare hide int   	Color;								
declare hide float 	Eccentricity; 
declare hide float 	Angle;        																// ...by INFOS.pro at trial end.

declare hide float 	targ_orient; 
declare hide float 	d1_orient; 
declare hide float 	d2_orient; 
declare hide float 	d3_orient; 
declare hide float 	d4_orient; 
declare hide float 	d5_orient; 
declare hide float 	d6_orient; 
declare hide float 	d7_orient; 
declare hide float 	d8_orient; 
declare hide float 	d9_orient; 
declare hide float 	d10_orient; 
declare hide float 	d11_orient; 

declare hide float 	targ_angle;
declare hide float 	d1_angle; 
declare hide float 	d2_angle; 
declare hide float 	d3_angle; 
declare hide float 	d4_angle; 
declare hide float 	d5_angle; 
declare hide float 	d6_angle; 
declare hide float 	d7_angle; 
declare hide float 	d8_angle; 
declare hide float 	d9_angle; 
declare hide float 	d10_angle; 
declare hide float 	d11_angle; 
      																
declare hide float 	targ_ecc;
declare hide float 	d1_ecc; 
declare hide float 	d2_ecc; 
declare hide float 	d3_ecc; 
declare hide float 	d4_ecc; 
declare hide float 	d5_ecc; 
declare hide float 	d6_ecc; 
declare hide float 	d7_ecc; 
declare hide float 	d8_ecc; 
declare hide float 	d9_ecc; 
declare hide float 	d10_ecc; 
declare hide float 	d11_ecc; 


declare LSCH_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				int sig_color,                          										// see DEFAULT.pro and ALL_VARS.pro
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ);                       										// see GRAPHS.pro

process LSCH_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				int sig_color,                          										// see DEFAULT.pro and ALL_VARS.pro
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ)                        										// see GRAPHS.pro
	{										
											
	declare hide float 	pd_eccentricity;										
	declare hide float	pd_angle;										
	declare hide float 	opposite;										
	declare hide float	adjacent;										
	declare hide float	stim_ecc_x;										
	declare hide float	stim_ecc_y;										
	declare hide int   	open        = 0;										
	declare hide int   	fill        = 1;										
	
	// number the pgs that need to be drawn
	declare hide int   	blank       = 0;										
	declare hide int	fixation_pd = 1;										
	declare hide int	fixation    = 2;
	declare hide int	plac_pd   	= 3;										
	declare hide int	plac      	= 4;	
	declare hide int	target_f_pd = 5;										
	declare hide int	target_f  	= 6;
	declare hide int	target      = 7;										
	
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Calculate screen coordinates for stimuli on this trial								
	size         = llength;   
	color        = 250;//curr_target + 1;	// Figure out the attributes of the current target 
	angle			= targ_angle; 			
	eccentricity	= targ_ecc;	
										
	stim_ecc_x		= cos(angle) * eccentricity;
	stim_ecc_y		= sin(angle) * eccentricity * -1;

	oSetAttribute(object_targ, aSIZE, size*deg2pix_X, size*deg2pix_Y);							// while we are at it, resize fixation object on animated graph
	oSetAttribute(object_fix, aSIZE, 1*deg2pix_X, 1*deg2pix_Y);									
	
	opposite = ((scr_height/2)-pd_bottom);														// Figure out angle and eccentricity of photodiode marker in pixels
	adjacent = ((scr_width/2)-pd_left);                                                         // NOTE: I am assuming your pd is in the lower left quadrant of your screen
	pd_eccentricity = sqrt((opposite * opposite) + (adjacent * adjacent));
	pd_angle = rad2deg(atan (opposite / adjacent));
	pd_angle = pd_angle + 180; 																//change this for different quadrent or write some code for flexibility
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 1
	// print("fixation with photodiode");
	dsendf("rw %d,%d;\n",fixation_pd,fixation_pd); 												// draw first pg of video memory
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 2	  
	// print("fixation");
	dsendf("rw %d,%d;\n",fixation,fixation);   													// draw second pg of video memory                                       
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 3	 
	// print("placeholders with photodiode");
	

	dsendf("rw %d,%d;\n",plac_pd,plac_pd);  												// draw pg 3                                        
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	
	if (SetSize > 0)
		{
		spawnwait DRW_PLAC(targ_angle, targ_ecc, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
		}
	if (SetSize > 1)	
		{
		spawnwait DRW_PLAC(d1_angle, d1_ecc, d1color, fill, deg2pix_X, deg2pix_Y);          	
		}
	if (SetSize > 2)
		{
		spawnwait DRW_PLAC(d2_angle, d2_ecc, color, fill, deg2pix_X, deg2pix_Y);          	      
		}
	if (SetSize > 3)	
		{
		spawnwait DRW_PLAC(d3_angle, d3_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 4)
		{
		spawnwait DRW_PLAC(d4_angle, d4_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 5)
		{
		spawnwait DRW_PLAC(d5_angle, d5_ecc, color, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 6)
		{
		spawnwait DRW_PLAC(d6_angle, d6_ecc, color, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 7)
		{
		spawnwait DRW_PLAC(d7_angle, d7_ecc, color, fill, deg2pix_X, deg2pix_Y);          
		}
	if (SetSize > 8)
		{
		spawnwait DRW_PLAC(d8_angle, d8_ecc, color, fill, deg2pix_X, deg2pix_Y);	
		}
	if (SetSize > 9)	
		{      	
		spawnwait DRW_PLAC(d9_angle, d9_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 10)	
		{
		spawnwait DRW_PLAC(d10_angle, d10_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 11)	
		{         
		spawnwait DRW_PLAC(d11_angle, d11_ecc, color, fill, deg2pix_X, deg2pix_Y);         
		}
		
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
	nexttick;
		
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 4	 
	// print("placeholders");
	dsendf("rw %d,%d;\n",plac,plac);  												// draw pg 3                                        
	dsendf("cl:\n");

	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point

	if (SetSize > 0)
		{
		spawnwait DRW_PLAC(targ_angle, targ_ecc, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
		}
	
	if (SetSize > 1)	
		{
		spawnwait DRW_PLAC(d1_angle, d1_ecc, d1color, fill, deg2pix_X, deg2pix_Y);          	
		}
	if (SetSize > 2)
		{
		spawnwait DRW_PLAC(d2_angle, d2_ecc, color, fill, deg2pix_X, deg2pix_Y);          	      
		}
	if (SetSize > 3)	
		{
		spawnwait DRW_PLAC(d3_angle, d3_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 4)
		{
		spawnwait DRW_PLAC(d4_angle, d4_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 5)
		{
		spawnwait DRW_PLAC(d5_angle, d5_ecc, color, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 6)
		{
		spawnwait DRW_PLAC(d6_angle, d6_ecc, color, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 7)
		{
		spawnwait DRW_PLAC(d7_angle, d7_ecc, color, fill, deg2pix_X, deg2pix_Y);          
		}
	if (SetSize > 8)
		{
		spawnwait DRW_PLAC(d8_angle, d8_ecc, color, fill, deg2pix_X, deg2pix_Y);	
		}
	if (SetSize > 9)	
		{      	
		spawnwait DRW_PLAC(d9_angle, d9_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 10)	
		{
		spawnwait DRW_PLAC(d10_angle, d10_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 11)	
		{         
		spawnwait DRW_PLAC(d11_angle, d11_ecc, color, fill, deg2pix_X, deg2pix_Y);         
		}
	
	nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 5	 
	// print("target, fixation, and distractors with photodiode");
	dsendf("rw %d,%d;\n",target_f_pd,target_f_pd);  												// draw pg 3                                        
	dsendf("cl:\n");																			// clear screen

	if (SetSize > 0)
		{
		if (Catch == 0)
			{
			spawnwait DRW_L(targ_angle, targ_ecc, color, targ_orient, fill, deg2pix_X, deg2pix_Y);          	// draw target
			}
		else if (Catch == 1)
			{
			spawnwait DRW_T(targ_angle, targ_ecc, color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	// draw distractor
			}
		}
	
	
	if (SetSize > 1)	
		{
		spawnwait DRW_T(d1_angle, d1_ecc, d1color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	
		}
	if (SetSize > 2)
		{
		spawnwait DRW_T(d2_angle, d2_ecc, color, d2_orient, fill, deg2pix_X, deg2pix_Y);          	      
		}
	if (SetSize > 3)	
		{
		spawnwait DRW_T(d3_angle, d3_ecc, color, d3_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 4)
		{
		spawnwait DRW_T(d4_angle, d4_ecc, color, d4_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 5)
		{
		spawnwait DRW_T(d5_angle, d5_ecc, color, d5_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 6)
		{
		spawnwait DRW_T(d6_angle, d6_ecc, color, d6_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 7)
		{
		spawnwait DRW_T(d7_angle, d7_ecc, color, d7_orient, fill, deg2pix_X, deg2pix_Y);          
		}
	if (SetSize > 8)
		{
		spawnwait DRW_T(d8_angle, d8_ecc, color, d8_orient, fill, deg2pix_X, deg2pix_Y);	
		}
	if (SetSize > 9)	
		{      	
		spawnwait DRW_T(d9_angle, d9_ecc, color, d9_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 10)	
		{
		spawnwait DRW_T(d10_angle, d10_ecc, color, d10_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 11)	
		{         
		spawnwait DRW_T(d11_angle, d11_ecc, color, d11_orient, fill, deg2pix_X, deg2pix_Y);         
		}
	
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point

	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 6	 
	// print("target, fixation, and distractors");
	dsendf("rw %d,%d;\n",target_f,target_f);  												// draw pg 3                                        
	dsendf("cl:\n");																			// clear screen

	if (SetSize > 0)
		{
		if (Catch == 0)
			{
			spawnwait DRW_L(targ_angle, targ_ecc, color, targ_orient, fill, deg2pix_X, deg2pix_Y);          	// draw target
			}
		else if (Catch == 1)
			{
			spawnwait DRW_T(targ_angle, targ_ecc, color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	// draw distractor
			}
		}
	
	
	if (SetSize > 1)	
		{
		spawnwait DRW_T(d1_angle, d1_ecc, d1color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	
		}
	if (SetSize > 2)
		{
		spawnwait DRW_T(d2_angle, d2_ecc, color, d2_orient, fill, deg2pix_X, deg2pix_Y);          	      
		}
	if (SetSize > 3)	
		{
		spawnwait DRW_T(d3_angle, d3_ecc, color, d3_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 4)
		{
		spawnwait DRW_T(d4_angle, d4_ecc, color, d4_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 5)
		{
		spawnwait DRW_T(d5_angle, d5_ecc, color, d5_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 6)
		{
		spawnwait DRW_T(d6_angle, d6_ecc, color, d6_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 7)
		{
		spawnwait DRW_T(d7_angle, d7_ecc, color, d7_orient, fill, deg2pix_X, deg2pix_Y);          
		}
	if (SetSize > 8)
		{
		spawnwait DRW_T(d8_angle, d8_ecc, color, d8_orient, fill, deg2pix_X, deg2pix_Y);	
		}
	if (SetSize > 9)	
		{      	
		spawnwait DRW_T(d9_angle, d9_ecc, color, d9_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 10)	
		{
		spawnwait DRW_T(d10_angle, d10_ecc, color, d10_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 11)	
		{         
		spawnwait DRW_T(d11_angle, d11_ecc, color, d11_orient, fill, deg2pix_X, deg2pix_Y);         
		}

	
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point

    nexttick;
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 7	  
	// print("target and distractors");
	dsendf("rw %d,%d;\n",target,target);  														// draw pg 4                                        
	dsendf("cl:\n");																			// clear screen

	if (SetSize > 0)
		{
		if (Catch == 0)
			{
			spawnwait DRW_L(targ_angle, targ_ecc, color, targ_orient, fill, deg2pix_X, deg2pix_Y);          	// draw target
			}
		else if (Catch == 1)
			{
			spawnwait DRW_T(targ_angle, targ_ecc, color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	// draw distractor
			}
		}
	
	
	if (SetSize > 1)	
		{
		spawnwait DRW_T(d1_angle, d1_ecc, d1color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	
		}
	if (SetSize > 2)
		{
		spawnwait DRW_T(d2_angle, d2_ecc, color, d2_orient, fill, deg2pix_X, deg2pix_Y);          	      
		}
	if (SetSize > 3)	
		{
		spawnwait DRW_T(d3_angle, d3_ecc, color, d3_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 4)
		{
		spawnwait DRW_T(d4_angle, d4_ecc, color, d4_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 5)
		{
		spawnwait DRW_T(d5_angle, d5_ecc, color, d5_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 6)
		{
		spawnwait DRW_T(d6_angle, d6_ecc, color, d6_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 7)
		{
		spawnwait DRW_T(d7_angle, d7_ecc, color, d7_orient, fill, deg2pix_X, deg2pix_Y);          
		}
	if (SetSize > 8)
		{
		spawnwait DRW_T(d8_angle, d8_ecc, color, d8_orient, fill, deg2pix_X, deg2pix_Y);	
		}
	if (SetSize > 9)	
		{      	
		spawnwait DRW_T(d9_angle, d9_ecc, color, d9_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 10)	
		{
		spawnwait DRW_T(d10_angle, d10_ecc, color, d10_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 11)	
		{         
		spawnwait DRW_T(d11_angle, d11_ecc, color, d11_orient, fill, deg2pix_X, deg2pix_Y);         
		}

	
	if (soa_mode==1)
		{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y);
		}
	else
		{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);		
		}
	nexttick; 
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 0 (last is displayed first)	
	// print("blank"); 																			
	dsendf("rw %d,%d;\n",blank,blank);                                          				// draw the blank screen last so that it shows up first
	dsendf("cl:\n");                                                                            // clear screen (that's all)
	
	
	}__HEADER__
MG_PGS.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// process CMD_PGS(int curr_target, 
				// float fixation_size, 
				// int fixation_color, 
				// int sig_color, 
				// float scr_width, 
				// float scr_height, 
				// float pd_left, 
				// float pd_bottom, 
				// float pd_size);
// Figure out all stimuli that will be needed on the next countermanding trial and
// place it all into video memory.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011


declare hide float 	Size;   																	// Global output will be sent as stobes...        										
declare hide float 	Angle;        																// ...by INFOS.pro at trial end.
declare hide float 	Eccentricity; 
declare hide int   	Color;								


declare MG_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				int sig_color,                          										// see DEFAULT.pro and ALL_VARS.pro
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ);                       										// see GRAPHS.pro

process MG_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				int sig_color,                          										// see DEFAULT.pro and ALL_VARS.pro
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ)                        										// see GRAPHS.pro
	{										
											
	declare hide float 	pd_eccentricity;										
	declare hide float	pd_angle;										
	declare hide float 	opposite;										
	declare hide float	adjacent;										
	declare hide float	stim_ecc_x;										
	declare hide float	stim_ecc_y;										
	declare hide int   	open        = 0;										
	declare hide int   	fill        = 1;										
	
	// number the pgs that need to be drawn
	declare hide int   	blank       = 0;										
	declare hide int	fixation_pd = 1;										
	declare hide int	fixation    = 2;										
	declare hide int	target_pd   = 3;										
	declare hide int	target      = 4;										
	declare hide int	signal_pd   = 5;					//very important!!!!								
	declare hide int	signal      = 6;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Calculate screen coordinates for stimuli on this trial								
	size         = Size_list[curr_target];   													// Figure out the attributes of the current target 
	angle        = Angle_list[curr_target]; 													// THESE USER DEFINED GLOBALS ARE ARRAYS SO 
	eccentricity = Eccentricity_list[curr_target];												// THEY CANNOT BE PASSED INTO PROCESSES
	color        = random(8);																// zero is reserved for black.  see SET_CLRS.pro							
													
	stim_ecc_x = cos(angle) * eccentricity;														// find the center of the box in x and y space based on the angle and eccentricity...
	stim_ecc_y = sin(angle) * eccentricity * -1;												
	oMove(object_targ, stim_ecc_x*deg2pix_X, stim_ecc_y*deg2pix_Y);								// ...and move the animated graph object there.
	oSetAttribute(object_targ, aSIZE, size*deg2pix_X, size*deg2pix_Y);							// while we are at it, resize fixation object on animated graph
	oSetAttribute(object_fix, aSIZE, 1*deg2pix_X, 1*deg2pix_Y);									
	
	opposite = ((scr_height/2)-pd_bottom);														// Figure out angle and eccentricity of photodiode marker in pixels
	adjacent = ((scr_width/2)-pd_left);                                                         // NOTE: I am assuming your pd is in the lower left quadrant of your screen
	pd_eccentricity = sqrt((opposite * opposite) + (adjacent * adjacent));
	pd_angle = rad2deg(atan (opposite / adjacent));
	pd_angle = pd_angle + 180; 																	//change this for different quadrent or write some code for flexibility
	
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 1
	// print("fixation with photodiode");
	dsendf("rw %d,%d;\n",fixation_pd,fixation_pd); 												// draw first pg of video memory
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 2	  
	// print("fixation");
	dsendf("rw %d,%d;\n",fixation,fixation);   													// draw second pg of video memory                                       
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 3	 
	// print("target with photodiode");
	dsendf("rw %d,%d;\n",target_pd,target_pd);  												// draw pg 3                                        
	dsendf("cl:\n");																			// clear screen
	
	if (!sacctarg)
	{
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
	
	}
	else if (sacctarg)
	{
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
	
	}
//	if (!Classic)																				// if we are doing stop-signal 2.0 (not classic)
//		{
//		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); // draw fixation point
//		}
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    nexttick;
	
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 4	  
	// print("target");
	dsendf("rw %d,%d;\n",target,target);  														// draw pg 4                                        
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);         	// draw target
//	if (!Classic)																				// if we are doing stop-signal 2.0 (not classic)
//		{
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y);   	// draw fixation point
//		}
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 5 
	// print("signal with photodiode");
	dsendf("rw %d,%d;\n",signal_pd,signal_pd);    												// draw pg 5                                      
	dsendf("cl:\n");																			// clear screen
	//spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);         	// draw target
	//if (Classic)
	if (nogosoa == 1)
	{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);   		// draw stop signal/ignore stim
		spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
	}
	else if (nogosoa == 0)
	{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y);
		spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
	}
		
	//if (!Classic)																				// if we are doing stop-signal 2.0 (not classic)
	//	{
	//	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); // draw fixation point
	//	}

    nexttick;
	
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 6	 
	// print("signal");
	dsendf("rw %d,%d;\n",signal,signal);   														// draw pg 6                                       					
	dsendf("cl:\n");																			// clear screen
//	spawnwait DRW_SQR(size, angle, eccentricity, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
	if (nogosoa == 1)
	{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, sig_color, fill, deg2pix_X, deg2pix_Y);   		// draw stop signal/ignore stim
	}
	else if (nogosoa == 0)
	{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y);   		// draw stop signal/ignore stim
	}
//	if (!Classic)																				// if we are doing stop-signal 2.0 (not classic)
//		{
//		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y); // draw fixation point
//		}
	nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 0 (last is displayed first)	
	// print("blank"); 																			
	dsendf("rw %d,%d;\n",blank,blank);                                          				// draw the blank screen last so that it shows up first
	dsendf("cl:\n");                                                                            // clear screen (that's all)
	
	
	}__HEADER__
MGTRIAL.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// Run a countermanding trial based on the variables calculated by SETC_TRL.pro and those 
// given by the user.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011
declare hide int StimTm;									// Should we stim on this trial?

declare hide int Trl_Outcome;			// Global output used in END_TRL
declare hide int Trl_Start_Time;		// Global output used in END_TRL
declare hide int LastStopOutcome = 1;	// Global output used to staircase SSD
declare hide int nogosoa;
declare hide int sacctarg;
declare hide int ReactionTime;

declare MGTRIAL(allowed_fix_time,		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime, 			// see SETC_TRL.pro
				trl_type, 				// see SETC_TRL.pro
				max_saccade_time, 		// see ALL_VARS.pro and DEFAULT.pro
				curr_soa, 				// see SETC_TRL.pro
				cancl_time,				// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,			// see ALL_VARS.pro and DEFAULT.pro
				object_fix);			// animated graph object

process MGTRIAL(allowed_fix_time, 		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime,     		// see SETC_TRL.pro
				trl_type,          		// see SETC_TRL.pro
				max_saccade_time,  		// see ALL_VARS.pro and DEFAULT.pro
				curr_soa,          		// see SETC_TRL.pro
				cancl_time,        		// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,    		// see ALL_VARS.pro and DEFAULT.pro
				object_fix)        		// animated graph object
	{
	
	// Number the trial types to make them easier to read below
	declare hide int 	go_trl 		= 0;
	declare hide int 	stop_trl 	= 1;
	declare hide int 	ignore_trl 	= 2;
	
	// Number the trial stages to make them easier to read below
	declare hide int 	need_fix  	= 1;
	declare hide int 	fixating  	= 2;
	declare hide int 	targ_on   	= 3;
	declare hide int	fix_off		= 4;
	declare hide int 	in_flight 	= 5;
	declare hide int 	on_target 	= 6;	
	declare hide int 	stage;
	
	// Number the stimuli pages to make reading easier
	declare hide int   	blank       = 0;
	declare hide int	fixation_pd = 1;
	declare hide int	fixation    = 2;
	declare hide int	target_pd   = 3;
	declare hide int	target      = 4;
	declare hide int	signal_pd   = 5;
	declare hide int	signal      = 6;

	// Assign values to success and failure so they are more readable
	declare hide int	success		= 1;
	declare hide int	failure		= 0;
	declare hide int	no_change	= 2;
	
	// Code all possible outcomes
	declare hide int constant no_fix		= 1;	// never attained fixation
	declare hide int constant broke_fix		= 2;	// attained and then lost fixation before target presentation
	declare hide int constant go_wrong		= 3;	// never made saccade on a go trial
	declare hide int constant nogo_correct	= 4;	// successfully canceled trial
	declare hide int constant sacc_out		= 5;	// made an inaccurate saccade out of the target box
	declare hide int constant broke_targ	= 6;	// didn't hold fixation at the target for long enough
	declare hide int constant go_correct	= 7;	// correct saccade on a go trial
	declare hide int constant nogo_wrong	= 8;	// error noncanceled trial
	declare hide int constant body_move		= 12;	// error body movement (for training stillness)
	declare hide int constant too_fast		= 14;	// low RT while in training to slow down.
	declare hide int constant early_sacc	= 9;	// made a saccade before fixation offset												
	declare hide int constant no_sacc		= 10;	// didn't make a saccade after cued to do so
	declare hide int constant correct_sacc	= 11;	// correct saccade after cue
	
	// Timing variables which will be used to time task
	declare hide float 	fix_spot_time; 					
	declare hide float  targ_time; 					
	declare hide float  saccade_time;
	declare hide float 	aquire_fix_time;
	declare hide float 	stop_sig_time;
	declare hide float	aquire_targ_time;	
	declare hide float	fix_off_time;
	// This variable makes the while loop work
	declare hide int 	trl_running;
	
	// Stim complete?
	declare hide int 	StimDone;
	StimDone = 0;
	
	
	// Have to be reset on every iteration since 
	// variable declaration only occurs at load time
	trl_running 		= 1;
	stage 				= need_fix;
	
	// Tell the user what's up
	printf(" \n");
	printf("# %d",Trl_number);
	printf(" (%d",Comp_Trl_number);
	printf(" correct)\n");
	printf("holdtime = %d\n",curr_holdtime);
	printf("soa = %d\n",curr_soa);


	Event_fifo[Set_event] = MemHeader_;									// queue TrialStart_ strobe
	Set_event = (Set_event + 1) % Event_fifo_N;			
																			// HERE IS WHERE THE FUN BEGINS
	Event_fifo[Set_event] = TrialStart_;									// queue TrialStart_ strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	dsendf("vp %d\n",fixation_pd);											// flip the pg to the fixation stim with pd marker
	fix_spot_time = time();  												// record the time
	Event_fifo[Set_event] = FixSpotOn_;										// queue strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	dsendf("XM RFRSH:\n"); 													// wait one vertical retrace
	dsendf("vp %d\n",fixation);												// flip the pg to the fixation stim without pd marker
	oSetAttribute(object_fix, aVISIBLE); 									// turn on the fixation point in animated graph
	
	
	while (trl_running)														// trials ending will set trl_running = 0
		{	
		
	//--------------------------------------------------------------------------------------------
	// STAGE need_fix (the fixation point is on, but the subject hasn't looked at it)
		if (stage == need_fix)
			{		
			if (In_FixWin)													// If the eyes have entered the fixation window (before time, see below)...
				{
				aquire_fix_time = time();									// ...function call to time to note current time and...
				Trl_Start_Time = aquire_fix_time;							// Global output
				Event_fifo[Set_event] = Fixate_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = fixating;											// ...advance to the next stage.
				}
			else if (time() > fix_spot_time + allowed_fix_time)				// But if time runs out...
				{
				Trl_Outcome = no_fix;    									// TRIAL OUTCOME ERROR (no fixation)
				LastStopOutcome = no_change;								// Don't change SSD
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen,...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Aborted (no fixation)\n");							// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}			
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE fixating (the subject is looking at the fixation point waiting for target onset)		
		else if (stage == fixating)
			{
			if (!In_FixWin)													// If the eyes stray out of the fixation window...
				{
				Trl_Outcome = broke_fix;									// TRIAL OUTCOME ERROR (broke fixation)
				LastStopOutcome = no_change;								// Don't change SSD
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Aborted (broke fixation)\n");						// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}
				
				
//////////////////////////// peri-event stimulation code /////////////////////////////////////////////			
				
			else if (StimTm == 1 && In_FixWin && StimDone == 0 && time() > aquire_fix_time + (curr_holdtime - 140)) //stimulate 150ms before target onset
				{		
						spawn STIM(stim_channel);
						StimDone = 1;
				}

			else if (StimTm == 2 && In_FixWin && StimDone == 0 && time() > aquire_fix_time + (curr_holdtime - 40)) //stimulate 150ms before target onset
				{		
						spawn STIM(stim_channel);
						StimDone = 1;
						
				}
//////////////////////////// peri-event stimulation code /////////////////////////////////////////////			
				
			else if (In_FixWin && time() > aquire_fix_time + curr_holdtime)	// But if the eyes are still in the window at end of holdtime...
				{
				dsendf("vp %d\n",target_pd);								// ...flip the pg to the target with pd marker...	
				targ_time = time(); 										// ...record the time...
				Event_fifo[Set_event] = Target_;						// Queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;
				dsendf("XM RFRSH:\n"); 										// ...wait one vetical retrace...
				dsendf("vp %d\n",target);	
				dsendf("vp %d\n",fixation);									// ...flip the pg to the target without pd marker.
				
//				if (trl_type == stop_trl ||									// If it is a stop or ignore trial present the signal.
//				trl_type == ignore_trl)										// This happens here so that no overhead intervenes between commands.
//					{														// That way the # of vertical retraces remains independant of incidental processing time.
//																			// (Even so, sometimes we will accidentally wait n+1 retraces. Such is vdosync.)
//					dsendf("vw %d\n",curr_ssd-1);							// Wait so many vertical retraces (one is waited implicitly b/c photodiode marker above)...
//					dsendf("vp %d\n",signal_pd);							// ...flip the pg to the signal with the pd marker...
//					stop_sig_time = targ_time + 
//						(round(curr_ssd * (1000.0 / Refresh_rate))); 		// ...record TEMPO time of presentation...
//					dsendf("XM RFRSH:\n"); 									// ...wait 1 vertical retrace...
//					dsendf("vp %d\n",signal);								// ...and flip the pg to the signal without pd marker.
//					}
//					
//				Event_fifo[Set_event] = FixSpotOff_;						// Queue strobe...
//				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				
																			// Now the animated graphs have to catch up (seperate so that stim timing stays tight)
//				if (trl_type == go_trl)										// If the trial is a go trial...
//					{
//					oSetAttribute(object_targ, aVISIBLE); 					// ...show target in animated graph...
//					oSetAttribute(object_fix, aINVISIBLE); 					// ...remove fixation point from animated graph.
//					}
//				else if (trl_type == ignore_trl)							// But if the trial is an ignore trial
//					{
//					oSetAttribute(object_targ, aVISIBLE); 					// ...just show target in animated graph (fixation point stays on).
//					}														// If it is a stop trial the target just never comes up in the animated graph.
				sacctarg = 1;
				oSetAttribute(object_targ, aVISIBLE); 						// ...show target in animated graph...	
				stage = targ_on;											// Advance to the next trial stage.				
				}
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE targ_on (the target has been presented but the subject is still fixating)		
		else if (stage == targ_on)
			{		
			if (!In_FixWin)													// If the eyes leave the fixation window...
				{
//				printf("                          soa = %d\n",round(curr_soa * (1000.0/Refresh_rate)));
				printf("                          premature rt = %d\n",time() - targ_time);
				Trl_Outcome = early_sacc;									// TRIAL OUTCOME ERROR (sacc before cued to do so)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);
				dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
				Event_fifo[Set_event] = EarlySaccade_;							// ...queue strobe...
				Event_fifo[Set_event] = EarlySaccade_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;				
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (early saccade)\n");							// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}
//////////////////////////// peri-event stimulation code /////////////////////////////////////////////			
				
			else if (StimTm == 3 && In_FixWin && StimDone == 0 && time() > targ_time + (curr_soa - 140)) //stimulate 150ms before target onset
				{		
						spawn STIM(stim_channel);
						StimDone = 1;
				}

			else if (StimTm == 4 && In_FixWin && StimDone == 0 && time() > targ_time + (curr_soa - 40)) //stimulate 150ms before target onset
				{		
						spawn STIM(stim_channel);
						StimDone = 1;
						
				}
//////////////////////////// peri-event stimulation code /////////////////////////////////////////////		
				
			else if (In_FixWin &&  											// But if no saccade occurs...
				time() > targ_time + curr_soa)	 							// ...and the stim onset asychrony passes...
				{
//				printf("                          soa = %d\n",round(curr_soa * (1000.0/Refresh_rate)));
				
				
				if (trl_type == stop_trl ||									// If it is a stop or ignore trial present the signal.
				trl_type == ignore_trl)										// This happens here so that no overhead intervenes between commands.
				{

					dsendf("vp %d\n",signal_pd);										// Flip the pg to the blank screen with the photodiode marker...
					fix_off_time = time();										// ...and record the time that the fixation point was extinguished.
					Event_fifo[Set_event] = FixSpotOff_;						// Queue strobe...
					Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
					dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
					dsendf("vp %d\n",signal);									// ...flip the pg to the blank screen without pd marker.
					oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
					stage = fix_off;
					
				}
				else if (trl_type == go_trl)
				{

					dsendf("vp %d\n",signal_pd);										// Flip the pg to the blank screen with the photodiode marker...
					fix_off_time = time();										// ...and record the time that the fixation point was extinguished.
					Event_fifo[Set_event] = FixSpotOff_;						// Queue strobe...
					Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
					dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
//					dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen without pd marker.
					dsendf("vp %d\n",signal);
					oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
					stage = fix_off;											// ...and advance to the next stage.
				}
				}
			
			// else if (In_FixWin &&  											// But if no saccade occurs...
				// time() > targ_time + max_saccade_time && 					// ...and time for a saccade runs out...
				// trl_type == go_trl)				// ...and a saccade was supposed to be made.
				// {
				// Trl_Outcome = go_wrong;           							// TRIAL OUTCOME ERROR (incorrect go trial)
				// LastStopOutcome = no_change;								// Don't change SSD
				// dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				// oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				// oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				// printf("Error (no saccade)\n");								// ...tell the user whats up...
				// spawn SVR_BELL();
				// trl_running = 0;											// ...and terminate the trial.
				// }				
//			else if (In_FixWin &&											// But if no saccade occurs...
//				time() > targ_time + curr_ssd + cancl_time && 				// ...and time for a saccade runs out...
//				trl_type == stop_trl)										// ...and a saccade was NOT supposed to be made...
//				{
//				Trl_Outcome = nogo_correct;   								// TRIAL OUTCOME CORRECT (canceled trial)
//				LastStopOutcome = success;									// set the global for staircasing...
//				Correct_trls = Correct_trls + 1;							// ...set a global for 1DR...
//				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
//				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
//				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
//				Event_fifo[Set_event] = Correct_;							// ...queue strobe...
//				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
//				printf("Correct (canceled)\n");								// ...tell the user whats up...
//				if (Canc_alert)
//					{
//					spawn SVR_BEL2();										// for training purposes
//					}
//				trl_running = 0;  											// ...and terminate the trial.
//				}		
			}
			
		else if (stage == fix_off)
			{
			
			////////////////////////////////////////////////////////////////////////////////////////

			if (!In_FixWin && (trl_type == go_trl))													// If the eyes leave the fixation window...			
				{
				saccade_time = time();										// ...record the time...
				// ...we have a saccade, so...
				if (70 > saccade_time - fix_off_time)
				{
				printf("                   visual_premature rt = %d\n",time() - targ_time);
				Trl_Outcome = early_sacc;									// TRIAL OUTCOME ERROR (sacc before cued to do so)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);
				dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
				Event_fifo[Set_event] = EarlySaccade_;							// ...queue strobe...				
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (early saccade)\n");							// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}
				else if (150 < (saccade_time - fix_off_time))
				{
				Event_fifo[Set_event] = Saccade_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				ReactionTime = saccade_time - fix_off_time;
				printf("                        visual rt = %d\n",ReactionTime);	// ...tell the user whats up...
				stage = in_flight;											// ...and advance to the next stage.
				}
						// ...and terminate the trial.
			}
			else if (In_FixWin &&  											// But if no saccade occurs...
				(time() > fix_off_time + max_saccade_time)&& (trl_type == go_trl)) 					// ...and time for a saccade runs out...
				{
				Trl_Outcome = no_sacc;           							// TRIAL OUTCOME ERROR (no saccade after cue)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (no saccade)\n");								// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}	
			else if (In_FixWin &&  											// But if no saccade occurs...
				time() > fix_off_time + cancl_time && trl_type == stop_trl) 					// ...and time for a saccade runs out...
				{
				Trl_Outcome = nogo_correct;           							// TRIAL OUTCOME ERROR (no saccade after cue)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				Event_fifo[Set_event] = Correct_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				printf("Correct (canceled)\n");								// ...tell the user whats up...
				if (Canc_alert)
					{
					spawn SVR_BEL2();										// for training purposes
					}
				sacctarg = 0;
				trl_running = 0;  											// ...and terminate the trial.
				}													// ...and terminate the trial.
			else if (!In_FixWin &&  											// But if no saccade occurs...
				time() < fix_off_time + cancl_time && trl_type == stop_trl) 					// ...and time for a saccade runs out...
				{
				Trl_Outcome = nogo_wrong;								//TRIAL OUTCOME ERROR (noncanceled trial)
				LastStopOutcome = no_change;
				printf("Error (noncanceled)\n");						// ...tell the user whats up...
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}	
			}			
			
	//--------------------------------------------------------------------------------------------
	// STAGE in_flight (eyes have left fixation window but have not entered target window)		
		else if (stage == in_flight)
			{
			if (In_TargWin)													// If the eyes get into the target window...
				{
				
//				dsendf("XM RFRSH:\n");
				dsendf("vp %d\n",target_pd);								// ...flip the pg to the target with pd marker...	
				aquire_targ_time = time(); 									// ...record the time...
				sacctarg = 0;
				dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
				dsendf("vp %d\n",target);									// ...flip the pg to the target without pd marker.
				Event_fifo[Set_event] = Decide_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = on_target;											// ...and advance to the next stage of the trial.
				}
			else if (time() > saccade_time + max_sacc_duration)				// But, if the eyes are out of the target window and time runs out...
				{
				Trl_Outcome = sacc_out;   									// TRIAL OUTCOME ERROR (innacurrate saccade)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				Event_fifo[Set_event] = Error_sacc;					// ...queue strobe for Neuro Explorer
				Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (inaccurate saccade)\n");						// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0; 											// ...and terminate the trial.
				}
			}
		
		
		
	//--------------------------------------------------------------------------------------------
	// STAGE on_target (eyes have entered the target window.  will they remain there for duration?)	
		else if (stage == on_target)
			{
			if (!In_TargWin)												// If the eyes left the target window...
				{			
				Trl_Outcome = broke_targ;									// TRIAL OUTCOME ERROR (broke target fixation)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);
				Event_fifo[Set_event] = BreakTFix_;					// ...queue strobe for Neuro Explorer
				Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.				
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (broke target fixation)\n");					// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}		
			else if (In_TargWin  											// But if the eyes are still in the target window...
				&&  time() > aquire_targ_time + targ_hold_time)				// ...and the target hold time is up...				
				{
				Trl_Outcome = correct_sacc;									//TRIAL OUTCOME CORRECT (correct sacc trial)
				LastStopOutcome = success;
				Event_fifo[Set_event] = Correct_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				printf("Correct (saccade)\n");								// ...tell the user whats up...
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}			
			}
			
		nexttick;
		}
			
		if (Move_ct > 0)
			{
			Trl_Outcome = body_move;   										// TRIAL OUTCOME ABORTED (the body was moving)
			LastStopOutcome = no_change;									// ...make sure that the last outcome is cleared.	
			dsendf("vp %d\n",blank);										// Flip the pg to the blank screen...
			oSetAttribute(object_targ, aINVISIBLE); 						// ...remove target from animated graph...
			oSetAttribute(object_fix, aINVISIBLE); 							// ...remove fixation point from animated graph...
			printf("Aborted (body movement)\n");							// ...tell the user whats up...
			sacctarg = 0;
			trl_running = 0; 												// ...and terminate the trial.
			}	
			
		nexttick;
		}
	__HEADER__
MGUIDE.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// This is the main countermanding protocol.  It works like this.
// 1) Define all varialbes
// 2) Setup random variables needed for a trial
// start loop
// 3) Run a trial
// 4) End the trial
// 		a) deliver rewards and punishments
//		b) take care of ITI
// 		c) set up variables for next run
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011
	
declare MGUIDE();						

process MGUIDE()     
	{
	declare hide int run_mg_sess	= 3;
	declare hide int run_idle		= 0;
			
	Trl_number				= 1;
	Comp_Trl_number			= 0;
	Block_number			= 1;
	
	
	if (Last_task != run_mg_sess)				// Only do this if we have gone into another task or if this is first run of day.
		{
		system("dialog Select_Monkey");
		spawnwait DEFAULT(State,				// Set all globals to their default values.
						Monkey,					
						Room);				
		Last_task = run_mg_sess;
		}
		
	dsend("DM RFRSH");                			// This code sets up a vdosync macro definition to wait a specified ...
	if (Room == 23)                   			// ...number of vertical retraces based on the room in which we are    ...
		{                             			// ...recording.  This kluge is necessary because vdosync operates     ...
		dsendf("vw %d:\n",1);         			// ...differently in the different rooms.  In 028 a command to wait    ...
		}                             			// ...2 refresh cycles usually only waits for one and a command to     ...
	else                              			// ...wait for 1 usually only waits for 0.  Room 029 and 023 appear to ...
		{                             			// ...work properly.
		dsendf("vw %d:\n",2);
		}
	dsend("EM RFRSH");
	
	while(!OK)									
		{
		nexttick;
		if(Set_monkey)
			{
			spawnwait DEFAULT(State,			// Set all globals to their default values for a particular monkey.
						Monkey,						
						Room);	
			Set_monkey = 0;
			}
		}
	
	//spawnwait GOODVARS(State);
	
	spawnwait SET_SOA(max_soa, 					// Set up the right graph for INH f(x).
					min_soa,
					n_soas);
					
	spawnwait SET_CLRS(n_targ_pos);
	
	spawnwait SETMGTRL(n_targ_pos,				// Select variables for the first countermanding...
				go_weight,						// ...trial.  This happens once outside of the while...
				stop_weight,					// ...loop just to set up for the first iteration. After...
				ignore_weight,					// ...that SETC_TRL.pro will be called by END_TRL.pro.
				n_soas,
				min_holdtime,
                max_holdtime,
				expo_jitter,
				expo_jitter_soa);

	Event_fifo[Set_event] = MemHeader_;			// Set a strobe to identify this file as a MGUIDE session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = Identify_Room_;		// Set a strobe to identify this file as a MGUIDE session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = Room;				// Set a strobe to identify this file as a MGUIDE session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	
	nexttick 10;								// to prevent buffer overflows after task reentry.
	
//	CheckMotion = 1;							// set global for watching the motion detector
//	spawn WATCHMTH;								// start watching the mouth motion detector if present
//	spawn WATCHBOD;								// start watching motion detector for body if present
	
	while (State == run_mg_sess)				// while the user has not yet terminated the countermanding task
		{
				
		 spawnwait MGTRIAL(allowed_fix_time, 	// run a trial with variables defined in SETC_TRL.pro
							curr_holdtime, 
							trl_type, 
							max_saccade_time, 
							curr_soa, 
							cancl_time, 
							max_sacc_duration, 
							targ_hold_time,
							object_fix);		
		
		spawnwait END_TRL(trl_outcome);			// end a trial with trl_outcome set in CMDTRIAL.pro
				
		nexttick;								// wait at least one cycle and do it all again
		
		while(Pause)							// gives the user the ability to pause the task without ending it
			{
			nexttick;
			}
		
		}

												// the State global variables allow a control structure...
												// ...to impliment the task.
	State = run_idle;							// If we are out of the while loop the user wanted...
												// ...to stop MGUIDE.
	CheckMotion = 0;							// stop watching for motion detector.
												
	oDestroy(object_fixwin);					// destroy all task graph objects
	oDestroy(object_targwin);
	oDestroy(object_fix);
	oDestroy(object_targ);
	oDestroy(object_eye);
	
	oSetGraph(gleft,aCLEAR);					// clear the left graph
	
	oDestroy(object_soa0);						// destroy all inh f(x) graph objects
	oDestroy(object_soa1);						
	oDestroy(object_soa2);						
	oDestroy(object_soa3);						
	oDestroy(object_soa4);						
	oDestroy(object_soa5);						
	oDestroy(object_soa6);						
	oDestroy(object_soa7);						
	oDestroy(object_soa8);						
	oDestroy(object_soa9);						
	oDestroy(object_soa10);						
	oDestroy(object_soa11);						
	oDestroy(object_soa12);						
	oDestroy(object_soa13);						
	oDestroy(object_soa14);						
	oDestroy(object_soa15);						
	oDestroy(object_soa16);						
	oDestroy(object_soa17);						
	oDestroy(object_soa18);						
	oDestroy(object_soa19);
//	oDestroy(object_30_70);
	
	oSetGraph(gleft,aCLEAR);					// clear the left graph
		
	spawn IDLE;									// return control to IDLE.pro
    
	}__HEADER__
OBJECT.PRO
__FOOTER__
/* OBJECT.PRO - Definitions for use with TEMPO's object functions
** Copyright 1994-2002 Reflective Computing.  All rights reserved.
**
*/

// Graph references used in oCreate() and oSetGraph()

hide constant gLEFT           =0;             // Left graph
hide constant gRIGHT          =1;             // Right graph

// Object types for use with oCreate()

hide constant tPOINT          =1;             // A single pixel
hide constant tBOX            =2;             // A rectangle
hide constant tCROSS          =3;             // '+' Horizontal/Vertical Cross
hide constant tXCROSS         =4;             // 'x' Diagonal Cross
hide constant tELLIPSE        =5;             // An ellipse (VideoSYNC only)

// Object attributes used by oSetAttribute()

hide constant aXOR            =1;             // Erase object when moving
hide constant aREPLACE        =2;             // Replace pixels
hide constant aVISIBLE        =3;             // Make object visible
hide constant aINVISIBLE      =4;             // Don't draw object
hide constant aFILLED         =5;             // Filled rectangle
hide constant aUNFILLED       =6;             // Hollow rectangle
hide constant aSIZE           =7;             // Resize box, cross, plus

// Graph attributes used by oSetGraph()

hide constant aRANGE          =1;             // Define graph coordinate system
hide constant aTITLE          =2;             // Define graph title
hide constant aCLEAR          =3;             // Clear graph

declare hide oB, oE;                    	  // Eye and Box objects (left graph)
declare hide oB1, oE1;                        // Eye and Box objects (right graph)


declare GRAPHS(int Scr_pixX, int Scr_pixY);

process GRAPHS(int Scr_pixX, int Scr_pixY)
	{
	// SETUP UP TARGET & EYE OBJECTS IN LEFT GRAPH
	left = Scr_pixX/-2;
	right = Scr_pixX/2;
	down = Scr_pixY/-2;
	up = Scr_pixY/2;
    oSetGraph(gleft, arange, left, right, down, up); // Object graph virt. coord
    // oB = oCreate(tBOX, gLEFT, 0.5, 0.5);    // Create TARGET object
    // oSetAttribute(oB, aINVISIBLE);              // Not visible yet

    oE = oCreate(tCross, gLEFT, 50, 50);       // Create EYE object
    oSetAttribute(oE, aVISIBLE);                // It's always visible

    // dsendf("oc 1,3\n");                          // Cross hair for "eye"
    // dsendf("ow 1,20,20\n");                      // width & height
    // dsendf("oi 1,13\n");                         // color
    // dsendf("os 1\n");                            // make visible
	}__HEADER__
PCL.LOG
__FOOTER__
PCL 12.5 Set 45 Fri Dec 16 09:56:18 2016

PATH='C:\TEMPO;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\PROGRA~1\SlikSvn\bin\'
CWD='C:\TEMPO\PROCLIB'

PCL Opening XMS..
PCL: XMS Version  2.00 Revision  2.77
PCL: XMS Largest block 919 Kb (941056 bytes),  Total 919 Kb (941056 bytes).
PCL Processing command line arguments..
 0: 'C:\TEMPO\PCL.EXE'
 1: '-x'
 2: '-kpcl0001.tmp'
 3: 'ALL_PROS.pro'
 4: 'ALL_PROS.err'
PCL Checking if PRO file 'ALL_PROS.pro' exists..
PCL Opening KERNEL vector 96
copyFileToLog: pcl0001.tmp BEGIN-----------
45,12,1,100,100000,2,150,126000,4000,318464,30000,250880,40C60002,5F8B0002,KPED
copyFileToLog: pcl0001.tmp END-----------
PCL Calling makeIC with funfilename='KPED'
copyFileToLog: C:\TEMPO\KPED.fun BEGIN-----------
KERNEL KPED 12.1 Set 45 Functions 168
  0 print 4 0 16
  1 printf 4 0 16
  2 write 4 1 16
  3 writef 4 1 16
  4 writefx 4 1 16
  5 mio_dig_get 0 1 1
  6 mio_dig_set 0 2 2
  7 mio_ao_set 0 2 2
  8 mio_fout 0 1 1
  9 ipproc 0 1 1
 10 poisson 0 1 1
 11 iunif 0 1 1
 12 random 0 1 1
 13 normal 0 1 1
 14 seed1 0 0 1
 15 seed2 0 0 1
 16 sign 4 1 1
 17 abs 0 1 1
 18 status_set 0 0 1
 19 cancel_set 0 0 1
 20 status_clr 0 0 1
 21 cancel_clr 0 0 1
 22 htb_sweep 0 1 1
 23 htb_sweeps 0 1 1
 24 htb_period 0 1 1
 25 htb_extension 0 1 1
 26 htb_cancel 0 1 1
 27 htb_offset 0 1 1
 28 htb_tpb 0 1 1
 29 htb_nchannels 0 1 1
 30 htb_channel 0 1 1
 31 htb_type 0 1 1
 32 htb_tag 0 1 1
 33 htb_handle 0 1 1
 34 htb_speed 0 1 1
 35 htb_speedunits 0 1 1
 36 htb_dirty 0 1 1
 37 system 4 0 16
 38 systemf 4 0 16
 39 tick 0 0 0
 40 tempoCobaltTick 0 0 0
 41 time 0 0 0
 42 timeus 0 0 0
 43 mspertick 0 0 0
 44 mspercycle 0 0 0
 45 timeofday 0 0 0
 46 day 0 0 0
 47 dayofweek 0 0 0
 48 month 0 0 0
 49 year 0 0 0
 50 TSCLow 0 0 0
 51 TSCHigh 0 0 0
 52 TSCHz 0 0 0
 53 TSCTheoreticalHz 0 0 0
 54 SetCobaltTest 0 1 1
 55 ProcessCycleStartTSCLow 0 0 0
 56 ProcessCycleStartTSCHigh 0 0 0
 57 ProcessCycleLatencyUS 0 0 0
 58 atable 0 0 2
 59 ctable 0 0 2
 60 etable 0 0 2
 61 atable_set 0 2 3
 62 ctable_set 0 2 3
 63 etable_set 0 2 3
 64 event_set 0 2 3
 65 event_get 0 2 3
 66 inp 0 1 1
 67 inpw 0 1 1
 68 outp 0 2 2
 69 outpw 0 2 2
 70 sound 0 1 1
 71 send 4 1 16
 72 sendf 4 1 16
 73 com_autocancel 0 0 1
 74 com_count 0 0 0
 75 com_free_space 0 0 0
 76 com_peek 0 0 0
 77 com_get 0 0 0
 78 com_getn 0 1 1
 79 com_flush 0 0 1
 80 com_span 0 1 1
 81 com_GetStatus 0 0 0
 82 com_ResetStatus 0 0 0
 83 com_ResumeRX 0 0 0
 84 com_ResumeTX 0 0 0
 85 send2 4 1 16
 86 sendf2 4 1 16
 87 com_autocancel2 0 0 1
 88 com_count2 0 0 0
 89 com_free_space2 0 0 0
 90 com_peek2 0 0 0
 91 com_get2 0 0 0
 92 com_getn2 0 1 1
 93 com_flush2 0 0 1
 94 com_span2 0 1 1
 95 com_GetStatus2 0 0 0
 96 com_ResetStatus2 0 0 0
 97 com_ResumeRX2 0 0 0
 98 com_ResumeTX2 0 0 0
 99 sendb 4 1 16
100 sendfb 4 1 16
101 getPendingDBTriggers 0 0 1
102 getPendingTAGTriggers 0 0 1
103 getProcessState 0 1 1
104 getSystemInfo 0 1 1
105 oCreate 0 2 4
106 oDestroy 0 1 1
107 oMove 0 3 3
108 oSetAttribute 0 2 4
109 oSetGraph 0 2 16
110 mouGetX 0 0 0
111 mouGetY 0 0 0
112 mouGetButtons 0 0 0
113 mouSetMickeys 0 1 1
114 mouSetXY 0 2 2
115 mouGetDriverX 0 0 0
116 mouGetDriverY 0 0 0
117 mouSetDriverLimits 0 4 4
118 mouResetDriver 0 0 0
119 fabs 7 1 1
120 sin 7 1 1
121 cos 7 1 1
122 sinrad 7 1 1
123 cosrad 7 1 1
124 deg2rad 7 1 1
125 rad2deg 7 1 1
126 sqrt 7 1 1
127 round 7 1 1
128 ceil 7 1 1
129 floor 7 1 1
130 floatimport 7 1 1
131 floatexport 4 1 1
132 floattest 4 1 1
133 atan 7 1 1
134 atan2 7 2 2
135 exp 7 1 1
136 pow 7 2 2
137 log10 7 1 1
138 ln 7 1 1
139 tio_fout 0 3 3
140 tio_dig_mask 0 0 1
141 tio_dig_get 0 1 1
142 tio_dig_set 0 2 2
143 dioSetMode 0 2 2
144 dioGetA 0 1 1
145 dioGetB 0 1 1
146 dioGetC 0 1 1
147 dioSetA 0 2 2
148 dioSetB 0 2 2
149 dioSetC 0 2 2
150 dSend 4 0 16
151 dSend2 4 0 16
152 dSendf 4 0 16
153 dSendf2 4 0 16
154 rdxSetTTLOUT 0 1 1
155 rdxSetTTLOUT2 0 1 1
156 rdxGetTTLIN 0 0 0
157 rdxGetTTLIN 0 0 0
158 rdxGetTTLOUT 0 0 0
159 rdxGetTTLOUT2 0 0 0
160 rdxFlush 0 0 1
161 rdxFlush2 0 0 1
162 peek8 0 1 1
163 peek16 0 1 1
164 peek32 0 1 1
165 poke8 0 2 2
166 poke16 0 2 2
167 poke32 0 2 2

copyFileToLog: C:\TEMPO\KPED.fun END-----------
PCL - Fake KERNEL IC at 33F4:0602
PCL - HASHTAB nhshtab_max=1021  nhshoflo_max=4000 (nsymtab_max=4000)
PCL - Opening instructions cache file 'PCLCACHE.TMP'
PCL - Calling fpload('ALL_PROS.pro')
hashAddNamtab: ADDED 'SETS' at iOffset=168002
hashAddNamtab: ADDED 'SPEED' at iOffset=168008
hashAddNamtab: ADDED 'SPEED_UNITS' at iOffset=168014
hashAddNamtab: ADDED '__debug_op' at iOffset=168026
hashAddNamtab: ADDED 'IDLE' at iOffset=168038
hashAddNamtab: ADDED 'State' at iOffset=168044
hashAddNamtab: ADDED 'OK' at iOffset=168050
hashAddNamtab: ADDED 'Set_monkey' at iOffset=168054
hashAddNamtab: ADDED 'Monkey' at iOffset=168066
hashAddNamtab: ADDED 'Pause' at iOffset=168074
hashAddNamtab: ADDED 'Last_task' at iOffset=168080
hashAddNamtab: ADDED 'Event_fifo_N' at iOffset=168090
hashAddNamtab: ADDED 'Event_fifo' at iOffset=168104
hashAddNamtab: ADDED 'Set_event' at iOffset=168116
hashAddNamtab: ADDED 'fix_manual' at iOffset=168126
hashAddNamtab: ADDED 'Room' at iOffset=168138
hashAddNamtab: ADDED 'Scr_width' at iOffset=168144
hashAddNamtab: ADDED 'Scr_height' at iOffset=168154
hashAddNamtab: ADDED 'Subj_dist' at iOffset=168166
hashAddNamtab: ADDED 'PD_left' at iOffset=168176
hashAddNamtab: ADDED 'PD_bottom' at iOffset=168184
hashAddNamtab: ADDED 'PD_size' at iOffset=168194
hashAddNamtab: ADDED 'Scr_pixX' at iOffset=168202
hashAddNamtab: ADDED 'Scr_pixY' at iOffset=168212
hashAddNamtab: ADDED 'Refresh_rate' at iOffset=168222
hashAddNamtab: ADDED 'X_Gain' at iOffset=168236
hashAddNamtab: ADDED 'Y_Gain' at iOffset=168244
hashAddNamtab: ADDED 'X_Offset' at iOffset=168252
hashAddNamtab: ADDED 'Y_Offset' at iOffset=168262
hashAddNamtab: ADDED 'Juice_channel' at iOffset=168272
hashAddNamtab: ADDED 'Stim_channel' at iOffset=168286
hashAddNamtab: ADDED 'Eye_X_channel' at iOffset=168300
hashAddNamtab: ADDED 'Eye_Y_channel' at iOffset=168314
hashAddNamtab: ADDED 'PhotoD_channel' at iOffset=168328
hashAddNamtab: ADDED 'MaxVoltage' at iOffset=168344
hashAddNamtab: ADDED 'AnalogUnits' at iOffset=168356
hashAddNamtab: ADDED 'CheckMouth' at iOffset=168368
hashAddNamtab: ADDED 'CheckBody' at iOffset=168380
hashAddNamtab: ADDED 'FixSpotOn_' at iOffset=168390
hashAddNamtab: ADDED 'Fixate_' at iOffset=168402
hashAddNamtab: ADDED 'PlacOn_' at iOffset=168410
hashAddNamtab: ADDED 'Target_' at iOffset=168418
hashAddNamtab: ADDED 'FixSpotOff_' at iOffset=168426
hashAddNamtab: ADDED 'StopSignal_' at iOffset=168438
hashAddNamtab: ADDED 'TrialStart_' at iOffset=168450
hashAddNamtab: ADDED 'FixError_' at iOffset=168462
hashAddNamtab: ADDED 'GoSaccade_' at iOffset=168472
hashAddNamtab: ADDED 'GoError_' at iOffset=168484
hashAddNamtab: ADDED 'NOGOWrong_' at iOffset=168494
hashAddNamtab: ADDED 'GoTargFixError_' at iOffset=168506
hashAddNamtab: ADDED 'Abort_' at iOffset=168522
hashAddNamtab: ADDED 'Correct_' at iOffset=168530
hashAddNamtab: ADDED 'GOCorrect_' at iOffset=168540
hashAddNamtab: ADDED 'NOGOCorrect_' at iOffset=168552
hashAddNamtab: ADDED 'CatchCorrect_' at iOffset=168566
hashAddNamtab: ADDED 'CatchIncorrectG_' at iOffset=168580
hashAddNamtab: ADDED 'CatchIncorrectNG_' at iOffset=168598
hashAddNamtab: ADDED 'BreakTFix_' at iOffset=168616
hashAddNamtab: ADDED 'EarlySaccade_' at iOffset=168628
hashAddNamtab: ADDED 'Reward_' at iOffset=168642
hashAddNamtab: ADDED 'Tone_' at iOffset=168650
hashAddNamtab: ADDED 'Error_tone' at iOffset=168656
hashAddNamtab: ADDED 'Reward_tone' at iOffset=168668
hashAddNamtab: ADDED 'Error_sacc' at iOffset=168680
hashAddNamtab: ADDED 'Correct_sacc' at iOffset=168692
hashAddNamtab: ADDED 'ExtraReward_' at iOffset=168706
hashAddNamtab: ADDED 'SoundOnReward_' at iOffset=168720
hashAddNamtab: ADDED 'SoundNoReward_' at iOffset=168736
hashAddNamtab: ADDED 'Eot_' at iOffset=168752
hashAddNamtab: ADDED 'CmanHeader_' at iOffset=168758
hashAddNamtab: ADDED 'MemHeader_' at iOffset=168770
hashAddNamtab: ADDED 'GONOGOHeader_' at iOffset=168782
hashAddNamtab: ADDED 'DelayedHeader_' at iOffset=168796
hashAddNamtab: ADDED 'SearchHeader_' at iOffset=168812
hashAddNamtab: ADDED 'CaptureHeader_' at iOffset=168826
hashAddNamtab: ADDED 'Identify_Room_' at iOffset=168842
hashAddNamtab: ADDED 'ShamStim_' at iOffset=168858
hashAddNamtab: ADDED 'Stimulation_' at iOffset=168868
hashAddNamtab: ADDED 'EndStim_' at iOffset=168882
hashAddNamtab: ADDED 'ZeroEyePosition_' at iOffset=168892
hashAddNamtab: ADDED 'VSyncSynced_' at iOffset=168910
hashAddNamtab: ADDED 'Saccade_' at iOffset=168924
hashAddNamtab: ADDED 'Decide_' at iOffset=168934
hashAddNamtab: ADDED 'MouthBegin_' at iOffset=168942
hashAddNamtab: ADDED 'MouthEnd_' at iOffset=168954
hashAddNamtab: ADDED 'MapHeader_' at iOffset=168964
hashAddNamtab: ADDED 'FixWindow_' at iOffset=168976
hashAddNamtab: ADDED 'TargetWindow_' at iOffset=168988
hashAddNamtab: ADDED 'Staircase_' at iOffset=169002
hashAddNamtab: ADDED 'Neg2Reinforcement_' at iOffset=169014
hashAddNamtab: ADDED 'Feedback_' at iOffset=169034
hashAddNamtab: ADDED 'RewardSize_' at iOffset=169044
hashAddNamtab: ADDED 'TrialInBlock' at iOffset=169056
hashAddNamtab: ADDED 'SendPenatrInfo_' at iOffset=169070
hashAddNamtab: ADDED 'TargetPre_' at iOffset=169086
hashAddNamtab: ADDED 'StopOn_' at iOffset=169098
hashAddNamtab: ADDED 'StimFailed_' at iOffset=169106
hashAddNamtab: ADDED 'StartInfos_' at iOffset=169118
hashAddNamtab: ADDED 'EndInfos_' at iOffset=169130
hashAddNamtab: ADDED 'InfosZero' at iOffset=169140
hashAddNamtab: ADDED 'Trl_number' at iOffset=169150
hashAddNamtab: ADDED 'Comp_Trl_number' at iOffset=169162
hashAddNamtab: ADDED 'Rand_Comp_Trl_number_DP' at iOffset=169178
hashAddNamtab: ADDED 'Rand_Comp_Trl_number_DA' at iOffset=169202
hashAddNamtab: ADDED 'Rep_Comp_Trl_number' at iOffset=169226
hashAddNamtab: ADDED 'Rand_Comp_Trl_number' at iOffset=169246
hashAddNamtab: ADDED 'Rand_Comp_NG_Trl' at iOffset=169268
hashAddNamtab: ADDED 'Rand_Comp_Trl_DA' at iOffset=169286
hashAddNamtab: ADDED 'Rand_Comp_Trl_DP' at iOffset=169304
hashAddNamtab: ADDED 'Rep_Comp_NG_Trl' at iOffset=169322
hashAddNamtab: ADDED 'RandPerAcc' at iOffset=169338
hashAddNamtab: ADDED 'RepPerAcc' at iOffset=169350
hashAddNamtab: ADDED 'RandPerAcc_DA' at iOffset=169360
hashAddNamtab: ADDED 'RandPerAcc_DP' at iOffset=169374
hashAddNamtab: ADDED 'rand_inacc_sacc' at iOffset=169388
hashAddNamtab: ADDED 'rep_inacc_sacc' at iOffset=169404
hashAddNamtab: ADDED 'rand_inacc_sacc_DA' at iOffset=169420
hashAddNamtab: ADDED 'rand_inacc_sacc_DP' at iOffset=169440
hashAddNamtab: ADDED 'current_rt' at iOffset=169460
hashAddNamtab: ADDED 'cum_rep_rt' at iOffset=169472
hashAddNamtab: ADDED 'avg_rep_rt' at iOffset=169484
hashAddNamtab: ADDED 'graph_rep_rt' at iOffset=169496
hashAddNamtab: ADDED 'cum_rand_rt' at iOffset=169510
hashAddNamtab: ADDED 'avg_rand_rt' at iOffset=169522
hashAddNamtab: ADDED 'cum_rand_rt_DA' at iOffset=169534
hashAddNamtab: ADDED 'avg_rand_rt_DA' at iOffset=169550
hashAddNamtab: ADDED 'cum_rand_rt_DP' at iOffset=169566
hashAddNamtab: ADDED 'avg_rand_rt_DP' at iOffset=169582
hashAddNamtab: ADDED 'graph_rand_rt' at iOffset=169598
hashAddNamtab: ADDED 'Correct_trls' at iOffset=169612
hashAddNamtab: ADDED 'Consec_corr' at iOffset=169626
hashAddNamtab: ADDED 'Block_number' at iOffset=169638
hashAddNamtab: ADDED 'Trls_per_block' at iOffset=169652
hashAddNamtab: ADDED 'Go_weight' at iOffset=169668
hashAddNamtab: ADDED 'Stop_weight' at iOffset=169678
hashAddNamtab: ADDED 'Ignore_weight' at iOffset=169690
hashAddNamtab: ADDED 'DR1_flag' at iOffset=169704
hashAddNamtab: ADDED 'Bonus_weight' at iOffset=169714
hashAddNamtab: ADDED 'Dealer_wins_weight' at iOffset=169728
hashAddNamtab: ADDED 'BigR_weight' at iOffset=169748
hashAddNamtab: ADDED 'MedR_weight' at iOffset=169760
hashAddNamtab: ADDED 'SmlR_weight' at iOffset=169772
hashAddNamtab: ADDED 'SmlP_weight' at iOffset=169784
hashAddNamtab: ADDED 'MedP_weight' at iOffset=169796
hashAddNamtab: ADDED 'BigP_weight' at iOffset=169808
hashAddNamtab: ADDED 'Catch' at iOffset=169820
hashAddNamtab: ADDED 'CatchCode' at iOffset=169826
hashAddNamtab: ADDED 'Perc_catch' at iOffset=169836
hashAddNamtab: ADDED 'PlacPres' at iOffset=169848
hashAddNamtab: ADDED 'SearchType' at iOffset=169858
hashAddNamtab: ADDED 'TargetType' at iOffset=169870
hashAddNamtab: ADDED 'TrialTp' at iOffset=169882
hashAddNamtab: ADDED 'SetSize' at iOffset=169890
hashAddNamtab: ADDED 'soa_mode' at iOffset=169898
hashAddNamtab: ADDED 'Consec_trl' at iOffset=169908
hashAddNamtab: ADDED 'Dist_Ecc_list' at iOffset=169920
hashAddNamtab: ADDED 'Dist_Ang_list' at iOffset=169934
hashAddNamtab: ADDED 'RanTarg_Ang_list' at iOffset=169948
hashAddNamtab: ADDED 'RepTarg_Ang_list' at iOffset=169966
hashAddNamtab: ADDED 'TrAngList' at iOffset=169984
hashAddNamtab: ADDED 'ArrStruct' at iOffset=169994
hashAddNamtab: ADDED 'ProbCue' at iOffset=170004
hashAddNamtab: ADDED 'ProbSide' at iOffset=170012
hashAddNamtab: ADDED 'TaskStim' at iOffset=170022
hashAddNamtab: ADDED 'FixJitter' at iOffset=170032
hashAddNamtab: ADDED 'LatStruct' at iOffset=170042
hashAddNamtab: ADDED 'Catch_Rew' at iOffset=170052
hashAddNamtab: ADDED 'trialtype' at iOffset=170062
hashAddNamtab: ADDED 'Singleton_color' at iOffset=170072
hashAddNamtab: ADDED 'NonSingleton_color' at iOffset=170088
hashAddNamtab: ADDED 'd1color' at iOffset=170108
hashAddNamtab: ADDED 'SingMode' at iOffset=170116
hashAddNamtab: ADDED 'SingFreq' at iOffset=170126
hashAddNamtab: ADDED 'DistPres' at iOffset=170136
hashAddNamtab: ADDED 'SingCol' at iOffset=170146
hashAddNamtab: ADDED 'PercSingTrl' at iOffset=170154
hashAddNamtab: ADDED 'TargOrt' at iOffset=170166
hashAddNamtab: ADDED 'TargOrt1' at iOffset=170174
hashAddNamtab: ADDED 'TargOrt2' at iOffset=170184
hashAddNamtab: ADDED 'TD_Select' at iOffset=170194
hashAddNamtab: ADDED 'DistOrt' at iOffset=170204
hashAddNamtab: ADDED 'SearchEcc' at iOffset=170212
hashAddNamtab: ADDED 'SelEcc' at iOffset=170222
hashAddNamtab: ADDED 'VarEcc' at iOffset=170230
hashAddNamtab: ADDED 'TargTrainSet' at iOffset=170238
hashAddNamtab: ADDED 'THemi' at iOffset=170252
hashAddNamtab: ADDED 'DHemi' at iOffset=170258
hashAddNamtab: ADDED 'Rand_targ_angle' at iOffset=170264
hashAddNamtab: ADDED 'Rand_d1_angle' at iOffset=170280
hashAddNamtab: ADDED 'catch_hold_time' at iOffset=170294
hashAddNamtab: ADDED 'search_fix_time' at iOffset=170310
hashAddNamtab: ADDED 'plac_duration' at iOffset=170326
hashAddNamtab: ADDED 'max_plactime' at iOffset=170340
hashAddNamtab: ADDED 'min_plactime' at iOffset=170354
hashAddNamtab: ADDED 'StimInterval' at iOffset=170368
hashAddNamtab: ADDED 'StimCond' at iOffset=170382
hashAddNamtab: ADDED 'LastStim' at iOffset=170392
hashAddNamtab: ADDED 'Npulse' at iOffset=170402
hashAddNamtab: ADDED 'PulseGap' at iOffset=170410
hashAddNamtab: ADDED 'Classic' at iOffset=170420
hashAddNamtab: ADDED 'Stop_sig_color' at iOffset=170428
hashAddNamtab: ADDED 'Ignore_sig_color' at iOffset=170444
hashAddNamtab: ADDED 'Fixation_color' at iOffset=170462
hashAddNamtab: ADDED 'Mask_sig_color' at iOffset=170478
hashAddNamtab: ADDED 'N_targ_pos' at iOffset=170494
hashAddNamtab: ADDED 'Color_list' at iOffset=170506
hashAddNamtab: ADDED 'Size_list' at iOffset=170518
hashAddNamtab: ADDED 'Angle_list' at iOffset=170528
hashAddNamtab: ADDED 'Eccentricity_list' at iOffset=170540
hashAddNamtab: ADDED 'Fixation_size' at iOffset=170558
hashAddNamtab: ADDED 'Set_Tones' at iOffset=170572
hashAddNamtab: ADDED 'Success_Tone_bigR' at iOffset=170582
hashAddNamtab: ADDED 'Success_Tone_medR' at iOffset=170600
hashAddNamtab: ADDED 'Success_Tone_smlR' at iOffset=170618
hashAddNamtab: ADDED 'Failure_Tone_smlP' at iOffset=170636
hashAddNamtab: ADDED 'Failure_Tone_medP' at iOffset=170654
hashAddNamtab: ADDED 'Failure_Tone_bigP' at iOffset=170672
hashAddNamtab: ADDED 'Fixation_Target' at iOffset=170690
hashAddNamtab: ADDED 'llength' at iOffset=170706
hashAddNamtab: ADDED 'lwidth' at iOffset=170714
hashAddNamtab: ADDED 'Fix_win_size' at iOffset=170722
hashAddNamtab: ADDED 'Targ_win_size' at iOffset=170736
hashAddNamtab: ADDED 'Allowed_fix_time' at iOffset=170750
hashAddNamtab: ADDED 'Expo_Jitter' at iOffset=170768
hashAddNamtab: ADDED 'Expo_Jitter_SOA' at iOffset=170780
hashAddNamtab: ADDED 'Min_Holdtime' at iOffset=170796
hashAddNamtab: ADDED 'Max_Holdtime' at iOffset=170810
hashAddNamtab: ADDED 'Min_SOA' at iOffset=170824
hashAddNamtab: ADDED 'Max_SOA' at iOffset=170832
hashAddNamtab: ADDED 'Min_saccade_time' at iOffset=170840
hashAddNamtab: ADDED 'Max_saccade_time' at iOffset=170858
hashAddNamtab: ADDED 'Max_sacc_duration' at iOffset=170876
hashAddNamtab: ADDED 'Targ_hold_time' at iOffset=170894
hashAddNamtab: ADDED 'N_SSDs' at iOffset=170910
hashAddNamtab: ADDED 'Max_SSD' at iOffset=170918
hashAddNamtab: ADDED 'Min_SSD' at iOffset=170926
hashAddNamtab: ADDED 'N_SOAs' at iOffset=170934
hashAddNamtab: ADDED 'SSD_floor' at iOffset=170942
hashAddNamtab: ADDED 'SSD_ceil' at iOffset=170952
hashAddNamtab: ADDED 'Staircase' at iOffset=170962
hashAddNamtab: ADDED 'SSD_list' at iOffset=170972
hashAddNamtab: ADDED 'SOA_list' at iOffset=170982
hashAddNamtab: ADDED 'Cancl_time' at iOffset=170992
hashAddNamtab: ADDED 'Tone_Duration' at iOffset=171004
hashAddNamtab: ADDED 'Reward_Offset' at iOffset=171018
hashAddNamtab: ADDED 'Base_Reward_time' at iOffset=171032
hashAddNamtab: ADDED 'Base_Punish_time' at iOffset=171050
hashAddNamtab: ADDED 'Bmove_tout' at iOffset=171068
hashAddNamtab: ADDED 'Move_ct' at iOffset=171080
hashAddNamtab: ADDED 'Max_move_ct' at iOffset=171088
hashAddNamtab: ADDED 'TrainingStill' at iOffset=171100
hashAddNamtab: ADDED 'Canc_alert' at iOffset=171114
hashAddNamtab: ADDED 'Fixed_trl_length' at iOffset=171126
hashAddNamtab: ADDED 'Trial_length' at iOffset=171144
hashAddNamtab: ADDED 'Inter_trl_int' at iOffset=171158
hashAddNamtab: ADDED 'Exp_juice' at iOffset=171172
hashAddNamtab: ADDED 'nogosoa' at iOffset=171182
hashAddNamtab: ADDED 'Reward_duration' at iOffset=171190
hashAddNamtab: ADDED 'Punish_time' at iOffset=171206
hashAddNamtab: ADDED 'Success_tone' at iOffset=171218
hashAddNamtab: ADDED 'Failure_tone' at iOffset=171232
hashAddNamtab: ADDED 'IFI' at iOffset=171246
hashAddNamtab: ADDED 'flashTime' at iOffset=171250
hashAddNamtab: ADDED 'DEFAULT' at iOffset=171260
preInstructionCompilation: BEFORE 'DEFAULT' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED '#P1' at iOffset=171268
hashAddNamtab: ADDED '#P2' at iOffset=171272
hashAddNamtab: ADDED '#P3' at iOffset=171276
hashAddNamtab: ADDED 'run_cmd_sess' at iOffset=171280
hashAddNamtab: ADDED 'run_fix_sess' at iOffset=171294
hashAddNamtab: ADDED 'run_mg_sess' at iOffset=171308
hashAddNamtab: ADDED 'run_gonogo_sess' at iOffset=171320
hashAddNamtab: ADDED 'run_flash_sess' at iOffset=171336
hashAddNamtab: ADDED 'run_delayed_sess' at iOffset=171352
hashAddNamtab: ADDED 'run_search_sess' at iOffset=171370
hashAddNamtab: ADDED 'xena' at iOffset=171386
hashAddNamtab: ADDED 'broca' at iOffset=171392
hashAddNamtab: ADDED 'helmholtz' at iOffset=171398
hashAddNamtab: ADDED 'gauss' at iOffset=171408
hashAddNamtab: ADDED 'color_num' at iOffset=171414
hashAddNamtab: ADDED 'r_' at iOffset=171424
hashAddNamtab: ADDED 'g_' at iOffset=171428
hashAddNamtab: ADDED 'b_' at iOffset=171432
hashAddNamtab: ADDED '#I0' at iOffset=171436
hashAddNamtab: ADDED '#I1' at iOffset=171440
hashAddNamtab: ADDED '#I2' at iOffset=171444
hashAddNamtab: ADDED '#I100' at iOffset=171448
hashAddNamtab: ADDED '#M00000000' at iOffset=171454
hashAddNamtab: ADDED '#M42C80000' at iOffset=171466
hashAddNamtab: ADDED '#I500' at iOffset=171478
hashAddNamtab: ADDED '#I1000' at iOffset=171484
hashAddNamtab: ADDED '#I35' at iOffset=171492
hashAddNamtab: ADDED '#I33' at iOffset=171498
hashAddNamtab: ADDED '#I27' at iOffset=171504
hashAddNamtab: ADDED '#I63' at iOffset=171510
hashAddNamtab: ADDED '#I36' at iOffset=171516
hashAddNamtab: ADDED '#I3' at iOffset=171522
hashAddNamtab: ADDED '#I4' at iOffset=171526
hashAddNamtab: ADDED '#I5' at iOffset=171530
hashAddNamtab: ADDED '#I6' at iOffset=171534
hashAddNamtab: ADDED '#I7' at iOffset=171538
hashAddNamtab: ADDED '#I8' at iOffset=171542
hashAddNamtab: ADDED '#I9' at iOffset=171546
hashAddNamtab: ADDED '#I10' at iOffset=171550
hashAddNamtab: ADDED '#I11' at iOffset=171556
hashAddNamtab: ADDED '#M3F000000' at iOffset=171562
hashAddNamtab: ADDED '#I180' at iOffset=171574
hashAddNamtab: ADDED '#M43340000' at iOffset=171580
hashAddNamtab: ADDED '#I90' at iOffset=171592
hashAddNamtab: ADDED '#M42B40000' at iOffset=171598
hashAddNamtab: ADDED '#I135' at iOffset=171610
hashAddNamtab: ADDED '#M43070000' at iOffset=171616
hashAddNamtab: ADDED '#I-135' at iOffset=171628
hashAddNamtab: ADDED '#MC3070000' at iOffset=171636
hashAddNamtab: ADDED '#I-90' at iOffset=171648
hashAddNamtab: ADDED '#MC2B40000' at iOffset=171654
hashAddNamtab: ADDED '#I-45' at iOffset=171666
hashAddNamtab: ADDED '#MC2340000' at iOffset=171672
hashAddNamtab: ADDED '#M41000000' at iOffset=171684
hashAddNamtab: ADDED '#I200' at iOffset=171696
hashAddNamtab: ADDED '#I400' at iOffset=171702
hashAddNamtab: ADDED '#I800' at iOffset=171708
hashAddNamtab: ADDED '#I1600' at iOffset=171714
hashAddNamtab: ADDED '#I3200' at iOffset=171722
hashAddNamtab: ADDED '#M40200000' at iOffset=171730
hashAddNamtab: ADDED '#I2000' at iOffset=171742
hashAddNamtab: ADDED '#I600' at iOffset=171750
hashAddNamtab: ADDED '#M40400000' at iOffset=171756
hashAddNamtab: ADDED '#M40C00000' at iOffset=171768
hashAddNamtab: ADDED '#M41100000' at iOffset=171780
hashAddNamtab: ADDED '#I12' at iOffset=171792
hashAddNamtab: ADDED '#M41400000' at iOffset=171798
hashAddNamtab: ADDED '#I13' at iOffset=171810
hashAddNamtab: ADDED '#I14' at iOffset=171816
hashAddNamtab: ADDED '#I15' at iOffset=171822
hashAddNamtab: ADDED '#I16' at iOffset=171828
hashAddNamtab: ADDED '#I17' at iOffset=171834
hashAddNamtab: ADDED '#I18' at iOffset=171840
hashAddNamtab: ADDED '#I19' at iOffset=171846
hashAddNamtab: ADDED '#L0' at iOffset=171852
hashAddNamtab: ADDED '#I30' at iOffset=171856
hashAddNamtab: ADDED '#I60' at iOffset=171862
hashAddNamtab: ADDED '#I4000' at iOffset=171868
hashAddNamtab: ADDED '#I28' at iOffset=171876
hashAddNamtab: ADDED '#L1' at iOffset=171882
hashAddNamtab: ADDED '#M43E48000' at iOffset=171886
hashAddNamtab: ADDED '#I29' at iOffset=171898
hashAddNamtab: ADDED '#M4405C000' at iOffset=171904
hashAddNamtab: ADDED '#M40600000' at iOffset=171916
hashAddNamtab: ADDED '#I50' at iOffset=171928
hashAddNamtab: ADDED '#I10000' at iOffset=171934
hashAddNamtab: ADDED '#M3FC00000' at iOffset=171942
hashAddNamtab: ADDED '#M40000000' at iOffset=171954
hashAddNamtab: ADDED '#M40800000' at iOffset=171966
hashAddNamtab: ADDED '#M40A00000' at iOffset=171978
hashAddNamtab: ADDED '#M41F00000' at iOffset=171990
hashAddNamtab: ADDED '#M42700000' at iOffset=172002
hashAddNamtab: ADDED '#I120' at iOffset=172014
hashAddNamtab: ADDED '#M42F00000' at iOffset=172020
hashAddNamtab: ADDED '#I150' at iOffset=172032
hashAddNamtab: ADDED '#M43160000' at iOffset=172038
hashAddNamtab: ADDED '#I210' at iOffset=172050
hashAddNamtab: ADDED '#M43520000' at iOffset=172056
hashAddNamtab: ADDED '#I240' at iOffset=172068
hashAddNamtab: ADDED '#M43700000' at iOffset=172074
hashAddNamtab: ADDED '#I270' at iOffset=172086
hashAddNamtab: ADDED '#M43870000' at iOffset=172092
hashAddNamtab: ADDED '#I300' at iOffset=172104
hashAddNamtab: ADDED '#M43960000' at iOffset=172110
hashAddNamtab: ADDED '#I330' at iOffset=172122
hashAddNamtab: ADDED '#M43A50000' at iOffset=172128
hashAddNamtab: ADDED '#I20' at iOffset=172140
hashAddNamtab: ADDED '#M42480000' at iOffset=172146
hashAddNamtab: ADDED '#M41500000' at iOffset=172158
hashAddNamtab: ADDED '#I23' at iOffset=172170
hashAddNamtab: ADDED '#M41B80000' at iOffset=172176
hashAddNamtab: ADDED '#M42040000' at iOffset=172188
hashAddNamtab: ADDED '#I43' at iOffset=172200
hashAddNamtab: ADDED '#M422C0000' at iOffset=172206
hashAddNamtab: ADDED '#I53' at iOffset=172218
hashAddNamtab: ADDED '#M42540000' at iOffset=172224
hashAddNamtab: ADDED '#M427C0000' at iOffset=172236
hashAddNamtab: ADDED '#I1400' at iOffset=172248
hashAddNamtab: ADDED '#I5000' at iOffset=172256
hashAddNamtab: ADDED '#I1200' at iOffset=172264
hashAddNamtab: ADDED '#I45' at iOffset=172272
hashAddNamtab: ADDED '#M42340000' at iOffset=172278
hashAddNamtab: ADDED '#I315' at iOffset=172290
hashAddNamtab: ADDED '#M439D8000' at iOffset=172296
hashAddNamtab: ADDED '#I225' at iOffset=172308
hashAddNamtab: ADDED '#M43610000' at iOffset=172314
hashAddNamtab: ADDED '#M43480000' at iOffset=172326
hashAddNamtab: ADDED '#M43C80000' at iOffset=172338
hashAddNamtab: ADDED '#I900' at iOffset=172350
hashAddNamtab: ADDED '#M44610000' at iOffset=172356
hashAddNamtab: ADDED '#M447A0000' at iOffset=172368
hashAddNamtab: ADDED '#M41300000' at iOffset=172380
hashAddNamtab: ADDED '#M4179999A' at iOffset=172392
hashAddNamtab: ADDED '#M43E10000' at iOffset=172404
hashAddNamtab: ADDED '#I70' at iOffset=172416
hashAddNamtab: ADDED '#M428C0000' at iOffset=172422
hashAddNamtab: ADDED '#I80' at iOffset=172434
hashAddNamtab: ADDED '#M42A00000' at iOffset=172440
hashAddNamtab: ADDED '#M43DC0000' at iOffset=172452
hashAddNamtab: ADDED '#M41900000' at iOffset=172464
hashAddNamtab: ADDED '#M41E00000' at iOffset=172476
hashAddNamtab: ADDED '#I38' at iOffset=172488
hashAddNamtab: ADDED '#M42180000' at iOffset=172494
hashAddNamtab: ADDED '#I48' at iOffset=172506
hashAddNamtab: ADDED '#M42400000' at iOffset=172512
hashAddNamtab: ADDED '#I350' at iOffset=172524
hashAddNamtab: ADDED '#I450' at iOffset=172530
hashAddNamtab: ADDED '#M44160000' at iOffset=172536
hashAddNamtab: ADDED '#I750' at iOffset=172548
hashAddNamtab: ADDED '#M443B8000' at iOffset=172554
hashAddNamtab: ADDED '#I1050' at iOffset=172566
hashAddNamtab: ADDED '#M44834000' at iOffset=172574
hashAddNamtab: ADDED '#M44960000' at iOffset=172586
hashAddNamtab: ADDED '#I1350' at iOffset=172598
hashAddNamtab: ADDED '#M44A8C000' at iOffset=172606
hashAddNamtab: ADDED '#I60000' at iOffset=172618
hashAddNamtab: ADDED '#I700' at iOffset=172626
hashAddNamtab: ADDED '#I1100' at iOffset=172632
hashAddNamtab: ADDED '#M44898000' at iOffset=172640
hashAddNamtab: ADDED '#I1300' at iOffset=172652
hashAddNamtab: ADDED '#M44A28000' at iOffset=172660
hashAddNamtab: ADDED '#I22' at iOffset=172672
hashAddNamtab: ADDED '#M43DE8000' at iOffset=172678
hashAddNamtab: ADDED '#M43FA0000' at iOffset=172690
hashAddNamtab: ADDED '#M44AF0000' at iOffset=172702
hashAddNamtab: ADDED '#M44C80000' at iOffset=172714
hashAddNamtab: ADDED '#I1800' at iOffset=172726
hashAddNamtab: ADDED '#M44E10000' at iOffset=172734
hashAddNamtab: ADDED '#M44FA0000' at iOffset=172746
hashAddNamtab: ADDED '#I600000' at iOffset=172758
hashAddNamtab: ADDED '#I175' at iOffset=172768
hashAddNamtab: ADDED '#I250' at iOffset=172774
hashAddNamtab: ADDED '#M437A0000' at iOffset=172780
hashAddNamtab: ADDED '#M43AF0000' at iOffset=172792
postInstructionCompilation: Saving 'DEFAULT' nops=12550 nInstructions=12548 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'DEFAULT' Wrote 12548 bytes from op[2..12549] to instcach[2..12549]
hashAddNamtab: ADDED 'GOODVARS' at iOffset=172804
preInstructionCompilation: BEFORE 'GOODVARS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'i' at iOffset=172814
hashAddNamtab: ADDED '#F0' at iOffset=172816
hashAddNamtab: ADDED '#F1' at iOffset=172820
hashAddNamtab: ADDED 'WARNING!!!
' at iOffset=172824
hashAddNamtab: ADDED '#S0' at iOffset=172836
hashAddNamtab: ADDED '#L2' at iOffset=172840
hashAddNamtab: ADDED 'Trial weights do not sum to 100.
' at iOffset=172844
hashAddNamtab: ADDED '#S1' at iOffset=172878
hashAddNamtab: ADDED 'CHANGE PARAMETERS BEFORE RECORDING
' at iOffset=172882
hashAddNamtab: ADDED '#S2' at iOffset=172918
hashAddNamtab: ADDED 'dpop' at iOffset=172922
hashAddNamtab: ADDED '#S3' at iOffset=172928
hashAddNamtab: ADDED '#M41649249' at iOffset=172932
hashAddNamtab: ADDED 'WARNING!!!
' at iOffset=172944
hashAddNamtab: ADDED '#S4' at iOffset=172956
hashAddNamtab: ADDED 'SSDs exceed Max time allowed...
' at iOffset=172960
hashAddNamtab: ADDED '#S5' at iOffset=172994
hashAddNamtab: ADDED '...for saccade to target.
' at iOffset=172998
hashAddNamtab: ADDED '#S6' at iOffset=173026
hashAddNamtab: ADDED 'CHANGE PARAMETERS BEFORE RECORDING
' at iOffset=173030
hashAddNamtab: ADDED '#S7' at iOffset=173066
hashAddNamtab: ADDED 'dpop' at iOffset=173070
hashAddNamtab: ADDED '#S8' at iOffset=173076
hashAddNamtab: ADDED '#L3' at iOffset=173080
hashAddNamtab: ADDED '#L4' at iOffset=173084
hashAddNamtab: ADDED '#L5' at iOffset=173088
hashAddNamtab: ADDED '#L6' at iOffset=173092
hashAddNamtab: ADDED '#L7' at iOffset=173096
hashAddNamtab: ADDED '#L8' at iOffset=173100
hashAddNamtab: ADDED '#L9' at iOffset=173104
hashAddNamtab: ADDED '#L10' at iOffset=173108
hashAddNamtab: ADDED '#L11' at iOffset=173114
hashAddNamtab: ADDED '#L12' at iOffset=173120
hashAddNamtab: ADDED '#L13' at iOffset=173126
hashAddNamtab: ADDED '#L14' at iOffset=173132
hashAddNamtab: ADDED 'WARNING!!!
' at iOffset=173138
hashAddNamtab: ADDED '#S9' at iOffset=173150
hashAddNamtab: ADDED 'Trial length too short
' at iOffset=173154
hashAddNamtab: ADDED '#S10' at iOffset=173178
hashAddNamtab: ADDED 'Extending trial length to %d
' at iOffset=173184
hashAddNamtab: ADDED '#S11' at iOffset=173214
hashAddNamtab: ADDED 'WARNING!!!
' at iOffset=173220
hashAddNamtab: ADDED '#S12' at iOffset=173232
hashAddNamtab: ADDED 'Trial weights do not sum to 100.
' at iOffset=173238
hashAddNamtab: ADDED '#S13' at iOffset=173272
hashAddNamtab: ADDED 'CHANGE PARAMETERS BEFORE RECORDING
' at iOffset=173278
hashAddNamtab: ADDED '#S14' at iOffset=173314
hashAddNamtab: ADDED 'dpop' at iOffset=173320
hashAddNamtab: ADDED '#S15' at iOffset=173326
hashAddNamtab: ADDED 'WARNING!!!
' at iOffset=173332
hashAddNamtab: ADDED '#S16' at iOffset=173344
hashAddNamtab: ADDED 'Trial length too short
' at iOffset=173350
hashAddNamtab: ADDED '#S17' at iOffset=173374
hashAddNamtab: ADDED 'Extending trial length to %d
' at iOffset=173380
hashAddNamtab: ADDED '#S18' at iOffset=173410
postInstructionCompilation: Saving 'GOODVARS' nops=1744 nInstructions=1742 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'GOODVARS' Wrote 1742 bytes from op[2..1743] to instcach[12550..14291]
hashAddNamtab: ADDED 'STIM' at iOffset=173416
preInstructionCompilation: BEFORE 'STIM' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'channel' at iOffset=173422
hashAddNamtab: ADDED 'on' at iOffset=173430
hashAddNamtab: ADDED 'off' at iOffset=173434
postInstructionCompilation: Saving 'STIM' nops=72 nInstructions=70 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'STIM' Wrote 70 bytes from op[2..71] to instcach[14292..14361]
hashAddNamtab: ADDED 'KEY_STIM' at iOffset=173438
preInstructionCompilation: BEFORE 'KEY_STIM' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'KEY_STIM' nops=18 nInstructions=16 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'KEY_STIM' Wrote 16 bytes from op[2..17] to instcach[14362..14377]
hashAddNamtab: ADDED 'SET_CLRS' at iOffset=173448
preInstructionCompilation: BEFORE 'SET_CLRS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'cm %d %d %d %d;
' at iOffset=173458
hashAddNamtab: ADDED '#S19' at iOffset=173476
hashAddNamtab: ADDED '#I59' at iOffset=173482
hashAddNamtab: ADDED '#I255' at iOffset=173488
hashAddNamtab: ADDED 'cm 255 %d %d %d;
' at iOffset=173494
hashAddNamtab: ADDED '#S20' at iOffset=173512
hashAddNamtab: ADDED 'cm 254 %d %d %d;
' at iOffset=173518
hashAddNamtab: ADDED '#S21' at iOffset=173536
hashAddNamtab: ADDED 'cm 253 %d %d %d;
' at iOffset=173542
hashAddNamtab: ADDED '#S22' at iOffset=173560
hashAddNamtab: ADDED 'cm 252 %d %d %d;
' at iOffset=173566
hashAddNamtab: ADDED '#S23' at iOffset=173584
hashAddNamtab: ADDED 'cm 251 %d %d %d;
' at iOffset=173590
hashAddNamtab: ADDED '#S24' at iOffset=173608
hashAddNamtab: ADDED 'cm 250 %d %d %d;
' at iOffset=173614
hashAddNamtab: ADDED '#S25' at iOffset=173632
postInstructionCompilation: Saving 'SET_CLRS' nops=628 nInstructions=626 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SET_CLRS' Wrote 626 bytes from op[2..627] to instcach[14378..15003]
hashAddNamtab: ADDED 'PORTA' at iOffset=173638
hashAddNamtab: ADDED 'PORTB' at iOffset=173644
hashAddNamtab: ADDED 'PORTC' at iOffset=173650
hashAddNamtab: ADDED 'Deg2Pix_X' at iOffset=173656
hashAddNamtab: ADDED 'Deg2Pix_Y' at iOffset=173666
hashAddNamtab: ADDED 'Unit2Pix_X' at iOffset=173676
hashAddNamtab: ADDED 'Unit2Pix_Y' at iOffset=173688
hashAddNamtab: ADDED 'SET_COOR' at iOffset=173700
preInstructionCompilation: BEFORE 'SET_COOR' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED '#Q1' at iOffset=173710
hashAddNamtab: ADDED '#Q2' at iOffset=173714
hashAddNamtab: ADDED '#Q3' at iOffset=173718
hashAddNamtab: ADDED '#P4' at iOffset=173722
hashAddNamtab: ADDED '#P5' at iOffset=173726
hashAddNamtab: ADDED 'half_width' at iOffset=173730
hashAddNamtab: ADDED 'half_height' at iOffset=173742
hashAddNamtab: ADDED 'deg_x' at iOffset=173754
hashAddNamtab: ADDED 'deg_y' at iOffset=173760
hashAddNamtab: ADDED '#F2' at iOffset=173766
hashAddNamtab: ADDED 'vc %d, %d, %d, %d
' at iOffset=173770
hashAddNamtab: ADDED '#S26' at iOffset=173790
hashAddNamtab: ADDED '#I-1' at iOffset=173796
postInstructionCompilation: Saving 'SET_COOR' nops=288 nInstructions=286 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SET_COOR' Wrote 286 bytes from op[2..287] to instcach[15004..15289]
hashAddNamtab: ADDED 'gLEFT' at iOffset=173802
hashAddNamtab: ADDED 'gRIGHT' at iOffset=173808
hashAddNamtab: ADDED 'tPOINT' at iOffset=173816
hashAddNamtab: ADDED 'tBOX' at iOffset=173824
hashAddNamtab: ADDED 'tCROSS' at iOffset=173830
hashAddNamtab: ADDED 'tXCROSS' at iOffset=173838
hashAddNamtab: ADDED 'tELLIPSE' at iOffset=173846
hashAddNamtab: ADDED 'aXOR' at iOffset=173856
hashAddNamtab: ADDED 'aREPLACE' at iOffset=173862
hashAddNamtab: ADDED 'aVISIBLE' at iOffset=173872
hashAddNamtab: ADDED 'aINVISIBLE' at iOffset=173882
hashAddNamtab: ADDED 'aFILLED' at iOffset=173894
hashAddNamtab: ADDED 'aUNFILLED' at iOffset=173902
hashAddNamtab: ADDED 'aSIZE' at iOffset=173912
hashAddNamtab: ADDED 'aRANGE' at iOffset=173918
hashAddNamtab: ADDED 'aTITLE' at iOffset=173926
hashAddNamtab: ADDED 'aCLEAR' at iOffset=173934
hashAddNamtab: ADDED 'object_fixwin' at iOffset=173942
hashAddNamtab: ADDED 'object_eye' at iOffset=173956
hashAddNamtab: ADDED 'object_targwin' at iOffset=173968
hashAddNamtab: ADDED 'object_fix' at iOffset=173984
hashAddNamtab: ADDED 'object_targ' at iOffset=173996
hashAddNamtab: ADDED 'GRAPHS' at iOffset=174008
preInstructionCompilation: BEFORE 'GRAPHS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED '#Q4' at iOffset=174016
hashAddNamtab: ADDED 'left' at iOffset=174020
hashAddNamtab: ADDED 'right' at iOffset=174026
hashAddNamtab: ADDED 'down' at iOffset=174032
hashAddNamtab: ADDED 'up' at iOffset=174038
hashAddNamtab: ADDED '#I-2' at iOffset=174042
hashAddNamtab: ADDED '*** TASK ***' at iOffset=174048
hashAddNamtab: ADDED '#S27' at iOffset=174062
postInstructionCompilation: Saving 'GRAPHS' nops=316 nInstructions=314 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'GRAPHS' Wrote 314 bytes from op[2..315] to instcach[15290..15603]
hashAddNamtab: ADDED 'FirstStopTrial' at iOffset=174068
hashAddNamtab: ADDED 'object_ssd0' at iOffset=174084
hashAddNamtab: ADDED 'object_ssd1' at iOffset=174096
hashAddNamtab: ADDED 'object_ssd2' at iOffset=174108
hashAddNamtab: ADDED 'object_ssd3' at iOffset=174120
hashAddNamtab: ADDED 'object_ssd4' at iOffset=174132
hashAddNamtab: ADDED 'object_ssd5' at iOffset=174144
hashAddNamtab: ADDED 'object_ssd6' at iOffset=174156
hashAddNamtab: ADDED 'object_ssd7' at iOffset=174168
hashAddNamtab: ADDED 'object_ssd8' at iOffset=174180
hashAddNamtab: ADDED 'object_ssd9' at iOffset=174192
hashAddNamtab: ADDED 'object_ssd10' at iOffset=174204
hashAddNamtab: ADDED 'object_ssd11' at iOffset=174218
hashAddNamtab: ADDED 'object_ssd12' at iOffset=174232
hashAddNamtab: ADDED 'object_ssd13' at iOffset=174246
hashAddNamtab: ADDED 'object_ssd14' at iOffset=174260
hashAddNamtab: ADDED 'object_ssd15' at iOffset=174274
hashAddNamtab: ADDED 'object_ssd16' at iOffset=174288
hashAddNamtab: ADDED 'object_ssd17' at iOffset=174302
hashAddNamtab: ADDED 'object_ssd18' at iOffset=174316
hashAddNamtab: ADDED 'object_ssd19' at iOffset=174330
hashAddNamtab: ADDED 'object_30_70' at iOffset=174344
hashAddNamtab: ADDED 'SET_INH' at iOffset=174358
preInstructionCompilation: BEFORE 'SET_INH' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'ssd_range' at iOffset=174366
hashAddNamtab: ADDED 'inh_left' at iOffset=174376
hashAddNamtab: ADDED 'inh_right' at iOffset=174386
hashAddNamtab: ADDED 'inh_box_size' at iOffset=174396
hashAddNamtab: ADDED '#I200000' at iOffset=174410
hashAddNamtab: ADDED '#I40' at iOffset=174420
hashAddNamtab: ADDED '#I1025' at iOffset=174426
hashAddNamtab: ADDED '#I-25' at iOffset=174434
hashAddNamtab: ADDED '*** INHIBITION FUNCTION ***' at iOffset=174440
hashAddNamtab: ADDED '#S28' at iOffset=174468
postInstructionCompilation: Saving 'SET_INH' nops=800 nInstructions=798 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SET_INH' Wrote 798 bytes from op[2..799] to instcach[15604..16401]
hashAddNamtab: ADDED 'FirstSOATrial' at iOffset=174474
hashAddNamtab: ADDED 'object_soa0' at iOffset=174488
hashAddNamtab: ADDED 'object_soa1' at iOffset=174500
hashAddNamtab: ADDED 'object_soa2' at iOffset=174512
hashAddNamtab: ADDED 'object_soa3' at iOffset=174524
hashAddNamtab: ADDED 'object_soa4' at iOffset=174536
hashAddNamtab: ADDED 'object_soa5' at iOffset=174548
hashAddNamtab: ADDED 'object_soa6' at iOffset=174560
hashAddNamtab: ADDED 'object_soa7' at iOffset=174572
hashAddNamtab: ADDED 'object_soa8' at iOffset=174584
hashAddNamtab: ADDED 'object_soa9' at iOffset=174596
hashAddNamtab: ADDED 'object_soa10' at iOffset=174608
hashAddNamtab: ADDED 'object_soa11' at iOffset=174622
hashAddNamtab: ADDED 'object_soa12' at iOffset=174636
hashAddNamtab: ADDED 'object_soa13' at iOffset=174650
hashAddNamtab: ADDED 'object_soa14' at iOffset=174664
hashAddNamtab: ADDED 'object_soa15' at iOffset=174678
hashAddNamtab: ADDED 'object_soa16' at iOffset=174692
hashAddNamtab: ADDED 'object_soa17' at iOffset=174706
hashAddNamtab: ADDED 'object_soa18' at iOffset=174720
hashAddNamtab: ADDED 'object_soa19' at iOffset=174734
hashAddNamtab: ADDED 'SET_SOA' at iOffset=174748
preInstructionCompilation: BEFORE 'SET_SOA' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'soa_range' at iOffset=174756
hashAddNamtab: ADDED 'soa_left' at iOffset=174766
hashAddNamtab: ADDED 'soa_right' at iOffset=174776
hashAddNamtab: ADDED 'soa_box_size' at iOffset=174786
hashAddNamtab: ADDED '#I1500' at iOffset=174800
hashAddNamtab: ADDED 'x axis = %d
' at iOffset=174808
hashAddNamtab: ADDED '#S29' at iOffset=174822
hashAddNamtab: ADDED 'y axis = %d
' at iOffset=174828
hashAddNamtab: ADDED '#S30' at iOffset=174842
hashAddNamtab: ADDED '*** SOA FUNCTION ***' at iOffset=174848
hashAddNamtab: ADDED '#S31' at iOffset=174870
postInstructionCompilation: Saving 'SET_SOA' nops=658 nInstructions=656 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SET_SOA' Wrote 656 bytes from op[2..657] to instcach[16402..17057]
hashAddNamtab: ADDED 'FirstSearchTrial' at iOffset=174876
hashAddNamtab: ADDED 'object_repeat' at iOffset=174894
hashAddNamtab: ADDED 'object_random' at iOffset=174908
hashAddNamtab: ADDED 'SET_SCH' at iOffset=174922
preInstructionCompilation: BEFORE 'SET_SCH' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED '#I-1000' at iOffset=174930
hashAddNamtab: ADDED '*** Repeat vs. Random Display Search RT ***' at iOffset=174938
hashAddNamtab: ADDED '#S32' at iOffset=174982
postInstructionCompilation: Saving 'SET_SCH' nops=100 nInstructions=98 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SET_SCH' Wrote 98 bytes from op[2..99] to instcach[17058..17155]
hashAddNamtab: ADDED 'targ_angle' at iOffset=174988
hashAddNamtab: ADDED 'targ_ecc' at iOffset=175000
hashAddNamtab: ADDED 'Fix_win_left' at iOffset=175010
hashAddNamtab: ADDED 'Fix_win_right' at iOffset=175024
hashAddNamtab: ADDED 'Fix_win_down' at iOffset=175038
hashAddNamtab: ADDED 'Fix_win_up' at iOffset=175052
hashAddNamtab: ADDED 'Targ_win_left' at iOffset=175064
hashAddNamtab: ADDED 'Targ_win_right' at iOffset=175078
hashAddNamtab: ADDED 'Targ_win_down' at iOffset=175094
hashAddNamtab: ADDED 'Targ_win_up' at iOffset=175108
hashAddNamtab: ADDED 'WINDOWS' at iOffset=175120
preInstructionCompilation: BEFORE 'WINDOWS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'curr_target' at iOffset=175128
hashAddNamtab: ADDED '#Q6' at iOffset=175140
hashAddNamtab: ADDED '#Q7' at iOffset=175144
hashAddNamtab: ADDED 'angle' at iOffset=175148
hashAddNamtab: ADDED 'eccentricity' at iOffset=175154
hashAddNamtab: ADDED 'stim_ecc_x' at iOffset=175168
hashAddNamtab: ADDED 'stim_ecc_y' at iOffset=175180
hashAddNamtab: ADDED 'half_size_tw' at iOffset=175192
hashAddNamtab: ADDED 'old_fix_win_size' at iOffset=175206
hashAddNamtab: ADDED 'old_targ_win_size' at iOffset=175224
postInstructionCompilation: Saving 'WINDOWS' nops=682 nInstructions=680 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'WINDOWS' Wrote 680 bytes from op[2..681] to instcach[17156..17835]
hashAddNamtab: ADDED 'In_FixWin' at iOffset=175242
hashAddNamtab: ADDED 'In_TargWin' at iOffset=175252
hashAddNamtab: ADDED 'LOCATE_I' at iOffset=175264
preInstructionCompilation: BEFORE 'LOCATE_I' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'eye_x' at iOffset=175274
hashAddNamtab: ADDED 'eye_y' at iOffset=175280
hashAddNamtab: ADDED '#Q5' at iOffset=175286
hashAddNamtab: ADDED '#Q8' at iOffset=175290
hashAddNamtab: ADDED '#Q9' at iOffset=175294
hashAddNamtab: ADDED '#Q10' at iOffset=175298
postInstructionCompilation: Saving 'LOCATE_I' nops=362 nInstructions=360 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'LOCATE_I' Wrote 360 bytes from op[2..361] to instcach[17836..18195]
hashAddNamtab: ADDED 'Eye_on_VDOSync' at iOffset=175304
hashAddNamtab: ADDED 'CenterEyeNow' at iOffset=175320
hashAddNamtab: ADDED 'WATCHEYE' at iOffset=175334
preInstructionCompilation: BEFORE 'WATCHEYE' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'oldx' at iOffset=175344
hashAddNamtab: ADDED 'oldy' at iOffset=175350
hashAddNamtab: ADDED 'lasttime' at iOffset=175356
hashAddNamtab: ADDED 'plot_x' at iOffset=175366
hashAddNamtab: ADDED 'plot_y' at iOffset=175374
hashAddNamtab: ADDED '#F3' at iOffset=175382
hashAddNamtab: ADDED '#F4' at iOffset=175386
hashAddNamtab: ADDED 'cl;
' at iOffset=175390
hashAddNamtab: ADDED '#S33' at iOffset=175396
hashAddNamtab: ADDED 'ru %d,%d,%d,%d;
' at iOffset=175402
hashAddNamtab: ADDED '#S34' at iOffset=175420
hashAddNamtab: ADDED 'co %d;
' at iOffset=175426
hashAddNamtab: ADDED '#S35' at iOffset=175434
postInstructionCompilation: Saving 'WATCHEYE' nops=688 nInstructions=686 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'WATCHEYE' Wrote 686 bytes from op[2..687] to instcach[18196..18881]
hashAddNamtab: ADDED 'TONE' at iOffset=175440
preInstructionCompilation: BEFORE 'TONE' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'frequency' at iOffset=175446
hashAddNamtab: ADDED 'duration' at iOffset=175456
hashAddNamtab: ADDED 'count' at iOffset=175466
hashAddNamtab: ADDED '#I10000000' at iOffset=175472
postInstructionCompilation: Saving 'TONE' nops=56 nInstructions=54 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'TONE' Wrote 54 bytes from op[2..55] to instcach[18882..18935]
hashAddNamtab: ADDED 'TONESWEP' at iOffset=175484
preInstructionCompilation: BEFORE 'TONESWEP' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED '#I64000' at iOffset=175494
hashAddNamtab: ADDED '#I32000' at iOffset=175502
hashAddNamtab: ADDED '#I16000' at iOffset=175510
hashAddNamtab: ADDED '#I8000' at iOffset=175518
postInstructionCompilation: Saving 'TONESWEP' nops=290 nInstructions=288 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'TONESWEP' Wrote 288 bytes from op[2..289] to instcach[18936..19223]
hashAddNamtab: ADDED 'CheckMotion' at iOffset=175526
hashAddNamtab: ADDED 'WATCHMTH' at iOffset=175538
preInstructionCompilation: BEFORE 'WATCHMTH' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'mouth_channel' at iOffset=175548
hashAddNamtab: ADDED 'mouth_thresh' at iOffset=175562
hashAddNamtab: ADDED 'still' at iOffset=175576
hashAddNamtab: ADDED 'moving' at iOffset=175582
hashAddNamtab: ADDED 'mouth_status' at iOffset=175590
hashAddNamtab: ADDED 'last_status' at iOffset=175604
hashAddNamtab: ADDED 'mouth' at iOffset=175616
hashAddNamtab: ADDED 'mouth_time' at iOffset=175622
postInstructionCompilation: Saving 'WATCHMTH' nops=406 nInstructions=404 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'WATCHMTH' Wrote 404 bytes from op[2..405] to instcach[19224..19627]
hashAddNamtab: ADDED 'WATCHBOD' at iOffset=175634
preInstructionCompilation: BEFORE 'WATCHBOD' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'body_channel' at iOffset=175644
hashAddNamtab: ADDED 'sample_n' at iOffset=175658
hashAddNamtab: ADDED 'a_sets' at iOffset=175668
postInstructionCompilation: Saving 'WATCHBOD' nops=162 nInstructions=160 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'WATCHBOD' Wrote 160 bytes from op[2..161] to instcach[19628..19787]
hashAddNamtab: ADDED 'SVR_BELL' at iOffset=175676
preInstructionCompilation: BEFORE 'SVR_BELL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'SVR_BELL' nops=182 nInstructions=180 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SVR_BELL' Wrote 180 bytes from op[2..181] to instcach[19788..19967]
hashAddNamtab: ADDED 'SVR_BEL2' at iOffset=175686
preInstructionCompilation: BEFORE 'SVR_BEL2' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'SVR_BEL2' nops=22 nInstructions=20 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SVR_BEL2' Wrote 20 bytes from op[2..21] to instcach[19968..19987]
hashAddNamtab: ADDED 'Trl_Outcome' at iOffset=175696
hashAddNamtab: ADDED 'Trl_Start_Time' at iOffset=175708
hashAddNamtab: ADDED 'LastStopOutcome' at iOffset=175724
hashAddNamtab: ADDED 'CMDTRIAL' at iOffset=175740
preInstructionCompilation: BEFORE 'CMDTRIAL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'curr_holdtime' at iOffset=175750
hashAddNamtab: ADDED 'trl_type' at iOffset=175764
hashAddNamtab: ADDED 'curr_ssd' at iOffset=175774
hashAddNamtab: ADDED '#P6' at iOffset=175784
hashAddNamtab: ADDED '#P7' at iOffset=175788
hashAddNamtab: ADDED '#P8' at iOffset=175792
hashAddNamtab: ADDED '#P9' at iOffset=175796
hashAddNamtab: ADDED 'go_trl' at iOffset=175800
hashAddNamtab: ADDED 'stop_trl' at iOffset=175808
hashAddNamtab: ADDED 'ignore_trl' at iOffset=175818
hashAddNamtab: ADDED 'need_fix' at iOffset=175830
hashAddNamtab: ADDED 'fixating' at iOffset=175840
hashAddNamtab: ADDED 'targ_on' at iOffset=175850
hashAddNamtab: ADDED 'in_flight' at iOffset=175858
hashAddNamtab: ADDED 'on_target' at iOffset=175868
hashAddNamtab: ADDED 'stage' at iOffset=175878
hashAddNamtab: ADDED 'blank' at iOffset=175884
hashAddNamtab: ADDED 'fixation_pd' at iOffset=175890
hashAddNamtab: ADDED 'fixation' at iOffset=175902
hashAddNamtab: ADDED 'target_pd' at iOffset=175912
hashAddNamtab: ADDED 'target' at iOffset=175922
hashAddNamtab: ADDED 'signal_pd' at iOffset=175930
hashAddNamtab: ADDED 'signal' at iOffset=175940
hashAddNamtab: ADDED 'success' at iOffset=175948
hashAddNamtab: ADDED 'failure' at iOffset=175956
hashAddNamtab: ADDED 'no_change' at iOffset=175964
hashAddNamtab: ADDED 'no_fix' at iOffset=175974
hashAddNamtab: ADDED 'broke_fix' at iOffset=175982
hashAddNamtab: ADDED 'go_wrong' at iOffset=175992
hashAddNamtab: ADDED 'nogo_correct' at iOffset=176002
hashAddNamtab: ADDED 'sacc_out' at iOffset=176016
hashAddNamtab: ADDED 'broke_targ' at iOffset=176026
hashAddNamtab: ADDED 'go_correct' at iOffset=176038
hashAddNamtab: ADDED 'nogo_wrong' at iOffset=176050
hashAddNamtab: ADDED 'body_move' at iOffset=176062
hashAddNamtab: ADDED 'too_fast' at iOffset=176072
hashAddNamtab: ADDED 'fix_spot_time' at iOffset=176082
hashAddNamtab: ADDED 'targ_time' at iOffset=176096
hashAddNamtab: ADDED 'saccade_time' at iOffset=176106
hashAddNamtab: ADDED 'aquire_fix_time' at iOffset=176120
hashAddNamtab: ADDED 'stop_sig_time' at iOffset=176136
hashAddNamtab: ADDED 'aquire_targ_time' at iOffset=176150
hashAddNamtab: ADDED 'trl_running' at iOffset=176168
hashAddNamtab: ADDED ' 
' at iOffset=176180
hashAddNamtab: ADDED '#S36' at iOffset=176184
hashAddNamtab: ADDED '# %d' at iOffset=176190
hashAddNamtab: ADDED '#S37' at iOffset=176196
hashAddNamtab: ADDED ' (%d' at iOffset=176202
hashAddNamtab: ADDED '#S38' at iOffset=176208
hashAddNamtab: ADDED ' correct)
' at iOffset=176214
hashAddNamtab: ADDED '#S39' at iOffset=176226
hashAddNamtab: ADDED 'GO
' at iOffset=176232
hashAddNamtab: ADDED '#S40' at iOffset=176236
hashAddNamtab: ADDED 'holdtime = %d
' at iOffset=176242
hashAddNamtab: ADDED '#S41' at iOffset=176258
hashAddNamtab: ADDED 'STOP
' at iOffset=176264
hashAddNamtab: ADDED '#S42' at iOffset=176270
hashAddNamtab: ADDED 'holdtime = %d
' at iOffset=176276
hashAddNamtab: ADDED '#S43' at iOffset=176292
hashAddNamtab: ADDED '               ssd = %d
' at iOffset=176298
hashAddNamtab: ADDED '#S44' at iOffset=176324
hashAddNamtab: ADDED 'IGNORE
' at iOffset=176330
hashAddNamtab: ADDED '#S45' at iOffset=176338
hashAddNamtab: ADDED 'holdtime = %d
' at iOffset=176344
hashAddNamtab: ADDED '#S46' at iOffset=176360
hashAddNamtab: ADDED '               isd = %d
' at iOffset=176366
hashAddNamtab: ADDED '#S47' at iOffset=176392
hashAddNamtab: ADDED 'vp %d
' at iOffset=176398
hashAddNamtab: ADDED '#S48' at iOffset=176406
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=176412
hashAddNamtab: ADDED '#S49' at iOffset=176424
hashAddNamtab: ADDED 'vp %d
' at iOffset=176430
hashAddNamtab: ADDED '#S50' at iOffset=176438
hashAddNamtab: ADDED 'vp %d
' at iOffset=176444
hashAddNamtab: ADDED '#S51' at iOffset=176452
hashAddNamtab: ADDED 'Aborted (no fixation)
' at iOffset=176458
hashAddNamtab: ADDED '#S52' at iOffset=176482
hashAddNamtab: ADDED 'vp %d
' at iOffset=176488
hashAddNamtab: ADDED '#S53' at iOffset=176496
hashAddNamtab: ADDED 'Aborted (broke fixation)
' at iOffset=176502
hashAddNamtab: ADDED '#S54' at iOffset=176528
hashAddNamtab: ADDED 'vp %d
' at iOffset=176534
hashAddNamtab: ADDED '#S55' at iOffset=176542
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=176548
hashAddNamtab: ADDED '#S56' at iOffset=176560
hashAddNamtab: ADDED 'vp %d
' at iOffset=176566
hashAddNamtab: ADDED '#S57' at iOffset=176574
hashAddNamtab: ADDED 'vw %d
' at iOffset=176580
hashAddNamtab: ADDED '#S58' at iOffset=176588
hashAddNamtab: ADDED 'vp %d
' at iOffset=176594
hashAddNamtab: ADDED '#S59' at iOffset=176602
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=176608
hashAddNamtab: ADDED '#S60' at iOffset=176620
hashAddNamtab: ADDED 'vp %d
' at iOffset=176626
hashAddNamtab: ADDED '#S61' at iOffset=176634
hashAddNamtab: ADDED '                          rt = %d
' at iOffset=176640
hashAddNamtab: ADDED '#S62' at iOffset=176676
hashAddNamtab: ADDED 'vp %d
' at iOffset=176682
hashAddNamtab: ADDED '#S63' at iOffset=176690
hashAddNamtab: ADDED 'Error (too fast)
' at iOffset=176696
hashAddNamtab: ADDED '#S64' at iOffset=176714
hashAddNamtab: ADDED 'vp %d
' at iOffset=176720
hashAddNamtab: ADDED '#S65' at iOffset=176728
hashAddNamtab: ADDED 'Error (no saccade)
' at iOffset=176734
hashAddNamtab: ADDED '#S66' at iOffset=176754
hashAddNamtab: ADDED 'vp %d
' at iOffset=176760
hashAddNamtab: ADDED '#S67' at iOffset=176768
hashAddNamtab: ADDED 'Correct (canceled)
' at iOffset=176774
hashAddNamtab: ADDED '#S68' at iOffset=176794
hashAddNamtab: ADDED 'vp %d
' at iOffset=176800
hashAddNamtab: ADDED '#S69' at iOffset=176808
hashAddNamtab: ADDED 'Error (inaccurate saccade)
' at iOffset=176814
hashAddNamtab: ADDED '#S70' at iOffset=176842
hashAddNamtab: ADDED 'vp %d
' at iOffset=176848
hashAddNamtab: ADDED '#S71' at iOffset=176856
hashAddNamtab: ADDED 'Error (broke target fixation)
' at iOffset=176862
hashAddNamtab: ADDED '#S72' at iOffset=176894
hashAddNamtab: ADDED 'Correct (saccade)
' at iOffset=176900
hashAddNamtab: ADDED '#S73' at iOffset=176920
hashAddNamtab: ADDED 'Error (noncanceled)
' at iOffset=176926
hashAddNamtab: ADDED '#S74' at iOffset=176948
hashAddNamtab: ADDED 'vp %d
' at iOffset=176954
hashAddNamtab: ADDED '#S75' at iOffset=176962
hashAddNamtab: ADDED 'vp %d
' at iOffset=176968
hashAddNamtab: ADDED '#S76' at iOffset=176976
hashAddNamtab: ADDED 'Aborted (body movement)
' at iOffset=176982
hashAddNamtab: ADDED '#S77' at iOffset=177008
postInstructionCompilation: Saving 'CMDTRIAL' nops=2700 nInstructions=2698 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'CMDTRIAL' Wrote 2698 bytes from op[2..2699] to instcach[19988..22685]
hashAddNamtab: ADDED 'StimTm' at iOffset=177014
hashAddNamtab: ADDED 'sacctarg' at iOffset=177022
hashAddNamtab: ADDED 'ReactionTime' at iOffset=177032
hashAddNamtab: ADDED 'MGTRIAL' at iOffset=177046
preInstructionCompilation: BEFORE 'MGTRIAL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'curr_soa' at iOffset=177054
hashAddNamtab: ADDED 'fix_off' at iOffset=177064
hashAddNamtab: ADDED 'early_sacc' at iOffset=177072
hashAddNamtab: ADDED 'no_sacc' at iOffset=177084
hashAddNamtab: ADDED 'fix_off_time' at iOffset=177092
hashAddNamtab: ADDED 'StimDone' at iOffset=177106
hashAddNamtab: ADDED ' 
' at iOffset=177116
hashAddNamtab: ADDED '#S78' at iOffset=177120
hashAddNamtab: ADDED '# %d' at iOffset=177126
hashAddNamtab: ADDED '#S79' at iOffset=177132
hashAddNamtab: ADDED ' (%d' at iOffset=177138
hashAddNamtab: ADDED '#S80' at iOffset=177144
hashAddNamtab: ADDED ' correct)
' at iOffset=177150
hashAddNamtab: ADDED '#S81' at iOffset=177162
hashAddNamtab: ADDED 'holdtime = %d
' at iOffset=177168
hashAddNamtab: ADDED '#S82' at iOffset=177184
hashAddNamtab: ADDED 'soa = %d
' at iOffset=177190
hashAddNamtab: ADDED '#S83' at iOffset=177200
hashAddNamtab: ADDED 'vp %d
' at iOffset=177206
hashAddNamtab: ADDED '#S84' at iOffset=177214
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=177220
hashAddNamtab: ADDED '#S85' at iOffset=177232
hashAddNamtab: ADDED 'vp %d
' at iOffset=177238
hashAddNamtab: ADDED '#S86' at iOffset=177246
hashAddNamtab: ADDED 'vp %d
' at iOffset=177252
hashAddNamtab: ADDED '#S87' at iOffset=177260
hashAddNamtab: ADDED 'Aborted (no fixation)
' at iOffset=177266
hashAddNamtab: ADDED '#S88' at iOffset=177290
hashAddNamtab: ADDED 'vp %d
' at iOffset=177296
hashAddNamtab: ADDED '#S89' at iOffset=177304
hashAddNamtab: ADDED 'Aborted (broke fixation)
' at iOffset=177310
hashAddNamtab: ADDED '#S90' at iOffset=177336
hashAddNamtab: ADDED '#I140' at iOffset=177342
hashAddNamtab: ADDED 'vp %d
' at iOffset=177348
hashAddNamtab: ADDED '#S91' at iOffset=177356
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=177362
hashAddNamtab: ADDED '#S92' at iOffset=177374
hashAddNamtab: ADDED 'vp %d
' at iOffset=177380
hashAddNamtab: ADDED '#S93' at iOffset=177388
hashAddNamtab: ADDED 'vp %d
' at iOffset=177394
hashAddNamtab: ADDED '#S94' at iOffset=177402
hashAddNamtab: ADDED '                          premature rt = %d
' at iOffset=177408
hashAddNamtab: ADDED '#S95' at iOffset=177454
hashAddNamtab: ADDED 'vp %d
' at iOffset=177460
hashAddNamtab: ADDED '#S96' at iOffset=177468
hashAddNamtab: ADDED 'vp %d
' at iOffset=177474
hashAddNamtab: ADDED '#S97' at iOffset=177482
hashAddNamtab: ADDED 'Error (early saccade)
' at iOffset=177488
hashAddNamtab: ADDED '#S98' at iOffset=177512
hashAddNamtab: ADDED 'vp %d
' at iOffset=177518
hashAddNamtab: ADDED '#S99' at iOffset=177526
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=177532
hashAddNamtab: ADDED '#S100' at iOffset=177544
hashAddNamtab: ADDED 'vp %d
' at iOffset=177550
hashAddNamtab: ADDED '#S101' at iOffset=177558
hashAddNamtab: ADDED 'vp %d
' at iOffset=177564
hashAddNamtab: ADDED '#S102' at iOffset=177572
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=177578
hashAddNamtab: ADDED '#S103' at iOffset=177590
hashAddNamtab: ADDED 'vp %d
' at iOffset=177596
hashAddNamtab: ADDED '#S104' at iOffset=177604
hashAddNamtab: ADDED '                   visual_premature rt = %d
' at iOffset=177610
hashAddNamtab: ADDED '#S105' at iOffset=177656
hashAddNamtab: ADDED 'vp %d
' at iOffset=177662
hashAddNamtab: ADDED '#S106' at iOffset=177670
hashAddNamtab: ADDED 'vp %d
' at iOffset=177676
hashAddNamtab: ADDED '#S107' at iOffset=177684
hashAddNamtab: ADDED 'Error (early saccade)
' at iOffset=177690
hashAddNamtab: ADDED '#S108' at iOffset=177714
hashAddNamtab: ADDED '                        visual rt = %d
' at iOffset=177720
hashAddNamtab: ADDED '#S109' at iOffset=177760
hashAddNamtab: ADDED 'vp %d
' at iOffset=177766
hashAddNamtab: ADDED '#S110' at iOffset=177774
hashAddNamtab: ADDED 'Error (no saccade)
' at iOffset=177780
hashAddNamtab: ADDED '#S111' at iOffset=177800
hashAddNamtab: ADDED 'vp %d
' at iOffset=177806
hashAddNamtab: ADDED '#S112' at iOffset=177814
hashAddNamtab: ADDED 'Correct (canceled)
' at iOffset=177820
hashAddNamtab: ADDED '#S113' at iOffset=177840
hashAddNamtab: ADDED 'Error (noncanceled)
' at iOffset=177846
hashAddNamtab: ADDED '#S114' at iOffset=177868
hashAddNamtab: ADDED 'vp %d
' at iOffset=177874
hashAddNamtab: ADDED '#S115' at iOffset=177882
hashAddNamtab: ADDED 'vp %d
' at iOffset=177888
hashAddNamtab: ADDED '#S116' at iOffset=177896
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=177902
hashAddNamtab: ADDED '#S117' at iOffset=177914
hashAddNamtab: ADDED 'vp %d
' at iOffset=177920
hashAddNamtab: ADDED '#S118' at iOffset=177928
hashAddNamtab: ADDED 'vp %d
' at iOffset=177934
hashAddNamtab: ADDED '#S119' at iOffset=177942
hashAddNamtab: ADDED 'Error (inaccurate saccade)
' at iOffset=177948
hashAddNamtab: ADDED '#S120' at iOffset=177976
hashAddNamtab: ADDED 'vp %d
' at iOffset=177982
hashAddNamtab: ADDED '#S121' at iOffset=177990
hashAddNamtab: ADDED 'Error (broke target fixation)
' at iOffset=177996
hashAddNamtab: ADDED '#S122' at iOffset=178028
hashAddNamtab: ADDED 'Correct (saccade)
' at iOffset=178034
hashAddNamtab: ADDED '#S123' at iOffset=178054
hashAddNamtab: ADDED 'vp %d
' at iOffset=178060
hashAddNamtab: ADDED '#S124' at iOffset=178068
hashAddNamtab: ADDED 'vp %d
' at iOffset=178074
hashAddNamtab: ADDED '#S125' at iOffset=178082
hashAddNamtab: ADDED 'Aborted (body movement)
' at iOffset=178088
hashAddNamtab: ADDED '#S126' at iOffset=178114
postInstructionCompilation: Saving 'MGTRIAL' nops=3694 nInstructions=3692 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'MGTRIAL' Wrote 3692 bytes from op[2..3693] to instcach[22686..26377]
hashAddNamtab: ADDED 'LastSearchOutcome' at iOffset=178120
hashAddNamtab: ADDED 'SCHTRIAL' at iOffset=178138
preInstructionCompilation: BEFORE 'SCHTRIAL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'fixating_ph' at iOffset=178148
hashAddNamtab: ADDED 'fixating_targ' at iOffset=178160
hashAddNamtab: ADDED 'fixating_off' at iOffset=178174
hashAddNamtab: ADDED 'fixation_offset' at iOffset=178188
hashAddNamtab: ADDED 'plac_pd' at iOffset=178204
hashAddNamtab: ADDED 'plac' at iOffset=178212
hashAddNamtab: ADDED 'target_f_pd' at iOffset=178218
hashAddNamtab: ADDED 'target_f' at iOffset=178230
hashAddNamtab: ADDED 'nogo_success' at iOffset=178240
hashAddNamtab: ADDED 'no_saccade' at iOffset=178254
hashAddNamtab: ADDED ' 
' at iOffset=178266
hashAddNamtab: ADDED '#S127' at iOffset=178270
hashAddNamtab: ADDED 'Block %d' at iOffset=178276
hashAddNamtab: ADDED '#S128' at iOffset=178286
hashAddNamtab: ADDED ' 
' at iOffset=178292
hashAddNamtab: ADDED '#S129' at iOffset=178296
hashAddNamtab: ADDED '# %d' at iOffset=178302
hashAddNamtab: ADDED '#S130' at iOffset=178308
hashAddNamtab: ADDED ' 
' at iOffset=178314
hashAddNamtab: ADDED '#S131' at iOffset=178318
hashAddNamtab: ADDED 'Trial Type = %d' at iOffset=178324
hashAddNamtab: ADDED '#S132' at iOffset=178340
hashAddNamtab: ADDED ' 
' at iOffset=178346
hashAddNamtab: ADDED '#S133' at iOffset=178350
hashAddNamtab: ADDED 'Fix-Sch ISI = %d' at iOffset=178356
hashAddNamtab: ADDED '#S134' at iOffset=178374
hashAddNamtab: ADDED ' 
' at iOffset=178380
hashAddNamtab: ADDED '#S135' at iOffset=178384
hashAddNamtab: ADDED ' random correct = %d' at iOffset=178390
hashAddNamtab: ADDED '#S136' at iOffset=178412
hashAddNamtab: ADDED '    %d' at iOffset=178418
hashAddNamtab: ADDED '#S137' at iOffset=178426
hashAddNamtab: ADDED ' 
' at iOffset=178432
hashAddNamtab: ADDED '#S138' at iOffset=178436
hashAddNamtab: ADDED ' repeat correct = %d' at iOffset=178442
hashAddNamtab: ADDED '#S139' at iOffset=178464
hashAddNamtab: ADDED '    %d' at iOffset=178470
hashAddNamtab: ADDED '#S140' at iOffset=178478
hashAddNamtab: ADDED ' 
' at iOffset=178484
hashAddNamtab: ADDED '#S141' at iOffset=178488
hashAddNamtab: ADDED ' (%d' at iOffset=178494
hashAddNamtab: ADDED '#S142' at iOffset=178500
hashAddNamtab: ADDED ' random RT)
' at iOffset=178506
hashAddNamtab: ADDED '#S143' at iOffset=178520
hashAddNamtab: ADDED ' (%d' at iOffset=178526
hashAddNamtab: ADDED '#S144' at iOffset=178532
hashAddNamtab: ADDED ' repeated RT)
' at iOffset=178538
hashAddNamtab: ADDED '#S145' at iOffset=178554
hashAddNamtab: ADDED 'soa = %d
' at iOffset=178560
hashAddNamtab: ADDED '#S146' at iOffset=178570
hashAddNamtab: ADDED ' Sing. Abs. correct = %d' at iOffset=178576
hashAddNamtab: ADDED '#S147' at iOffset=178602
hashAddNamtab: ADDED '    %d' at iOffset=178608
hashAddNamtab: ADDED '#S148' at iOffset=178616
hashAddNamtab: ADDED ' 
' at iOffset=178622
hashAddNamtab: ADDED '#S149' at iOffset=178626
hashAddNamtab: ADDED ' Sing. Pres. correct = %d' at iOffset=178632
hashAddNamtab: ADDED '#S150' at iOffset=178658
hashAddNamtab: ADDED '    %d' at iOffset=178664
hashAddNamtab: ADDED '#S151' at iOffset=178672
hashAddNamtab: ADDED ' 
' at iOffset=178678
hashAddNamtab: ADDED '#S152' at iOffset=178682
hashAddNamtab: ADDED ' (%d' at iOffset=178688
hashAddNamtab: ADDED '#S153' at iOffset=178694
hashAddNamtab: ADDED ' absent RT)
' at iOffset=178700
hashAddNamtab: ADDED '#S154' at iOffset=178714
hashAddNamtab: ADDED ' (%d' at iOffset=178720
hashAddNamtab: ADDED '#S155' at iOffset=178726
hashAddNamtab: ADDED ' present RT)
' at iOffset=178732
hashAddNamtab: ADDED '#S156' at iOffset=178746
hashAddNamtab: ADDED 'soa = %d
' at iOffset=178752
hashAddNamtab: ADDED '#S157' at iOffset=178762
hashAddNamtab: ADDED 'vp %d
' at iOffset=178768
hashAddNamtab: ADDED '#S158' at iOffset=178776
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=178782
hashAddNamtab: ADDED '#S159' at iOffset=178794
hashAddNamtab: ADDED 'vp %d
' at iOffset=178800
hashAddNamtab: ADDED '#S160' at iOffset=178808
hashAddNamtab: ADDED 'vp %d
' at iOffset=178814
hashAddNamtab: ADDED '#S161' at iOffset=178822
hashAddNamtab: ADDED 'Aborted (no fixation)
' at iOffset=178828
hashAddNamtab: ADDED '#S162' at iOffset=178852
hashAddNamtab: ADDED 'vp %d
' at iOffset=178858
hashAddNamtab: ADDED '#S163' at iOffset=178866
hashAddNamtab: ADDED 'Aborted (broke fixation)
' at iOffset=178872
hashAddNamtab: ADDED '#S164' at iOffset=178898
hashAddNamtab: ADDED 'vp %d
' at iOffset=178904
hashAddNamtab: ADDED '#S165' at iOffset=178912
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=178918
hashAddNamtab: ADDED '#S166' at iOffset=178930
hashAddNamtab: ADDED 'vp %d
' at iOffset=178936
hashAddNamtab: ADDED '#S167' at iOffset=178944
hashAddNamtab: ADDED 'wm %d
' at iOffset=178950
hashAddNamtab: ADDED '#S168' at iOffset=178958
hashAddNamtab: ADDED 'vp %d
' at iOffset=178964
hashAddNamtab: ADDED '#S169' at iOffset=178972
hashAddNamtab: ADDED 'Aborted (broke fixation)
' at iOffset=178978
hashAddNamtab: ADDED '#S170' at iOffset=179004
hashAddNamtab: ADDED 'vp %d
' at iOffset=179010
hashAddNamtab: ADDED '#S171' at iOffset=179018
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=179024
hashAddNamtab: ADDED '#S172' at iOffset=179036
hashAddNamtab: ADDED 'vp %d
' at iOffset=179042
hashAddNamtab: ADDED '#S173' at iOffset=179050
hashAddNamtab: ADDED 'wm %d
' at iOffset=179056
hashAddNamtab: ADDED '#S174' at iOffset=179064
hashAddNamtab: ADDED 'vp %d
' at iOffset=179070
hashAddNamtab: ADDED '#S175' at iOffset=179078
hashAddNamtab: ADDED 'Error (too fast)
' at iOffset=179084
hashAddNamtab: ADDED '#S176' at iOffset=179102
hashAddNamtab: ADDED 'vp %d
' at iOffset=179108
hashAddNamtab: ADDED '#S177' at iOffset=179116
hashAddNamtab: ADDED 'Error (too fast)
' at iOffset=179122
hashAddNamtab: ADDED '#S178' at iOffset=179140
hashAddNamtab: ADDED 'vp %d
' at iOffset=179146
hashAddNamtab: ADDED '#S179' at iOffset=179154
hashAddNamtab: ADDED 'vp %d
' at iOffset=179160
hashAddNamtab: ADDED '#S180' at iOffset=179168
hashAddNamtab: ADDED 'Error (NoGo)
' at iOffset=179174
hashAddNamtab: ADDED '#S181' at iOffset=179188
hashAddNamtab: ADDED 'rt = %d
' at iOffset=179194
hashAddNamtab: ADDED '#S182' at iOffset=179204
hashAddNamtab: ADDED 'vp %d
' at iOffset=179210
hashAddNamtab: ADDED '#S183' at iOffset=179218
hashAddNamtab: ADDED 'Error (too fast)
' at iOffset=179224
hashAddNamtab: ADDED '#S184' at iOffset=179242
hashAddNamtab: ADDED 'vp %d
' at iOffset=179248
hashAddNamtab: ADDED '#S185' at iOffset=179256
hashAddNamtab: ADDED 'Error (no saccade)
' at iOffset=179262
hashAddNamtab: ADDED '#S186' at iOffset=179282
hashAddNamtab: ADDED 'vp %d
' at iOffset=179288
hashAddNamtab: ADDED '#S187' at iOffset=179296
hashAddNamtab: ADDED 'Catch Correct
' at iOffset=179302
hashAddNamtab: ADDED '#S188' at iOffset=179318
hashAddNamtab: ADDED 'vp %d
' at iOffset=179324
hashAddNamtab: ADDED '#S189' at iOffset=179332
hashAddNamtab: ADDED 'Error (inaccurate saccade)
' at iOffset=179338
hashAddNamtab: ADDED '#S190' at iOffset=179366
hashAddNamtab: ADDED 'vp %d
' at iOffset=179372
hashAddNamtab: ADDED '#S191' at iOffset=179380
hashAddNamtab: ADDED 'Error (broke target fixation)
' at iOffset=179386
hashAddNamtab: ADDED '#S192' at iOffset=179418
hashAddNamtab: ADDED 'Correct (saccade)
' at iOffset=179424
hashAddNamtab: ADDED '#S193' at iOffset=179444
hashAddNamtab: ADDED 'vp %d
' at iOffset=179450
hashAddNamtab: ADDED '#S194' at iOffset=179458
hashAddNamtab: ADDED 'wm %d
' at iOffset=179464
hashAddNamtab: ADDED '#S195' at iOffset=179472
hashAddNamtab: ADDED 'vp %d
' at iOffset=179478
hashAddNamtab: ADDED '#S196' at iOffset=179486
hashAddNamtab: ADDED 'Aborted (body movement)
' at iOffset=179492
hashAddNamtab: ADDED '#S197' at iOffset=179518
postInstructionCompilation: Saving 'SCHTRIAL' nops=3846 nInstructions=3844 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SCHTRIAL' Wrote 3844 bytes from op[2..3845] to instcach[26378..30221]
hashAddNamtab: ADDED 'j' at iOffset=179524
hashAddNamtab: ADDED 'temp' at iOffset=179526
hashAddNamtab: ADDED 'orientation' at iOffset=179532
hashAddNamtab: ADDED 'Homo_orient' at iOffset=179544
hashAddNamtab: ADDED 'RepDistOrients' at iOffset=179556
hashAddNamtab: ADDED 'RepTargOrients' at iOffset=179572
hashAddNamtab: ADDED 'R1_targ_orient' at iOffset=179588
hashAddNamtab: ADDED 'R1_d1_orient' at iOffset=179604
hashAddNamtab: ADDED 'R1_d2_orient' at iOffset=179618
hashAddNamtab: ADDED 'R1_d3_orient' at iOffset=179632
hashAddNamtab: ADDED 'R1_d4_orient' at iOffset=179646
hashAddNamtab: ADDED 'R1_d5_orient' at iOffset=179660
hashAddNamtab: ADDED 'R1_d6_orient' at iOffset=179674
hashAddNamtab: ADDED 'R1_d7_orient' at iOffset=179688
hashAddNamtab: ADDED 'R1_d8_orient' at iOffset=179702
hashAddNamtab: ADDED 'R1_d9_orient' at iOffset=179716
hashAddNamtab: ADDED 'R1_d10_orient' at iOffset=179730
hashAddNamtab: ADDED 'R1_d11_orient' at iOffset=179744
hashAddNamtab: ADDED 'R2_targ_orient' at iOffset=179758
hashAddNamtab: ADDED 'R2_d1_orient' at iOffset=179774
hashAddNamtab: ADDED 'R2_d2_orient' at iOffset=179788
hashAddNamtab: ADDED 'R2_d3_orient' at iOffset=179802
hashAddNamtab: ADDED 'R2_d4_orient' at iOffset=179816
hashAddNamtab: ADDED 'R2_d5_orient' at iOffset=179830
hashAddNamtab: ADDED 'R2_d6_orient' at iOffset=179844
hashAddNamtab: ADDED 'R2_d7_orient' at iOffset=179858
hashAddNamtab: ADDED 'R2_d8_orient' at iOffset=179872
hashAddNamtab: ADDED 'R2_d9_orient' at iOffset=179886
hashAddNamtab: ADDED 'R2_d10_orient' at iOffset=179900
hashAddNamtab: ADDED 'R2_d11_orient' at iOffset=179914
hashAddNamtab: ADDED 'R3_targ_orient' at iOffset=179928
hashAddNamtab: ADDED 'R3_d1_orient' at iOffset=179944
hashAddNamtab: ADDED 'R3_d2_orient' at iOffset=179958
hashAddNamtab: ADDED 'R3_d3_orient' at iOffset=179972
hashAddNamtab: ADDED 'R3_d4_orient' at iOffset=179986
hashAddNamtab: ADDED 'R3_d5_orient' at iOffset=180000
hashAddNamtab: ADDED 'R3_d6_orient' at iOffset=180014
hashAddNamtab: ADDED 'R3_d7_orient' at iOffset=180028
hashAddNamtab: ADDED 'R3_d8_orient' at iOffset=180042
hashAddNamtab: ADDED 'R3_d9_orient' at iOffset=180056
hashAddNamtab: ADDED 'R3_d10_orient' at iOffset=180070
hashAddNamtab: ADDED 'R3_d11_orient' at iOffset=180084
hashAddNamtab: ADDED 'R4_targ_orient' at iOffset=180098
hashAddNamtab: ADDED 'R4_d1_orient' at iOffset=180114
hashAddNamtab: ADDED 'R4_d2_orient' at iOffset=180128
hashAddNamtab: ADDED 'R4_d3_orient' at iOffset=180142
hashAddNamtab: ADDED 'R4_d4_orient' at iOffset=180156
hashAddNamtab: ADDED 'R4_d5_orient' at iOffset=180170
hashAddNamtab: ADDED 'R4_d6_orient' at iOffset=180184
hashAddNamtab: ADDED 'R4_d7_orient' at iOffset=180198
hashAddNamtab: ADDED 'R4_d8_orient' at iOffset=180212
hashAddNamtab: ADDED 'R4_d9_orient' at iOffset=180226
hashAddNamtab: ADDED 'R4_d10_orient' at iOffset=180240
hashAddNamtab: ADDED 'R4_d11_orient' at iOffset=180254
hashAddNamtab: ADDED 'R5_targ_orient' at iOffset=180268
hashAddNamtab: ADDED 'R5_d1_orient' at iOffset=180284
hashAddNamtab: ADDED 'R5_d2_orient' at iOffset=180298
hashAddNamtab: ADDED 'R5_d3_orient' at iOffset=180312
hashAddNamtab: ADDED 'R5_d4_orient' at iOffset=180326
hashAddNamtab: ADDED 'R5_d5_orient' at iOffset=180340
hashAddNamtab: ADDED 'R5_d6_orient' at iOffset=180354
hashAddNamtab: ADDED 'R5_d7_orient' at iOffset=180368
hashAddNamtab: ADDED 'R5_d8_orient' at iOffset=180382
hashAddNamtab: ADDED 'R5_d9_orient' at iOffset=180396
hashAddNamtab: ADDED 'R5_d10_orient' at iOffset=180410
hashAddNamtab: ADDED 'R5_d11_orient' at iOffset=180424
hashAddNamtab: ADDED 'R6_targ_orient' at iOffset=180438
hashAddNamtab: ADDED 'R6_d1_orient' at iOffset=180454
hashAddNamtab: ADDED 'R6_d2_orient' at iOffset=180468
hashAddNamtab: ADDED 'R6_d3_orient' at iOffset=180482
hashAddNamtab: ADDED 'R6_d4_orient' at iOffset=180496
hashAddNamtab: ADDED 'R6_d5_orient' at iOffset=180510
hashAddNamtab: ADDED 'R6_d6_orient' at iOffset=180524
hashAddNamtab: ADDED 'R6_d7_orient' at iOffset=180538
hashAddNamtab: ADDED 'R6_d8_orient' at iOffset=180552
hashAddNamtab: ADDED 'R6_d9_orient' at iOffset=180566
hashAddNamtab: ADDED 'R6_d10_orient' at iOffset=180580
hashAddNamtab: ADDED 'R6_d11_orient' at iOffset=180594
hashAddNamtab: ADDED 'REP_ORT' at iOffset=180608
preInstructionCompilation: BEFORE 'REP_ORT' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'REP_ORT' nops=3366 nInstructions=3364 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'REP_ORT' Wrote 3364 bytes from op[2..3365] to instcach[30222..33585]
hashAddNamtab: ADDED 'RandHomo_orient' at iOffset=180616
hashAddNamtab: ADDED 'DistOrients' at iOffset=180632
hashAddNamtab: ADDED 'TargOrients' at iOffset=180644
hashAddNamtab: ADDED 'Rand_targ_orient' at iOffset=180656
hashAddNamtab: ADDED 'Rand_d1_orient' at iOffset=180674
hashAddNamtab: ADDED 'Rand_d2_orient' at iOffset=180690
hashAddNamtab: ADDED 'Rand_d3_orient' at iOffset=180706
hashAddNamtab: ADDED 'Rand_d4_orient' at iOffset=180722
hashAddNamtab: ADDED 'Rand_d5_orient' at iOffset=180738
hashAddNamtab: ADDED 'Rand_d6_orient' at iOffset=180754
hashAddNamtab: ADDED 'Rand_d7_orient' at iOffset=180770
hashAddNamtab: ADDED 'Rand_d8_orient' at iOffset=180786
hashAddNamtab: ADDED 'Rand_d9_orient' at iOffset=180802
hashAddNamtab: ADDED 'Rand_d10_orient' at iOffset=180818
hashAddNamtab: ADDED 'Rand_d11_orient' at iOffset=180834
hashAddNamtab: ADDED 'RAND_ORT' at iOffset=180850
preInstructionCompilation: BEFORE 'RAND_ORT' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'RAND_ORT' nops=1294 nInstructions=1292 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'RAND_ORT' Wrote 1292 bytes from op[2..1293] to instcach[33586..34877]
hashAddNamtab: ADDED 'numTargAngles' at iOffset=180860
hashAddNamtab: ADDED 'numDistAngles' at iOffset=180874
hashAddNamtab: ADDED 'numDistEcc' at iOffset=180888
hashAddNamtab: ADDED 'R1_targ_angle' at iOffset=180900
hashAddNamtab: ADDED 'R1_d1_angle' at iOffset=180914
hashAddNamtab: ADDED 'R1_d2_angle' at iOffset=180926
hashAddNamtab: ADDED 'R1_d3_angle' at iOffset=180938
hashAddNamtab: ADDED 'R1_d4_angle' at iOffset=180950
hashAddNamtab: ADDED 'R1_d5_angle' at iOffset=180962
hashAddNamtab: ADDED 'R1_d6_angle' at iOffset=180974
hashAddNamtab: ADDED 'R1_d7_angle' at iOffset=180986
hashAddNamtab: ADDED 'R1_d8_angle' at iOffset=180998
hashAddNamtab: ADDED 'R1_d9_angle' at iOffset=181010
hashAddNamtab: ADDED 'R1_d10_angle' at iOffset=181022
hashAddNamtab: ADDED 'R1_d11_angle' at iOffset=181036
hashAddNamtab: ADDED 'R1_targ_ecc' at iOffset=181050
hashAddNamtab: ADDED 'R1_d1_ecc' at iOffset=181062
hashAddNamtab: ADDED 'R1_d2_ecc' at iOffset=181072
hashAddNamtab: ADDED 'R1_d3_ecc' at iOffset=181082
hashAddNamtab: ADDED 'R1_d4_ecc' at iOffset=181092
hashAddNamtab: ADDED 'R1_d5_ecc' at iOffset=181102
hashAddNamtab: ADDED 'R1_d6_ecc' at iOffset=181112
hashAddNamtab: ADDED 'R1_d7_ecc' at iOffset=181122
hashAddNamtab: ADDED 'R1_d8_ecc' at iOffset=181132
hashAddNamtab: ADDED 'R1_d9_ecc' at iOffset=181142
hashAddNamtab: ADDED 'R1_d10_ecc' at iOffset=181152
hashAddNamtab: ADDED 'R1_d11_ecc' at iOffset=181164
hashAddNamtab: ADDED 'R2_targ_angle' at iOffset=181176
hashAddNamtab: ADDED 'R2_d1_angle' at iOffset=181190
hashAddNamtab: ADDED 'R2_d2_angle' at iOffset=181202
hashAddNamtab: ADDED 'R2_d3_angle' at iOffset=181214
hashAddNamtab: ADDED 'R2_d4_angle' at iOffset=181226
hashAddNamtab: ADDED 'R2_d5_angle' at iOffset=181238
hashAddNamtab: ADDED 'R2_d6_angle' at iOffset=181250
hashAddNamtab: ADDED 'R2_d7_angle' at iOffset=181262
hashAddNamtab: ADDED 'R2_d8_angle' at iOffset=181274
hashAddNamtab: ADDED 'R2_d9_angle' at iOffset=181286
hashAddNamtab: ADDED 'R2_d10_angle' at iOffset=181298
hashAddNamtab: ADDED 'R2_d11_angle' at iOffset=181312
hashAddNamtab: ADDED 'R2_targ_ecc' at iOffset=181326
hashAddNamtab: ADDED 'R2_d1_ecc' at iOffset=181338
hashAddNamtab: ADDED 'R2_d2_ecc' at iOffset=181348
hashAddNamtab: ADDED 'R2_d3_ecc' at iOffset=181358
hashAddNamtab: ADDED 'R2_d4_ecc' at iOffset=181368
hashAddNamtab: ADDED 'R2_d5_ecc' at iOffset=181378
hashAddNamtab: ADDED 'R2_d6_ecc' at iOffset=181388
hashAddNamtab: ADDED 'R2_d7_ecc' at iOffset=181398
hashAddNamtab: ADDED 'R2_d8_ecc' at iOffset=181408
hashAddNamtab: ADDED 'R2_d9_ecc' at iOffset=181418
hashAddNamtab: ADDED 'R2_d10_ecc' at iOffset=181428
hashAddNamtab: ADDED 'R2_d11_ecc' at iOffset=181440
hashAddNamtab: ADDED 'R3_targ_angle' at iOffset=181452
hashAddNamtab: ADDED 'R3_d1_angle' at iOffset=181466
hashAddNamtab: ADDED 'R3_d2_angle' at iOffset=181478
hashAddNamtab: ADDED 'R3_d3_angle' at iOffset=181490
hashAddNamtab: ADDED 'R3_d4_angle' at iOffset=181502
hashAddNamtab: ADDED 'R3_d5_angle' at iOffset=181514
hashAddNamtab: ADDED 'R3_d6_angle' at iOffset=181526
hashAddNamtab: ADDED 'R3_d7_angle' at iOffset=181538
hashAddNamtab: ADDED 'R3_d8_angle' at iOffset=181550
hashAddNamtab: ADDED 'R3_d9_angle' at iOffset=181562
hashAddNamtab: ADDED 'R3_d10_angle' at iOffset=181574
hashAddNamtab: ADDED 'R3_d11_angle' at iOffset=181588
hashAddNamtab: ADDED 'R3_targ_ecc' at iOffset=181602
hashAddNamtab: ADDED 'R3_d1_ecc' at iOffset=181614
hashAddNamtab: ADDED 'R3_d2_ecc' at iOffset=181624
hashAddNamtab: ADDED 'R3_d3_ecc' at iOffset=181634
hashAddNamtab: ADDED 'R3_d4_ecc' at iOffset=181644
hashAddNamtab: ADDED 'R3_d5_ecc' at iOffset=181654
hashAddNamtab: ADDED 'R3_d6_ecc' at iOffset=181664
hashAddNamtab: ADDED 'R3_d7_ecc' at iOffset=181674
hashAddNamtab: ADDED 'R3_d8_ecc' at iOffset=181684
hashAddNamtab: ADDED 'R3_d9_ecc' at iOffset=181694
hashAddNamtab: ADDED 'R3_d10_ecc' at iOffset=181704
hashAddNamtab: ADDED 'R3_d11_ecc' at iOffset=181716
hashAddNamtab: ADDED 'R4_targ_angle' at iOffset=181728
hashAddNamtab: ADDED 'R4_d1_angle' at iOffset=181742
hashAddNamtab: ADDED 'R4_d2_angle' at iOffset=181754
hashAddNamtab: ADDED 'R4_d3_angle' at iOffset=181766
hashAddNamtab: ADDED 'R4_d4_angle' at iOffset=181778
hashAddNamtab: ADDED 'R4_d5_angle' at iOffset=181790
hashAddNamtab: ADDED 'R4_d6_angle' at iOffset=181802
hashAddNamtab: ADDED 'R4_d7_angle' at iOffset=181814
hashAddNamtab: ADDED 'R4_d8_angle' at iOffset=181826
hashAddNamtab: ADDED 'R4_d9_angle' at iOffset=181838
hashAddNamtab: ADDED 'R4_d10_angle' at iOffset=181850
hashAddNamtab: ADDED 'R4_d11_angle' at iOffset=181864
hashAddNamtab: ADDED 'R4_targ_ecc' at iOffset=181878
hashAddNamtab: ADDED 'R4_d1_ecc' at iOffset=181890
hashAddNamtab: ADDED 'R4_d2_ecc' at iOffset=181900
hashAddNamtab: ADDED 'R4_d3_ecc' at iOffset=181910
hashAddNamtab: ADDED 'R4_d4_ecc' at iOffset=181920
hashAddNamtab: ADDED 'R4_d5_ecc' at iOffset=181930
hashAddNamtab: ADDED 'R4_d6_ecc' at iOffset=181940
hashAddNamtab: ADDED 'R4_d7_ecc' at iOffset=181950
hashAddNamtab: ADDED 'R4_d8_ecc' at iOffset=181960
hashAddNamtab: ADDED 'R4_d9_ecc' at iOffset=181970
hashAddNamtab: ADDED 'R4_d10_ecc' at iOffset=181980
hashAddNamtab: ADDED 'R4_d11_ecc' at iOffset=181992
hashAddNamtab: ADDED 'R5_targ_angle' at iOffset=182004
hashAddNamtab: ADDED 'R5_d1_angle' at iOffset=182018
hashAddNamtab: ADDED 'R5_d2_angle' at iOffset=182030
hashAddNamtab: ADDED 'R5_d3_angle' at iOffset=182042
hashAddNamtab: ADDED 'R5_d4_angle' at iOffset=182054
hashAddNamtab: ADDED 'R5_d5_angle' at iOffset=182066
hashAddNamtab: ADDED 'R5_d6_angle' at iOffset=182078
hashAddNamtab: ADDED 'R5_d7_angle' at iOffset=182090
hashAddNamtab: ADDED 'R5_d8_angle' at iOffset=182102
hashAddNamtab: ADDED 'R5_d9_angle' at iOffset=182114
hashAddNamtab: ADDED 'R5_d10_angle' at iOffset=182126
hashAddNamtab: ADDED 'R5_d11_angle' at iOffset=182140
hashAddNamtab: ADDED 'R5_targ_ecc' at iOffset=182154
hashAddNamtab: ADDED 'R5_d1_ecc' at iOffset=182166
hashAddNamtab: ADDED 'R5_d2_ecc' at iOffset=182176
hashAddNamtab: ADDED 'R5_d3_ecc' at iOffset=182186
hashAddNamtab: ADDED 'R5_d4_ecc' at iOffset=182196
hashAddNamtab: ADDED 'R5_d5_ecc' at iOffset=182206
hashAddNamtab: ADDED 'R5_d6_ecc' at iOffset=182216
hashAddNamtab: ADDED 'R5_d7_ecc' at iOffset=182226
hashAddNamtab: ADDED 'R5_d8_ecc' at iOffset=182236
hashAddNamtab: ADDED 'R5_d9_ecc' at iOffset=182246
hashAddNamtab: ADDED 'R5_d10_ecc' at iOffset=182256
hashAddNamtab: ADDED 'R5_d11_ecc' at iOffset=182268
hashAddNamtab: ADDED 'R6_targ_angle' at iOffset=182280
hashAddNamtab: ADDED 'R6_d1_angle' at iOffset=182294
hashAddNamtab: ADDED 'R6_d2_angle' at iOffset=182306
hashAddNamtab: ADDED 'R6_d3_angle' at iOffset=182318
hashAddNamtab: ADDED 'R6_d4_angle' at iOffset=182330
hashAddNamtab: ADDED 'R6_d5_angle' at iOffset=182342
hashAddNamtab: ADDED 'R6_d6_angle' at iOffset=182354
hashAddNamtab: ADDED 'R6_d7_angle' at iOffset=182366
hashAddNamtab: ADDED 'R6_d8_angle' at iOffset=182378
hashAddNamtab: ADDED 'R6_d9_angle' at iOffset=182390
hashAddNamtab: ADDED 'R6_d10_angle' at iOffset=182402
hashAddNamtab: ADDED 'R6_d11_angle' at iOffset=182416
hashAddNamtab: ADDED 'R6_targ_ecc' at iOffset=182430
hashAddNamtab: ADDED 'R6_d1_ecc' at iOffset=182442
hashAddNamtab: ADDED 'R6_d2_ecc' at iOffset=182452
hashAddNamtab: ADDED 'R6_d3_ecc' at iOffset=182462
hashAddNamtab: ADDED 'R6_d4_ecc' at iOffset=182472
hashAddNamtab: ADDED 'R6_d5_ecc' at iOffset=182482
hashAddNamtab: ADDED 'R6_d6_ecc' at iOffset=182492
hashAddNamtab: ADDED 'R6_d7_ecc' at iOffset=182502
hashAddNamtab: ADDED 'R6_d8_ecc' at iOffset=182512
hashAddNamtab: ADDED 'R6_d9_ecc' at iOffset=182522
hashAddNamtab: ADDED 'R6_d10_ecc' at iOffset=182532
hashAddNamtab: ADDED 'R6_d11_ecc' at iOffset=182544
hashAddNamtab: ADDED 'REP1_LOC' at iOffset=182556
hashAddNamtab: ADDED 'REP2_LOC' at iOffset=182566
hashAddNamtab: ADDED 'REP3_LOC' at iOffset=182576
hashAddNamtab: ADDED 'REP4_LOC' at iOffset=182586
hashAddNamtab: ADDED 'REP5_LOC' at iOffset=182596
hashAddNamtab: ADDED 'REP6_LOC' at iOffset=182606
hashAddNamtab: ADDED 'RandomizeRepDistAngles' at iOffset=182616
hashAddNamtab: ADDED 'RandomizeRepDistEccentricities' at iOffset=182640
hashAddNamtab: ADDED 'RandomizeRepTargAngles' at iOffset=182672
hashAddNamtab: ADDED 'LOC_REP' at iOffset=182696
preInstructionCompilation: BEFORE 'LOC_REP' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'LOC_REP' nops=38 nInstructions=36 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'LOC_REP' Wrote 36 bytes from op[2..37] to instcach[34878..34913]
preInstructionCompilation: BEFORE 'RandomizeRepDistAngles' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'RandomizeRepDistAngles' nops=112 nInstructions=110 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'RandomizeRepDistAngles' Wrote 110 bytes from op[2..111] to instcach[34914..35023]
preInstructionCompilation: BEFORE 'RandomizeRepDistEccentricities' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'RandomizeRepDistEccentricities' nops=112 nInstructions=110 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'RandomizeRepDistEccentricities' Wrote 110 bytes from op[2..111] to instcach[35024..35133]
preInstructionCompilation: BEFORE 'RandomizeRepTargAngles' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'RandomizeRepTargAngles' nops=112 nInstructions=110 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'RandomizeRepTargAngles' Wrote 110 bytes from op[2..111] to instcach[35134..35243]
preInstructionCompilation: BEFORE 'REP1_LOC' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'REP1_LOC' nops=272 nInstructions=270 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'REP1_LOC' Wrote 270 bytes from op[2..271] to instcach[35244..35513]
preInstructionCompilation: BEFORE 'REP2_LOC' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'REP2_LOC' nops=272 nInstructions=270 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'REP2_LOC' Wrote 270 bytes from op[2..271] to instcach[35514..35783]
preInstructionCompilation: BEFORE 'REP3_LOC' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'REP3_LOC' nops=272 nInstructions=270 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'REP3_LOC' Wrote 270 bytes from op[2..271] to instcach[35784..36053]
preInstructionCompilation: BEFORE 'REP4_LOC' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'REP4_LOC' nops=272 nInstructions=270 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'REP4_LOC' Wrote 270 bytes from op[2..271] to instcach[36054..36323]
preInstructionCompilation: BEFORE 'REP5_LOC' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'REP5_LOC' nops=272 nInstructions=270 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'REP5_LOC' Wrote 270 bytes from op[2..271] to instcach[36324..36593]
preInstructionCompilation: BEFORE 'REP6_LOC' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'REP6_LOC' nops=272 nInstructions=270 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'REP6_LOC' Wrote 270 bytes from op[2..271] to instcach[36594..36863]
hashAddNamtab: ADDED 'TgAng' at iOffset=182704
hashAddNamtab: ADDED 'Rand_d2_angle' at iOffset=182710
hashAddNamtab: ADDED 'Rand_d3_angle' at iOffset=182724
hashAddNamtab: ADDED 'Rand_d4_angle' at iOffset=182738
hashAddNamtab: ADDED 'Rand_d5_angle' at iOffset=182752
hashAddNamtab: ADDED 'Rand_d6_angle' at iOffset=182766
hashAddNamtab: ADDED 'Rand_d7_angle' at iOffset=182780
hashAddNamtab: ADDED 'Rand_targ_ecc' at iOffset=182794
hashAddNamtab: ADDED 'Rand_d1_ecc' at iOffset=182808
hashAddNamtab: ADDED 'Rand_d2_ecc' at iOffset=182820
hashAddNamtab: ADDED 'Rand_d3_ecc' at iOffset=182832
hashAddNamtab: ADDED 'Rand_d4_ecc' at iOffset=182844
hashAddNamtab: ADDED 'Rand_d5_ecc' at iOffset=182856
hashAddNamtab: ADDED 'Rand_d6_ecc' at iOffset=182868
hashAddNamtab: ADDED 'Rand_d7_ecc' at iOffset=182880
hashAddNamtab: ADDED 'Rand_d8_ecc' at iOffset=182892
hashAddNamtab: ADDED 'Rand_d9_ecc' at iOffset=182904
hashAddNamtab: ADDED 'Rand_d10_ecc' at iOffset=182916
hashAddNamtab: ADDED 'Rand_d11_ecc' at iOffset=182930
hashAddNamtab: ADDED 'RandomizeRanDistAngles' at iOffset=182944
hashAddNamtab: ADDED 'RandomizeRanDistEccentricities' at iOffset=182968
hashAddNamtab: ADDED 'RandomizeRanTargAngles' at iOffset=183000
hashAddNamtab: ADDED 'LOC_RAND' at iOffset=183024
preInstructionCompilation: BEFORE 'RandomizeRanDistAngles' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'RandomizeRanDistAngles' nops=112 nInstructions=110 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'RandomizeRanDistAngles' Wrote 110 bytes from op[2..111] to instcach[36864..36973]
preInstructionCompilation: BEFORE 'RandomizeRanDistEccentricities' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'RandomizeRanDistEccentricities' nops=112 nInstructions=110 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'RandomizeRanDistEccentricities' Wrote 110 bytes from op[2..111] to instcach[36974..37083]
preInstructionCompilation: BEFORE 'RandomizeRanTargAngles' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'RandomizeRanTargAngles' nops=112 nInstructions=110 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'RandomizeRanTargAngles' Wrote 110 bytes from op[2..111] to instcach[37084..37193]
preInstructionCompilation: BEFORE 'LOC_RAND' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED '#I251' at iOffset=183034
hashAddNamtab: ADDED '#I2222' at iOffset=183040
hashAddNamtab: ADDED '#I1111' at iOffset=183048
hashAddNamtab: ADDED '#I8100' at iOffset=183056
hashAddNamtab: ADDED '#I8200' at iOffset=183064
hashAddNamtab: ADDED '#I8888' at iOffset=183072
postInstructionCompilation: Saving 'LOC_RAND' nops=8298 nInstructions=8296 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'LOC_RAND' Wrote 8296 bytes from op[2..8297] to instcach[37194..45489]
hashAddNamtab: ADDED 'LOC_ASYM' at iOffset=183080
preInstructionCompilation: BEFORE 'LOC_ASYM' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'LOC_ASYM' nops=3926 nInstructions=3924 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'LOC_ASYM' Wrote 3924 bytes from op[2..3925] to instcach[45490..49413]
hashAddNamtab: ADDED 'd1_angle' at iOffset=183090
hashAddNamtab: ADDED 'd2_angle' at iOffset=183100
hashAddNamtab: ADDED 'd3_angle' at iOffset=183110
hashAddNamtab: ADDED 'd4_angle' at iOffset=183120
hashAddNamtab: ADDED 'd5_angle' at iOffset=183130
hashAddNamtab: ADDED 'd6_angle' at iOffset=183140
hashAddNamtab: ADDED 'd7_angle' at iOffset=183150
hashAddNamtab: ADDED 'd8_angle' at iOffset=183160
hashAddNamtab: ADDED 'd9_angle' at iOffset=183170
hashAddNamtab: ADDED 'd10_angle' at iOffset=183180
hashAddNamtab: ADDED 'd11_angle' at iOffset=183190
hashAddNamtab: ADDED 'd1_ecc' at iOffset=183200
hashAddNamtab: ADDED 'd2_ecc' at iOffset=183208
hashAddNamtab: ADDED 'd3_ecc' at iOffset=183216
hashAddNamtab: ADDED 'd4_ecc' at iOffset=183224
hashAddNamtab: ADDED 'd5_ecc' at iOffset=183232
hashAddNamtab: ADDED 'd6_ecc' at iOffset=183240
hashAddNamtab: ADDED 'd7_ecc' at iOffset=183248
hashAddNamtab: ADDED 'd8_ecc' at iOffset=183256
hashAddNamtab: ADDED 'd9_ecc' at iOffset=183264
hashAddNamtab: ADDED 'd10_ecc' at iOffset=183272
hashAddNamtab: ADDED 'd11_ecc' at iOffset=183280
hashAddNamtab: ADDED 'targ_orient' at iOffset=183288
hashAddNamtab: ADDED 'd1_orient' at iOffset=183300
hashAddNamtab: ADDED 'd2_orient' at iOffset=183310
hashAddNamtab: ADDED 'd3_orient' at iOffset=183320
hashAddNamtab: ADDED 'd4_orient' at iOffset=183330
hashAddNamtab: ADDED 'd5_orient' at iOffset=183340
hashAddNamtab: ADDED 'd6_orient' at iOffset=183350
hashAddNamtab: ADDED 'd7_orient' at iOffset=183360
hashAddNamtab: ADDED 'd8_orient' at iOffset=183370
hashAddNamtab: ADDED 'd9_orient' at iOffset=183380
hashAddNamtab: ADDED 'd10_orient' at iOffset=183390
hashAddNamtab: ADDED 'd11_orient' at iOffset=183402
hashAddNamtab: ADDED 'SEL_LOCS' at iOffset=183414
preInstructionCompilation: BEFORE 'SEL_LOCS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'SEL_LOCS' nops=2836 nInstructions=2834 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SEL_LOCS' Wrote 2834 bytes from op[2..2835] to instcach[49414..52247]
hashAddNamtab: ADDED 'DRW_T' at iOffset=183424
preInstructionCompilation: BEFORE 'DRW_T' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'color' at iOffset=183430
hashAddNamtab: ADDED 'fill' at iOffset=183436
hashAddNamtab: ADDED 'conversion_X' at iOffset=183442
hashAddNamtab: ADDED 'conversion_Y' at iOffset=183456
hashAddNamtab: ADDED 'half_length' at iOffset=183470
hashAddNamtab: ADDED 'THx1' at iOffset=183482
hashAddNamtab: ADDED 'THy1' at iOffset=183488
hashAddNamtab: ADDED 'THx2' at iOffset=183494
hashAddNamtab: ADDED 'THy2' at iOffset=183500
hashAddNamtab: ADDED 'TVx1' at iOffset=183506
hashAddNamtab: ADDED 'TVy1' at iOffset=183512
hashAddNamtab: ADDED 'TVx2' at iOffset=183518
hashAddNamtab: ADDED 'TVy2' at iOffset=183524
hashAddNamtab: ADDED 'co %d;
' at iOffset=183530
hashAddNamtab: ADDED '#S198' at iOffset=183538
hashAddNamtab: ADDED 'ru %d,%d,%d,%d
' at iOffset=183544
hashAddNamtab: ADDED '#S199' at iOffset=183560
hashAddNamtab: ADDED 'ru %d,%d,%d,%d
' at iOffset=183566
hashAddNamtab: ADDED '#S200' at iOffset=183582
hashAddNamtab: ADDED 'rf %d,%d,%d,%d
' at iOffset=183588
hashAddNamtab: ADDED '#S201' at iOffset=183604
hashAddNamtab: ADDED 'rf %d,%d,%d,%d
' at iOffset=183610
hashAddNamtab: ADDED '#S202' at iOffset=183626
postInstructionCompilation: Saving 'DRW_T' nops=1296 nInstructions=1294 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'DRW_T' Wrote 1294 bytes from op[2..1295] to instcach[52248..53541]
hashAddNamtab: ADDED 'DRW_L' at iOffset=183632
preInstructionCompilation: BEFORE 'DRW_L' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'LHx1' at iOffset=183638
hashAddNamtab: ADDED 'LHy1' at iOffset=183644
hashAddNamtab: ADDED 'LHx2' at iOffset=183650
hashAddNamtab: ADDED 'LHy2' at iOffset=183656
hashAddNamtab: ADDED 'LVx1' at iOffset=183662
hashAddNamtab: ADDED 'LVy1' at iOffset=183668
hashAddNamtab: ADDED 'LVx2' at iOffset=183674
hashAddNamtab: ADDED 'LVy2' at iOffset=183680
hashAddNamtab: ADDED 'co %d;
' at iOffset=183686
hashAddNamtab: ADDED '#S203' at iOffset=183694
hashAddNamtab: ADDED 'ru %d,%d,%d,%d
' at iOffset=183700
hashAddNamtab: ADDED '#S204' at iOffset=183716
hashAddNamtab: ADDED 'ru %d,%d,%d,%d
' at iOffset=183722
hashAddNamtab: ADDED '#S205' at iOffset=183738
hashAddNamtab: ADDED 'rf %d,%d,%d,%d
' at iOffset=183744
hashAddNamtab: ADDED '#S206' at iOffset=183760
hashAddNamtab: ADDED 'rf %d,%d,%d,%d
' at iOffset=183766
hashAddNamtab: ADDED '#S207' at iOffset=183782
postInstructionCompilation: Saving 'DRW_L' nops=1352 nInstructions=1350 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'DRW_L' Wrote 1350 bytes from op[2..1351] to instcach[53542..54891]
hashAddNamtab: ADDED 'DRW_PLAC' at iOffset=183788
preInstructionCompilation: BEFORE 'DRW_PLAC' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'half_size' at iOffset=183798
hashAddNamtab: ADDED 'ulx' at iOffset=183808
hashAddNamtab: ADDED 'uly' at iOffset=183812
hashAddNamtab: ADDED 'lrx' at iOffset=183816
hashAddNamtab: ADDED 'lry' at iOffset=183820
hashAddNamtab: ADDED 'co %d;
' at iOffset=183824
hashAddNamtab: ADDED '#S208' at iOffset=183832
hashAddNamtab: ADDED 'ru %d,%d,%d,%d;
' at iOffset=183838
hashAddNamtab: ADDED '#S209' at iOffset=183856
hashAddNamtab: ADDED 'rf %d,%d,%d,%d;
' at iOffset=183862
hashAddNamtab: ADDED '#S210' at iOffset=183880
postInstructionCompilation: Saving 'DRW_PLAC' nops=372 nInstructions=370 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'DRW_PLAC' Wrote 370 bytes from op[2..371] to instcach[54892..55261]
hashAddNamtab: ADDED 'DRW_SQR' at iOffset=183886
preInstructionCompilation: BEFORE 'DRW_SQR' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'size' at iOffset=183894
hashAddNamtab: ADDED 'co %d;
' at iOffset=183900
hashAddNamtab: ADDED '#S211' at iOffset=183908
hashAddNamtab: ADDED 'ru %d,%d,%d,%d;
' at iOffset=183914
hashAddNamtab: ADDED '#S212' at iOffset=183932
hashAddNamtab: ADDED 'rf %d,%d,%d,%d;
' at iOffset=183938
hashAddNamtab: ADDED '#S213' at iOffset=183956
postInstructionCompilation: Saving 'DRW_SQR' nops=382 nInstructions=380 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'DRW_SQR' Wrote 380 bytes from op[2..381] to instcach[55262..55641]
hashAddNamtab: ADDED 'FIX_PGS' at iOffset=183962
preInstructionCompilation: BEFORE 'FIX_PGS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'open' at iOffset=183970
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=183976
hashAddNamtab: ADDED '#S214' at iOffset=183988
hashAddNamtab: ADDED 'cl:
' at iOffset=183994
hashAddNamtab: ADDED '#S215' at iOffset=184000
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184006
hashAddNamtab: ADDED '#S216' at iOffset=184018
hashAddNamtab: ADDED 'cl:
' at iOffset=184024
hashAddNamtab: ADDED '#S217' at iOffset=184030
postInstructionCompilation: Saving 'FIX_PGS' nops=444 nInstructions=442 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'FIX_PGS' Wrote 442 bytes from op[2..443] to instcach[55642..56083]
hashAddNamtab: ADDED 'FLS_PGS' at iOffset=184036
preInstructionCompilation: BEFORE 'FLS_PGS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED '#P10' at iOffset=184044
hashAddNamtab: ADDED 'pd_eccentricity' at iOffset=184050
hashAddNamtab: ADDED 'pd_angle' at iOffset=184066
hashAddNamtab: ADDED 'opposite' at iOffset=184076
hashAddNamtab: ADDED 'adjacent' at iOffset=184086
hashAddNamtab: ADDED 'flash' at iOffset=184096
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184102
hashAddNamtab: ADDED '#S218' at iOffset=184114
hashAddNamtab: ADDED 'cl:
' at iOffset=184120
hashAddNamtab: ADDED '#S219' at iOffset=184126
hashAddNamtab: ADDED '#M42200000' at iOffset=184132
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184144
hashAddNamtab: ADDED '#S220' at iOffset=184156
hashAddNamtab: ADDED 'cl:
' at iOffset=184162
hashAddNamtab: ADDED '#S221' at iOffset=184168
postInstructionCompilation: Saving 'FLS_PGS' nops=508 nInstructions=506 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'FLS_PGS' Wrote 506 bytes from op[2..507] to instcach[56084..56589]
hashAddNamtab: ADDED 'CMD_PGS' at iOffset=184174
preInstructionCompilation: BEFORE 'CMD_PGS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'sig_color' at iOffset=184182
hashAddNamtab: ADDED '#Q11' at iOffset=184192
hashAddNamtab: ADDED '#Q12' at iOffset=184198
hashAddNamtab: ADDED '#Q13' at iOffset=184204
hashAddNamtab: ADDED '#P14' at iOffset=184210
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184216
hashAddNamtab: ADDED '#S222' at iOffset=184228
hashAddNamtab: ADDED 'cl:
' at iOffset=184234
hashAddNamtab: ADDED '#S223' at iOffset=184240
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184246
hashAddNamtab: ADDED '#S224' at iOffset=184258
hashAddNamtab: ADDED 'cl:
' at iOffset=184264
hashAddNamtab: ADDED '#S225' at iOffset=184270
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184276
hashAddNamtab: ADDED '#S226' at iOffset=184288
hashAddNamtab: ADDED 'cl:
' at iOffset=184294
hashAddNamtab: ADDED '#S227' at iOffset=184300
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184306
hashAddNamtab: ADDED '#S228' at iOffset=184318
hashAddNamtab: ADDED 'cl:
' at iOffset=184324
hashAddNamtab: ADDED '#S229' at iOffset=184330
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184336
hashAddNamtab: ADDED '#S230' at iOffset=184348
hashAddNamtab: ADDED 'cl:
' at iOffset=184354
hashAddNamtab: ADDED '#S231' at iOffset=184360
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184366
hashAddNamtab: ADDED '#S232' at iOffset=184378
hashAddNamtab: ADDED 'cl:
' at iOffset=184384
hashAddNamtab: ADDED '#S233' at iOffset=184390
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184396
hashAddNamtab: ADDED '#S234' at iOffset=184408
hashAddNamtab: ADDED 'cl:
' at iOffset=184414
hashAddNamtab: ADDED '#S235' at iOffset=184420
postInstructionCompilation: Saving 'CMD_PGS' nops=2048 nInstructions=2046 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'CMD_PGS' Wrote 2046 bytes from op[2..2047] to instcach[56590..58635]
hashAddNamtab: ADDED 'Decide_SSD' at iOffset=184426
hashAddNamtab: ADDED 'STAIR' at iOffset=184438
preInstructionCompilation: BEFORE 'STAIR' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'plus_minus' at iOffset=184444
postInstructionCompilation: Saving 'STAIR' nops=252 nInstructions=250 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'STAIR' Wrote 250 bytes from op[2..251] to instcach[58636..58885]
hashAddNamtab: ADDED 'SETC_TRL' at iOffset=184456
preInstructionCompilation: BEFORE 'SETC_TRL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'decide_trl_type' at iOffset=184466
hashAddNamtab: ADDED 'per_jitter' at iOffset=184482
hashAddNamtab: ADDED 'jitter' at iOffset=184494
hashAddNamtab: ADDED 'decide_jitter' at iOffset=184502
hashAddNamtab: ADDED 'holdtime_diff' at iOffset=184516
hashAddNamtab: ADDED 'ii' at iOffset=184530
hashAddNamtab: ADDED '#M3F800000' at iOffset=184534
hashAddNamtab: ADDED '#I9999' at iOffset=184546
hashAddNamtab: ADDED '#I1001' at iOffset=184554
hashAddNamtab: ADDED '#MBF800000' at iOffset=184562
hashAddNamtab: ADDED '#M3E800000' at iOffset=184574
postInstructionCompilation: Saving 'SETC_TRL' nops=732 nInstructions=730 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SETC_TRL' Wrote 730 bytes from op[2..731] to instcach[58886..59615]
hashAddNamtab: ADDED 'MG_PGS' at iOffset=184586
preInstructionCompilation: BEFORE 'MG_PGS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184594
hashAddNamtab: ADDED '#S236' at iOffset=184606
hashAddNamtab: ADDED 'cl:
' at iOffset=184612
hashAddNamtab: ADDED '#S237' at iOffset=184618
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184624
hashAddNamtab: ADDED '#S238' at iOffset=184636
hashAddNamtab: ADDED 'cl:
' at iOffset=184642
hashAddNamtab: ADDED '#S239' at iOffset=184648
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184654
hashAddNamtab: ADDED '#S240' at iOffset=184666
hashAddNamtab: ADDED 'cl:
' at iOffset=184672
hashAddNamtab: ADDED '#S241' at iOffset=184678
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184684
hashAddNamtab: ADDED '#S242' at iOffset=184696
hashAddNamtab: ADDED 'cl:
' at iOffset=184702
hashAddNamtab: ADDED '#S243' at iOffset=184708
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184714
hashAddNamtab: ADDED '#S244' at iOffset=184726
hashAddNamtab: ADDED 'cl:
' at iOffset=184732
hashAddNamtab: ADDED '#S245' at iOffset=184738
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184744
hashAddNamtab: ADDED '#S246' at iOffset=184756
hashAddNamtab: ADDED 'cl:
' at iOffset=184762
hashAddNamtab: ADDED '#S247' at iOffset=184768
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184774
hashAddNamtab: ADDED '#S248' at iOffset=184786
hashAddNamtab: ADDED 'cl:
' at iOffset=184792
hashAddNamtab: ADDED '#S249' at iOffset=184798
postInstructionCompilation: Saving 'MG_PGS' nops=2158 nInstructions=2156 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'MG_PGS' Wrote 2156 bytes from op[2..2157] to instcach[59616..61771]
hashAddNamtab: ADDED 'soa_jitter' at iOffset=184804
hashAddNamtab: ADDED 'per_soa_jitter' at iOffset=184816
hashAddNamtab: ADDED 'SETMGTRL' at iOffset=184832
preInstructionCompilation: BEFORE 'SETMGTRL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'decide_soa_jitter' at iOffset=184842
postInstructionCompilation: Saving 'SETMGTRL' nops=762 nInstructions=760 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SETMGTRL' Wrote 760 bytes from op[2..761] to instcach[61772..62531]
hashAddNamtab: ADDED 'GNG_PGS' at iOffset=184860
preInstructionCompilation: BEFORE 'GNG_PGS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'maskcolor' at iOffset=184868
hashAddNamtab: ADDED '#Q14' at iOffset=184878
hashAddNamtab: ADDED '#P15' at iOffset=184884
hashAddNamtab: ADDED 'fixation_target_pd' at iOffset=184890
hashAddNamtab: ADDED 'signal_pd_T' at iOffset=184910
hashAddNamtab: ADDED 'signal_pd_S' at iOffset=184922
hashAddNamtab: ADDED 'atarget' at iOffset=184934
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184942
hashAddNamtab: ADDED '#S250' at iOffset=184954
hashAddNamtab: ADDED 'cl:
' at iOffset=184960
hashAddNamtab: ADDED '#S251' at iOffset=184966
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=184972
hashAddNamtab: ADDED '#S252' at iOffset=184984
hashAddNamtab: ADDED 'cl:
' at iOffset=184990
hashAddNamtab: ADDED '#S253' at iOffset=184996
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185002
hashAddNamtab: ADDED '#S254' at iOffset=185014
hashAddNamtab: ADDED 'cl:
' at iOffset=185020
hashAddNamtab: ADDED '#S255' at iOffset=185026
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185032
hashAddNamtab: ADDED '#S256' at iOffset=185044
hashAddNamtab: ADDED 'cl:
' at iOffset=185050
hashAddNamtab: ADDED '#S257' at iOffset=185056
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185062
hashAddNamtab: ADDED '#S258' at iOffset=185074
hashAddNamtab: ADDED 'cl:
' at iOffset=185080
hashAddNamtab: ADDED '#S259' at iOffset=185086
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185092
hashAddNamtab: ADDED '#S260' at iOffset=185104
hashAddNamtab: ADDED 'cl:
' at iOffset=185110
hashAddNamtab: ADDED '#S261' at iOffset=185116
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185122
hashAddNamtab: ADDED '#S262' at iOffset=185134
hashAddNamtab: ADDED 'cl:
' at iOffset=185140
hashAddNamtab: ADDED '#S263' at iOffset=185146
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185152
hashAddNamtab: ADDED '#S264' at iOffset=185164
hashAddNamtab: ADDED 'cl:
' at iOffset=185170
hashAddNamtab: ADDED '#S265' at iOffset=185176
postInstructionCompilation: Saving 'GNG_PGS' nops=2314 nInstructions=2312 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'GNG_PGS' Wrote 2312 bytes from op[2..2313] to instcach[62532..64843]
hashAddNamtab: ADDED 'soa' at iOffset=185182
hashAddNamtab: ADDED 'SETG_TRL' at iOffset=185186
preInstructionCompilation: BEFORE 'SETG_TRL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'soa_diff' at iOffset=185196
hashAddNamtab: ADDED '#MC3A6AA3D' at iOffset=185206
hashAddNamtab: ADDED '#F5' at iOffset=185218
hashAddNamtab: ADDED '#I1099' at iOffset=185222
postInstructionCompilation: Saving 'SETG_TRL' nops=1016 nInstructions=1014 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SETG_TRL' Wrote 1014 bytes from op[2..1015] to instcach[64844..65857]
hashAddNamtab: ADDED 'DEL_PGS' at iOffset=185230
preInstructionCompilation: BEFORE 'DEL_PGS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED '#P13' at iOffset=185238
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185244
hashAddNamtab: ADDED '#S266' at iOffset=185256
hashAddNamtab: ADDED 'cl:
' at iOffset=185262
hashAddNamtab: ADDED '#S267' at iOffset=185268
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185274
hashAddNamtab: ADDED '#S268' at iOffset=185286
hashAddNamtab: ADDED 'cl:
' at iOffset=185292
hashAddNamtab: ADDED '#S269' at iOffset=185298
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185304
hashAddNamtab: ADDED '#S270' at iOffset=185316
hashAddNamtab: ADDED 'cl:
' at iOffset=185322
hashAddNamtab: ADDED '#S271' at iOffset=185328
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185334
hashAddNamtab: ADDED '#S272' at iOffset=185346
hashAddNamtab: ADDED 'cl:
' at iOffset=185352
hashAddNamtab: ADDED '#S273' at iOffset=185358
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185364
hashAddNamtab: ADDED '#S274' at iOffset=185376
hashAddNamtab: ADDED 'cl:
' at iOffset=185382
hashAddNamtab: ADDED '#S275' at iOffset=185388
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185394
hashAddNamtab: ADDED '#S276' at iOffset=185406
hashAddNamtab: ADDED 'cl:
' at iOffset=185412
hashAddNamtab: ADDED '#S277' at iOffset=185418
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185424
hashAddNamtab: ADDED '#S278' at iOffset=185436
hashAddNamtab: ADDED 'cl:
' at iOffset=185442
hashAddNamtab: ADDED '#S279' at iOffset=185448
postInstructionCompilation: Saving 'DEL_PGS' nops=1782 nInstructions=1780 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'DEL_PGS' Wrote 1780 bytes from op[2..1781] to instcach[65858..67637]
hashAddNamtab: ADDED 'SETD_TRL' at iOffset=185454
preInstructionCompilation: BEFORE 'SETD_TRL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'SETD_TRL' nops=512 nInstructions=510 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SETD_TRL' Wrote 510 bytes from op[2..511] to instcach[67638..68147]
hashAddNamtab: ADDED 'TSCH_PGS' at iOffset=185464
preInstructionCompilation: BEFORE 'TSCH_PGS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185474
hashAddNamtab: ADDED '#S280' at iOffset=185486
hashAddNamtab: ADDED 'cl:
' at iOffset=185492
hashAddNamtab: ADDED '#S281' at iOffset=185498
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185504
hashAddNamtab: ADDED '#S282' at iOffset=185516
hashAddNamtab: ADDED 'cl:
' at iOffset=185522
hashAddNamtab: ADDED '#S283' at iOffset=185528
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185534
hashAddNamtab: ADDED '#S284' at iOffset=185546
hashAddNamtab: ADDED 'cl:
' at iOffset=185552
hashAddNamtab: ADDED '#S285' at iOffset=185558
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185564
hashAddNamtab: ADDED '#S286' at iOffset=185576
hashAddNamtab: ADDED 'cl:
' at iOffset=185582
hashAddNamtab: ADDED '#S287' at iOffset=185588
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185594
hashAddNamtab: ADDED '#S288' at iOffset=185606
hashAddNamtab: ADDED 'cl:
' at iOffset=185612
hashAddNamtab: ADDED '#S289' at iOffset=185618
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185624
hashAddNamtab: ADDED '#S290' at iOffset=185636
hashAddNamtab: ADDED 'cl:
' at iOffset=185642
hashAddNamtab: ADDED '#S291' at iOffset=185648
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185654
hashAddNamtab: ADDED '#S292' at iOffset=185666
hashAddNamtab: ADDED 'cl:
' at iOffset=185672
hashAddNamtab: ADDED '#S293' at iOffset=185678
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185684
hashAddNamtab: ADDED '#S294' at iOffset=185696
hashAddNamtab: ADDED 'cl:
' at iOffset=185702
hashAddNamtab: ADDED '#S295' at iOffset=185708
postInstructionCompilation: Saving 'TSCH_PGS' nops=7984 nInstructions=7982 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'TSCH_PGS' Wrote 7982 bytes from op[2..7983] to instcach[68148..76129]
hashAddNamtab: ADDED 'LSCH_PGS' at iOffset=185714
preInstructionCompilation: BEFORE 'LSCH_PGS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185724
hashAddNamtab: ADDED '#S296' at iOffset=185736
hashAddNamtab: ADDED 'cl:
' at iOffset=185742
hashAddNamtab: ADDED '#S297' at iOffset=185748
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185754
hashAddNamtab: ADDED '#S298' at iOffset=185766
hashAddNamtab: ADDED 'cl:
' at iOffset=185772
hashAddNamtab: ADDED '#S299' at iOffset=185778
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185784
hashAddNamtab: ADDED '#S300' at iOffset=185796
hashAddNamtab: ADDED 'cl:
' at iOffset=185802
hashAddNamtab: ADDED '#S301' at iOffset=185808
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185814
hashAddNamtab: ADDED '#S302' at iOffset=185826
hashAddNamtab: ADDED 'cl:
' at iOffset=185832
hashAddNamtab: ADDED '#S303' at iOffset=185838
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185844
hashAddNamtab: ADDED '#S304' at iOffset=185856
hashAddNamtab: ADDED 'cl:
' at iOffset=185862
hashAddNamtab: ADDED '#S305' at iOffset=185868
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185874
hashAddNamtab: ADDED '#S306' at iOffset=185886
hashAddNamtab: ADDED 'cl:
' at iOffset=185892
hashAddNamtab: ADDED '#S307' at iOffset=185898
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185904
hashAddNamtab: ADDED '#S308' at iOffset=185916
hashAddNamtab: ADDED 'cl:
' at iOffset=185922
hashAddNamtab: ADDED '#S309' at iOffset=185928
hashAddNamtab: ADDED 'rw %d,%d;
' at iOffset=185934
hashAddNamtab: ADDED '#S310' at iOffset=185946
hashAddNamtab: ADDED 'cl:
' at iOffset=185952
hashAddNamtab: ADDED '#S311' at iOffset=185958
postInstructionCompilation: Saving 'LSCH_PGS' nops=7984 nInstructions=7982 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'LSCH_PGS' Wrote 7982 bytes from op[2..7983] to instcach[76130..84111]
hashAddNamtab: ADDED 'DistFix' at iOffset=185964
hashAddNamtab: ADDED 'SETS_TRL' at iOffset=185972
preInstructionCompilation: BEFORE 'SETS_TRL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'CatchNum' at iOffset=185982
hashAddNamtab: ADDED 'plac_diff' at iOffset=185992
hashAddNamtab: ADDED 'plac_jitter' at iOffset=186002
hashAddNamtab: ADDED '#I501' at iOffset=186014
hashAddNamtab: ADDED '#I21' at iOffset=186020
hashAddNamtab: ADDED '#I25' at iOffset=186026
postInstructionCompilation: Saving 'SETS_TRL' nops=1624 nInstructions=1622 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SETS_TRL' Wrote 1622 bytes from op[2..1623] to instcach[84112..85733]
hashAddNamtab: ADDED 'GNGTRIAL' at iOffset=186032
preInstructionCompilation: BEFORE 'GNGTRIAL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'fix_on_time' at iOffset=186042
hashAddNamtab: ADDED ' 
' at iOffset=186054
hashAddNamtab: ADDED '#S312' at iOffset=186058
hashAddNamtab: ADDED '# %d' at iOffset=186064
hashAddNamtab: ADDED '#S313' at iOffset=186070
hashAddNamtab: ADDED ' (%d' at iOffset=186076
hashAddNamtab: ADDED '#S314' at iOffset=186082
hashAddNamtab: ADDED ' correct)
' at iOffset=186088
hashAddNamtab: ADDED '#S315' at iOffset=186100
hashAddNamtab: ADDED 'GO
' at iOffset=186106
hashAddNamtab: ADDED '#S316' at iOffset=186110
hashAddNamtab: ADDED 'holdtime = %d
' at iOffset=186116
hashAddNamtab: ADDED '#S317' at iOffset=186132
hashAddNamtab: ADDED 'STOP
' at iOffset=186138
hashAddNamtab: ADDED '#S318' at iOffset=186144
hashAddNamtab: ADDED 'holdtime = %d
' at iOffset=186150
hashAddNamtab: ADDED '#S319' at iOffset=186166
hashAddNamtab: ADDED '               SOA = %d
' at iOffset=186172
hashAddNamtab: ADDED '#S320' at iOffset=186198
hashAddNamtab: ADDED 'IGNORE
' at iOffset=186204
hashAddNamtab: ADDED '#S321' at iOffset=186212
hashAddNamtab: ADDED 'holdtime = %d
' at iOffset=186218
hashAddNamtab: ADDED '#S322' at iOffset=186234
hashAddNamtab: ADDED '               SOA = %d
' at iOffset=186240
hashAddNamtab: ADDED '#S323' at iOffset=186266
hashAddNamtab: ADDED 'vp %d
' at iOffset=186272
hashAddNamtab: ADDED '#S324' at iOffset=186280
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=186286
hashAddNamtab: ADDED '#S325' at iOffset=186298
hashAddNamtab: ADDED 'vp %d
' at iOffset=186304
hashAddNamtab: ADDED '#S326' at iOffset=186312
hashAddNamtab: ADDED 'vp %d
' at iOffset=186318
hashAddNamtab: ADDED '#S327' at iOffset=186326
hashAddNamtab: ADDED 'Aborted (no fixation)
' at iOffset=186332
hashAddNamtab: ADDED '#S328' at iOffset=186356
hashAddNamtab: ADDED 'vp %d
' at iOffset=186362
hashAddNamtab: ADDED '#S329' at iOffset=186370
hashAddNamtab: ADDED 'Aborted (broke fixation)
' at iOffset=186376
hashAddNamtab: ADDED '#S330' at iOffset=186402
hashAddNamtab: ADDED 'vp %d
' at iOffset=186408
hashAddNamtab: ADDED '#S331' at iOffset=186416
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=186422
hashAddNamtab: ADDED '#S332' at iOffset=186434
hashAddNamtab: ADDED 'vp %d
' at iOffset=186440
hashAddNamtab: ADDED '#S333' at iOffset=186448
hashAddNamtab: ADDED 'vp %d
' at iOffset=186454
hashAddNamtab: ADDED '#S334' at iOffset=186462
hashAddNamtab: ADDED 'Error (early saccade)
' at iOffset=186468
hashAddNamtab: ADDED '#S335' at iOffset=186492
hashAddNamtab: ADDED 'vp %d
' at iOffset=186498
hashAddNamtab: ADDED '#S336' at iOffset=186506
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=186512
hashAddNamtab: ADDED '#S337' at iOffset=186524
hashAddNamtab: ADDED 'vp %d
' at iOffset=186530
hashAddNamtab: ADDED '#S338' at iOffset=186538
hashAddNamtab: ADDED 'vp %d
' at iOffset=186544
hashAddNamtab: ADDED '#S339' at iOffset=186552
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=186558
hashAddNamtab: ADDED '#S340' at iOffset=186570
hashAddNamtab: ADDED 'vp %d
' at iOffset=186576
hashAddNamtab: ADDED '#S341' at iOffset=186584
hashAddNamtab: ADDED '                          rt = %d
' at iOffset=186590
hashAddNamtab: ADDED '#S342' at iOffset=186626
hashAddNamtab: ADDED 'vp %d
' at iOffset=186632
hashAddNamtab: ADDED '#S343' at iOffset=186640
hashAddNamtab: ADDED 'Error (no saccade)
' at iOffset=186646
hashAddNamtab: ADDED '#S344' at iOffset=186666
hashAddNamtab: ADDED 'vp %d
' at iOffset=186672
hashAddNamtab: ADDED '#S345' at iOffset=186680
hashAddNamtab: ADDED 'Correct (canceled)
' at iOffset=186686
hashAddNamtab: ADDED '#S346' at iOffset=186706
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=186712
hashAddNamtab: ADDED '#S347' at iOffset=186724
hashAddNamtab: ADDED 'vp %d
' at iOffset=186730
hashAddNamtab: ADDED '#S348' at iOffset=186738
hashAddNamtab: ADDED 'vp %d
' at iOffset=186744
hashAddNamtab: ADDED '#S349' at iOffset=186752
hashAddNamtab: ADDED 'Error (inaccurate saccade)
' at iOffset=186758
hashAddNamtab: ADDED '#S350' at iOffset=186786
hashAddNamtab: ADDED 'vp %d
' at iOffset=186792
hashAddNamtab: ADDED '#S351' at iOffset=186800
hashAddNamtab: ADDED 'Error (broke target fixation)
' at iOffset=186806
hashAddNamtab: ADDED '#S352' at iOffset=186838
hashAddNamtab: ADDED 'Correct (saccade)
' at iOffset=186844
hashAddNamtab: ADDED '#S353' at iOffset=186864
hashAddNamtab: ADDED 'Error (noncanceled)
' at iOffset=186870
hashAddNamtab: ADDED '#S354' at iOffset=186892
hashAddNamtab: ADDED 'vp %d
' at iOffset=186898
hashAddNamtab: ADDED '#S355' at iOffset=186906
postInstructionCompilation: Saving 'GNGTRIAL' nops=2782 nInstructions=2780 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'GNGTRIAL' Wrote 2780 bytes from op[2..2781] to instcach[85734..88513]
hashAddNamtab: ADDED 'DELTRIAL' at iOffset=186912
preInstructionCompilation: BEFORE 'DELTRIAL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'anticip_sacc' at iOffset=186922
hashAddNamtab: ADDED ' 
' at iOffset=186936
hashAddNamtab: ADDED '#S356' at iOffset=186940
hashAddNamtab: ADDED '# %d' at iOffset=186946
hashAddNamtab: ADDED '#S357' at iOffset=186952
hashAddNamtab: ADDED ' (%d' at iOffset=186958
hashAddNamtab: ADDED '#S358' at iOffset=186964
hashAddNamtab: ADDED ' correct)
' at iOffset=186970
hashAddNamtab: ADDED '#S359' at iOffset=186982
hashAddNamtab: ADDED 'vp %d
' at iOffset=186988
hashAddNamtab: ADDED '#S360' at iOffset=186996
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=187002
hashAddNamtab: ADDED '#S361' at iOffset=187014
hashAddNamtab: ADDED 'vp %d
' at iOffset=187020
hashAddNamtab: ADDED '#S362' at iOffset=187028
hashAddNamtab: ADDED 'vp %d
' at iOffset=187034
hashAddNamtab: ADDED '#S363' at iOffset=187042
hashAddNamtab: ADDED 'Aborted (no fixation)
' at iOffset=187048
hashAddNamtab: ADDED '#S364' at iOffset=187072
hashAddNamtab: ADDED 'vp %d
' at iOffset=187078
hashAddNamtab: ADDED '#S365' at iOffset=187086
hashAddNamtab: ADDED 'Aborted (broke fixation)
' at iOffset=187092
hashAddNamtab: ADDED '#S366' at iOffset=187118
hashAddNamtab: ADDED 'vp %d
' at iOffset=187124
hashAddNamtab: ADDED '#S367' at iOffset=187132
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=187138
hashAddNamtab: ADDED '#S368' at iOffset=187150
hashAddNamtab: ADDED 'vp %d
' at iOffset=187156
hashAddNamtab: ADDED '#S369' at iOffset=187164
hashAddNamtab: ADDED 'vp %d
' at iOffset=187170
hashAddNamtab: ADDED '#S370' at iOffset=187178
hashAddNamtab: ADDED 'Error (early saccade)
' at iOffset=187184
hashAddNamtab: ADDED '#S371' at iOffset=187208
hashAddNamtab: ADDED '       soa = %d
' at iOffset=187214
hashAddNamtab: ADDED '#S372' at iOffset=187232
hashAddNamtab: ADDED 'vp %d
' at iOffset=187238
hashAddNamtab: ADDED '#S373' at iOffset=187246
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=187252
hashAddNamtab: ADDED '#S374' at iOffset=187264
hashAddNamtab: ADDED 'vp %d
' at iOffset=187270
hashAddNamtab: ADDED '#S375' at iOffset=187278
hashAddNamtab: ADDED '           rt = %d
' at iOffset=187284
hashAddNamtab: ADDED '#S376' at iOffset=187304
hashAddNamtab: ADDED 'vp %d
' at iOffset=187310
hashAddNamtab: ADDED '#S377' at iOffset=187318
hashAddNamtab: ADDED 'Error (no saccade)
' at iOffset=187324
hashAddNamtab: ADDED '#S378' at iOffset=187344
hashAddNamtab: ADDED 'vp %d
' at iOffset=187350
hashAddNamtab: ADDED '#S379' at iOffset=187358
hashAddNamtab: ADDED 'Error (inaccurate saccade)
' at iOffset=187364
hashAddNamtab: ADDED '#S380' at iOffset=187392
hashAddNamtab: ADDED 'vp %d
' at iOffset=187398
hashAddNamtab: ADDED '#S381' at iOffset=187406
hashAddNamtab: ADDED 'Error (broke target fixation)
' at iOffset=187412
hashAddNamtab: ADDED '#S382' at iOffset=187444
hashAddNamtab: ADDED 'Correct (saccade)
' at iOffset=187450
hashAddNamtab: ADDED '#S383' at iOffset=187470
hashAddNamtab: ADDED 'vp %d
' at iOffset=187476
hashAddNamtab: ADDED '#S384' at iOffset=187484
postInstructionCompilation: Saving 'DELTRIAL' nops=1728 nInstructions=1726 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'DELTRIAL' Wrote 1726 bytes from op[2..1727] to instcach[88514..90239]
hashAddNamtab: ADDED 'UPD8_INH' at iOffset=187490
preInstructionCompilation: BEFORE 'UPD8_INH' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'ct' at iOffset=187500
hashAddNamtab: ADDED 'weight' at iOffset=187504
hashAddNamtab: ADDED 'change_value' at iOffset=187512
hashAddNamtab: ADDED 'position_x' at iOffset=187526
hashAddNamtab: ADDED 'position_y' at iOffset=187538
hashAddNamtab: ADDED 'ct_ssd' at iOffset=187550
postInstructionCompilation: Saving 'UPD8_INH' nops=1978 nInstructions=1976 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'UPD8_INH' Wrote 1976 bytes from op[2..1977] to instcach[90240..92215]
hashAddNamtab: ADDED 'UPD8_SOA' at iOffset=187558
preInstructionCompilation: BEFORE 'UPD8_SOA' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'ct_soa' at iOffset=187568
hashAddNamtab: ADDED 'rts' at iOffset=187576
hashAddNamtab: ADDED 'mean latency = %d
' at iOffset=187580
hashAddNamtab: ADDED '#S385' at iOffset=187600
postInstructionCompilation: Saving 'UPD8_SOA' nops=1954 nInstructions=1952 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'UPD8_SOA' Wrote 1952 bytes from op[2..1953] to instcach[92216..94167]
hashAddNamtab: ADDED 'UPD8_SCH' at iOffset=187606
preInstructionCompilation: BEFORE 'UPD8_SCH' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'random_position_x' at iOffset=187616
hashAddNamtab: ADDED 'repeat_position_x' at iOffset=187634
hashAddNamtab: ADDED 'random_position_y' at iOffset=187652
hashAddNamtab: ADDED 'repeat_position_y' at iOffset=187670
hashAddNamtab: ADDED '#I-300' at iOffset=187688
postInstructionCompilation: Saving 'UPD8_SCH' nops=794 nInstructions=792 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'UPD8_SCH' Wrote 792 bytes from op[2..793] to instcach[94168..94959]
hashAddNamtab: ADDED 'stop_sig_color_r' at iOffset=187696
hashAddNamtab: ADDED 'stop_sig_color_g' at iOffset=187714
hashAddNamtab: ADDED 'stop_sig_color_b' at iOffset=187732
hashAddNamtab: ADDED 'ignore_sig_color_r' at iOffset=187750
hashAddNamtab: ADDED 'ignore_sig_color_g' at iOffset=187770
hashAddNamtab: ADDED 'ignore_sig_color_b' at iOffset=187790
hashAddNamtab: ADDED 'fixation_color_r' at iOffset=187810
hashAddNamtab: ADDED 'fixation_color_g' at iOffset=187828
hashAddNamtab: ADDED 'fixation_color_b' at iOffset=187846
hashAddNamtab: ADDED 'target_color_r' at iOffset=187864
hashAddNamtab: ADDED 'target_color_g' at iOffset=187880
hashAddNamtab: ADDED 'target_color_b' at iOffset=187896
hashAddNamtab: ADDED 'INFOS' at iOffset=187912
preInstructionCompilation: BEFORE 'INFOS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED '#I999' at iOffset=187918
hashAddNamtab: ADDED '#I4001' at iOffset=187924
hashAddNamtab: ADDED '#I4050' at iOffset=187932
hashAddNamtab: ADDED '#I4060' at iOffset=187940
hashAddNamtab: ADDED '#I4100' at iOffset=187948
hashAddNamtab: ADDED '#I4150' at iOffset=187956
hashAddNamtab: ADDED '#I4200' at iOffset=187964
hashAddNamtab: ADDED '#I4250' at iOffset=187972
hashAddNamtab: ADDED '#I5500' at iOffset=187980
hashAddNamtab: ADDED '#I3800' at iOffset=187988
hashAddNamtab: ADDED '#I4650' at iOffset=187996
hashAddNamtab: ADDED '#I4660' at iOffset=188004
hashAddNamtab: ADDED '#I4670' at iOffset=188012
hashAddNamtab: ADDED '#I4700' at iOffset=188020
hashAddNamtab: ADDED '#I4800' at iOffset=188028
hashAddNamtab: ADDED '#I4900' at iOffset=188036
hashAddNamtab: ADDED '#I6000' at iOffset=188044
hashAddNamtab: ADDED '#I4680' at iOffset=188052
hashAddNamtab: ADDED '#I4690' at iOffset=188060
hashAddNamtab: ADDED '#I4790' at iOffset=188068
hashAddNamtab: ADDED '#I5100' at iOffset=188076
postInstructionCompilation: Saving 'INFOS' nops=4360 nInstructions=4358 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'INFOS' Wrote 4358 bytes from op[2..4359] to instcach[94960..99317]
hashAddNamtab: ADDED 'ABORT' at iOffset=188084
preInstructionCompilation: BEFORE 'ABORT' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'ABORT' nops=690 nInstructions=688 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'ABORT' Wrote 688 bytes from op[2..689] to instcach[99318..100005]
hashAddNamtab: ADDED 'JUICE' at iOffset=188090
preInstructionCompilation: BEFORE 'JUICE' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'closed' at iOffset=188096
postInstructionCompilation: Saving 'JUICE' nops=46 nInstructions=44 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'JUICE' Wrote 44 bytes from op[2..45] to instcach[100006..100049]
preInstructionCompilation: BEFORE 'SUCCESS' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'trl_end_time' at iOffset=188104
hashAddNamtab: ADDED 'tone_time' at iOffset=188118
hashAddNamtab: ADDED 'decidejuice' at iOffset=188128
postInstructionCompilation: Saving 'SUCCESS' nops=1204 nInstructions=1202 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SUCCESS' Wrote 1202 bytes from op[2..1203] to instcach[100050..101251]
preInstructionCompilation: BEFORE 'FAILURE' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'FAILURE' nops=994 nInstructions=992 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'FAILURE' Wrote 992 bytes from op[2..993] to instcach[101252..102243]
hashAddNamtab: ADDED 'END_TRL' at iOffset=188140
preInstructionCompilation: BEFORE 'END_TRL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'now' at iOffset=188148
hashAddNamtab: ADDED 'play_the_odds' at iOffset=188152
hashAddNamtab: ADDED '#I2730' at iOffset=188166
hashAddNamtab: ADDED '#L15' at iOffset=188174
hashAddNamtab: ADDED '#L16' at iOffset=188180
hashAddNamtab: ADDED '#L17' at iOffset=188186
hashAddNamtab: ADDED '#L18' at iOffset=188192
postInstructionCompilation: Saving 'END_TRL' nops=1638 nInstructions=1636 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'END_TRL' Wrote 1636 bytes from op[2..1637] to instcach[102244..103879]
hashAddNamtab: ADDED 'KEY_REWD' at iOffset=188198
preInstructionCompilation: BEFORE 'KEY_REWD' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'juice_duration' at iOffset=188208
hashAddNamtab: ADDED 'tone_freq' at iOffset=188224
hashAddNamtab: ADDED 'tone_durr' at iOffset=188234
postInstructionCompilation: Saving 'KEY_REWD' nops=192 nInstructions=190 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'KEY_REWD' Wrote 190 bytes from op[2..191] to instcach[103880..104069]
hashAddNamtab: ADDED 'KEY_T_UP' at iOffset=188244
preInstructionCompilation: BEFORE 'KEY_T_UP' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'KEY_T_UP' nops=52 nInstructions=50 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'KEY_T_UP' Wrote 50 bytes from op[2..51] to instcach[104070..104119]
hashAddNamtab: ADDED 'KEY_T_DN' at iOffset=188254
preInstructionCompilation: BEFORE 'KEY_T_DN' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
postInstructionCompilation: Saving 'KEY_T_DN' nops=70 nInstructions=68 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'KEY_T_DN' Wrote 68 bytes from op[2..69] to instcach[104120..104187]
hashAddNamtab: ADDED 'FIXTRIAL' at iOffset=188264
preInstructionCompilation: BEFORE 'FIXTRIAL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'need_targ' at iOffset=188274
hashAddNamtab: ADDED 'vp %d
' at iOffset=188284
hashAddNamtab: ADDED '#S386' at iOffset=188292
hashAddNamtab: ADDED 'vp %d
' at iOffset=188298
hashAddNamtab: ADDED '#S387' at iOffset=188306
hashAddNamtab: ADDED 'vp %d
' at iOffset=188312
hashAddNamtab: ADDED '#S388' at iOffset=188320
hashAddNamtab: ADDED 'broke' at iOffset=188326
hashAddNamtab: ADDED '#S389' at iOffset=188332
hashAddNamtab: ADDED 'vp %d
' at iOffset=188338
hashAddNamtab: ADDED '#S390' at iOffset=188346
postInstructionCompilation: Saving 'FIXTRIAL' nops=472 nInstructions=470 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'FIXTRIAL' Wrote 470 bytes from op[2..471] to instcach[104188..104657]
preInstructionCompilation: BEFORE 'FIXATION' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'run_idle' at iOffset=188352
hashAddNamtab: ADDED 'dialog Select_Monkey' at iOffset=188362
hashAddNamtab: ADDED '#S391' at iOffset=188384
hashAddNamtab: ADDED 'key currt = spawn KEY_T_UP' at iOffset=188390
hashAddNamtab: ADDED '#S392' at iOffset=188418
hashAddNamtab: ADDED 'key curlf = spawn KEY_T_DN' at iOffset=188424
hashAddNamtab: ADDED '#S393' at iOffset=188452
hashAddNamtab: ADDED 'key curup = spawn KEY_REWD' at iOffset=188458
hashAddNamtab: ADDED '#S394' at iOffset=188486
hashAddNamtab: ADDED 'key curdn = OK = 1' at iOffset=188492
hashAddNamtab: ADDED '#S395' at iOffset=188512
hashAddNamtab: ADDED 'key currt = ' at iOffset=188518
hashAddNamtab: ADDED '#S396' at iOffset=188532
hashAddNamtab: ADDED 'key curlf = ' at iOffset=188538
hashAddNamtab: ADDED '#S397' at iOffset=188552
hashAddNamtab: ADDED 'key curup = ' at iOffset=188558
hashAddNamtab: ADDED '#S398' at iOffset=188572
hashAddNamtab: ADDED 'key curdn = ' at iOffset=188578
hashAddNamtab: ADDED '#S399' at iOffset=188592
postInstructionCompilation: Saving 'FIXATION' nops=1034 nInstructions=1032 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'FIXATION' Wrote 1032 bytes from op[2..1033] to instcach[104658..105689]
hashAddNamtab: ADDED 'CMANDING' at iOffset=188598
preInstructionCompilation: BEFORE 'CMANDING' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'dialog Select_Monkey' at iOffset=188608
hashAddNamtab: ADDED '#S400' at iOffset=188630
hashAddNamtab: ADDED 'DM RFRSH' at iOffset=188636
hashAddNamtab: ADDED '#S401' at iOffset=188646
hashAddNamtab: ADDED 'vw %d:
' at iOffset=188652
hashAddNamtab: ADDED '#S402' at iOffset=188660
hashAddNamtab: ADDED 'vw %d:
' at iOffset=188666
hashAddNamtab: ADDED '#S403' at iOffset=188674
hashAddNamtab: ADDED 'EM RFRSH' at iOffset=188680
hashAddNamtab: ADDED '#S404' at iOffset=188690
postInstructionCompilation: Saving 'CMANDING' nops=992 nInstructions=990 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'CMANDING' Wrote 990 bytes from op[2..991] to instcach[105690..106679]
hashAddNamtab: ADDED 'MGUIDE' at iOffset=188696
preInstructionCompilation: BEFORE 'MGUIDE' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'dialog Select_Monkey' at iOffset=188704
hashAddNamtab: ADDED '#S405' at iOffset=188726
hashAddNamtab: ADDED 'DM RFRSH' at iOffset=188732
hashAddNamtab: ADDED '#S406' at iOffset=188742
hashAddNamtab: ADDED 'vw %d:
' at iOffset=188748
hashAddNamtab: ADDED '#S407' at iOffset=188756
hashAddNamtab: ADDED 'vw %d:
' at iOffset=188762
hashAddNamtab: ADDED '#S408' at iOffset=188770
hashAddNamtab: ADDED 'EM RFRSH' at iOffset=188776
hashAddNamtab: ADDED '#S409' at iOffset=188786
postInstructionCompilation: Saving 'MGUIDE' nops=940 nInstructions=938 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'MGUIDE' Wrote 938 bytes from op[2..939] to instcach[106680..107617]
hashAddNamtab: ADDED 'GONOGO' at iOffset=188792
preInstructionCompilation: BEFORE 'GONOGO' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'dialog Select_Monkey' at iOffset=188800
hashAddNamtab: ADDED '#S410' at iOffset=188822
hashAddNamtab: ADDED 'DM RFRSH' at iOffset=188828
hashAddNamtab: ADDED '#S411' at iOffset=188838
hashAddNamtab: ADDED 'vw %d:
' at iOffset=188844
hashAddNamtab: ADDED '#S412' at iOffset=188852
hashAddNamtab: ADDED 'vw %d:
' at iOffset=188858
hashAddNamtab: ADDED '#S413' at iOffset=188866
hashAddNamtab: ADDED 'EM RFRSH' at iOffset=188872
hashAddNamtab: ADDED '#S414' at iOffset=188882
postInstructionCompilation: Saving 'GONOGO' nops=824 nInstructions=822 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'GONOGO' Wrote 822 bytes from op[2..823] to instcach[107618..108439]
hashAddNamtab: ADDED 'DELAYED' at iOffset=188888
preInstructionCompilation: BEFORE 'DELAYED' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'dialog Select_Monkey' at iOffset=188896
hashAddNamtab: ADDED '#S415' at iOffset=188918
hashAddNamtab: ADDED 'DM RFRSH' at iOffset=188924
hashAddNamtab: ADDED '#S416' at iOffset=188934
hashAddNamtab: ADDED 'vw %d:
' at iOffset=188940
hashAddNamtab: ADDED '#S417' at iOffset=188948
hashAddNamtab: ADDED 'vw %d:
' at iOffset=188954
hashAddNamtab: ADDED '#S418' at iOffset=188962
hashAddNamtab: ADDED 'EM RFRSH' at iOffset=188968
hashAddNamtab: ADDED '#S419' at iOffset=188978
postInstructionCompilation: Saving 'DELAYED' nops=804 nInstructions=802 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'DELAYED' Wrote 802 bytes from op[2..803] to instcach[108440..109241]
hashAddNamtab: ADDED 'SEARCH' at iOffset=188984
preInstructionCompilation: BEFORE 'SEARCH' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'pcnt' at iOffset=188992
hashAddNamtab: ADDED 'dialog Select_Monkey' at iOffset=188998
hashAddNamtab: ADDED '#S420' at iOffset=189020
hashAddNamtab: ADDED 'DM RFRSH' at iOffset=189026
hashAddNamtab: ADDED '#S421' at iOffset=189036
hashAddNamtab: ADDED 'vw %d:
' at iOffset=189042
hashAddNamtab: ADDED '#S422' at iOffset=189050
hashAddNamtab: ADDED 'vw %d:
' at iOffset=189056
hashAddNamtab: ADDED '#S423' at iOffset=189064
hashAddNamtab: ADDED 'EM RFRSH' at iOffset=189070
hashAddNamtab: ADDED '#S424' at iOffset=189080
hashAddNamtab: ADDED 'Stim Time%d' at iOffset=189086
hashAddNamtab: ADDED '#S425' at iOffset=189098
postInstructionCompilation: Saving 'SEARCH' nops=1112 nInstructions=1110 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SEARCH' Wrote 1110 bytes from op[2..1111] to instcach[109242..110351]
hashAddNamtab: ADDED 'FLSHSCRN' at iOffset=189104
preInstructionCompilation: BEFORE 'FLSHSCRN' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'trl_ct' at iOffset=189114
hashAddNamtab: ADDED 'flashStart' at iOffset=189122
hashAddNamtab: ADDED 'offTime' at iOffset=189134
hashAddNamtab: ADDED 'flashOnEv' at iOffset=189142
hashAddNamtab: ADDED 'flashFailEv' at iOffset=189152
hashAddNamtab: ADDED 'flashSuccEv' at iOffset=189164
hashAddNamtab: ADDED 'flashSessEnd' at iOffset=189176
hashAddNamtab: ADDED 'flashSessStart' at iOffset=189190
hashAddNamtab: ADDED 'wait_flash' at iOffset=189206
hashAddNamtab: ADDED 'waitIFI' at iOffset=189218
hashAddNamtab: ADDED 'DM RFRSH' at iOffset=189226
hashAddNamtab: ADDED '#S426' at iOffset=189236
hashAddNamtab: ADDED 'vw %d:
' at iOffset=189242
hashAddNamtab: ADDED '#S427' at iOffset=189250
hashAddNamtab: ADDED 'vw %d:
' at iOffset=189256
hashAddNamtab: ADDED '#S428' at iOffset=189264
hashAddNamtab: ADDED 'EM RFRSH' at iOffset=189270
hashAddNamtab: ADDED '#S429' at iOffset=189280
hashAddNamtab: ADDED 'dialog Select_Monkey' at iOffset=189286
hashAddNamtab: ADDED '#S430' at iOffset=189308
hashAddNamtab: ADDED 'vp %d
' at iOffset=189314
hashAddNamtab: ADDED '#S431' at iOffset=189322
hashAddNamtab: ADDED 'vp %d
' at iOffset=189328
hashAddNamtab: ADDED '#S432' at iOffset=189336
hashAddNamtab: ADDED 'Broke fixation
' at iOffset=189342
hashAddNamtab: ADDED '#S433' at iOffset=189358
hashAddNamtab: ADDED 'XM RFRSH:
' at iOffset=189364
hashAddNamtab: ADDED '#S434' at iOffset=189376
hashAddNamtab: ADDED 'vp %d
' at iOffset=189382
hashAddNamtab: ADDED '#S435' at iOffset=189390
hashAddNamtab: ADDED 'key currt = ' at iOffset=189396
hashAddNamtab: ADDED '#S436' at iOffset=189410
hashAddNamtab: ADDED 'key curlf = ' at iOffset=189416
hashAddNamtab: ADDED '#S437' at iOffset=189430
hashAddNamtab: ADDED 'key curup = ' at iOffset=189436
hashAddNamtab: ADDED '#S438' at iOffset=189450
hashAddNamtab: ADDED 'key curdn = ' at iOffset=189456
hashAddNamtab: ADDED '#S439' at iOffset=189470
postInstructionCompilation: Saving 'FLSHSCRN' nops=1164 nInstructions=1162 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'FLSHSCRN' Wrote 1162 bytes from op[2..1163] to instcach[110352..111513]
hashAddNamtab: ADDED 'WAIT_MU' at iOffset=189476
preInstructionCompilation: BEFORE 'WAIT_MU' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'u_sec' at iOffset=189484
hashAddNamtab: ADDED 'start' at iOffset=189490
hashAddNamtab: ADDED 'clock_cycles' at iOffset=189496
hashAddNamtab: ADDED '#M3F989375' at iOffset=189510
hashAddNamtab: ADDED '#I65535' at iOffset=189522
postInstructionCompilation: Saving 'WAIT_MU' nops=102 nInstructions=100 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'WAIT_MU' Wrote 100 bytes from op[2..101] to instcach[111514..111613]
hashAddNamtab: ADDED 'SEND_TTL' at iOffset=189530
preInstructionCompilation: BEFORE 'SEND_TTL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'value' at iOffset=189540
hashAddNamtab: ADDED 'output' at iOffset=189546
hashAddNamtab: ADDED 'shiftVal' at iOffset=189554
hashAddNamtab: ADDED '#I128' at iOffset=189564
hashAddNamtab: ADDED '#I-256' at iOffset=189570
postInstructionCompilation: Saving 'SEND_TTL' nops=140 nInstructions=138 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'SEND_TTL' Wrote 138 bytes from op[2..139] to instcach[111614..111751]
hashAddNamtab: ADDED 'QUE_TTL' at iOffset=189578
preInstructionCompilation: BEFORE 'QUE_TTL' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'send_event' at iOffset=189586
hashAddNamtab: ADDED 'n_evs_sent' at iOffset=189598
postInstructionCompilation: Saving 'QUE_TTL' nops=152 nInstructions=150 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'QUE_TTL' Wrote 150 bytes from op[2..151] to instcach[111752..111901]
preInstructionCompilation: BEFORE 'IDLE' nops=2 nInstructions=0 iInstruction=2 iInstructionCache=0
hashAddNamtab: ADDED 'idling' at iOffset=189610
hashAddNamtab: ADDED 'run_vm_sess' at iOffset=189618
hashAddNamtab: ADDED 'vi 256;' at iOffset=189630
hashAddNamtab: ADDED '#S440' at iOffset=189638
hashAddNamtab: ADDED 'ca' at iOffset=189644
hashAddNamtab: ADDED '#S441' at iOffset=189648
hashAddNamtab: ADDED 'flushing video memory please wait...
' at iOffset=189654
hashAddNamtab: ADDED '#S442' at iOffset=189692
hashAddNamtab: ADDED 'done!
' at iOffset=189698
hashAddNamtab: ADDED '#S443' at iOffset=189706
hashAddNamtab: ADDED 'dialog Choose_Task' at iOffset=189712
hashAddNamtab: ADDED '#S444' at iOffset=189732
postInstructionCompilation: Saving 'IDLE' nops=630 nInstructions=628 iInstruction=2 iInstructionCache=0
ICacheSave - PROCESS 'IDLE' Wrote 628 bytes from op[2..629] to instcach[111902..112529]
load_timer:  parse_errors=0
PCL - Calling fpload('ALL_PROS.pro') returned 0
PCL - Sorting symbol table..
mapop - PROCESS 'DEFAULT' reading 12548 bytes of instructions..
mapop - PROCESS 'DEFAULT' writing 12548 bytes of instructions..
ICacheSave - PROCESS 'DEFAULT' Wrote 12548 bytes from op[2..12549] to instcach[2..12549]
mapop - PROCESS 'GOODVARS' reading 1742 bytes of instructions..
mapop - PROCESS 'GOODVARS' writing 1742 bytes of instructions..
ICacheSave - PROCESS 'GOODVARS' Wrote 1742 bytes from op[2..1743] to instcach[12550..14291]
mapop - PROCESS 'STIM' reading 70 bytes of instructions..
mapop - PROCESS 'STIM' writing 70 bytes of instructions..
ICacheSave - PROCESS 'STIM' Wrote 70 bytes from op[2..71] to instcach[14292..14361]
mapop - PROCESS 'KEY_STIM' reading 16 bytes of instructions..
mapop - PROCESS 'KEY_STIM' writing 16 bytes of instructions..
ICacheSave - PROCESS 'KEY_STIM' Wrote 16 bytes from op[2..17] to instcach[14362..14377]
mapop - PROCESS 'SET_CLRS' reading 626 bytes of instructions..
mapop - PROCESS 'SET_CLRS' writing 626 bytes of instructions..
ICacheSave - PROCESS 'SET_CLRS' Wrote 626 bytes from op[2..627] to instcach[14378..15003]
mapop - PROCESS 'SET_COOR' reading 286 bytes of instructions..
mapop - PROCESS 'SET_COOR' writing 286 bytes of instructions..
ICacheSave - PROCESS 'SET_COOR' Wrote 286 bytes from op[2..287] to instcach[15004..15289]
mapop - PROCESS 'GRAPHS' reading 314 bytes of instructions..
mapop - PROCESS 'GRAPHS' writing 314 bytes of instructions..
ICacheSave - PROCESS 'GRAPHS' Wrote 314 bytes from op[2..315] to instcach[15290..15603]
mapop - PROCESS 'SET_INH' reading 798 bytes of instructions..
mapop - PROCESS 'SET_INH' writing 798 bytes of instructions..
ICacheSave - PROCESS 'SET_INH' Wrote 798 bytes from op[2..799] to instcach[15604..16401]
mapop - PROCESS 'SET_SOA' reading 656 bytes of instructions..
mapop - PROCESS 'SET_SOA' writing 656 bytes of instructions..
ICacheSave - PROCESS 'SET_SOA' Wrote 656 bytes from op[2..657] to instcach[16402..17057]
mapop - PROCESS 'SET_SCH' reading 98 bytes of instructions..
mapop - PROCESS 'SET_SCH' writing 98 bytes of instructions..
ICacheSave - PROCESS 'SET_SCH' Wrote 98 bytes from op[2..99] to instcach[17058..17155]
mapop - PROCESS 'WINDOWS' reading 680 bytes of instructions..
mapop - PROCESS 'WINDOWS' writing 680 bytes of instructions..
ICacheSave - PROCESS 'WINDOWS' Wrote 680 bytes from op[2..681] to instcach[17156..17835]
mapop - PROCESS 'LOCATE_I' reading 360 bytes of instructions..
mapop - PROCESS 'LOCATE_I' writing 360 bytes of instructions..
ICacheSave - PROCESS 'LOCATE_I' Wrote 360 bytes from op[2..361] to instcach[17836..18195]
mapop - PROCESS 'WATCHEYE' reading 686 bytes of instructions..
mapop - PROCESS 'WATCHEYE' writing 686 bytes of instructions..
ICacheSave - PROCESS 'WATCHEYE' Wrote 686 bytes from op[2..687] to instcach[18196..18881]
mapop - PROCESS 'TONE' reading 54 bytes of instructions..
mapop - PROCESS 'TONE' writing 54 bytes of instructions..
ICacheSave - PROCESS 'TONE' Wrote 54 bytes from op[2..55] to instcach[18882..18935]
mapop - PROCESS 'TONESWEP' reading 288 bytes of instructions..
mapop - PROCESS 'TONESWEP' writing 288 bytes of instructions..
ICacheSave - PROCESS 'TONESWEP' Wrote 288 bytes from op[2..289] to instcach[18936..19223]
mapop - PROCESS 'WATCHMTH' reading 404 bytes of instructions..
mapop - PROCESS 'WATCHMTH' writing 404 bytes of instructions..
ICacheSave - PROCESS 'WATCHMTH' Wrote 404 bytes from op[2..405] to instcach[19224..19627]
mapop - PROCESS 'WATCHBOD' reading 160 bytes of instructions..
mapop - PROCESS 'WATCHBOD' writing 160 bytes of instructions..
ICacheSave - PROCESS 'WATCHBOD' Wrote 160 bytes from op[2..161] to instcach[19628..19787]
mapop - PROCESS 'SVR_BELL' reading 180 bytes of instructions..
mapop - PROCESS 'SVR_BELL' writing 180 bytes of instructions..
ICacheSave - PROCESS 'SVR_BELL' Wrote 180 bytes from op[2..181] to instcach[19788..19967]
mapop - PROCESS 'SVR_BEL2' reading 20 bytes of instructions..
mapop - PROCESS 'SVR_BEL2' writing 20 bytes of instructions..
ICacheSave - PROCESS 'SVR_BEL2' Wrote 20 bytes from op[2..21] to instcach[19968..19987]
mapop - PROCESS 'CMDTRIAL' reading 2698 bytes of instructions..
mapop - PROCESS 'CMDTRIAL' writing 2698 bytes of instructions..
ICacheSave - PROCESS 'CMDTRIAL' Wrote 2698 bytes from op[2..2699] to instcach[19988..22685]
mapop - PROCESS 'MGTRIAL' reading 3692 bytes of instructions..
mapop - PROCESS 'MGTRIAL' writing 3692 bytes of instructions..
ICacheSave - PROCESS 'MGTRIAL' Wrote 3692 bytes from op[2..3693] to instcach[22686..26377]
mapop - PROCESS 'SCHTRIAL' reading 3844 bytes of instructions..
mapop - PROCESS 'SCHTRIAL' writing 3844 bytes of instructions..
ICacheSave - PROCESS 'SCHTRIAL' Wrote 3844 bytes from op[2..3845] to instcach[26378..30221]
mapop - PROCESS 'REP_ORT' reading 3364 bytes of instructions..
mapop - PROCESS 'REP_ORT' writing 3364 bytes of instructions..
ICacheSave - PROCESS 'REP_ORT' Wrote 3364 bytes from op[2..3365] to instcach[30222..33585]
mapop - PROCESS 'RAND_ORT' reading 1292 bytes of instructions..
mapop - PROCESS 'RAND_ORT' writing 1292 bytes of instructions..
ICacheSave - PROCESS 'RAND_ORT' Wrote 1292 bytes from op[2..1293] to instcach[33586..34877]
mapop - PROCESS 'LOC_REP' reading 36 bytes of instructions..
mapop - PROCESS 'LOC_REP' writing 36 bytes of instructions..
ICacheSave - PROCESS 'LOC_REP' Wrote 36 bytes from op[2..37] to instcach[34878..34913]
mapop - PROCESS 'RandomizeRepDistAngles' reading 110 bytes of instructions..
mapop - PROCESS 'RandomizeRepDistAngles' writing 110 bytes of instructions..
ICacheSave - PROCESS 'RandomizeRepDistAngles' Wrote 110 bytes from op[2..111] to instcach[34914..35023]
mapop - PROCESS 'RandomizeRepDistEccentricities' reading 110 bytes of instructions..
mapop - PROCESS 'RandomizeRepDistEccentricities' writing 110 bytes of instructions..
ICacheSave - PROCESS 'RandomizeRepDistEccentricities' Wrote 110 bytes from op[2..111] to instcach[35024..35133]
mapop - PROCESS 'RandomizeRepTargAngles' reading 110 bytes of instructions..
mapop - PROCESS 'RandomizeRepTargAngles' writing 110 bytes of instructions..
ICacheSave - PROCESS 'RandomizeRepTargAngles' Wrote 110 bytes from op[2..111] to instcach[35134..35243]
mapop - PROCESS 'REP1_LOC' reading 270 bytes of instructions..
mapop - PROCESS 'REP1_LOC' writing 270 bytes of instructions..
ICacheSave - PROCESS 'REP1_LOC' Wrote 270 bytes from op[2..271] to instcach[35244..35513]
mapop - PROCESS 'REP2_LOC' reading 270 bytes of instructions..
mapop - PROCESS 'REP2_LOC' writing 270 bytes of instructions..
ICacheSave - PROCESS 'REP2_LOC' Wrote 270 bytes from op[2..271] to instcach[35514..35783]
mapop - PROCESS 'REP3_LOC' reading 270 bytes of instructions..
mapop - PROCESS 'REP3_LOC' writing 270 bytes of instructions..
ICacheSave - PROCESS 'REP3_LOC' Wrote 270 bytes from op[2..271] to instcach[35784..36053]
mapop - PROCESS 'REP4_LOC' reading 270 bytes of instructions..
mapop - PROCESS 'REP4_LOC' writing 270 bytes of instructions..
ICacheSave - PROCESS 'REP4_LOC' Wrote 270 bytes from op[2..271] to instcach[36054..36323]
mapop - PROCESS 'REP5_LOC' reading 270 bytes of instructions..
mapop - PROCESS 'REP5_LOC' writing 270 bytes of instructions..
ICacheSave - PROCESS 'REP5_LOC' Wrote 270 bytes from op[2..271] to instcach[36324..36593]
mapop - PROCESS 'REP6_LOC' reading 270 bytes of instructions..
mapop - PROCESS 'REP6_LOC' writing 270 bytes of instructions..
ICacheSave - PROCESS 'REP6_LOC' Wrote 270 bytes from op[2..271] to instcach[36594..36863]
mapop - PROCESS 'RandomizeRanDistAngles' reading 110 bytes of instructions..
mapop - PROCESS 'RandomizeRanDistAngles' writing 110 bytes of instructions..
ICacheSave - PROCESS 'RandomizeRanDistAngles' Wrote 110 bytes from op[2..111] to instcach[36864..36973]
mapop - PROCESS 'RandomizeRanDistEccentricities' reading 110 bytes of instructions..
mapop - PROCESS 'RandomizeRanDistEccentricities' writing 110 bytes of instructions..
ICacheSave - PROCESS 'RandomizeRanDistEccentricities' Wrote 110 bytes from op[2..111] to instcach[36974..37083]
mapop - PROCESS 'RandomizeRanTargAngles' reading 110 bytes of instructions..
mapop - PROCESS 'RandomizeRanTargAngles' writing 110 bytes of instructions..
ICacheSave - PROCESS 'RandomizeRanTargAngles' Wrote 110 bytes from op[2..111] to instcach[37084..37193]
mapop - PROCESS 'LOC_RAND' reading 8296 bytes of instructions..
mapop - PROCESS 'LOC_RAND' writing 8296 bytes of instructions..
ICacheSave - PROCESS 'LOC_RAND' Wrote 8296 bytes from op[2..8297] to instcach[37194..45489]
mapop - PROCESS 'LOC_ASYM' reading 3924 bytes of instructions..
mapop - PROCESS 'LOC_ASYM' writing 3924 bytes of instructions..
ICacheSave - PROCESS 'LOC_ASYM' Wrote 3924 bytes from op[2..3925] to instcach[45490..49413]
mapop - PROCESS 'SEL_LOCS' reading 2834 bytes of instructions..
mapop - PROCESS 'SEL_LOCS' writing 2834 bytes of instructions..
ICacheSave - PROCESS 'SEL_LOCS' Wrote 2834 bytes from op[2..2835] to instcach[49414..52247]
mapop - PROCESS 'DRW_T' reading 1294 bytes of instructions..
mapop - PROCESS 'DRW_T' writing 1294 bytes of instructions..
ICacheSave - PROCESS 'DRW_T' Wrote 1294 bytes from op[2..1295] to instcach[52248..53541]
mapop - PROCESS 'DRW_L' reading 1350 bytes of instructions..
mapop - PROCESS 'DRW_L' writing 1350 bytes of instructions..
ICacheSave - PROCESS 'DRW_L' Wrote 1350 bytes from op[2..1351] to instcach[53542..54891]
mapop - PROCESS 'DRW_PLAC' reading 370 bytes of instructions..
mapop - PROCESS 'DRW_PLAC' writing 370 bytes of instructions..
ICacheSave - PROCESS 'DRW_PLAC' Wrote 370 bytes from op[2..371] to instcach[54892..55261]
mapop - PROCESS 'DRW_SQR' reading 380 bytes of instructions..
mapop - PROCESS 'DRW_SQR' writing 380 bytes of instructions..
ICacheSave - PROCESS 'DRW_SQR' Wrote 380 bytes from op[2..381] to instcach[55262..55641]
mapop - PROCESS 'FIX_PGS' reading 442 bytes of instructions..
mapop - PROCESS 'FIX_PGS' writing 442 bytes of instructions..
ICacheSave - PROCESS 'FIX_PGS' Wrote 442 bytes from op[2..443] to instcach[55642..56083]
mapop - PROCESS 'FLS_PGS' reading 506 bytes of instructions..
mapop - PROCESS 'FLS_PGS' writing 506 bytes of instructions..
ICacheSave - PROCESS 'FLS_PGS' Wrote 506 bytes from op[2..507] to instcach[56084..56589]
mapop - PROCESS 'CMD_PGS' reading 2046 bytes of instructions..
mapop - PROCESS 'CMD_PGS' writing 2046 bytes of instructions..
ICacheSave - PROCESS 'CMD_PGS' Wrote 2046 bytes from op[2..2047] to instcach[56590..58635]
mapop - PROCESS 'STAIR' reading 250 bytes of instructions..
mapop - PROCESS 'STAIR' writing 250 bytes of instructions..
ICacheSave - PROCESS 'STAIR' Wrote 250 bytes from op[2..251] to instcach[58636..58885]
mapop - PROCESS 'SETC_TRL' reading 730 bytes of instructions..
mapop - PROCESS 'SETC_TRL' writing 730 bytes of instructions..
ICacheSave - PROCESS 'SETC_TRL' Wrote 730 bytes from op[2..731] to instcach[58886..59615]
mapop - PROCESS 'MG_PGS' reading 2156 bytes of instructions..
mapop - PROCESS 'MG_PGS' writing 2156 bytes of instructions..
ICacheSave - PROCESS 'MG_PGS' Wrote 2156 bytes from op[2..2157] to instcach[59616..61771]
mapop - PROCESS 'SETMGTRL' reading 760 bytes of instructions..
mapop - PROCESS 'SETMGTRL' writing 760 bytes of instructions..
ICacheSave - PROCESS 'SETMGTRL' Wrote 760 bytes from op[2..761] to instcach[61772..62531]
mapop - PROCESS 'GNG_PGS' reading 2312 bytes of instructions..
mapop - PROCESS 'GNG_PGS' writing 2312 bytes of instructions..
ICacheSave - PROCESS 'GNG_PGS' Wrote 2312 bytes from op[2..2313] to instcach[62532..64843]
mapop - PROCESS 'SETG_TRL' reading 1014 bytes of instructions..
mapop - PROCESS 'SETG_TRL' writing 1014 bytes of instructions..
ICacheSave - PROCESS 'SETG_TRL' Wrote 1014 bytes from op[2..1015] to instcach[64844..65857]
mapop - PROCESS 'DEL_PGS' reading 1780 bytes of instructions..
mapop - PROCESS 'DEL_PGS' writing 1780 bytes of instructions..
ICacheSave - PROCESS 'DEL_PGS' Wrote 1780 bytes from op[2..1781] to instcach[65858..67637]
mapop - PROCESS 'SETD_TRL' reading 510 bytes of instructions..
mapop - PROCESS 'SETD_TRL' writing 510 bytes of instructions..
ICacheSave - PROCESS 'SETD_TRL' Wrote 510 bytes from op[2..511] to instcach[67638..68147]
mapop - PROCESS 'TSCH_PGS' reading 7982 bytes of instructions..
mapop - PROCESS 'TSCH_PGS' writing 7982 bytes of instructions..
ICacheSave - PROCESS 'TSCH_PGS' Wrote 7982 bytes from op[2..7983] to instcach[68148..76129]
mapop - PROCESS 'LSCH_PGS' reading 7982 bytes of instructions..
mapop - PROCESS 'LSCH_PGS' writing 7982 bytes of instructions..
ICacheSave - PROCESS 'LSCH_PGS' Wrote 7982 bytes from op[2..7983] to instcach[76130..84111]
mapop - PROCESS 'SETS_TRL' reading 1622 bytes of instructions..
mapop - PROCESS 'SETS_TRL' writing 1622 bytes of instructions..
ICacheSave - PROCESS 'SETS_TRL' Wrote 1622 bytes from op[2..1623] to instcach[84112..85733]
mapop - PROCESS 'GNGTRIAL' reading 2780 bytes of instructions..
mapop - PROCESS 'GNGTRIAL' writing 2780 bytes of instructions..
ICacheSave - PROCESS 'GNGTRIAL' Wrote 2780 bytes from op[2..2781] to instcach[85734..88513]
mapop - PROCESS 'DELTRIAL' reading 1726 bytes of instructions..
mapop - PROCESS 'DELTRIAL' writing 1726 bytes of instructions..
ICacheSave - PROCESS 'DELTRIAL' Wrote 1726 bytes from op[2..1727] to instcach[88514..90239]
mapop - PROCESS 'UPD8_INH' reading 1976 bytes of instructions..
mapop - PROCESS 'UPD8_INH' writing 1976 bytes of instructions..
ICacheSave - PROCESS 'UPD8_INH' Wrote 1976 bytes from op[2..1977] to instcach[90240..92215]
mapop - PROCESS 'UPD8_SOA' reading 1952 bytes of instructions..
mapop - PROCESS 'UPD8_SOA' writing 1952 bytes of instructions..
ICacheSave - PROCESS 'UPD8_SOA' Wrote 1952 bytes from op[2..1953] to instcach[92216..94167]
mapop - PROCESS 'UPD8_SCH' reading 792 bytes of instructions..
mapop - PROCESS 'UPD8_SCH' writing 792 bytes of instructions..
ICacheSave - PROCESS 'UPD8_SCH' Wrote 792 bytes from op[2..793] to instcach[94168..94959]
mapop - PROCESS 'INFOS' reading 4358 bytes of instructions..
mapop - PROCESS 'INFOS' writing 4358 bytes of instructions..
ICacheSave - PROCESS 'INFOS' Wrote 4358 bytes from op[2..4359] to instcach[94960..99317]
mapop - PROCESS 'ABORT' reading 688 bytes of instructions..
mapop - PROCESS 'ABORT' writing 688 bytes of instructions..
ICacheSave - PROCESS 'ABORT' Wrote 688 bytes from op[2..689] to instcach[99318..100005]
mapop - PROCESS 'JUICE' reading 44 bytes of instructions..
mapop - PROCESS 'JUICE' writing 44 bytes of instructions..
ICacheSave - PROCESS 'JUICE' Wrote 44 bytes from op[2..45] to instcach[100006..100049]
mapop - PROCESS 'SUCCESS' reading 1202 bytes of instructions..
mapop - PROCESS 'SUCCESS' writing 1202 bytes of instructions..
ICacheSave - PROCESS 'SUCCESS' Wrote 1202 bytes from op[2..1203] to instcach[100050..101251]
mapop - PROCESS 'FAILURE' reading 992 bytes of instructions..
mapop - PROCESS 'FAILURE' writing 992 bytes of instructions..
ICacheSave - PROCESS 'FAILURE' Wrote 992 bytes from op[2..993] to instcach[101252..102243]
mapop - PROCESS 'END_TRL' reading 1636 bytes of instructions..
mapop - PROCESS 'END_TRL' writing 1636 bytes of instructions..
ICacheSave - PROCESS 'END_TRL' Wrote 1636 bytes from op[2..1637] to instcach[102244..103879]
mapop - PROCESS 'KEY_REWD' reading 190 bytes of instructions..
mapop - PROCESS 'KEY_REWD' writing 190 bytes of instructions..
ICacheSave - PROCESS 'KEY_REWD' Wrote 190 bytes from op[2..191] to instcach[103880..104069]
mapop - PROCESS 'KEY_T_UP' reading 50 bytes of instructions..
mapop - PROCESS 'KEY_T_UP' writing 50 bytes of instructions..
ICacheSave - PROCESS 'KEY_T_UP' Wrote 50 bytes from op[2..51] to instcach[104070..104119]
mapop - PROCESS 'KEY_T_DN' reading 68 bytes of instructions..
mapop - PROCESS 'KEY_T_DN' writing 68 bytes of instructions..
ICacheSave - PROCESS 'KEY_T_DN' Wrote 68 bytes from op[2..69] to instcach[104120..104187]
mapop - PROCESS 'FIXTRIAL' reading 470 bytes of instructions..
mapop - PROCESS 'FIXTRIAL' writing 470 bytes of instructions..
ICacheSave - PROCESS 'FIXTRIAL' Wrote 470 bytes from op[2..471] to instcach[104188..104657]
mapop - PROCESS 'FIXATION' reading 1032 bytes of instructions..
mapop - PROCESS 'FIXATION' writing 1032 bytes of instructions..
ICacheSave - PROCESS 'FIXATION' Wrote 1032 bytes from op[2..1033] to instcach[104658..105689]
mapop - PROCESS 'CMANDING' reading 990 bytes of instructions..
mapop - PROCESS 'CMANDING' writing 990 bytes of instructions..
ICacheSave - PROCESS 'CMANDING' Wrote 990 bytes from op[2..991] to instcach[105690..106679]
mapop - PROCESS 'MGUIDE' reading 938 bytes of instructions..
mapop - PROCESS 'MGUIDE' writing 938 bytes of instructions..
ICacheSave - PROCESS 'MGUIDE' Wrote 938 bytes from op[2..939] to instcach[106680..107617]
mapop - PROCESS 'GONOGO' reading 822 bytes of instructions..
mapop - PROCESS 'GONOGO' writing 822 bytes of instructions..
ICacheSave - PROCESS 'GONOGO' Wrote 822 bytes from op[2..823] to instcach[107618..108439]
mapop - PROCESS 'DELAYED' reading 802 bytes of instructions..
mapop - PROCESS 'DELAYED' writing 802 bytes of instructions..
ICacheSave - PROCESS 'DELAYED' Wrote 802 bytes from op[2..803] to instcach[108440..109241]
mapop - PROCESS 'SEARCH' reading 1110 bytes of instructions..
mapop - PROCESS 'SEARCH' writing 1110 bytes of instructions..
ICacheSave - PROCESS 'SEARCH' Wrote 1110 bytes from op[2..1111] to instcach[109242..110351]
mapop - PROCESS 'FLSHSCRN' reading 1162 bytes of instructions..
mapop - PROCESS 'FLSHSCRN' writing 1162 bytes of instructions..
ICacheSave - PROCESS 'FLSHSCRN' Wrote 1162 bytes from op[2..1163] to instcach[110352..111513]
mapop - PROCESS 'WAIT_MU' reading 100 bytes of instructions..
mapop - PROCESS 'WAIT_MU' writing 100 bytes of instructions..
ICacheSave - PROCESS 'WAIT_MU' Wrote 100 bytes from op[2..101] to instcach[111514..111613]
mapop - PROCESS 'SEND_TTL' reading 138 bytes of instructions..
mapop - PROCESS 'SEND_TTL' writing 138 bytes of instructions..
ICacheSave - PROCESS 'SEND_TTL' Wrote 138 bytes from op[2..139] to instcach[111614..111751]
mapop - PROCESS 'QUE_TTL' reading 150 bytes of instructions..
mapop - PROCESS 'QUE_TTL' writing 150 bytes of instructions..
ICacheSave - PROCESS 'QUE_TTL' Wrote 150 bytes from op[2..151] to instcach[111752..111901]
mapop - PROCESS 'IDLE' reading 628 bytes of instructions..
mapop - PROCESS 'IDLE' writing 628 bytes of instructions..
ICacheSave - PROCESS 'IDLE' Wrote 628 bytes from op[2..629] to instcach[111902..112529]
Protocol File    : ALL_PROS.pro
Error File       : ALL_PROS.err
Compiled         : Fri Dec 16 09:56:21 2016

Default Hz       : 1000.000
Default Sets     :     2
Symbol Table     :  2372/4000  ( 59 %)
Name Table       : 189738/318464 ( 59 %)
Hash Table       :  1034/4000  ( 25 %)
Array Table      :   218/30000 (  0 %)
Array Data       :  5100/250880 (  2 %)
Instructions     : 112528/126000 ( 89 %)
InstructionsXMS  :  disabled
Processes        :    84/150   ( 56 %)
Pragma           : declare=1
Pragma           : optimize=15
Pragma           : display_optimizations=0
Pragma           : assume_local_scope=0
Pragma           : multipleinclude=0
Optimizations
 UnOpt Assign    : 4505
 Math Assign     : 517 (reduced code)
 Func Assign     : 106 (reduced code)
 Numeric Expr    : 466 (reduced code)
0 errors detected.
SYMBOL TABLE (2372/4000)

iSYM  iNAM  Proc  Scope Type                Attributes                Symbol
----- ----- ----- ----- ---- ---------------------------------------- -------------
   1:    44     0     0 flot           TEMP      HDDN                 #F0 =0.000000 (0x00000000)
   2:    86     0     0 flot           TEMP      HDDN                 #F1 =0.000000 (0x00000000)
   3:   128     0     0 flot           TEMP      HDDN                 #F2 =0.000000 (0x00000000)
   4:   170     0     0 flot           TEMP      HDDN                 #F3 =0.000000 (0x00000000)
   5:   212     0     0 flot           TEMP      HDDN                 #F4 =0.000000 (0x00000000)
   6:   254     0     0 flot           TEMP      HDDN                 #F5 =0.000000 (0x00000000)
   7:   296     0     0 long CONS           INIT HDDN                 #I-1 =-1 (0xFFFFFFFF)
   8:   338     0     0 long CONS           INIT HDDN                 #I-1000 =-1000 (0xFFFFFC18)
   9:   380     0     0 long CONS           INIT HDDN                 #I-135 =-135 (0xFFFFFF79)
  10:   422     0     0 long CONS           INIT HDDN                 #I-2 =-2 (0xFFFFFFFE)
  11:   464     0     0 long CONS           INIT HDDN                 #I-25 =-25 (0xFFFFFFE7)
  12:   506     0     0 long CONS           INIT HDDN                 #I-256 =-256 (0xFFFFFF00)
  13:   548     0     0 long CONS           INIT HDDN                 #I-300 =-300 (0xFFFFFED4)
  14:   590     0     0 long CONS           INIT HDDN                 #I-45 =-45 (0xFFFFFFD3)
  15:   632     0     0 long CONS           INIT HDDN                 #I-90 =-90 (0xFFFFFFA6)
  16:   674     0     0 long CONS           INIT HDDN                 #I0 =0 (0x00000000)
  17:   716     0     0 long CONS           INIT HDDN                 #I1 =1 (0x00000001)
  18:   758     0     0 long CONS           INIT HDDN                 #I10 =10 (0x0000000A)
  19:   800     0     0 long CONS           INIT HDDN                 #I100 =100 (0x00000064)
  20:   842     0     0 long CONS           INIT HDDN                 #I1000 =1000 (0x000003E8)
  21:   884     0     0 long CONS           INIT HDDN                 #I10000 =10000 (0x00002710)
  22:   926     0     0 long CONS           INIT HDDN                 #I10000000 =10000000 (0x00989680)
  23:   968     0     0 long CONS           INIT HDDN                 #I1001 =1001 (0x000003E9)
  24:  1010     0     0 long CONS           INIT HDDN                 #I1025 =1025 (0x00000401)
  25:  1052     0     0 long CONS           INIT HDDN                 #I1050 =1050 (0x0000041A)
  26:  1094     0     0 long CONS           INIT HDDN                 #I1099 =1099 (0x0000044B)
  27:  1136     0     0 long CONS           INIT HDDN                 #I11 =11 (0x0000000B)
  28:  1178     0     0 long CONS           INIT HDDN                 #I1100 =1100 (0x0000044C)
  29:  1220     0     0 long CONS           INIT HDDN                 #I1111 =1111 (0x00000457)
  30:  1262     0     0 long CONS           INIT HDDN                 #I12 =12 (0x0000000C)
  31:  1304     0     0 long CONS           INIT HDDN                 #I120 =120 (0x00000078)
  32:  1346     0     0 long CONS           INIT HDDN                 #I1200 =1200 (0x000004B0)
  33:  1388     0     0 long CONS           INIT HDDN                 #I128 =128 (0x00000080)
  34:  1430     0     0 long CONS           INIT HDDN                 #I13 =13 (0x0000000D)
  35:  1472     0     0 long CONS           INIT HDDN                 #I1300 =1300 (0x00000514)
  36:  1514     0     0 long CONS           INIT HDDN                 #I135 =135 (0x00000087)
  37:  1556     0     0 long CONS           INIT HDDN                 #I1350 =1350 (0x00000546)
  38:  1598     0     0 long CONS           INIT HDDN                 #I14 =14 (0x0000000E)
  39:  1640     0     0 long CONS           INIT HDDN                 #I140 =140 (0x0000008C)
  40:  1682     0     0 long CONS           INIT HDDN                 #I1400 =1400 (0x00000578)
  41:  1724     0     0 long CONS           INIT HDDN                 #I15 =15 (0x0000000F)
  42:  1766     0     0 long CONS           INIT HDDN                 #I150 =150 (0x00000096)
  43:  1808     0     0 long CONS           INIT HDDN                 #I1500 =1500 (0x000005DC)
  44:  1850     0     0 long CONS           INIT HDDN                 #I16 =16 (0x00000010)
  45:  1892     0     0 long CONS           INIT HDDN                 #I1600 =1600 (0x00000640)
  46:  1934     0     0 long CONS           INIT HDDN                 #I16000 =16000 (0x00003E80)
  47:  1976     0     0 long CONS           INIT HDDN                 #I17 =17 (0x00000011)
  48:  2018     0     0 long CONS           INIT HDDN                 #I175 =175 (0x000000AF)
  49:  2060     0     0 long CONS           INIT HDDN                 #I18 =18 (0x00000012)
  50:  2102     0     0 long CONS           INIT HDDN                 #I180 =180 (0x000000B4)
  51:  2144     0     0 long CONS           INIT HDDN                 #I1800 =1800 (0x00000708)
  52:  2186     0     0 long CONS           INIT HDDN                 #I19 =19 (0x00000013)
  53:  2228     0     0 long CONS           INIT HDDN                 #I2 =2 (0x00000002)
  54:  2270     0     0 long CONS           INIT HDDN                 #I20 =20 (0x00000014)
  55:  2312     0     0 long CONS           INIT HDDN                 #I200 =200 (0x000000C8)
  56:  2354     0     0 long CONS           INIT HDDN                 #I2000 =2000 (0x000007D0)
  57:  2396     0     0 long CONS           INIT HDDN                 #I200000 =200000 (0x00030D40)
  58:  2438     0     0 long CONS           INIT HDDN                 #I21 =21 (0x00000015)
  59:  2480     0     0 long CONS           INIT HDDN                 #I210 =210 (0x000000D2)
  60:  2522     0     0 long CONS           INIT HDDN                 #I22 =22 (0x00000016)
  61:  2564     0     0 long CONS           INIT HDDN                 #I2222 =2222 (0x000008AE)
  62:  2606     0     0 long CONS           INIT HDDN                 #I225 =225 (0x000000E1)
  63:  2648     0     0 long CONS           INIT HDDN                 #I23 =23 (0x00000017)
  64:  2690     0     0 long CONS           INIT HDDN                 #I240 =240 (0x000000F0)
  65:  2732     0     0 long CONS           INIT HDDN                 #I25 =25 (0x00000019)
  66:  2774     0     0 long CONS           INIT HDDN                 #I250 =250 (0x000000FA)
  67:  2816     0     0 long CONS           INIT HDDN                 #I251 =251 (0x000000FB)
  68:  2858     0     0 long CONS           INIT HDDN                 #I255 =255 (0x000000FF)
  69:  2900     0     0 long CONS           INIT HDDN                 #I27 =27 (0x0000001B)
  70:  2942     0     0 long CONS           INIT HDDN                 #I270 =270 (0x0000010E)
  71:  2984     0     0 long CONS           INIT HDDN                 #I2730 =2730 (0x00000AAA)
  72:  3026     0     0 long CONS           INIT HDDN                 #I28 =28 (0x0000001C)
  73:  3068     0     0 long CONS           INIT HDDN                 #I29 =29 (0x0000001D)
  74:  3110     0     0 long CONS           INIT HDDN                 #I3 =3 (0x00000003)
  75:  3152     0     0 long CONS           INIT HDDN                 #I30 =30 (0x0000001E)
  76:  3194     0     0 long CONS           INIT HDDN                 #I300 =300 (0x0000012C)
  77:  3236     0     0 long CONS           INIT HDDN                 #I315 =315 (0x0000013B)
  78:  3278     0     0 long CONS           INIT HDDN                 #I3200 =3200 (0x00000C80)
  79:  3320     0     0 long CONS           INIT HDDN                 #I32000 =32000 (0x00007D00)
  80:  3362     0     0 long CONS           INIT HDDN                 #I33 =33 (0x00000021)
  81:  3404     0     0 long CONS           INIT HDDN                 #I330 =330 (0x0000014A)
  82:  3446     0     0 long CONS           INIT HDDN                 #I35 =35 (0x00000023)
  83:  3488     0     0 long CONS           INIT HDDN                 #I350 =350 (0x0000015E)
  84:  3530     0     0 long CONS           INIT HDDN                 #I36 =36 (0x00000024)
  85:  3572     0     0 long CONS           INIT HDDN                 #I38 =38 (0x00000026)
  86:  3614     0     0 long CONS           INIT HDDN                 #I3800 =3800 (0x00000ED8)
  87:  3656     0     0 long CONS           INIT HDDN                 #I4 =4 (0x00000004)
  88:  3698     0     0 long CONS           INIT HDDN                 #I40 =40 (0x00000028)
  89:  3740     0     0 long CONS           INIT HDDN                 #I400 =400 (0x00000190)
  90:  3782     0     0 long CONS           INIT HDDN                 #I4000 =4000 (0x00000FA0)
  91:  3824     0     0 long CONS           INIT HDDN                 #I4001 =4001 (0x00000FA1)
  92:  3866     0     0 long CONS           INIT HDDN                 #I4050 =4050 (0x00000FD2)
  93:  3908     0     0 long CONS           INIT HDDN                 #I4060 =4060 (0x00000FDC)
  94:  3950     0     0 long CONS           INIT HDDN                 #I4100 =4100 (0x00001004)
  95:  3992     0     0 long CONS           INIT HDDN                 #I4150 =4150 (0x00001036)
  96:  4034     0     0 long CONS           INIT HDDN                 #I4200 =4200 (0x00001068)
  97:  4076     0     0 long CONS           INIT HDDN                 #I4250 =4250 (0x0000109A)
  98:  4118     0     0 long CONS           INIT HDDN                 #I43 =43 (0x0000002B)
  99:  4160     0     0 long CONS           INIT HDDN                 #I45 =45 (0x0000002D)
 100:  4202     0     0 long CONS           INIT HDDN                 #I450 =450 (0x000001C2)
 101:  4244     0     0 long CONS           INIT HDDN                 #I4650 =4650 (0x0000122A)
 102:  4286     0     0 long CONS           INIT HDDN                 #I4660 =4660 (0x00001234)
 103:  4328     0     0 long CONS           INIT HDDN                 #I4670 =4670 (0x0000123E)
 104:  4370     0     0 long CONS           INIT HDDN                 #I4680 =4680 (0x00001248)
 105:  4412     0     0 long CONS           INIT HDDN                 #I4690 =4690 (0x00001252)
 106:  4454     0     0 long CONS           INIT HDDN                 #I4700 =4700 (0x0000125C)
 107:  4496     0     0 long CONS           INIT HDDN                 #I4790 =4790 (0x000012B6)
 108:  4538     0     0 long CONS           INIT HDDN                 #I48 =48 (0x00000030)
 109:  4580     0     0 long CONS           INIT HDDN                 #I4800 =4800 (0x000012C0)
 110:  4622     0     0 long CONS           INIT HDDN                 #I4900 =4900 (0x00001324)
 111:  4664     0     0 long CONS           INIT HDDN                 #I5 =5 (0x00000005)
 112:  4706     0     0 long CONS           INIT HDDN                 #I50 =50 (0x00000032)
 113:  4748     0     0 long CONS           INIT HDDN                 #I500 =500 (0x000001F4)
 114:  4790     0     0 long CONS           INIT HDDN                 #I5000 =5000 (0x00001388)
 115:  4832     0     0 long CONS           INIT HDDN                 #I501 =501 (0x000001F5)
 116:  4874     0     0 long CONS           INIT HDDN                 #I5100 =5100 (0x000013EC)
 117:  4916     0     0 long CONS           INIT HDDN                 #I53 =53 (0x00000035)
 118:  4958     0     0 long CONS           INIT HDDN                 #I5500 =5500 (0x0000157C)
 119:  5000     0     0 long CONS           INIT HDDN                 #I59 =59 (0x0000003B)
 120:  5042     0     0 long CONS           INIT HDDN                 #I6 =6 (0x00000006)
 121:  5084     0     0 long CONS           INIT HDDN                 #I60 =60 (0x0000003C)
 122:  5126     0     0 long CONS           INIT HDDN                 #I600 =600 (0x00000258)
 123:  5168     0     0 long CONS           INIT HDDN                 #I6000 =6000 (0x00001770)
 124:  5210     0     0 long CONS           INIT HDDN                 #I60000 =60000 (0x0000EA60)
 125:  5252     0     0 long CONS           INIT HDDN                 #I600000 =600000 (0x000927C0)
 126:  5294     0     0 long CONS           INIT HDDN                 #I63 =63 (0x0000003F)
 127:  5336     0     0 long CONS           INIT HDDN                 #I64000 =64000 (0x0000FA00)
 128:  5378     0     0 long CONS           INIT HDDN                 #I65535 =65535 (0x0000FFFF)
 129:  5420     0     0 long CONS           INIT HDDN                 #I7 =7 (0x00000007)
 130:  5462     0     0 long CONS           INIT HDDN                 #I70 =70 (0x00000046)
 131:  5504     0     0 long CONS           INIT HDDN                 #I700 =700 (0x000002BC)
 132:  5546     0     0 long CONS           INIT HDDN                 #I750 =750 (0x000002EE)
 133:  5588     0     0 long CONS           INIT HDDN                 #I8 =8 (0x00000008)
 134:  5630     0     0 long CONS           INIT HDDN                 #I80 =80 (0x00000050)
 135:  5672     0     0 long CONS           INIT HDDN                 #I800 =800 (0x00000320)
 136:  5714     0     0 long CONS           INIT HDDN                 #I8000 =8000 (0x00001F40)
 137:  5756     0     0 long CONS           INIT HDDN                 #I8100 =8100 (0x00001FA4)
 138:  5798     0     0 long CONS           INIT HDDN                 #I8200 =8200 (0x00002008)
 139:  5840     0     0 long CONS           INIT HDDN                 #I8888 =8888 (0x000022B8)
 140:  5882     0     0 long CONS           INIT HDDN                 #I9 =9 (0x00000009)
 141:  5924     0     0 long CONS           INIT HDDN                 #I90 =90 (0x0000005A)
 142:  5966     0     0 long CONS           INIT HDDN                 #I900 =900 (0x00000384)
 143:  6008     0     0 long CONS           INIT HDDN                 #I999 =999 (0x000003E7)
 144:  6050     0     0 long CONS           INIT HDDN                 #I9999 =9999 (0x0000270F)
 145:  6092     0     0 long           TEMP      HDDN                 #L0 =0 (0x00000000)
 146:  6134     0     0 long           TEMP      HDDN                 #L1 =0 (0x00000000)
 147:  6176     0     0 long           TEMP      HDDN                 #L10 =0 (0x00000000)
 148:  6218     0     0 long           TEMP      HDDN                 #L11 =0 (0x00000000)
 149:  6260     0     0 long           TEMP      HDDN                 #L12 =0 (0x00000000)
 150:  6302     0     0 long           TEMP      HDDN                 #L13 =0 (0x00000000)
 151:  6344     0     0 long           TEMP      HDDN                 #L14 =0 (0x00000000)
 152:  6386     0     0 long           TEMP      HDDN                 #L15 =0 (0x00000000)
 153:  6428     0     0 long           TEMP      HDDN                 #L16 =0 (0x00000000)
 154:  6470     0     0 long           TEMP      HDDN                 #L17 =0 (0x00000000)
 155:  6512     0     0 long           TEMP      HDDN                 #L18 =0 (0x00000000)
 156:  6554     0     0 long           TEMP      HDDN                 #L2 =0 (0x00000000)
 157:  6596     0     0 long           TEMP      HDDN                 #L3 =0 (0x00000000)
 158:  6638     0     0 long           TEMP      HDDN                 #L4 =0 (0x00000000)
 159:  6680     0     0 long           TEMP      HDDN                 #L5 =0 (0x00000000)
 160:  6722     0     0 long           TEMP      HDDN                 #L6 =0 (0x00000000)
 161:  6764     0     0 long           TEMP      HDDN                 #L7 =0 (0x00000000)
 162:  6806     0     0 long           TEMP      HDDN                 #L8 =0 (0x00000000)
 163:  6848     0     0 long           TEMP      HDDN                 #L9 =0 (0x00000000)
 164:  6890     0     0 flot CONS           INIT HDDN                 #M00000000 =0.000000 (0x00000000)
 165:  6932     0     0 flot CONS           INIT HDDN                 #M3E800000 =0.250000 (0x3E800000)
 166:  6974     0     0 flot CONS           INIT HDDN                 #M3F000000 =0.500000 (0x3F000000)
 167:  7016     0     0 flot CONS           INIT HDDN                 #M3F800000 =1.000000 (0x3F800000)
 168:  7058     0     0 flot CONS           INIT HDDN                 #M3F989375 =1.192000 (0x3F989375)
 169:  7100     0     0 flot CONS           INIT HDDN                 #M3FC00000 =1.500000 (0x3FC00000)
 170:  7142     0     0 flot CONS           INIT HDDN                 #M40000000 =2.000000 (0x40000000)
 171:  7184     0     0 flot CONS           INIT HDDN                 #M40200000 =2.500000 (0x40200000)
 172:  7226     0     0 flot CONS           INIT HDDN                 #M40400000 =3.000000 (0x40400000)
 173:  7268     0     0 flot CONS           INIT HDDN                 #M40600000 =3.500000 (0x40600000)
 174:  7310     0     0 flot CONS           INIT HDDN                 #M40800000 =4.000000 (0x40800000)
 175:  7352     0     0 flot CONS           INIT HDDN                 #M40A00000 =5.000000 (0x40A00000)
 176:  7394     0     0 flot CONS           INIT HDDN                 #M40C00000 =6.000000 (0x40C00000)
 177:  7436     0     0 flot CONS           INIT HDDN                 #M41000000 =8.000000 (0x41000000)
 178:  7478     0     0 flot CONS           INIT HDDN                 #M41100000 =9.000000 (0x41100000)
 179:  7520     0     0 flot CONS           INIT HDDN                 #M41300000 =11.000000 (0x41300000)
 180:  7562     0     0 flot CONS           INIT HDDN                 #M41400000 =12.000000 (0x41400000)
 181:  7604     0     0 flot CONS           INIT HDDN                 #M41500000 =13.000000 (0x41500000)
 182:  7646     0     0 flot CONS           INIT HDDN                 #M41649249 =14.285714 (0x41649249)
 183:  7688     0     0 flot CONS           INIT HDDN                 #M4179999A =15.600000 (0x4179999A)
 184:  7730     0     0 flot CONS           INIT HDDN                 #M41900000 =18.000000 (0x41900000)
 185:  7772     0     0 flot CONS           INIT HDDN                 #M41B80000 =23.000000 (0x41B80000)
 186:  7814     0     0 flot CONS           INIT HDDN                 #M41E00000 =28.000000 (0x41E00000)
 187:  7856     0     0 flot CONS           INIT HDDN                 #M41F00000 =30.000000 (0x41F00000)
 188:  7898     0     0 flot CONS           INIT HDDN                 #M42040000 =33.000000 (0x42040000)
 189:  7940     0     0 flot CONS           INIT HDDN                 #M42180000 =38.000000 (0x42180000)
 190:  7982     0     0 flot CONS           INIT HDDN                 #M42200000 =40.000000 (0x42200000)
 191:  8024     0     0 flot CONS           INIT HDDN                 #M422C0000 =43.000000 (0x422C0000)
 192:  8066     0     0 flot CONS           INIT HDDN                 #M42340000 =45.000000 (0x42340000)
 193:  8108     0     0 flot CONS           INIT HDDN                 #M42400000 =48.000000 (0x42400000)
 194:  8150     0     0 flot CONS           INIT HDDN                 #M42480000 =50.000000 (0x42480000)
 195:  8192     0     0 flot CONS           INIT HDDN                 #M42540000 =53.000000 (0x42540000)
 196:  8234     0     0 flot CONS           INIT HDDN                 #M42700000 =60.000000 (0x42700000)
 197:  8276     0     0 flot CONS           INIT HDDN                 #M427C0000 =63.000000 (0x427C0000)
 198:  8318     0     0 flot CONS           INIT HDDN                 #M428C0000 =70.000000 (0x428C0000)
 199:  8360     0     0 flot CONS           INIT HDDN                 #M42A00000 =80.000000 (0x42A00000)
 200:  8402     0     0 flot CONS           INIT HDDN                 #M42B40000 =90.000000 (0x42B40000)
 201:  8444     0     0 flot CONS           INIT HDDN                 #M42C80000 =100.000000 (0x42C80000)
 202:  8486     0     0 flot CONS           INIT HDDN                 #M42F00000 =120.000000 (0x42F00000)
 203:  8528     0     0 flot CONS           INIT HDDN                 #M43070000 =135.000000 (0x43070000)
 204:  8570     0     0 flot CONS           INIT HDDN                 #M43160000 =150.000000 (0x43160000)
 205:  8612     0     0 flot CONS           INIT HDDN                 #M43340000 =180.000000 (0x43340000)
 206:  8654     0     0 flot CONS           INIT HDDN                 #M43480000 =200.000000 (0x43480000)
 207:  8696     0     0 flot CONS           INIT HDDN                 #M43520000 =210.000000 (0x43520000)
 208:  8738     0     0 flot CONS           INIT HDDN                 #M43610000 =225.000000 (0x43610000)
 209:  8780     0     0 flot CONS           INIT HDDN                 #M43700000 =240.000000 (0x43700000)
 210:  8822     0     0 flot CONS           INIT HDDN                 #M437A0000 =250.000000 (0x437A0000)
 211:  8864     0     0 flot CONS           INIT HDDN                 #M43870000 =270.000000 (0x43870000)
 212:  8906     0     0 flot CONS           INIT HDDN                 #M43960000 =300.000000 (0x43960000)
 213:  8948     0     0 flot CONS           INIT HDDN                 #M439D8000 =315.000000 (0x439D8000)
 214:  8990     0     0 flot CONS           INIT HDDN                 #M43A50000 =330.000000 (0x43A50000)
 215:  9032     0     0 flot CONS           INIT HDDN                 #M43AF0000 =350.000000 (0x43AF0000)
 216:  9074     0     0 flot CONS           INIT HDDN                 #M43C80000 =400.000000 (0x43C80000)
 217:  9116     0     0 flot CONS           INIT HDDN                 #M43DC0000 =440.000000 (0x43DC0000)
 218:  9158     0     0 flot CONS           INIT HDDN                 #M43DE8000 =445.000000 (0x43DE8000)
 219:  9200     0     0 flot CONS           INIT HDDN                 #M43E10000 =450.000000 (0x43E10000)
 220:  9242     0     0 flot CONS           INIT HDDN                 #M43E48000 =457.000000 (0x43E48000)
 221:  9284     0     0 flot CONS           INIT HDDN                 #M43FA0000 =500.000000 (0x43FA0000)
 222:  9326     0     0 flot CONS           INIT HDDN                 #M4405C000 =535.000000 (0x4405C000)
 223:  9368     0     0 flot CONS           INIT HDDN                 #M44160000 =600.000000 (0x44160000)
 224:  9410     0     0 flot CONS           INIT HDDN                 #M443B8000 =750.000000 (0x443B8000)
 225:  9452     0     0 flot CONS           INIT HDDN                 #M44610000 =900.000000 (0x44610000)
 226:  9494     0     0 flot CONS           INIT HDDN                 #M447A0000 =1000.000000 (0x447A0000)
 227:  9536     0     0 flot CONS           INIT HDDN                 #M44834000 =1050.000000 (0x44834000)
 228:  9578     0     0 flot CONS           INIT HDDN                 #M44898000 =1100.000000 (0x44898000)
 229:  9620     0     0 flot CONS           INIT HDDN                 #M44960000 =1200.000000 (0x44960000)
 230:  9662     0     0 flot CONS           INIT HDDN                 #M44A28000 =1300.000000 (0x44A28000)
 231:  9704     0     0 flot CONS           INIT HDDN                 #M44A8C000 =1350.000000 (0x44A8C000)
 232:  9746     0     0 flot CONS           INIT HDDN                 #M44AF0000 =1400.000000 (0x44AF0000)
 233:  9788     0     0 flot CONS           INIT HDDN                 #M44C80000 =1600.000000 (0x44C80000)
 234:  9830     0     0 flot CONS           INIT HDDN                 #M44E10000 =1800.000000 (0x44E10000)
 235:  9872     0     0 flot CONS           INIT HDDN                 #M44FA0000 =2000.000000 (0x44FA0000)
 236:  9914     0     0 flot CONS           INIT HDDN                 #MBF800000 =-1.000000 (0xBF800000)
 237:  9956     0     0 flot CONS           INIT HDDN                 #MC2340000 =-45.000000 (0xC2340000)
 238:  9998     0     0 flot CONS           INIT HDDN                 #MC2B40000 =-90.000000 (0xC2B40000)
 239: 10040     0     0 flot CONS           INIT HDDN                 #MC3070000 =-135.000000 (0xC3070000)
 240: 10082     0     0 flot CONS           INIT HDDN                 #MC3A6AA3D =-333.329987 (0xC3A6AA3D)
 241: 10124     0     0 long           TEMP      HDDN                 #P1 =0 (0x00000000)
 242: 10166     0     0 long           TEMP      HDDN                 #P10 =0 (0x00000000)
 243: 10208     0     0 long           TEMP      HDDN                 #P13 =0 (0x00000000)
 244: 10250     0     0 long           TEMP      HDDN                 #P14 =0 (0x00000000)
 245: 10292     0     0 long           TEMP      HDDN                 #P15 =0 (0x00000000)
 246: 10334     0     0 long           TEMP      HDDN                 #P2 =0 (0x00000000)
 247: 10376     0     0 long           TEMP      HDDN                 #P3 =0 (0x00000000)
 248: 10418     0     0 long           TEMP      HDDN                 #P4 =0 (0x00000000)
 249: 10460     0     0 long           TEMP      HDDN                 #P5 =0 (0x00000000)
 250: 10502     0     0 long           TEMP      HDDN                 #P6 =0 (0x00000000)
 251: 10544     0     0 long           TEMP      HDDN                 #P7 =0 (0x00000000)
 252: 10586     0     0 long           TEMP      HDDN                 #P8 =0 (0x00000000)
 253: 10628     0     0 long           TEMP      HDDN                 #P9 =0 (0x00000000)
 254: 10670     0     0 flot           TEMP      HDDN                 #Q1 =0.000000 (0x00000000)
 255: 10712     0     0 flot           TEMP      HDDN                 #Q10 =0.000000 (0x00000000)
 256: 10754     0     0 flot           TEMP      HDDN                 #Q11 =0.000000 (0x00000000)
 257: 10796     0     0 flot           TEMP      HDDN                 #Q12 =0.000000 (0x00000000)
 258: 10838     0     0 flot           TEMP      HDDN                 #Q13 =0.000000 (0x00000000)
 259: 10880     0     0 flot           TEMP      HDDN                 #Q14 =0.000000 (0x00000000)
 260: 10922     0     0 flot           TEMP      HDDN                 #Q2 =0.000000 (0x00000000)
 261: 10964     0     0 flot           TEMP      HDDN                 #Q3 =0.000000 (0x00000000)
 262: 11006     0     0 flot           TEMP      HDDN                 #Q4 =0.000000 (0x00000000)
 263: 11048     0     0 flot           TEMP      HDDN                 #Q5 =0.000000 (0x00000000)
 264: 11090     0     0 flot           TEMP      HDDN                 #Q6 =0.000000 (0x00000000)
 265: 11132     0     0 flot           TEMP      HDDN                 #Q7 =0.000000 (0x00000000)
 266: 11174     0     0 flot           TEMP      HDDN                 #Q8 =0.000000 (0x00000000)
 267: 11216     0     0 flot           TEMP      HDDN                 #Q9 =0.000000 (0x00000000)
 268: 11258     0     0 text CONS           INIT HDDN                 #S0 ="WARNING!!!
" (iOffset=172824)
 269: 11300     0     0 text CONS           INIT HDDN                 #S1 ="Trial weights do not sum to 100.
" (iOffset=172844)
 270: 11342     0     0 text CONS           INIT HDDN                 #S10 ="Trial length too short
" (iOffset=173154)
 271: 11384     0     0 text CONS           INIT HDDN                 #S100 ="XM RFRSH:
" (iOffset=177532)
 272: 11426     0     0 text CONS           INIT HDDN                 #S101 ="vp %d
" (iOffset=177550)
 273: 11468     0     0 text CONS           INIT HDDN                 #S102 ="vp %d
" (iOffset=177564)
 274: 11510     0     0 text CONS           INIT HDDN                 #S103 ="XM RFRSH:
" (iOffset=177578)
 275: 11552     0     0 text CONS           INIT HDDN                 #S104 ="vp %d
" (iOffset=177596)
 276: 11594     0     0 text CONS           INIT HDDN                 #S105 ="                   visual_premature rt = %d
" (iOffset=177610)
 277: 11636     0     0 text CONS           INIT HDDN                 #S106 ="vp %d
" (iOffset=177662)
 278: 11678     0     0 text CONS           INIT HDDN                 #S107 ="vp %d
" (iOffset=177676)
 279: 11720     0     0 text CONS           INIT HDDN                 #S108 ="Error (early saccade)
" (iOffset=177690)
 280: 11762     0     0 text CONS           INIT HDDN                 #S109 ="                        visual rt = %d
" (iOffset=177720)
 281: 11804     0     0 text CONS           INIT HDDN                 #S11 ="Extending trial length to %d
" (iOffset=173184)
 282: 11846     0     0 text CONS           INIT HDDN                 #S110 ="vp %d
" (iOffset=177766)
 283: 11888     0     0 text CONS           INIT HDDN                 #S111 ="Error (no saccade)
" (iOffset=177780)
 284: 11930     0     0 text CONS           INIT HDDN                 #S112 ="vp %d
" (iOffset=177806)
 285: 11972     0     0 text CONS           INIT HDDN                 #S113 ="Correct (canceled)
" (iOffset=177820)
 286: 12014     0     0 text CONS           INIT HDDN                 #S114 ="Error (noncanceled)
" (iOffset=177846)
 287: 12056     0     0 text CONS           INIT HDDN                 #S115 ="vp %d
" (iOffset=177874)
 288: 12098     0     0 text CONS           INIT HDDN                 #S116 ="vp %d
" (iOffset=177888)
 289: 12140     0     0 text CONS           INIT HDDN                 #S117 ="XM RFRSH:
" (iOffset=177902)
 290: 12182     0     0 text CONS           INIT HDDN                 #S118 ="vp %d
" (iOffset=177920)
 291: 12224     0     0 text CONS           INIT HDDN                 #S119 ="vp %d
" (iOffset=177934)
 292: 12266     0     0 text CONS           INIT HDDN                 #S12 ="WARNING!!!
" (iOffset=173220)
 293: 12308     0     0 text CONS           INIT HDDN                 #S120 ="Error (inaccurate saccade)
" (iOffset=177948)
 294: 12350     0     0 text CONS           INIT HDDN                 #S121 ="vp %d
" (iOffset=177982)
 295: 12392     0     0 text CONS           INIT HDDN                 #S122 ="Error (broke target fixation)
" (iOffset=177996)
 296: 12434     0     0 text CONS           INIT HDDN                 #S123 ="Correct (saccade)
" (iOffset=178034)
 297: 12476     0     0 text CONS           INIT HDDN                 #S124 ="vp %d
" (iOffset=178060)
 298: 12518     0     0 text CONS           INIT HDDN                 #S125 ="vp %d
" (iOffset=178074)
 299: 12560     0     0 text CONS           INIT HDDN                 #S126 ="Aborted (body movement)
" (iOffset=178088)
 300: 12602     0     0 text CONS           INIT HDDN                 #S127 =" 
" (iOffset=178266)
 301: 12644     0     0 text CONS           INIT HDDN                 #S128 ="Block %d" (iOffset=178276)
 302: 12686     0     0 text CONS           INIT HDDN                 #S129 =" 
" (iOffset=178292)
 303: 12728     0     0 text CONS           INIT HDDN                 #S13 ="Trial weights do not sum to 100.
" (iOffset=173238)
 304: 12770     0     0 text CONS           INIT HDDN                 #S130 ="# %d" (iOffset=178302)
 305: 12812     0     0 text CONS           INIT HDDN                 #S131 =" 
" (iOffset=178314)
 306: 12854     0     0 text CONS           INIT HDDN                 #S132 ="Trial Type = %d" (iOffset=178324)
 307: 12896     0     0 text CONS           INIT HDDN                 #S133 =" 
" (iOffset=178346)
 308: 12938     0     0 text CONS           INIT HDDN                 #S134 ="Fix-Sch ISI = %d" (iOffset=178356)
 309: 12980     0     0 text CONS           INIT HDDN                 #S135 =" 
" (iOffset=178380)
 310: 13022     0     0 text CONS           INIT HDDN                 #S136 =" random correct = %d" (iOffset=178390)
 311: 13064     0     0 text CONS           INIT HDDN                 #S137 ="    %d" (iOffset=178418)
 312: 13106     0     0 text CONS           INIT HDDN                 #S138 =" 
" (iOffset=178432)
 313: 13148     0     0 text CONS           INIT HDDN                 #S139 =" repeat correct = %d" (iOffset=178442)
 314: 13190     0     0 text CONS           INIT HDDN                 #S14 ="CHANGE PARAMETERS BEFORE RECORDING
" (iOffset=173278)
 315: 13232     0     0 text CONS           INIT HDDN                 #S140 ="    %d" (iOffset=178470)
 316: 13274     0     0 text CONS           INIT HDDN                 #S141 =" 
" (iOffset=178484)
 317: 13316     0     0 text CONS           INIT HDDN                 #S142 =" (%d" (iOffset=178494)
 318: 13358     0     0 text CONS           INIT HDDN                 #S143 =" random RT)
" (iOffset=178506)
 319: 13400     0     0 text CONS           INIT HDDN                 #S144 =" (%d" (iOffset=178526)
 320: 13442     0     0 text CONS           INIT HDDN                 #S145 =" repeated RT)
" (iOffset=178538)
 321: 13484     0     0 text CONS           INIT HDDN                 #S146 ="soa = %d
" (iOffset=178560)
 322: 13526     0     0 text CONS           INIT HDDN                 #S147 =" Sing. Abs. correct = %d" (iOffset=178576)
 323: 13568     0     0 text CONS           INIT HDDN                 #S148 ="    %d" (iOffset=178608)
 324: 13610     0     0 text CONS           INIT HDDN                 #S149 =" 
" (iOffset=178622)
 325: 13652     0     0 text CONS           INIT HDDN                 #S15 ="dpop" (iOffset=173320)
 326: 13694     0     0 text CONS           INIT HDDN                 #S150 =" Sing. Pres. correct = %d" (iOffset=178632)
 327: 13736     0     0 text CONS           INIT HDDN                 #S151 ="    %d" (iOffset=178664)
 328: 13778     0     0 text CONS           INIT HDDN                 #S152 =" 
" (iOffset=178678)
 329: 13820     0     0 text CONS           INIT HDDN                 #S153 =" (%d" (iOffset=178688)
 330: 13862     0     0 text CONS           INIT HDDN                 #S154 =" absent RT)
" (iOffset=178700)
 331: 13904     0     0 text CONS           INIT HDDN                 #S155 =" (%d" (iOffset=178720)
 332: 13946     0     0 text CONS           INIT HDDN                 #S156 =" present RT)
" (iOffset=178732)
 333: 13988     0     0 text CONS           INIT HDDN                 #S157 ="soa = %d
" (iOffset=178752)
 334: 14030     0     0 text CONS           INIT HDDN                 #S158 ="vp %d
" (iOffset=178768)
 335: 14072     0     0 text CONS           INIT HDDN                 #S159 ="XM RFRSH:
" (iOffset=178782)
 336: 14114     0     0 text CONS           INIT HDDN                 #S16 ="WARNING!!!
" (iOffset=173332)
 337: 14156     0     0 text CONS           INIT HDDN                 #S160 ="vp %d
" (iOffset=178800)
 338: 14198     0     0 text CONS           INIT HDDN                 #S161 ="vp %d
" (iOffset=178814)
 339: 14240     0     0 text CONS           INIT HDDN                 #S162 ="Aborted (no fixation)
" (iOffset=178828)
 340: 14282     0     0 text CONS           INIT HDDN                 #S163 ="vp %d
" (iOffset=178858)
 341: 14324     0     0 text CONS           INIT HDDN                 #S164 ="Aborted (broke fixation)
" (iOffset=178872)
 342: 14366     0     0 text CONS           INIT HDDN                 #S165 ="vp %d
" (iOffset=178904)
 343: 14408     0     0 text CONS           INIT HDDN                 #S166 ="XM RFRSH:
" (iOffset=178918)
 344: 14450     0     0 text CONS           INIT HDDN                 #S167 ="vp %d
" (iOffset=178936)
 345: 14492     0     0 text CONS           INIT HDDN                 #S168 ="wm %d
" (iOffset=178950)
 346: 14534     0     0 text CONS           INIT HDDN                 #S169 ="vp %d
" (iOffset=178964)
 347: 14576     0     0 text CONS           INIT HDDN                 #S17 ="Trial length too short
" (iOffset=173350)
 348: 14618     0     0 text CONS           INIT HDDN                 #S170 ="Aborted (broke fixation)
" (iOffset=178978)
 349: 14660     0     0 text CONS           INIT HDDN                 #S171 ="vp %d
" (iOffset=179010)
 350: 14702     0     0 text CONS           INIT HDDN                 #S172 ="XM RFRSH:
" (iOffset=179024)
 351: 14744     0     0 text CONS           INIT HDDN                 #S173 ="vp %d
" (iOffset=179042)
 352: 14786     0     0 text CONS           INIT HDDN                 #S174 ="wm %d
" (iOffset=179056)
 353: 14828     0     0 text CONS           INIT HDDN                 #S175 ="vp %d
" (iOffset=179070)
 354: 14870     0     0 text CONS           INIT HDDN                 #S176 ="Error (too fast)
" (iOffset=179084)
 355: 14912     0     0 text CONS           INIT HDDN                 #S177 ="vp %d
" (iOffset=179108)
 356: 14954     0     0 text CONS           INIT HDDN                 #S178 ="Error (too fast)
" (iOffset=179122)
 357: 14996     0     0 text CONS           INIT HDDN                 #S179 ="vp %d
" (iOffset=179146)
 358: 15038     0     0 text CONS           INIT HDDN                 #S18 ="Extending trial length to %d
" (iOffset=173380)
 359: 15080     0     0 text CONS           INIT HDDN                 #S180 ="vp %d
" (iOffset=179160)
 360: 15122     0     0 text CONS           INIT HDDN                 #S181 ="Error (NoGo)
" (iOffset=179174)
 361: 15164     0     0 text CONS           INIT HDDN                 #S182 ="rt = %d
" (iOffset=179194)
 362: 15206     0     0 text CONS           INIT HDDN                 #S183 ="vp %d
" (iOffset=179210)
 363: 15248     0     0 text CONS           INIT HDDN                 #S184 ="Error (too fast)
" (iOffset=179224)
 364: 15290     0     0 text CONS           INIT HDDN                 #S185 ="vp %d
" (iOffset=179248)
 365: 15332     0     0 text CONS           INIT HDDN                 #S186 ="Error (no saccade)
" (iOffset=179262)
 366: 15374     0     0 text CONS           INIT HDDN                 #S187 ="vp %d
" (iOffset=179288)
 367: 15416     0     0 text CONS           INIT HDDN                 #S188 ="Catch Correct
" (iOffset=179302)
 368: 15458     0     0 text CONS           INIT HDDN                 #S189 ="vp %d
" (iOffset=179324)
 369: 15500     0     0 text CONS           INIT HDDN                 #S19 ="cm %d %d %d %d;
" (iOffset=173458)
 370: 15542     0     0 text CONS           INIT HDDN                 #S190 ="Error (inaccurate saccade)
" (iOffset=179338)
 371: 15584     0     0 text CONS           INIT HDDN                 #S191 ="vp %d
" (iOffset=179372)
 372: 15626     0     0 text CONS           INIT HDDN                 #S192 ="Error (broke target fixation)
" (iOffset=179386)
 373: 15668     0     0 text CONS           INIT HDDN                 #S193 ="Correct (saccade)
" (iOffset=179424)
 374: 15710     0     0 text CONS           INIT HDDN                 #S194 ="vp %d
" (iOffset=179450)
 375: 15752     0     0 text CONS           INIT HDDN                 #S195 ="wm %d
" (iOffset=179464)
 376: 15794     0     0 text CONS           INIT HDDN                 #S196 ="vp %d
" (iOffset=179478)
 377: 15836     0     0 text CONS           INIT HDDN                 #S197 ="Aborted (body movement)
" (iOffset=179492)
 378: 15878     0     0 text CONS           INIT HDDN                 #S198 ="co %d;
" (iOffset=183530)
 379: 15920     0     0 text CONS           INIT HDDN                 #S199 ="ru %d,%d,%d,%d
" (iOffset=183544)
 380: 15962     0     0 text CONS           INIT HDDN                 #S2 ="CHANGE PARAMETERS BEFORE RECORDING
" (iOffset=172882)
 381: 16004     0     0 text CONS           INIT HDDN                 #S20 ="cm 255 %d %d %d;
" (iOffset=173494)
 382: 16046     0     0 text CONS           INIT HDDN                 #S200 ="ru %d,%d,%d,%d
" (iOffset=183566)
 383: 16088     0     0 text CONS           INIT HDDN                 #S201 ="rf %d,%d,%d,%d
" (iOffset=183588)
 384: 16130     0     0 text CONS           INIT HDDN                 #S202 ="rf %d,%d,%d,%d
" (iOffset=183610)
 385: 16172     0     0 text CONS           INIT HDDN                 #S203 ="co %d;
" (iOffset=183686)
 386: 16214     0     0 text CONS           INIT HDDN                 #S204 ="ru %d,%d,%d,%d
" (iOffset=183700)
 387: 16256     0     0 text CONS           INIT HDDN                 #S205 ="ru %d,%d,%d,%d
" (iOffset=183722)
 388: 16298     0     0 text CONS           INIT HDDN                 #S206 ="rf %d,%d,%d,%d
" (iOffset=183744)
 389: 16340     0     0 text CONS           INIT HDDN                 #S207 ="rf %d,%d,%d,%d
" (iOffset=183766)
 390: 16382     0     0 text CONS           INIT HDDN                 #S208 ="co %d;
" (iOffset=183824)
 391: 16424     0     0 text CONS           INIT HDDN                 #S209 ="ru %d,%d,%d,%d;
" (iOffset=183838)
 392: 16466     0     0 text CONS           INIT HDDN                 #S21 ="cm 254 %d %d %d;
" (iOffset=173518)
 393: 16508     0     0 text CONS           INIT HDDN                 #S210 ="rf %d,%d,%d,%d;
" (iOffset=183862)
 394: 16550     0     0 text CONS           INIT HDDN                 #S211 ="co %d;
" (iOffset=183900)
 395: 16592     0     0 text CONS           INIT HDDN                 #S212 ="ru %d,%d,%d,%d;
" (iOffset=183914)
 396: 16634     0     0 text CONS           INIT HDDN                 #S213 ="rf %d,%d,%d,%d;
" (iOffset=183938)
 397: 16676     0     0 text CONS           INIT HDDN                 #S214 ="rw %d,%d;
" (iOffset=183976)
 398: 16718     0     0 text CONS           INIT HDDN                 #S215 ="cl:
" (iOffset=183994)
 399: 16760     0     0 text CONS           INIT HDDN                 #S216 ="rw %d,%d;
" (iOffset=184006)
 400: 16802     0     0 text CONS           INIT HDDN                 #S217 ="cl:
" (iOffset=184024)
 401: 16844     0     0 text CONS           INIT HDDN                 #S218 ="rw %d,%d;
" (iOffset=184102)
 402: 16886     0     0 text CONS           INIT HDDN                 #S219 ="cl:
" (iOffset=184120)
 403: 16928     0     0 text CONS           INIT HDDN                 #S22 ="cm 253 %d %d %d;
" (iOffset=173542)
 404: 16970     0     0 text CONS           INIT HDDN                 #S220 ="rw %d,%d;
" (iOffset=184144)
 405: 17012     0     0 text CONS           INIT HDDN                 #S221 ="cl:
" (iOffset=184162)
 406: 17054     0     0 text CONS           INIT HDDN                 #S222 ="rw %d,%d;
" (iOffset=184216)
 407: 17096     0     0 text CONS           INIT HDDN                 #S223 ="cl:
" (iOffset=184234)
 408: 17138     0     0 text CONS           INIT HDDN                 #S224 ="rw %d,%d;
" (iOffset=184246)
 409: 17180     0     0 text CONS           INIT HDDN                 #S225 ="cl:
" (iOffset=184264)
 410: 17222     0     0 text CONS           INIT HDDN                 #S226 ="rw %d,%d;
" (iOffset=184276)
 411: 17264     0     0 text CONS           INIT HDDN                 #S227 ="cl:
" (iOffset=184294)
 412: 17306     0     0 text CONS           INIT HDDN                 #S228 ="rw %d,%d;
" (iOffset=184306)
 413: 17348     0     0 text CONS           INIT HDDN                 #S229 ="cl:
" (iOffset=184324)
 414: 17390     0     0 text CONS           INIT HDDN                 #S23 ="cm 252 %d %d %d;
" (iOffset=173566)
 415: 17432     0     0 text CONS           INIT HDDN                 #S230 ="rw %d,%d;
" (iOffset=184336)
 416: 17474     0     0 text CONS           INIT HDDN                 #S231 ="cl:
" (iOffset=184354)
 417: 17516     0     0 text CONS           INIT HDDN                 #S232 ="rw %d,%d;
" (iOffset=184366)
 418: 17558     0     0 text CONS           INIT HDDN                 #S233 ="cl:
" (iOffset=184384)
 419: 17600     0     0 text CONS           INIT HDDN                 #S234 ="rw %d,%d;
" (iOffset=184396)
 420: 17642     0     0 text CONS           INIT HDDN                 #S235 ="cl:
" (iOffset=184414)
 421: 17684     0     0 text CONS           INIT HDDN                 #S236 ="rw %d,%d;
" (iOffset=184594)
 422: 17726     0     0 text CONS           INIT HDDN                 #S237 ="cl:
" (iOffset=184612)
 423: 17768     0     0 text CONS           INIT HDDN                 #S238 ="rw %d,%d;
" (iOffset=184624)
 424: 17810     0     0 text CONS           INIT HDDN                 #S239 ="cl:
" (iOffset=184642)
 425: 17852     0     0 text CONS           INIT HDDN                 #S24 ="cm 251 %d %d %d;
" (iOffset=173590)
 426: 17894     0     0 text CONS           INIT HDDN                 #S240 ="rw %d,%d;
" (iOffset=184654)
 427: 17936     0     0 text CONS           INIT HDDN                 #S241 ="cl:
" (iOffset=184672)
 428: 17978     0     0 text CONS           INIT HDDN                 #S242 ="rw %d,%d;
" (iOffset=184684)
 429: 18020     0     0 text CONS           INIT HDDN                 #S243 ="cl:
" (iOffset=184702)
 430: 18062     0     0 text CONS           INIT HDDN                 #S244 ="rw %d,%d;
" (iOffset=184714)
 431: 18104     0     0 text CONS           INIT HDDN                 #S245 ="cl:
" (iOffset=184732)
 432: 18146     0     0 text CONS           INIT HDDN                 #S246 ="rw %d,%d;
" (iOffset=184744)
 433: 18188     0     0 text CONS           INIT HDDN                 #S247 ="cl:
" (iOffset=184762)
 434: 18230     0     0 text CONS           INIT HDDN                 #S248 ="rw %d,%d;
" (iOffset=184774)
 435: 18272     0     0 text CONS           INIT HDDN                 #S249 ="cl:
" (iOffset=184792)
 436: 18314     0     0 text CONS           INIT HDDN                 #S25 ="cm 250 %d %d %d;
" (iOffset=173614)
 437: 18356     0     0 text CONS           INIT HDDN                 #S250 ="rw %d,%d;
" (iOffset=184942)
 438: 18398     0     0 text CONS           INIT HDDN                 #S251 ="cl:
" (iOffset=184960)
 439: 18440     0     0 text CONS           INIT HDDN                 #S252 ="rw %d,%d;
" (iOffset=184972)
 440: 18482     0     0 text CONS           INIT HDDN                 #S253 ="cl:
" (iOffset=184990)
 441: 18524     0     0 text CONS           INIT HDDN                 #S254 ="rw %d,%d;
" (iOffset=185002)
 442: 18566     0     0 text CONS           INIT HDDN                 #S255 ="cl:
" (iOffset=185020)
 443: 18608     0     0 text CONS           INIT HDDN                 #S256 ="rw %d,%d;
" (iOffset=185032)
 444: 18650     0     0 text CONS           INIT HDDN                 #S257 ="cl:
" (iOffset=185050)
 445: 18692     0     0 text CONS           INIT HDDN                 #S258 ="rw %d,%d;
" (iOffset=185062)
 446: 18734     0     0 text CONS           INIT HDDN                 #S259 ="cl:
" (iOffset=185080)
 447: 18776     0     0 text CONS           INIT HDDN                 #S26 ="vc %d, %d, %d, %d
" (iOffset=173770)
 448: 18818     0     0 text CONS           INIT HDDN                 #S260 ="rw %d,%d;
" (iOffset=185092)
 449: 18860     0     0 text CONS           INIT HDDN                 #S261 ="cl:
" (iOffset=185110)
 450: 18902     0     0 text CONS           INIT HDDN                 #S262 ="rw %d,%d;
" (iOffset=185122)
 451: 18944     0     0 text CONS           INIT HDDN                 #S263 ="cl:
" (iOffset=185140)
 452: 18986     0     0 text CONS           INIT HDDN                 #S264 ="rw %d,%d;
" (iOffset=185152)
 453: 19028     0     0 text CONS           INIT HDDN                 #S265 ="cl:
" (iOffset=185170)
 454: 19070     0     0 text CONS           INIT HDDN                 #S266 ="rw %d,%d;
" (iOffset=185244)
 455: 19112     0     0 text CONS           INIT HDDN                 #S267 ="cl:
" (iOffset=185262)
 456: 19154     0     0 text CONS           INIT HDDN                 #S268 ="rw %d,%d;
" (iOffset=185274)
 457: 19196     0     0 text CONS           INIT HDDN                 #S269 ="cl:
" (iOffset=185292)
 458: 19238     0     0 text CONS           INIT HDDN                 #S27 ="*** TASK ***" (iOffset=174048)
 459: 19280     0     0 text CONS           INIT HDDN                 #S270 ="rw %d,%d;
" (iOffset=185304)
 460: 19322     0     0 text CONS           INIT HDDN                 #S271 ="cl:
" (iOffset=185322)
 461: 19364     0     0 text CONS           INIT HDDN                 #S272 ="rw %d,%d;
" (iOffset=185334)
 462: 19406     0     0 text CONS           INIT HDDN                 #S273 ="cl:
" (iOffset=185352)
 463: 19448     0     0 text CONS           INIT HDDN                 #S274 ="rw %d,%d;
" (iOffset=185364)
 464: 19490     0     0 text CONS           INIT HDDN                 #S275 ="cl:
" (iOffset=185382)
 465: 19532     0     0 text CONS           INIT HDDN                 #S276 ="rw %d,%d;
" (iOffset=185394)
 466: 19574     0     0 text CONS           INIT HDDN                 #S277 ="cl:
" (iOffset=185412)
 467: 19616     0     0 text CONS           INIT HDDN                 #S278 ="rw %d,%d;
" (iOffset=185424)
 468: 19658     0     0 text CONS           INIT HDDN                 #S279 ="cl:
" (iOffset=185442)
 469: 19700     0     0 text CONS           INIT HDDN                 #S28 ="*** INHIBITION FUNCTION ***" (iOffset=174440)
 470: 19742     0     0 text CONS           INIT HDDN                 #S280 ="rw %d,%d;
" (iOffset=185474)
 471: 19784     0     0 text CONS           INIT HDDN                 #S281 ="cl:
" (iOffset=185492)
 472: 19826     0     0 text CONS           INIT HDDN                 #S282 ="rw %d,%d;
" (iOffset=185504)
 473: 19868     0     0 text CONS           INIT HDDN                 #S283 ="cl:
" (iOffset=185522)
 474: 19910     0     0 text CONS           INIT HDDN                 #S284 ="rw %d,%d;
" (iOffset=185534)
 475: 19952     0     0 text CONS           INIT HDDN                 #S285 ="cl:
" (iOffset=185552)
 476: 19994     0     0 text CONS           INIT HDDN                 #S286 ="rw %d,%d;
" (iOffset=185564)
 477: 20036     0     0 text CONS           INIT HDDN                 #S287 ="cl:
" (iOffset=185582)
 478: 20078     0     0 text CONS           INIT HDDN                 #S288 ="rw %d,%d;
" (iOffset=185594)
 479: 20120     0     0 text CONS           INIT HDDN                 #S289 ="cl:
" (iOffset=185612)
 480: 20162     0     0 text CONS           INIT HDDN                 #S29 ="x axis = %d
" (iOffset=174808)
 481: 20204     0     0 text CONS           INIT HDDN                 #S290 ="rw %d,%d;
" (iOffset=185624)
 482: 20246     0     0 text CONS           INIT HDDN                 #S291 ="cl:
" (iOffset=185642)
 483: 20288     0     0 text CONS           INIT HDDN                 #S292 ="rw %d,%d;
" (iOffset=185654)
 484: 20330     0     0 text CONS           INIT HDDN                 #S293 ="cl:
" (iOffset=185672)
 485: 20372     0     0 text CONS           INIT HDDN                 #S294 ="rw %d,%d;
" (iOffset=185684)
 486: 20414     0     0 text CONS           INIT HDDN                 #S295 ="cl:
" (iOffset=185702)
 487: 20456     0     0 text CONS           INIT HDDN                 #S296 ="rw %d,%d;
" (iOffset=185724)
 488: 20498     0     0 text CONS           INIT HDDN                 #S297 ="cl:
" (iOffset=185742)
 489: 20540     0     0 text CONS           INIT HDDN                 #S298 ="rw %d,%d;
" (iOffset=185754)
 490: 20582     0     0 text CONS           INIT HDDN                 #S299 ="cl:
" (iOffset=185772)
 491: 20624     0     0 text CONS           INIT HDDN                 #S3 ="dpop" (iOffset=172922)
 492: 20666     0     0 text CONS           INIT HDDN                 #S30 ="y axis = %d
" (iOffset=174828)
 493: 20708     0     0 text CONS           INIT HDDN                 #S300 ="rw %d,%d;
" (iOffset=185784)
 494: 20750     0     0 text CONS           INIT HDDN                 #S301 ="cl:
" (iOffset=185802)
 495: 20792     0     0 text CONS           INIT HDDN                 #S302 ="rw %d,%d;
" (iOffset=185814)
 496: 20834     0     0 text CONS           INIT HDDN                 #S303 ="cl:
" (iOffset=185832)
 497: 20876     0     0 text CONS           INIT HDDN                 #S304 ="rw %d,%d;
" (iOffset=185844)
 498: 20918     0     0 text CONS           INIT HDDN                 #S305 ="cl:
" (iOffset=185862)
 499: 20960     0     0 text CONS           INIT HDDN                 #S306 ="rw %d,%d;
" (iOffset=185874)
 500: 21002     0     0 text CONS           INIT HDDN                 #S307 ="cl:
" (iOffset=185892)
 501: 21044     0     0 text CONS           INIT HDDN                 #S308 ="rw %d,%d;
" (iOffset=185904)
 502: 21086     0     0 text CONS           INIT HDDN                 #S309 ="cl:
" (iOffset=185922)
 503: 21128     0     0 text CONS           INIT HDDN                 #S31 ="*** SOA FUNCTION ***" (iOffset=174848)
 504: 21170     0     0 text CONS           INIT HDDN                 #S310 ="rw %d,%d;
" (iOffset=185934)
 505: 21212     0     0 text CONS           INIT HDDN                 #S311 ="cl:
" (iOffset=185952)
 506: 21254     0     0 text CONS           INIT HDDN                 #S312 =" 
" (iOffset=186054)
 507: 21296     0     0 text CONS           INIT HDDN                 #S313 ="# %d" (iOffset=186064)
 508: 21338     0     0 text CONS           INIT HDDN                 #S314 =" (%d" (iOffset=186076)
 509: 21380     0     0 text CONS           INIT HDDN                 #S315 =" correct)
" (iOffset=186088)
 510: 21422     0     0 text CONS           INIT HDDN                 #S316 ="GO
" (iOffset=186106)
 511: 21464     0     0 text CONS           INIT HDDN                 #S317 ="holdtime = %d
" (iOffset=186116)
 512: 21506     0     0 text CONS           INIT HDDN                 #S318 ="STOP
" (iOffset=186138)
 513: 21548     0     0 text CONS           INIT HDDN                 #S319 ="holdtime = %d
" (iOffset=186150)
 514: 21590     0     0 text CONS           INIT HDDN                 #S32 ="*** Repeat vs. Random Display Search RT ***" (iOffset=174938)
 515: 21632     0     0 text CONS           INIT HDDN                 #S320 ="               SOA = %d
" (iOffset=186172)
 516: 21674     0     0 text CONS           INIT HDDN                 #S321 ="IGNORE
" (iOffset=186204)
 517: 21716     0     0 text CONS           INIT HDDN                 #S322 ="holdtime = %d
" (iOffset=186218)
 518: 21758     0     0 text CONS           INIT HDDN                 #S323 ="               SOA = %d
" (iOffset=186240)
 519: 21800     0     0 text CONS           INIT HDDN                 #S324 ="vp %d
" (iOffset=186272)
 520: 21842     0     0 text CONS           INIT HDDN                 #S325 ="XM RFRSH:
" (iOffset=186286)
 521: 21884     0     0 text CONS           INIT HDDN                 #S326 ="vp %d
" (iOffset=186304)
 522: 21926     0     0 text CONS           INIT HDDN                 #S327 ="vp %d
" (iOffset=186318)
 523: 21968     0     0 text CONS           INIT HDDN                 #S328 ="Aborted (no fixation)
" (iOffset=186332)
 524: 22010     0     0 text CONS           INIT HDDN                 #S329 ="vp %d
" (iOffset=186362)
 525: 22052     0     0 text CONS           INIT HDDN                 #S33 ="cl;
" (iOffset=175390)
 526: 22094     0     0 text CONS           INIT HDDN                 #S330 ="Aborted (broke fixation)
" (iOffset=186376)
 527: 22136     0     0 text CONS           INIT HDDN                 #S331 ="vp %d
" (iOffset=186408)
 528: 22178     0     0 text CONS           INIT HDDN                 #S332 ="XM RFRSH:
" (iOffset=186422)
 529: 22220     0     0 text CONS           INIT HDDN                 #S333 ="vp %d
" (iOffset=186440)
 530: 22262     0     0 text CONS           INIT HDDN                 #S334 ="vp %d
" (iOffset=186454)
 531: 22304     0     0 text CONS           INIT HDDN                 #S335 ="Error (early saccade)
" (iOffset=186468)
 532: 22346     0     0 text CONS           INIT HDDN                 #S336 ="vp %d
" (iOffset=186498)
 533: 22388     0     0 text CONS           INIT HDDN                 #S337 ="XM RFRSH:
" (iOffset=186512)
 534: 22430     0     0 text CONS           INIT HDDN                 #S338 ="vp %d
" (iOffset=186530)
 535: 22472     0     0 text CONS           INIT HDDN                 #S339 ="vp %d
" (iOffset=186544)
 536: 22514     0     0 text CONS           INIT HDDN                 #S34 ="ru %d,%d,%d,%d;
" (iOffset=175402)
 537: 22556     0     0 text CONS           INIT HDDN                 #S340 ="XM RFRSH:
" (iOffset=186558)
 538: 22598     0     0 text CONS           INIT HDDN                 #S341 ="vp %d
" (iOffset=186576)
 539: 22640     0     0 text CONS           INIT HDDN                 #S342 ="                          rt = %d
" (iOffset=186590)
 540: 22682     0     0 text CONS           INIT HDDN                 #S343 ="vp %d
" (iOffset=186632)
 541: 22724     0     0 text CONS           INIT HDDN                 #S344 ="Error (no saccade)
" (iOffset=186646)
 542: 22766     0     0 text CONS           INIT HDDN                 #S345 ="vp %d
" (iOffset=186672)
 543: 22808     0     0 text CONS           INIT HDDN                 #S346 ="Correct (canceled)
" (iOffset=186686)
 544: 22850     0     0 text CONS           INIT HDDN                 #S347 ="XM RFRSH:
" (iOffset=186712)
 545: 22892     0     0 text CONS           INIT HDDN                 #S348 ="vp %d
" (iOffset=186730)
 546: 22934     0     0 text CONS           INIT HDDN                 #S349 ="vp %d
" (iOffset=186744)
 547: 22976     0     0 text CONS           INIT HDDN                 #S35 ="co %d;
" (iOffset=175426)
 548: 23018     0     0 text CONS           INIT HDDN                 #S350 ="Error (inaccurate saccade)
" (iOffset=186758)
 549: 23060     0     0 text CONS           INIT HDDN                 #S351 ="vp %d
" (iOffset=186792)
 550: 23102     0     0 text CONS           INIT HDDN                 #S352 ="Error (broke target fixation)
" (iOffset=186806)
 551: 23144     0     0 text CONS           INIT HDDN                 #S353 ="Correct (saccade)
" (iOffset=186844)
 552: 23186     0     0 text CONS           INIT HDDN                 #S354 ="Error (noncanceled)
" (iOffset=186870)
 553: 23228     0     0 text CONS           INIT HDDN                 #S355 ="vp %d
" (iOffset=186898)
 554: 23270     0     0 text CONS           INIT HDDN                 #S356 =" 
" (iOffset=186936)
 555: 23312     0     0 text CONS           INIT HDDN                 #S357 ="# %d" (iOffset=186946)
 556: 23354     0     0 text CONS           INIT HDDN                 #S358 =" (%d" (iOffset=186958)
 557: 23396     0     0 text CONS           INIT HDDN                 #S359 =" correct)
" (iOffset=186970)
 558: 23438     0     0 text CONS           INIT HDDN                 #S36 =" 
" (iOffset=176180)
 559: 23480     0     0 text CONS           INIT HDDN                 #S360 ="vp %d
" (iOffset=186988)
 560: 23522     0     0 text CONS           INIT HDDN                 #S361 ="XM RFRSH:
" (iOffset=187002)
 561: 23564     0     0 text CONS           INIT HDDN                 #S362 ="vp %d
" (iOffset=187020)
 562: 23606     0     0 text CONS           INIT HDDN                 #S363 ="vp %d
" (iOffset=187034)
 563: 23648     0     0 text CONS           INIT HDDN                 #S364 ="Aborted (no fixation)
" (iOffset=187048)
 564: 23690     0     0 text CONS           INIT HDDN                 #S365 ="vp %d
" (iOffset=187078)
 565: 23732     0     0 text CONS           INIT HDDN                 #S366 ="Aborted (broke fixation)
" (iOffset=187092)
 566: 23774     0     0 text CONS           INIT HDDN                 #S367 ="vp %d
" (iOffset=187124)
 567: 23816     0     0 text CONS           INIT HDDN                 #S368 ="XM RFRSH:
" (iOffset=187138)
 568: 23858     0     0 text CONS           INIT HDDN                 #S369 ="vp %d
" (iOffset=187156)
 569: 23900     0     0 text CONS           INIT HDDN                 #S37 ="# %d" (iOffset=176190)
 570: 23942     0     0 text CONS           INIT HDDN                 #S370 ="vp %d
" (iOffset=187170)
 571: 23984     0     0 text CONS           INIT HDDN                 #S371 ="Error (early saccade)
" (iOffset=187184)
 572: 24026     0     0 text CONS           INIT HDDN                 #S372 ="       soa = %d
" (iOffset=187214)
 573: 24068     0     0 text CONS           INIT HDDN                 #S373 ="vp %d
" (iOffset=187238)
 574: 24110     0     0 text CONS           INIT HDDN                 #S374 ="XM RFRSH:
" (iOffset=187252)
 575: 24152     0     0 text CONS           INIT HDDN                 #S375 ="vp %d
" (iOffset=187270)
 576: 24194     0     0 text CONS           INIT HDDN                 #S376 ="           rt = %d
" (iOffset=187284)
 577: 24236     0     0 text CONS           INIT HDDN                 #S377 ="vp %d
" (iOffset=187310)
 578: 24278     0     0 text CONS           INIT HDDN                 #S378 ="Error (no saccade)
" (iOffset=187324)
 579: 24320     0     0 text CONS           INIT HDDN                 #S379 ="vp %d
" (iOffset=187350)
 580: 24362     0     0 text CONS           INIT HDDN                 #S38 =" (%d" (iOffset=176202)
 581: 24404     0     0 text CONS           INIT HDDN                 #S380 ="Error (inaccurate saccade)
" (iOffset=187364)
 582: 24446     0     0 text CONS           INIT HDDN                 #S381 ="vp %d
" (iOffset=187398)
 583: 24488     0     0 text CONS           INIT HDDN                 #S382 ="Error (broke target fixation)
" (iOffset=187412)
 584: 24530     0     0 text CONS           INIT HDDN                 #S383 ="Correct (saccade)
" (iOffset=187450)
 585: 24572     0     0 text CONS           INIT HDDN                 #S384 ="vp %d
" (iOffset=187476)
 586: 24614     0     0 text CONS           INIT HDDN                 #S385 ="mean latency = %d
" (iOffset=187580)
 587: 24656     0     0 text CONS           INIT HDDN                 #S386 ="vp %d
" (iOffset=188284)
 588: 24698     0     0 text CONS           INIT HDDN                 #S387 ="vp %d
" (iOffset=188298)
 589: 24740     0     0 text CONS           INIT HDDN                 #S388 ="vp %d
" (iOffset=188312)
 590: 24782     0     0 text CONS           INIT HDDN                 #S389 ="broke" (iOffset=188326)
 591: 24824     0     0 text CONS           INIT HDDN                 #S39 =" correct)
" (iOffset=176214)
 592: 24866     0     0 text CONS           INIT HDDN                 #S390 ="vp %d
" (iOffset=188338)
 593: 24908     0     0 text CONS           INIT HDDN                 #S391 ="dialog Select_Monkey" (iOffset=188362)
 594: 24950     0     0 text CONS           INIT HDDN                 #S392 ="key currt = spawn KEY_T_UP" (iOffset=188390)
 595: 24992     0     0 text CONS           INIT HDDN                 #S393 ="key curlf = spawn KEY_T_DN" (iOffset=188424)
 596: 25034     0     0 text CONS           INIT HDDN                 #S394 ="key curup = spawn KEY_REWD" (iOffset=188458)
 597: 25076     0     0 text CONS           INIT HDDN                 #S395 ="key curdn = OK = 1" (iOffset=188492)
 598: 25118     0     0 text CONS           INIT HDDN                 #S396 ="key currt = " (iOffset=188518)
 599: 25160     0     0 text CONS           INIT HDDN                 #S397 ="key curlf = " (iOffset=188538)
 600: 25202     0     0 text CONS           INIT HDDN                 #S398 ="key curup = " (iOffset=188558)
 601: 25244     0     0 text CONS           INIT HDDN                 #S399 ="key curdn = " (iOffset=188578)
 602: 25286     0     0 text CONS           INIT HDDN                 #S4 ="WARNING!!!
" (iOffset=172944)
 603: 25328     0     0 text CONS           INIT HDDN                 #S40 ="GO
" (iOffset=176232)
 604: 25370     0     0 text CONS           INIT HDDN                 #S400 ="dialog Select_Monkey" (iOffset=188608)
 605: 25412     0     0 text CONS           INIT HDDN                 #S401 ="DM RFRSH" (iOffset=188636)
 606: 25454     0     0 text CONS           INIT HDDN                 #S402 ="vw %d:
" (iOffset=188652)
 607: 25496     0     0 text CONS           INIT HDDN                 #S403 ="vw %d:
" (iOffset=188666)
 608: 25538     0     0 text CONS           INIT HDDN                 #S404 ="EM RFRSH" (iOffset=188680)
 609: 25580     0     0 text CONS           INIT HDDN                 #S405 ="dialog Select_Monkey" (iOffset=188704)
 610: 25622     0     0 text CONS           INIT HDDN                 #S406 ="DM RFRSH" (iOffset=188732)
 611: 25664     0     0 text CONS           INIT HDDN                 #S407 ="vw %d:
" (iOffset=188748)
 612: 25706     0     0 text CONS           INIT HDDN                 #S408 ="vw %d:
" (iOffset=188762)
 613: 25748     0     0 text CONS           INIT HDDN                 #S409 ="EM RFRSH" (iOffset=188776)
 614: 25790     0     0 text CONS           INIT HDDN                 #S41 ="holdtime = %d
" (iOffset=176242)
 615: 25832     0     0 text CONS           INIT HDDN                 #S410 ="dialog Select_Monkey" (iOffset=188800)
 616: 25874     0     0 text CONS           INIT HDDN                 #S411 ="DM RFRSH" (iOffset=188828)
 617: 25916     0     0 text CONS           INIT HDDN                 #S412 ="vw %d:
" (iOffset=188844)
 618: 25958     0     0 text CONS           INIT HDDN                 #S413 ="vw %d:
" (iOffset=188858)
 619: 26000     0     0 text CONS           INIT HDDN                 #S414 ="EM RFRSH" (iOffset=188872)
 620: 26042     0     0 text CONS           INIT HDDN                 #S415 ="dialog Select_Monkey" (iOffset=188896)
 621: 26084     0     0 text CONS           INIT HDDN                 #S416 ="DM RFRSH" (iOffset=188924)
 622: 26126     0     0 text CONS           INIT HDDN                 #S417 ="vw %d:
" (iOffset=188940)
 623: 26168     0     0 text CONS           INIT HDDN                 #S418 ="vw %d:
" (iOffset=188954)
 624: 26210     0     0 text CONS           INIT HDDN                 #S419 ="EM RFRSH" (iOffset=188968)
 625: 26252     0     0 text CONS           INIT HDDN                 #S42 ="STOP
" (iOffset=176264)
 626: 26294     0     0 text CONS           INIT HDDN                 #S420 ="dialog Select_Monkey" (iOffset=188998)
 627: 26336     0     0 text CONS           INIT HDDN                 #S421 ="DM RFRSH" (iOffset=189026)
 628: 26378     0     0 text CONS           INIT HDDN                 #S422 ="vw %d:
" (iOffset=189042)
 629: 26420     0     0 text CONS           INIT HDDN                 #S423 ="vw %d:
" (iOffset=189056)
 630: 26462     0     0 text CONS           INIT HDDN                 #S424 ="EM RFRSH" (iOffset=189070)
 631: 26504     0     0 text CONS           INIT HDDN                 #S425 ="Stim Time%d" (iOffset=189086)
 632: 26546     0     0 text CONS           INIT HDDN                 #S426 ="DM RFRSH" (iOffset=189226)
 633: 26588     0     0 text CONS           INIT HDDN                 #S427 ="vw %d:
" (iOffset=189242)
 634: 26630     0     0 text CONS           INIT HDDN                 #S428 ="vw %d:
" (iOffset=189256)
 635: 26672     0     0 text CONS           INIT HDDN                 #S429 ="EM RFRSH" (iOffset=189270)
 636: 26714     0     0 text CONS           INIT HDDN                 #S43 ="holdtime = %d
" (iOffset=176276)
 637: 26756     0     0 text CONS           INIT HDDN                 #S430 ="dialog Select_Monkey" (iOffset=189286)
 638: 26798     0     0 text CONS           INIT HDDN                 #S431 ="vp %d
" (iOffset=189314)
 639: 26840     0     0 text CONS           INIT HDDN                 #S432 ="vp %d
" (iOffset=189328)
 640: 26882     0     0 text CONS           INIT HDDN                 #S433 ="Broke fixation
" (iOffset=189342)
 641: 26924     0     0 text CONS           INIT HDDN                 #S434 ="XM RFRSH:
" (iOffset=189364)
 642: 26966     0     0 text CONS           INIT HDDN                 #S435 ="vp %d
" (iOffset=189382)
 643: 27008     0     0 text CONS           INIT HDDN                 #S436 ="key currt = " (iOffset=189396)
 644: 27050     0     0 text CONS           INIT HDDN                 #S437 ="key curlf = " (iOffset=189416)
 645: 27092     0     0 text CONS           INIT HDDN                 #S438 ="key curup = " (iOffset=189436)
 646: 27134     0     0 text CONS           INIT HDDN                 #S439 ="key curdn = " (iOffset=189456)
 647: 27176     0     0 text CONS           INIT HDDN                 #S44 ="               ssd = %d
" (iOffset=176298)
 648: 27218     0     0 text CONS           INIT HDDN                 #S440 ="vi 256;" (iOffset=189630)
 649: 27260     0     0 text CONS           INIT HDDN                 #S441 ="ca" (iOffset=189644)
 650: 27302     0     0 text CONS           INIT HDDN                 #S442 ="flushing video memory please wait...
" (iOffset=189654)
 651: 27344     0     0 text CONS           INIT HDDN                 #S443 ="done!
" (iOffset=189698)
 652: 27386     0     0 text CONS           INIT HDDN                 #S444 ="dialog Choose_Task" (iOffset=189712)
 653: 27428     0     0 text CONS           INIT HDDN                 #S45 ="IGNORE
" (iOffset=176330)
 654: 27470     0     0 text CONS           INIT HDDN                 #S46 ="holdtime = %d
" (iOffset=176344)
 655: 27512     0     0 text CONS           INIT HDDN                 #S47 ="               isd = %d
" (iOffset=176366)
 656: 27554     0     0 text CONS           INIT HDDN                 #S48 ="vp %d
" (iOffset=176398)
 657: 27596     0     0 text CONS           INIT HDDN                 #S49 ="XM RFRSH:
" (iOffset=176412)
 658: 27638     0     0 text CONS           INIT HDDN                 #S5 ="SSDs exceed Max time allowed...
" (iOffset=172960)
 659: 27680     0     0 text CONS           INIT HDDN                 #S50 ="vp %d
" (iOffset=176430)
 660: 27722     0     0 text CONS           INIT HDDN                 #S51 ="vp %d
" (iOffset=176444)
 661: 27764     0     0 text CONS           INIT HDDN                 #S52 ="Aborted (no fixation)
" (iOffset=176458)
 662: 27806     0     0 text CONS           INIT HDDN                 #S53 ="vp %d
" (iOffset=176488)
 663: 27848     0     0 text CONS           INIT HDDN                 #S54 ="Aborted (broke fixation)
" (iOffset=176502)
 664: 27890     0     0 text CONS           INIT HDDN                 #S55 ="vp %d
" (iOffset=176534)
 665: 27932     0     0 text CONS           INIT HDDN                 #S56 ="XM RFRSH:
" (iOffset=176548)
 666: 27974     0     0 text CONS           INIT HDDN                 #S57 ="vp %d
" (iOffset=176566)
 667: 28016     0     0 text CONS           INIT HDDN                 #S58 ="vw %d
" (iOffset=176580)
 668: 28058     0     0 text CONS           INIT HDDN                 #S59 ="vp %d
" (iOffset=176594)
 669: 28100     0     0 text CONS           INIT HDDN                 #S6 ="...for saccade to target.
" (iOffset=172998)
 670: 28142     0     0 text CONS           INIT HDDN                 #S60 ="XM RFRSH:
" (iOffset=176608)
 671: 28184     0     0 text CONS           INIT HDDN                 #S61 ="vp %d
" (iOffset=176626)
 672: 28226     0     0 text CONS           INIT HDDN                 #S62 ="                          rt = %d
" (iOffset=176640)
 673: 28268     0     0 text CONS           INIT HDDN                 #S63 ="vp %d
" (iOffset=176682)
 674: 28310     0     0 text CONS           INIT HDDN                 #S64 ="Error (too fast)
" (iOffset=176696)
 675: 28352     0     0 text CONS           INIT HDDN                 #S65 ="vp %d
" (iOffset=176720)
 676: 28394     0     0 text CONS           INIT HDDN                 #S66 ="Error (no saccade)
" (iOffset=176734)
 677: 28436     0     0 text CONS           INIT HDDN                 #S67 ="vp %d
" (iOffset=176760)
 678: 28478     0     0 text CONS           INIT HDDN                 #S68 ="Correct (canceled)
" (iOffset=176774)
 679: 28520     0     0 text CONS           INIT HDDN                 #S69 ="vp %d
" (iOffset=176800)
 680: 28562     0     0 text CONS           INIT HDDN                 #S7 ="CHANGE PARAMETERS BEFORE RECORDING
" (iOffset=173030)
 681: 28604     0     0 text CONS           INIT HDDN                 #S70 ="Error (inaccurate saccade)
" (iOffset=176814)
 682: 28646     0     0 text CONS           INIT HDDN                 #S71 ="vp %d
" (iOffset=176848)
 683: 28688     0     0 text CONS           INIT HDDN                 #S72 ="Error (broke target fixation)
" (iOffset=176862)
 684: 28730     0     0 text CONS           INIT HDDN                 #S73 ="Correct (saccade)
" (iOffset=176900)
 685: 28772     0     0 text CONS           INIT HDDN                 #S74 ="Error (noncanceled)
" (iOffset=176926)
 686: 28814     0     0 text CONS           INIT HDDN                 #S75 ="vp %d
" (iOffset=176954)
 687: 28856     0     0 text CONS           INIT HDDN                 #S76 ="vp %d
" (iOffset=176968)
 688: 28898     0     0 text CONS           INIT HDDN                 #S77 ="Aborted (body movement)
" (iOffset=176982)
 689: 28940     0     0 text CONS           INIT HDDN                 #S78 =" 
" (iOffset=177116)
 690: 28982     0     0 text CONS           INIT HDDN                 #S79 ="# %d" (iOffset=177126)
 691: 29024     0     0 text CONS           INIT HDDN                 #S8 ="dpop" (iOffset=173070)
 692: 29066     0     0 text CONS           INIT HDDN                 #S80 =" (%d" (iOffset=177138)
 693: 29108     0     0 text CONS           INIT HDDN                 #S81 =" correct)
" (iOffset=177150)
 694: 29150     0     0 text CONS           INIT HDDN                 #S82 ="holdtime = %d
" (iOffset=177168)
 695: 29192     0     0 text CONS           INIT HDDN                 #S83 ="soa = %d
" (iOffset=177190)
 696: 29234     0     0 text CONS           INIT HDDN                 #S84 ="vp %d
" (iOffset=177206)
 697: 29276     0     0 text CONS           INIT HDDN                 #S85 ="XM RFRSH:
" (iOffset=177220)
 698: 29318     0     0 text CONS           INIT HDDN                 #S86 ="vp %d
" (iOffset=177238)
 699: 29360     0     0 text CONS           INIT HDDN                 #S87 ="vp %d
" (iOffset=177252)
 700: 29402     0     0 text CONS           INIT HDDN                 #S88 ="Aborted (no fixation)
" (iOffset=177266)
 701: 29444     0     0 text CONS           INIT HDDN                 #S89 ="vp %d
" (iOffset=177296)
 702: 29486     0     0 text CONS           INIT HDDN                 #S9 ="WARNING!!!
" (iOffset=173138)
 703: 29528     0     0 text CONS           INIT HDDN                 #S90 ="Aborted (broke fixation)
" (iOffset=177310)
 704: 29570     0     0 text CONS           INIT HDDN                 #S91 ="vp %d
" (iOffset=177348)
 705: 29612     0     0 text CONS           INIT HDDN                 #S92 ="XM RFRSH:
" (iOffset=177362)
 706: 29654     0     0 text CONS           INIT HDDN                 #S93 ="vp %d
" (iOffset=177380)
 707: 29696     0     0 text CONS           INIT HDDN                 #S94 ="vp %d
" (iOffset=177394)
 708: 29738     0     0 text CONS           INIT HDDN                 #S95 ="                          premature rt = %d
" (iOffset=177408)
 709: 29780     0     0 text CONS           INIT HDDN                 #S96 ="vp %d
" (iOffset=177460)
 710: 29822     0     0 text CONS           INIT HDDN                 #S97 ="vp %d
" (iOffset=177474)
 711: 29864     0     0 text CONS           INIT HDDN                 #S98 ="Error (early saccade)
" (iOffset=177488)
 712: 29906     0     0 text CONS           INIT HDDN                 #S99 ="vp %d
" (iOffset=177518)
 713: 29948     0     0 long                INIT HDDN           DECL  __debug_op =0 (0x00000000)
 714: 29990    17     0 long                INIT                DECL  a_sets@WATCHBOD =2 (0x00000002)
 715: 30032     0     0 long CONS PROC      INIT HDDN           DECL  ABORT =65 (0x00000041)
 716: 30074     0     0 long CONS           INIT      HIDE      DECL  Abort_ =2620 (0x00000A3C)
 717: 30116     0     0 long CONS           INIT      HIDE      DECL  aCLEAR =3 (0x00000003)
 718: 30158    46     0 flot                          HIDE      DECL  adjacent@FLS_PGS =0.000000 (0x00000000)
 719: 30200    47   718 flot                          HIDE      DECL  adjacent@CMD_PGS =0.000000 (0x00000000)
 720: 30242    50   719 flot                          HIDE      DECL  adjacent@MG_PGS =0.000000 (0x00000000)
 721: 30284    52   720 flot                          HIDE      DECL  adjacent@GNG_PGS =0.000000 (0x00000000)
 722: 30326    54   721 flot                          HIDE      DECL  adjacent@DEL_PGS =0.000000 (0x00000000)
 723: 30368    56   722 flot                          HIDE      DECL  adjacent@TSCH_PGS =0.000000 (0x00000000)
 724: 30410    57   723 flot                          HIDE      DECL  adjacent@LSCH_PGS =0.000000 (0x00000000)
 725: 30452     0     0 long CONS           INIT      HIDE      DECL  aFILLED =5 (0x00000005)
 726: 30494     0     0 long CONS           INIT      HIDE      DECL  aINVISIBLE =4 (0x00000004)
 727: 30536     0     0 long                                    DECL  Allowed_fix_time =0 (0x00000000)
 728: 30578    20   727 long                                    DECL  allowed_fix_time@CMDTRIAL =0 (0x00000000)
 729: 30620    21   728 long                                    DECL  allowed_fix_time@MGTRIAL =0 (0x00000000)
 730: 30662    22   729 long                                    DECL  allowed_fix_time@SCHTRIAL =0 (0x00000000)
 731: 30704    59   730 long                                    DECL  allowed_fix_time@GNGTRIAL =0 (0x00000000)
 732: 30746    60   731 long                                    DECL  allowed_fix_time@DELTRIAL =0 (0x00000000)
 733: 30788    73   732 long                                    DECL  allowed_fix_time@FIXTRIAL =0 (0x00000000)
 734: 30830     0     0 flot CONS           INIT      HIDE      DECL  AnalogUnits =65536.000000 (0x47800000)
 735: 30872    13   734 flot                                    DECL  analogUnits@WATCHEYE =0.000000 (0x00000000)
 736: 30914     0   742 flot                          HIDE      DECL  Angle =0.000000 (0x00000000)
 737: 30956    11     0 flot                          HIDE      DECL  angle@WINDOWS =0.000000 (0x00000000)
 738: 30998    41   737 flot                                    DECL  angle@DRW_T =0.000000 (0x00000000)
 739: 31040    42   738 flot                                    DECL  angle@DRW_L =0.000000 (0x00000000)
 740: 31082    43   739 flot                                    DECL  angle@DRW_PLAC =0.000000 (0x00000000)
 741: 31124    44   740 flot                                    DECL  angle@DRW_SQR =0.000000 (0x00000000)
 742: 31166    45   741 flot                          HIDE      DECL  angle@FIX_PGS =0.000000 (0x00000000)
 743: 31208     0     0 farr                                    DECL  Angle_list len=4 xmsOff=4380 [12] 1 @114 = {}
 744: 31250    60     0 long CONS           INIT      HIDE      DECL  anticip_sacc@DELTRIAL =13 (0x0000000D)
 745: 31292    69   744 long CONS           INIT      HIDE      DECL  anticip_sacc@END_TRL =13 (0x0000000D)
 746: 31334    20     0 flot                          HIDE      DECL  aquire_fix_time@CMDTRIAL =0.000000 (0x00000000)
 747: 31376    21   746 flot                          HIDE      DECL  aquire_fix_time@MGTRIAL =0.000000 (0x00000000)
 748: 31418    22   747 flot                          HIDE      DECL  aquire_fix_time@SCHTRIAL =0.000000 (0x00000000)
 749: 31460    59   748 flot                          HIDE      DECL  aquire_fix_time@GNGTRIAL =0.000000 (0x00000000)
 750: 31502    60   749 flot                          HIDE      DECL  aquire_fix_time@DELTRIAL =0.000000 (0x00000000)
 751: 31544    20     0 flot                          HIDE      DECL  aquire_targ_time@CMDTRIAL =0.000000 (0x00000000)
 752: 31586    21   751 flot                          HIDE      DECL  aquire_targ_time@MGTRIAL =0.000000 (0x00000000)
 753: 31628    22   752 flot                          HIDE      DECL  aquire_targ_time@SCHTRIAL =0.000000 (0x00000000)
 754: 31670    59   753 flot                          HIDE      DECL  aquire_targ_time@GNGTRIAL =0.000000 (0x00000000)
 755: 31712    60   754 flot                          HIDE      DECL  aquire_targ_time@DELTRIAL =0.000000 (0x00000000)
 756: 31754    73   755 flot                          HIDE      DECL  aquire_targ_time@FIXTRIAL =0.000000 (0x00000000)
 757: 31796     0     0 long CONS           INIT      HIDE      DECL  aRANGE =1 (0x00000001)
 758: 31838     0     0 long CONS           INIT      HIDE      DECL  aREPLACE =2 (0x00000002)
 759: 31880     0     0 long                                    DECL  ArrStruct =0 (0x00000000)
 760: 31922     0     0 long CONS           INIT      HIDE      DECL  aSIZE =7 (0x00000007)
 761: 31964    52     0 long                INIT      HIDE      DECL  atarget@GNG_PGS =7 (0x00000007)
 762: 32006    59   761 long                INIT      HIDE      DECL  atarget@GNGTRIAL =7 (0x00000007)
 763: 32048     0     0 long CONS           INIT      HIDE      DECL  aTITLE =2 (0x00000002)
 764: 32090     0     0 long CONS           INIT      HIDE      DECL  aUNFILLED =6 (0x00000006)
 765: 32132     0     0 flot                                    DECL  avg_rand_rt =0.000000 (0x00000000)
 766: 32174     0     0 flot                                    DECL  avg_rand_rt_DA =0.000000 (0x00000000)
 767: 32216     0     0 flot                                    DECL  avg_rand_rt_DP =0.000000 (0x00000000)
 768: 32258     0     0 flot                                    DECL  avg_rep_rt =0.000000 (0x00000000)
 769: 32300     0     0 long CONS           INIT      HIDE      DECL  aVISIBLE =3 (0x00000003)
 770: 32342     0     0 long CONS           INIT      HIDE      DECL  aXOR =1 (0x00000001)
 771: 32384     1     0 long                          HIDE      DECL  b_@DEFAULT =0 (0x00000000)
 772: 32426     5   771 long                          HIDE      DECL  b_@SET_CLRS =0 (0x00000000)
 773: 32468     0     0 long                                    DECL  Base_Punish_time =0 (0x00000000)
 774: 32510     0     0 long                                    DECL  Base_Reward_time =0 (0x00000000)
 775: 32552     0     0 flot                                    DECL  BigP_weight =0.000000 (0x00000000)
 776: 32594     0     0 flot                                    DECL  BigR_weight =0.000000 (0x00000000)
 777: 32636    20     0 long                INIT      HIDE      DECL  blank@CMDTRIAL =0 (0x00000000)
 778: 32678    21   777 long                INIT      HIDE      DECL  blank@MGTRIAL =0 (0x00000000)
 779: 32720    22   778 long                INIT      HIDE      DECL  blank@SCHTRIAL =0 (0x00000000)
 780: 32762    45   779 long                INIT      HIDE      DECL  blank@FIX_PGS =0 (0x00000000)
 781: 32804    46   780 long                INIT      HIDE      DECL  blank@FLS_PGS =0 (0x00000000)
 782: 32846    47   781 long                INIT      HIDE      DECL  blank@CMD_PGS =0 (0x00000000)
 783: 32888    50   782 long                INIT      HIDE      DECL  blank@MG_PGS =0 (0x00000000)
 784: 32930    52   783 long                INIT      HIDE      DECL  blank@GNG_PGS =0 (0x00000000)
 785: 32972    54   784 long                INIT      HIDE      DECL  blank@DEL_PGS =0 (0x00000000)
 786: 33014    56   785 long                INIT      HIDE      DECL  blank@TSCH_PGS =0 (0x00000000)
 787: 33056    57   786 long                INIT      HIDE      DECL  blank@LSCH_PGS =0 (0x00000000)
 788: 33098    59   787 long                INIT      HIDE      DECL  blank@GNGTRIAL =0 (0x00000000)
 789: 33140    60   788 long                INIT      HIDE      DECL  blank@DELTRIAL =0 (0x00000000)
 790: 33182    73   789 long                INIT      HIDE      DECL  blank@FIXTRIAL =0 (0x00000000)
 791: 33224    80   790 long                INIT      HIDE      DECL  blank@FLSHSCRN =0 (0x00000000)
 792: 33266     0     0 long                                    DECL  Block_number =0 (0x00000000)
 793: 33308     0     0 long                                    DECL  Bmove_tout =0 (0x00000000)
 794: 33350    17     0 long                INIT                DECL  body_channel@WATCHBOD =2 (0x00000002)
 795: 33392    20     0 long CONS           INIT      HIDE      DECL  body_move@CMDTRIAL =12 (0x0000000C)
 796: 33434    21   795 long CONS           INIT      HIDE      DECL  body_move@MGTRIAL =12 (0x0000000C)
 797: 33476    22   796 long CONS           INIT      HIDE      DECL  body_move@SCHTRIAL =12 (0x0000000C)
 798: 33518    69   797 long CONS           INIT      HIDE      DECL  body_move@END_TRL =12 (0x0000000C)
 799: 33560     0     0 flot                                    DECL  Bonus_weight =0.000000 (0x00000000)
 800: 33602     0     0 long CONS           INIT      HIDE      DECL  BreakTFix_ =2760 (0x00000AC8)
 801: 33644     1     0 long                INIT      HIDE      DECL  broca@DEFAULT =3 (0x00000003)
 802: 33686    20     0 long CONS           INIT      HIDE      DECL  broke_fix@CMDTRIAL =2 (0x00000002)
 803: 33728    21   802 long CONS           INIT      HIDE      DECL  broke_fix@MGTRIAL =2 (0x00000002)
 804: 33770    22   803 long CONS           INIT      HIDE      DECL  broke_fix@SCHTRIAL =2 (0x00000002)
 805: 33812    59   804 long CONS           INIT      HIDE      DECL  broke_fix@GNGTRIAL =2 (0x00000002)
 806: 33854    60   805 long CONS           INIT      HIDE      DECL  broke_fix@DELTRIAL =2 (0x00000002)
 807: 33896    69   806 long CONS           INIT      HIDE      DECL  broke_fix@END_TRL =2 (0x00000002)
 808: 33938    20     0 long CONS           INIT      HIDE      DECL  broke_targ@CMDTRIAL =6 (0x00000006)
 809: 33980    21   808 long CONS           INIT      HIDE      DECL  broke_targ@MGTRIAL =6 (0x00000006)
 810: 34022    22   809 long CONS           INIT      HIDE      DECL  broke_targ@SCHTRIAL =6 (0x00000006)
 811: 34064    59   810 long CONS           INIT      HIDE      DECL  broke_targ@GNGTRIAL =6 (0x00000006)
 812: 34106    60   811 long CONS           INIT      HIDE      DECL  broke_targ@DELTRIAL =6 (0x00000006)
 813: 34148    69   812 long CONS           INIT      HIDE      DECL  broke_targ@END_TRL =6 (0x00000006)
 814: 34190     0     0 long                                    DECL  Canc_alert =0 (0x00000000)
 815: 34232     0     0 long                                    DECL  Cancl_time =0 (0x00000000)
 816: 34274    20   815 long                                    DECL  cancl_time@CMDTRIAL =0 (0x00000000)
 817: 34316    21   816 long                                    DECL  cancl_time@MGTRIAL =0 (0x00000000)
 818: 34358    22   817 long                                    DECL  cancl_time@SCHTRIAL =0 (0x00000000)
 819: 34400    59   818 long                                    DECL  cancl_time@GNGTRIAL =0 (0x00000000)
 820: 34442     0     0 long CONS           INIT      HIDE      DECL  CaptureHeader_ =1508 (0x000005E4)
 821: 34484     0     0 long                                    DECL  Catch =0 (0x00000000)
 822: 34526     0     0 flot                                    DECL  catch_hold_time =0.000000 (0x00000000)
 823: 34568     0     0 long                                    DECL  Catch_Rew =0 (0x00000000)
 824: 34610     0     0 long                                    DECL  CatchCode =0 (0x00000000)
 825: 34652     0     0 long CONS           INIT      HIDE      DECL  CatchCorrect_ =2757 (0x00000AC5)
 826: 34694     0     0 long CONS           INIT      HIDE      DECL  CatchIncorrectG_ =2758 (0x00000AC6)
 827: 34736     0     0 long CONS           INIT      HIDE      DECL  CatchIncorrectNG_ =2759 (0x00000AC7)
 828: 34778    58     0 flot                          HIDE      DECL  CatchNum@SETS_TRL =0.000000 (0x00000000)
 829: 34820     0     0 long                INIT                DECL  CenterEyeNow =0 (0x00000000)
 830: 34862    61     0 flot                          HIDE      DECL  change_value@UPD8_INH =0.000000 (0x00000000)
 831: 34904    62   830 flot                          HIDE      DECL  change_value@UPD8_SOA =0.000000 (0x00000000)
 832: 34946     3     0 long                                    DECL  channel@STIM =0 (0x00000000)
 833: 34988    66   832 long                                    DECL  channel@JUICE =0 (0x00000000)
 834: 35030     0     0 long CONS           INIT      HIDE      DECL  CheckBody =0 (0x00000000)
 835: 35072     0     0 long                INIT                DECL  CheckMotion =1 (0x00000001)
 836: 35114     0     0 long CONS           INIT      HIDE      DECL  CheckMouth =1 (0x00000001)
 837: 35156     0     0 long                                    DECL  Classic =0 (0x00000000)
 838: 35198    81     0 long                                    DECL  clock_cycles@WAIT_MU =0 (0x00000000)
 839: 35240    66     0 long                INIT      HIDE      DECL  closed@JUICE =0 (0x00000000)
 840: 35282     0     0 long CONS PROC      INIT HDDN           DECL  CMANDING =75 (0x0000004B)
 841: 35324     0     0 long CONS           INIT      HIDE      DECL  CmanHeader_ =1501 (0x000005DD)
 842: 35366     0     0 long CONS PROC      INIT HDDN           DECL  CMD_PGS =47 (0x0000002F)
 843: 35408     0     0 long CONS PROC      INIT HDDN           DECL  CMDTRIAL =20 (0x00000014)
 844: 35450     0   849 long                          HIDE      DECL  Color =0 (0x00000000)
 845: 35492    41     0 long                                    DECL  color@DRW_T =0 (0x00000000)
 846: 35534    42   845 long                                    DECL  color@DRW_L =0 (0x00000000)
 847: 35576    43   846 long                                    DECL  color@DRW_PLAC =0 (0x00000000)
 848: 35618    44   847 long                                    DECL  color@DRW_SQR =0 (0x00000000)
 849: 35660    45   848 long                          HIDE      DECL  color@FIX_PGS =0 (0x00000000)
 850: 35702     0     0 arry                                    DECL  Color_list len=4 xmsOff=4188 [12,3] 2 @96 = {}
 851: 35744     1     0 long                          HIDE      DECL  color_num@DEFAULT =0 (0x00000000)
 852: 35786     5   851 long                          HIDE      DECL  color_num@SET_CLRS =0 (0x00000000)
 853: 35828     0     0 long                                    DECL  Comp_Trl_number =0 (0x00000000)
 854: 35870     0     0 flot                                    DECL  Consec_corr =0.000000 (0x00000000)
 855: 35912     0     0 long                                    DECL  Consec_trl =0 (0x00000000)
 856: 35954    41     0 flot                                    DECL  conversion_X@DRW_T =0.000000 (0x00000000)
 857: 35996    42   856 flot                                    DECL  conversion_X@DRW_L =0.000000 (0x00000000)
 858: 36038    43   857 flot                                    DECL  conversion_X@DRW_PLAC =0.000000 (0x00000000)
 859: 36080    44   858 flot                                    DECL  conversion_X@DRW_SQR =0.000000 (0x00000000)
 860: 36122    41     0 flot                                    DECL  conversion_Y@DRW_T =0.000000 (0x00000000)
 861: 36164    42   860 flot                                    DECL  conversion_Y@DRW_L =0.000000 (0x00000000)
 862: 36206    43   861 flot                                    DECL  conversion_Y@DRW_PLAC =0.000000 (0x00000000)
 863: 36248    44   862 flot                                    DECL  conversion_Y@DRW_SQR =0.000000 (0x00000000)
 864: 36290     0     0 long CONS           INIT      HIDE      DECL  Correct_ =2600 (0x00000A28)
 865: 36332     0     0 long CONS           INIT      HIDE      DECL  Correct_sacc =888 (0x00000378)
 866: 36374    21   865 long CONS           INIT      HIDE      DECL  correct_sacc@MGTRIAL =11 (0x0000000B)
 867: 36416    60   866 long CONS           INIT      HIDE      DECL  correct_sacc@DELTRIAL =11 (0x0000000B)
 868: 36458    69   867 long CONS           INIT      HIDE      DECL  correct_sacc@END_TRL =11 (0x0000000B)
 869: 36500     0     0 long                                    DECL  Correct_trls =0 (0x00000000)
 870: 36542    14     0 long                          HIDE      DECL  count@TONE =0 (0x00000000)
 871: 36584    61     0 long                                    DECL  ct@UPD8_INH =0 (0x00000000)
 872: 36626    62   871 long                                    DECL  ct@UPD8_SOA =0 (0x00000000)
 873: 36668    62     0 farr                          HIDE      DECL  ct_soa@UPD8_SOA len=4 xmsOff=4940 [20] 1 @202 = {}
 874: 36710    61     0 farr                          HIDE      DECL  ct_ssd@UPD8_INH len=4 xmsOff=4780 [20] 1 @186 = {}
 875: 36752     0     0 flot                                    DECL  cum_rand_rt =0.000000 (0x00000000)
 876: 36794     0     0 flot                                    DECL  cum_rand_rt_DA =0.000000 (0x00000000)
 877: 36836     0     0 flot                                    DECL  cum_rand_rt_DP =0.000000 (0x00000000)
 878: 36878     0     0 flot                                    DECL  cum_rep_rt =0.000000 (0x00000000)
 879: 36920     0   882 long                          HIDE      DECL  Curr_holdtime =0 (0x00000000)
 880: 36962    20     0 long                                    DECL  curr_holdtime@CMDTRIAL =0 (0x00000000)
 881: 37004    21   880 long                                    DECL  curr_holdtime@MGTRIAL =0 (0x00000000)
 882: 37046    22   881 long                                    DECL  curr_holdtime@SCHTRIAL =0 (0x00000000)
 883: 37088    59   879 long                                    DECL  curr_holdtime@GNGTRIAL =0 (0x00000000)
 884: 37130    60   883 long                                    DECL  curr_holdtime@DELTRIAL =0 (0x00000000)
 885: 37172     0   886 long                          HIDE      DECL  Curr_soa =0 (0x00000000)
 886: 37214    21     0 long                                    DECL  curr_soa@MGTRIAL =0 (0x00000000)
 887: 37256    59   885 long                                    DECL  curr_soa@GNGTRIAL =0 (0x00000000)
 888: 37298    60   887 long                                    DECL  curr_soa@DELTRIAL =0 (0x00000000)
 889: 37340    62   888 long                                    DECL  curr_soa@UPD8_SOA =0 (0x00000000)
 890: 37382     0   892 long                          HIDE      DECL  Curr_SSD =0 (0x00000000)
 891: 37424    20     0 long                                    DECL  curr_ssd@CMDTRIAL =0 (0x00000000)
 892: 37466    22   891 long                                    DECL  curr_ssd@SCHTRIAL =0 (0x00000000)
 893: 37508    61   890 long                                    DECL  curr_ssd@UPD8_INH =0 (0x00000000)
 894: 37550     0   897 long                          HIDE      DECL  Curr_target =0 (0x00000000)
 895: 37592    11     0 long                                    DECL  curr_target@WINDOWS =0 (0x00000000)
 896: 37634    45   895 long                                    DECL  curr_target@FIX_PGS =0 (0x00000000)
 897: 37676    47   896 long                                    DECL  curr_target@CMD_PGS =0 (0x00000000)
 898: 37718    50   894 long                                    DECL  curr_target@MG_PGS =0 (0x00000000)
 899: 37760    52   898 long                                    DECL  curr_target@GNG_PGS =0 (0x00000000)
 900: 37802    54   899 long                                    DECL  curr_target@DEL_PGS =0 (0x00000000)
 901: 37844    56   900 long                                    DECL  curr_target@TSCH_PGS =0 (0x00000000)
 902: 37886    57   901 long                                    DECL  curr_target@LSCH_PGS =0 (0x00000000)
 903: 37928     0     0 flot                                    DECL  current_rt =0.000000 (0x00000000)
 904: 37970     0     0 flot                          HIDE      DECL  d10_angle =0.000000 (0x00000000)
 905: 38012     0     0 flot                          HIDE      DECL  d10_ecc =0.000000 (0x00000000)
 906: 38054     0     0 flot                          HIDE      DECL  d10_orient =0.000000 (0x00000000)
 907: 38096     0     0 flot                          HIDE      DECL  d11_angle =0.000000 (0x00000000)
 908: 38138     0     0 flot                          HIDE      DECL  d11_ecc =0.000000 (0x00000000)
 909: 38180     0     0 flot                          HIDE      DECL  d11_orient =0.000000 (0x00000000)
 910: 38222     0     0 flot                          HIDE      DECL  d1_angle =0.000000 (0x00000000)
 911: 38264     0     0 flot                          HIDE      DECL  d1_ecc =0.000000 (0x00000000)
 912: 38306     0     0 flot                          HIDE      DECL  d1_orient =0.000000 (0x00000000)
 913: 38348     0     0 long                                    DECL  d1color =0 (0x00000000)
 914: 38390     0     0 flot                          HIDE      DECL  d2_angle =0.000000 (0x00000000)
 915: 38432     0     0 flot                          HIDE      DECL  d2_ecc =0.000000 (0x00000000)
 916: 38474     0     0 flot                          HIDE      DECL  d2_orient =0.000000 (0x00000000)
 917: 38516     0     0 flot                          HIDE      DECL  d3_angle =0.000000 (0x00000000)
 918: 38558     0     0 flot                          HIDE      DECL  d3_ecc =0.000000 (0x00000000)
 919: 38600     0     0 flot                          HIDE      DECL  d3_orient =0.000000 (0x00000000)
 920: 38642     0     0 flot                          HIDE      DECL  d4_angle =0.000000 (0x00000000)
 921: 38684     0     0 flot                          HIDE      DECL  d4_ecc =0.000000 (0x00000000)
 922: 38726     0     0 flot                          HIDE      DECL  d4_orient =0.000000 (0x00000000)
 923: 38768     0     0 flot                          HIDE      DECL  d5_angle =0.000000 (0x00000000)
 924: 38810     0     0 flot                          HIDE      DECL  d5_ecc =0.000000 (0x00000000)
 925: 38852     0     0 flot                          HIDE      DECL  d5_orient =0.000000 (0x00000000)
 926: 38894     0     0 flot                          HIDE      DECL  d6_angle =0.000000 (0x00000000)
 927: 38936     0     0 flot                          HIDE      DECL  d6_ecc =0.000000 (0x00000000)
 928: 38978     0     0 flot                          HIDE      DECL  d6_orient =0.000000 (0x00000000)
 929: 39020     0     0 flot                          HIDE      DECL  d7_angle =0.000000 (0x00000000)
 930: 39062     0     0 flot                          HIDE      DECL  d7_ecc =0.000000 (0x00000000)
 931: 39104     0     0 flot                          HIDE      DECL  d7_orient =0.000000 (0x00000000)
 932: 39146     0     0 flot                          HIDE      DECL  d8_angle =0.000000 (0x00000000)
 933: 39188     0     0 flot                          HIDE      DECL  d8_ecc =0.000000 (0x00000000)
 934: 39230     0     0 flot                          HIDE      DECL  d8_orient =0.000000 (0x00000000)
 935: 39272     0     0 flot                          HIDE      DECL  d9_angle =0.000000 (0x00000000)
 936: 39314     0     0 flot                          HIDE      DECL  d9_ecc =0.000000 (0x00000000)
 937: 39356     0     0 flot                          HIDE      DECL  d9_orient =0.000000 (0x00000000)
 938: 39398     0     0 flot                                    DECL  Dealer_wins_weight =0.000000 (0x00000000)
 939: 39440     0     0 long CONS           INIT      HIDE      DECL  Decide_ =2811 (0x00000AFB)
 940: 39482    49     0 flot                          HIDE      DECL  decide_jitter@SETC_TRL =0.000000 (0x00000000)
 941: 39524    51   940 flot                          HIDE      DECL  decide_jitter@SETMGTRL =0.000000 (0x00000000)
 942: 39566    53   941 flot                          HIDE      DECL  decide_jitter@SETG_TRL =0.000000 (0x00000000)
 943: 39608    55   942 flot                          HIDE      DECL  decide_jitter@SETD_TRL =0.000000 (0x00000000)
 944: 39650    58   943 flot                          HIDE      DECL  decide_jitter@SETS_TRL =0.000000 (0x00000000)
 945: 39692    51     0 flot                          HIDE      DECL  decide_soa_jitter@SETMGTRL =0.000000 (0x00000000)
 946: 39734     0     0 long                INIT      HIDE      DECL  Decide_SSD =0 (0x00000000)
 947: 39776    61   946 long                                    DECL  decide_ssd@UPD8_INH =0 (0x00000000)
 948: 39818    49     0 flot                          HIDE      DECL  decide_trl_type@SETC_TRL =0.000000 (0x00000000)
 949: 39860    51   948 flot                          HIDE      DECL  decide_trl_type@SETMGTRL =0.000000 (0x00000000)
 950: 39902    53   949 flot                          HIDE      DECL  decide_trl_type@SETG_TRL =0.000000 (0x00000000)
 951: 39944    58   950 flot                          HIDE      DECL  decide_trl_type@SETS_TRL =0.000000 (0x00000000)
 952: 39986    67     0 flot                          HIDE      DECL  decidejuice@SUCCESS =0.000000 (0x00000000)
 953: 40028     0     0 long CONS PROC      INIT HDDN           DECL  DEFAULT =1 (0x00000001)
 954: 40070     0     0 flot                          HIDE      DECL  Deg2Pix_X =0.000000 (0x00000000)
 955: 40112     7   954 flot                                    DECL  deg2pix_X@GRAPHS =0.000000 (0x00000000)
 956: 40154    11   955 flot                                    DECL  deg2pix_X@WINDOWS =0.000000 (0x00000000)
 957: 40196    13   956 flot                                    DECL  deg2pix_X@WATCHEYE =0.000000 (0x00000000)
 958: 40238    45   957 flot                                    DECL  deg2pix_X@FIX_PGS =0.000000 (0x00000000)
 959: 40280    46   958 flot                                    DECL  deg2pix_X@FLS_PGS =0.000000 (0x00000000)
 960: 40322    47   959 flot                                    DECL  deg2pix_X@CMD_PGS =0.000000 (0x00000000)
 961: 40364    50   960 flot                                    DECL  deg2pix_X@MG_PGS =0.000000 (0x00000000)
 962: 40406    52   961 flot                                    DECL  deg2pix_X@GNG_PGS =0.000000 (0x00000000)
 963: 40448    54   962 flot                                    DECL  deg2pix_X@DEL_PGS =0.000000 (0x00000000)
 964: 40490    56   963 flot                                    DECL  deg2pix_X@TSCH_PGS =0.000000 (0x00000000)
 965: 40532    57   964 flot                                    DECL  deg2pix_X@LSCH_PGS =0.000000 (0x00000000)
 966: 40574     0     0 flot                          HIDE      DECL  Deg2Pix_Y =0.000000 (0x00000000)
 967: 40616     7   966 flot                                    DECL  deg2pix_Y@GRAPHS =0.000000 (0x00000000)
 968: 40658    11   967 flot                                    DECL  deg2pix_Y@WINDOWS =0.000000 (0x00000000)
 969: 40700    13   968 flot                                    DECL  deg2pix_Y@WATCHEYE =0.000000 (0x00000000)
 970: 40742    45   969 flot                                    DECL  deg2pix_Y@FIX_PGS =0.000000 (0x00000000)
 971: 40784    46   970 flot                                    DECL  deg2pix_Y@FLS_PGS =0.000000 (0x00000000)
 972: 40826    47   971 flot                                    DECL  deg2pix_Y@CMD_PGS =0.000000 (0x00000000)
 973: 40868    50   972 flot                                    DECL  deg2pix_Y@MG_PGS =0.000000 (0x00000000)
 974: 40910    52   973 flot                                    DECL  deg2pix_Y@GNG_PGS =0.000000 (0x00000000)
 975: 40952    54   974 flot                                    DECL  deg2pix_Y@DEL_PGS =0.000000 (0x00000000)
 976: 40994    56   975 flot                                    DECL  deg2pix_Y@TSCH_PGS =0.000000 (0x00000000)
 977: 41036    57   976 flot                                    DECL  deg2pix_Y@LSCH_PGS =0.000000 (0x00000000)
 978: 41078     6     0 flot                          HIDE      DECL  deg_x@SET_COOR =0.000000 (0x00000000)
 979: 41120     6     0 flot                          HIDE      DECL  deg_y@SET_COOR =0.000000 (0x00000000)
 980: 41162     0     0 long CONS PROC      INIT HDDN           DECL  DEL_PGS =54 (0x00000036)
 981: 41204     0     0 long CONS PROC      INIT HDDN           DECL  DELAYED =78 (0x0000004E)
 982: 41246     0     0 long CONS           INIT      HIDE      DECL  DelayedHeader_ =1504 (0x000005E0)
 983: 41288     0     0 long CONS PROC      INIT HDDN           DECL  DELTRIAL =60 (0x0000003C)
 984: 41330     0     0 long                                    DECL  DHemi =0 (0x00000000)
 985: 41372     0     0 farr                INIT                DECL  Dist_Ang_list len=4 xmsOff=4036 [8] 1 @16 = {}
 986: 41414     0     0 farr                INIT                DECL  Dist_Ecc_list len=4 xmsOff=4000 [9] 1 @8 = {}
 987: 41456     0     0 long                          HIDE      DECL  DistFix =0 (0x00000000)
 988: 41498     0     0 arry                INIT      HIDE      DECL  DistOrients len=4 xmsOff=4668 [4] 1 @162 = {}
 989: 41540     0     0 long                                    DECL  DistOrt =0 (0x00000000)
 990: 41582     0     0 long                                    DECL  DistPres =0 (0x00000000)
 991: 41624     7     0 long                          HIDE      DECL  down@GRAPHS =0 (0x00000000)
 992: 41666     0     0 long                                    DECL  DR1_flag =0 (0x00000000)
 993: 41708     0     0 long CONS PROC      INIT HDDN           DECL  DRW_L =42 (0x0000002A)
 994: 41750     0     0 long CONS PROC      INIT HDDN           DECL  DRW_PLAC =43 (0x0000002B)
 995: 41792     0     0 long CONS PROC      INIT HDDN           DECL  DRW_SQR =44 (0x0000002C)
 996: 41834     0     0 long CONS PROC      INIT HDDN           DECL  DRW_T =41 (0x00000029)
 997: 41876    14     0 long                                    DECL  duration@TONE =0 (0x00000000)
 998: 41918    66   997 long                                    DECL  duration@JUICE =0 (0x00000000)
 999: 41960    81   998 long                                    DECL  duration@WAIT_MU =0 (0x00000000)
1000: 42002    21     0 long CONS           INIT      HIDE      DECL  early_sacc@MGTRIAL =9 (0x00000009)
1001: 42044    59  1000 long CONS           INIT      HIDE      DECL  early_sacc@GNGTRIAL =9 (0x00000009)
1002: 42086    60  1001 long CONS           INIT      HIDE      DECL  early_sacc@DELTRIAL =9 (0x00000009)
1003: 42128    69  1002 long CONS           INIT      HIDE      DECL  early_sacc@END_TRL =9 (0x00000009)
1004: 42170     0     0 long CONS           INIT      HIDE      DECL  EarlySaccade_ =2761 (0x00000AC9)
1005: 42212     0  1011 flot                          HIDE      DECL  Eccentricity =0.000000 (0x00000000)
1006: 42254    11     0 flot                          HIDE      DECL  eccentricity@WINDOWS =0.000000 (0x00000000)
1007: 42296    41  1006 flot                                    DECL  eccentricity@DRW_T =0.000000 (0x00000000)
1008: 42338    42  1007 flot                                    DECL  eccentricity@DRW_L =0.000000 (0x00000000)
1009: 42380    43  1008 flot                                    DECL  eccentricity@DRW_PLAC =0.000000 (0x00000000)
1010: 42422    44  1009 flot                                    DECL  eccentricity@DRW_SQR =0.000000 (0x00000000)
1011: 42464    45  1010 flot                          HIDE      DECL  eccentricity@FIX_PGS =0.000000 (0x00000000)
1012: 42506     0     0 farr                                    DECL  Eccentricity_list len=4 xmsOff=4428 [12] 1 @122 = {}
1013: 42548     0     0 long CONS PROC      INIT HDDN           DECL  END_TRL =69 (0x00000045)
1014: 42590     0     0 long CONS           INIT      HIDE      DECL  EndInfos_ =2999 (0x00000BB7)
1015: 42632     0     0 long CONS           INIT      HIDE      DECL  EndStim_ =667 (0x0000029B)
1016: 42674     0     0 long CONS           INIT      HIDE      DECL  Eot_ =1667 (0x00000683)
1017: 42716     0     0 long CONS           INIT      HIDE      DECL  Error_sacc =887 (0x00000377)
1018: 42758     0     0 long CONS           INIT      HIDE      DECL  Error_tone =776 (0x00000308)
1019: 42800     0     0 arry                                    DECL  Event_fifo len=4 xmsOff=0 [1000] 1 @0 = {}
1020: 42842     0     0 long                INIT                DECL  Event_fifo_N =1000 (0x000003E8)
1021: 42884     0     0 long                                    DECL  Exp_juice =0 (0x00000000)
1022: 42926     0     0 long                                    DECL  Expo_Jitter =0 (0x00000000)
1023: 42968    49  1022 long                                    DECL  expo_jitter@SETC_TRL =0 (0x00000000)
1024: 43010    51  1023 long                                    DECL  expo_jitter@SETMGTRL =0 (0x00000000)
1025: 43052    53  1024 long                                    DECL  expo_jitter@SETG_TRL =0 (0x00000000)
1026: 43094    55  1025 long                                    DECL  expo_jitter@SETD_TRL =0 (0x00000000)
1027: 43136    58  1026 long                                    DECL  expo_jitter@SETS_TRL =0 (0x00000000)
1028: 43178     0     0 long                                    DECL  Expo_Jitter_SOA =0 (0x00000000)
1029: 43220    51  1028 long                                    DECL  expo_jitter_soa@SETMGTRL =0 (0x00000000)
1030: 43262    53  1029 long                                    DECL  expo_jitter_soa@SETG_TRL =0 (0x00000000)
1031: 43304    55  1030 long                                    DECL  expo_jitter_soa@SETD_TRL =0 (0x00000000)
1032: 43346     0     0 long CONS           INIT      HIDE      DECL  ExtraReward_ =2777 (0x00000AD9)
1033: 43388     0     0 long                INIT                DECL  Eye_on_VDOSync =0 (0x00000000)
1034: 43430    12     0 flot                                    DECL  eye_x@LOCATE_I =0.000000 (0x00000000)
1035: 43472    13  1034 flot                          HIDE      DECL  eye_x@WATCHEYE =0.000000 (0x00000000)
1036: 43514     0     0 long CONS           INIT      HIDE      DECL  Eye_X_channel =1 (0x00000001)
1037: 43556    13  1036 long                                    DECL  eye_X_channel@WATCHEYE =0 (0x00000000)
1038: 43598    12     0 flot                                    DECL  eye_y@LOCATE_I =0.000000 (0x00000000)
1039: 43640    13  1038 flot                          HIDE      DECL  eye_y@WATCHEYE =0.000000 (0x00000000)
1040: 43682     0     0 long CONS           INIT      HIDE      DECL  Eye_Y_channel =2 (0x00000002)
1041: 43724    13  1040 long                                    DECL  eye_Y_channel@WATCHEYE =0 (0x00000000)
1042: 43766     0  1050 long CONS PROC      INIT HDDN           DECL  FAILURE =68 (0x00000044)
1043: 43808    20     0 long                INIT      HIDE      DECL  failure@CMDTRIAL =0 (0x00000000)
1044: 43850    21  1043 long                INIT      HIDE      DECL  failure@MGTRIAL =0 (0x00000000)
1045: 43892    22  1044 long                INIT      HIDE      DECL  failure@SCHTRIAL =0 (0x00000000)
1046: 43934    48  1045 long                INIT      HIDE      DECL  failure@STAIR =0 (0x00000000)
1047: 43976    59  1046 long                INIT      HIDE      DECL  failure@GNGTRIAL =0 (0x00000000)
1048: 44018    61  1047 long                INIT      HIDE      DECL  failure@UPD8_INH =0 (0x00000000)
1049: 44060    62  1048 long                INIT      HIDE      DECL  failure@UPD8_SOA =0 (0x00000000)
1050: 44102    63  1049 long                INIT                DECL  failure@UPD8_SCH =0 (0x00000000)
1051: 44144     0     0 long                                    DECL  Failure_tone =0 (0x00000000)
1052: 44186    68  1051 long                                    DECL  failure_tone@FAILURE =0 (0x00000000)
1053: 44228     0     0 long                                    DECL  Failure_Tone_bigP =0 (0x00000000)
1054: 44270     0     0 long                                    DECL  Failure_Tone_medP =0 (0x00000000)
1055: 44312     0     0 long                                    DECL  Failure_Tone_smlP =0 (0x00000000)
1056: 44354     0     0 long CONS           INIT      HIDE      DECL  Feedback_ =2774 (0x00000AD6)
1057: 44396    41     0 long                                    DECL  fill@DRW_T =0 (0x00000000)
1058: 44438    42  1057 long                                    DECL  fill@DRW_L =0 (0x00000000)
1059: 44480    43  1058 long                                    DECL  fill@DRW_PLAC =0 (0x00000000)
1060: 44522    44  1059 long                                    DECL  fill@DRW_SQR =0 (0x00000000)
1061: 44564    45  1060 long                INIT      HIDE      DECL  fill@FIX_PGS =1 (0x00000001)
1062: 44606    46  1061 long                INIT      HIDE      DECL  fill@FLS_PGS =1 (0x00000001)
1063: 44648    47  1062 long                INIT      HIDE      DECL  fill@CMD_PGS =1 (0x00000001)
1064: 44690    50  1063 long                INIT      HIDE      DECL  fill@MG_PGS =1 (0x00000001)
1065: 44732    52  1064 long                INIT      HIDE      DECL  fill@GNG_PGS =1 (0x00000001)
1066: 44774    54  1065 long                INIT      HIDE      DECL  fill@DEL_PGS =1 (0x00000001)
1067: 44816    56  1066 long                INIT      HIDE      DECL  fill@TSCH_PGS =1 (0x00000001)
1068: 44858    57  1067 long                INIT      HIDE      DECL  fill@LSCH_PGS =1 (0x00000001)
1069: 44900     0     0 long                INIT                DECL  FirstSearchTrial =1 (0x00000001)
1070: 44942     0     0 long                INIT                DECL  FirstSOATrial =1 (0x00000001)
1071: 44984     0     0 long                INIT                DECL  FirstStopTrial =1 (0x00000001)
1072: 45026     0     0 long                INIT                DECL  fix_manual =1 (0x00000001)
1073: 45068    21     0 long                INIT      HIDE      DECL  fix_off@MGTRIAL =4 (0x00000004)
1074: 45110    59  1073 long                INIT      HIDE      DECL  fix_off@GNGTRIAL =4 (0x00000004)
1075: 45152    60  1074 long                INIT      HIDE      DECL  fix_off@DELTRIAL =4 (0x00000004)
1076: 45194    21     0 flot                          HIDE      DECL  fix_off_time@MGTRIAL =0.000000 (0x00000000)
1077: 45236    22  1076 flot                          HIDE      DECL  fix_off_Time@SCHTRIAL =0.000000 (0x00000000)
1078: 45278    59  1077 flot                          HIDE      DECL  fix_off_time@GNGTRIAL =0.000000 (0x00000000)
1079: 45320    60  1078 flot                          HIDE      DECL  fix_off_time@DELTRIAL =0.000000 (0x00000000)
1080: 45362    59     0 flot                          HIDE      DECL  fix_on_time@GNGTRIAL =0.000000 (0x00000000)
1081: 45404    60  1080 flot                          HIDE      DECL  fix_on_time@DELTRIAL =0.000000 (0x00000000)
1082: 45446     0     0 long CONS PROC      INIT HDDN           DECL  FIX_PGS =45 (0x0000002D)
1083: 45488    20     0 flot                          HIDE      DECL  fix_spot_time@CMDTRIAL =0.000000 (0x00000000)
1084: 45530    21  1083 flot                          HIDE      DECL  fix_spot_time@MGTRIAL =0.000000 (0x00000000)
1085: 45572    22  1084 flot                          HIDE      DECL  fix_spot_time@SCHTRIAL =0.000000 (0x00000000)
1086: 45614     0     0 flot                          HIDE      DECL  Fix_win_down =0.000000 (0x00000000)
1087: 45656    12  1086 flot                                    DECL  fix_win_down@LOCATE_I =0.000000 (0x00000000)
1088: 45698     0     0 flot                          HIDE      DECL  Fix_win_left =0.000000 (0x00000000)
1089: 45740    12  1088 flot                                    DECL  fix_win_left@LOCATE_I =0.000000 (0x00000000)
1090: 45782     0     0 flot                          HIDE      DECL  Fix_win_right =0.000000 (0x00000000)
1091: 45824    12  1090 flot                                    DECL  fix_win_right@LOCATE_I =0.000000 (0x00000000)
1092: 45866     0     0 flot                                    DECL  Fix_win_size =0.000000 (0x00000000)
1093: 45908    11  1092 flot                                    DECL  fix_win_size@WINDOWS =0.000000 (0x00000000)
1094: 45950     0     0 flot                          HIDE      DECL  Fix_win_up =0.000000 (0x00000000)
1095: 45992    12  1094 flot                                    DECL  fix_win_up@LOCATE_I =0.000000 (0x00000000)
1096: 46034     0     0 long CONS           INIT      HIDE      DECL  Fixate_ =2660 (0x00000A64)
1097: 46076    20     0 long                INIT      HIDE      DECL  fixating@CMDTRIAL =2 (0x00000002)
1098: 46118    21  1097 long                INIT      HIDE      DECL  fixating@MGTRIAL =2 (0x00000002)
1099: 46160    59  1098 long                INIT      HIDE      DECL  fixating@GNGTRIAL =2 (0x00000002)
1100: 46202    60  1099 long                INIT      HIDE      DECL  fixating@DELTRIAL =2 (0x00000002)
1101: 46244    73  1100 long                INIT      HIDE      DECL  fixating@FIXTRIAL =2 (0x00000002)
1102: 46286    22     0 long                INIT      HIDE      DECL  fixating_off@SCHTRIAL =4 (0x00000004)
1103: 46328    22     0 long                INIT      HIDE      DECL  fixating_ph@SCHTRIAL =2 (0x00000002)
1104: 46370    22     0 long                INIT      HIDE      DECL  fixating_targ@SCHTRIAL =3 (0x00000003)
1105: 46412     0  1116 long CONS PROC      INIT HDDN           DECL  FIXATION =74 (0x0000004A)
1106: 46454    20     0 long                INIT      HIDE      DECL  fixation@CMDTRIAL =2 (0x00000002)
1107: 46496    21  1106 long                INIT      HIDE      DECL  fixation@MGTRIAL =2 (0x00000002)
1108: 46538    22  1107 long                INIT      HIDE      DECL  fixation@SCHTRIAL =2 (0x00000002)
1109: 46580    47  1108 long                INIT      HIDE      DECL  fixation@CMD_PGS =2 (0x00000002)
1110: 46622    50  1109 long                INIT      HIDE      DECL  fixation@MG_PGS =2 (0x00000002)
1111: 46664    52  1110 long                INIT      HIDE      DECL  fixation@GNG_PGS =2 (0x00000002)
1112: 46706    54  1111 long                INIT      HIDE      DECL  fixation@DEL_PGS =2 (0x00000002)
1113: 46748    56  1112 long                INIT      HIDE      DECL  fixation@TSCH_PGS =2 (0x00000002)
1114: 46790    57  1113 long                INIT      HIDE      DECL  fixation@LSCH_PGS =2 (0x00000002)
1115: 46832    59  1114 long                INIT      HIDE      DECL  fixation@GNGTRIAL =2 (0x00000002)
1116: 46874    60  1115 long                INIT      HIDE      DECL  fixation@DELTRIAL =2 (0x00000002)
1117: 46916     0     0 arry                                    DECL  Fixation_color len=4 xmsOff=4164 [3] 1 @80 = {}
1118: 46958    47  1117 long                                    DECL  fixation_color@CMD_PGS =0 (0x00000000)
1119: 47000    49  1118 long                INIT      HIDE      DECL  fixation_color@SETC_TRL =255 (0x000000FF)
1120: 47042    50  1119 long                                    DECL  fixation_color@MG_PGS =0 (0x00000000)
1121: 47084    51  1120 long                INIT      HIDE      DECL  fixation_color@SETMGTRL =255 (0x000000FF)
1122: 47126    52  1121 long                                    DECL  fixation_color@GNG_PGS =0 (0x00000000)
1123: 47168    53  1122 long                INIT      HIDE      DECL  fixation_color@SETG_TRL =255 (0x000000FF)
1124: 47210    54  1123 long                                    DECL  fixation_color@DEL_PGS =0 (0x00000000)
1125: 47252    55  1124 long                INIT      HIDE      DECL  fixation_color@SETD_TRL =255 (0x000000FF)
1126: 47294    56  1125 long                                    DECL  fixation_color@TSCH_PGS =0 (0x00000000)
1127: 47336    57  1126 long                                    DECL  fixation_color@LSCH_PGS =0 (0x00000000)
1128: 47378    58  1127 long                INIT      HIDE      DECL  fixation_color@SETS_TRL =255 (0x000000FF)
1129: 47420     0     0 long                                    DECL  fixation_color_b =0 (0x00000000)
1130: 47462     0     0 long                                    DECL  fixation_color_g =0 (0x00000000)
1131: 47504     0     0 long                                    DECL  fixation_color_r =0 (0x00000000)
1132: 47546    22     0 long                INIT      HIDE      DECL  fixation_offset@SCHTRIAL =5 (0x00000005)
1133: 47588    20     0 long                INIT      HIDE      DECL  fixation_pd@CMDTRIAL =1 (0x00000001)
1134: 47630    21  1133 long                INIT      HIDE      DECL  fixation_pd@MGTRIAL =1 (0x00000001)
1135: 47672    22  1134 long                INIT      HIDE      DECL  fixation_pd@SCHTRIAL =1 (0x00000001)
1136: 47714    47  1135 long                INIT      HIDE      DECL  fixation_pd@CMD_PGS =1 (0x00000001)
1137: 47756    50  1136 long                INIT      HIDE      DECL  fixation_pd@MG_PGS =1 (0x00000001)
1138: 47798    52  1137 long                INIT      HIDE      DECL  fixation_pd@GNG_PGS =1 (0x00000001)
1139: 47840    54  1138 long                INIT      HIDE      DECL  fixation_pd@DEL_PGS =1 (0x00000001)
1140: 47882    56  1139 long                INIT      HIDE      DECL  fixation_pd@TSCH_PGS =1 (0x00000001)
1141: 47924    57  1140 long                INIT      HIDE      DECL  fixation_pd@LSCH_PGS =1 (0x00000001)
1142: 47966    59  1141 long                INIT      HIDE      DECL  fixation_pd@GNGTRIAL =1 (0x00000001)
1143: 48008    60  1142 long                INIT      HIDE      DECL  fixation_pd@DELTRIAL =1 (0x00000001)
1144: 48050     0     0 flot                                    DECL  Fixation_size =0.000000 (0x00000000)
1145: 48092    47  1144 flot                                    DECL  fixation_size@CMD_PGS =0.000000 (0x00000000)
1146: 48134    50  1145 flot                                    DECL  fixation_size@MG_PGS =0.000000 (0x00000000)
1147: 48176    52  1146 flot                                    DECL  fixation_size@GNG_PGS =0.000000 (0x00000000)
1148: 48218    54  1147 flot                                    DECL  fixation_size@DEL_PGS =0.000000 (0x00000000)
1149: 48260    56  1148 flot                                    DECL  fixation_size@TSCH_PGS =0.000000 (0x00000000)
1150: 48302    57  1149 flot                                    DECL  fixation_size@LSCH_PGS =0.000000 (0x00000000)
1151: 48344     0     0 long                                    DECL  Fixation_Target =0 (0x00000000)
1152: 48386    54  1151 long                INIT      HIDE      DECL  fixation_target@DEL_PGS =4 (0x00000004)
1153: 48428    60  1152 long                INIT      HIDE      DECL  fixation_target@DELTRIAL =4 (0x00000004)
1154: 48470    52     0 long                INIT      HIDE      DECL  fixation_target_pd@GNG_PGS =3 (0x00000003)
1155: 48512    54  1154 long                INIT      HIDE      DECL  fixation_target_pd@DEL_PGS =3 (0x00000003)
1156: 48554    59  1155 long                INIT      HIDE      DECL  fixation_target_pd@GNGTRIAL =3 (0x00000003)
1157: 48596    60  1156 long                INIT      HIDE      DECL  fixation_target_pd@DELTRIAL =3 (0x00000003)
1158: 48638     0     0 long                                    DECL  Fixed_trl_length =0 (0x00000000)
1159: 48680    67  1158 long                                    DECL  fixed_trl_length@SUCCESS =0 (0x00000000)
1160: 48722    68  1159 long                                    DECL  fixed_trl_length@FAILURE =0 (0x00000000)
1161: 48764     0     0 long CONS           INIT      HIDE      DECL  FixError_ =2750 (0x00000ABE)
1162: 48806     0     0 long                                    DECL  FixJitter =0 (0x00000000)
1163: 48848     0     0 long CONS           INIT      HIDE      DECL  FixSpotOff_ =2300 (0x000008FC)
1164: 48890     0     0 long CONS           INIT      HIDE      DECL  FixSpotOn_ =2301 (0x000008FD)
1165: 48932     0     0 long CONS PROC      INIT HDDN           DECL  FIXTRIAL =73 (0x00000049)
1166: 48974     0     0 long CONS           INIT      HIDE      DECL  FixWindow_ =2770 (0x00000AD2)
1167: 49016    46     0 long                INIT      HIDE      DECL  flash@FLS_PGS =1 (0x00000001)
1168: 49058    80  1167 long                INIT      HIDE      DECL  flash@FLSHSCRN =1 (0x00000001)
1169: 49100    80     0 long                INIT      HIDE      DECL  flashFailEv@FLSHSCRN =9998 (0x0000270E)
1170: 49142    80     0 long                INIT      HIDE      DECL  flashOnEv@FLSHSCRN =9999 (0x0000270F)
1171: 49184    80     0 long                INIT      HIDE      DECL  flashSessEnd@FLSHSCRN =9991 (0x00002707)
1172: 49226    80     0 long                INIT      HIDE      DECL  flashSessStart@FLSHSCRN =9990 (0x00002706)
1173: 49268    80     0 flot                          HIDE      DECL  flashStart@FLSHSCRN =0.000000 (0x00000000)
1174: 49310    80     0 long                INIT      HIDE      DECL  flashSuccEv@FLSHSCRN =9997 (0x0000270D)
1175: 49352     0     0 flot                                    DECL  flashTime =0.000000 (0x00000000)
1176: 49394     0     0 long CONS PROC      INIT HDDN           DECL  FLS_PGS =46 (0x0000002E)
1177: 49436     0     0 long CONS PROC      INIT HDDN           DECL  FLSHSCRN =80 (0x00000050)
1178: 49478    14     0 long                                    DECL  frequency@TONE =0 (0x00000000)
1179: 49520     1     0 long                          HIDE      DECL  g_@DEFAULT =0 (0x00000000)
1180: 49562     5  1179 long                          HIDE      DECL  g_@SET_CLRS =0 (0x00000000)
1181: 49604     1     0 long                INIT      HIDE      DECL  gauss@DEFAULT =5 (0x00000005)
1182: 49646     0     0 long CONS           INIT      HIDE      DECL  gLEFT =0 (0x00000000)
1183: 49688     0     0 long CONS PROC      INIT HDDN           DECL  GNG_PGS =52 (0x00000034)
1184: 49730     0     0 long CONS PROC      INIT HDDN           DECL  GNGTRIAL =59 (0x0000003B)
1185: 49772    20     0 long CONS           INIT      HIDE      DECL  go_correct@CMDTRIAL =7 (0x00000007)
1186: 49814    21  1185 long CONS           INIT      HIDE      DECL  go_correct@MGTRIAL =7 (0x00000007)
1187: 49856    22  1186 long CONS           INIT      HIDE      DECL  go_correct@SCHTRIAL =7 (0x00000007)
1188: 49898    49  1187 long CONS           INIT      HIDE      DECL  go_correct@SETC_TRL =7 (0x00000007)
1189: 49940    51  1188 long CONS           INIT      HIDE      DECL  go_correct@SETMGTRL =7 (0x00000007)
1190: 49982    58  1189 long CONS           INIT      HIDE      DECL  go_correct@SETS_TRL =7 (0x00000007)
1191: 50024    59  1190 long CONS           INIT      HIDE      DECL  go_correct@GNGTRIAL =7 (0x00000007)
1192: 50066    69  1191 long CONS           INIT      HIDE      DECL  go_correct@END_TRL =7 (0x00000007)
1193: 50108     0  1196 long CONS           INIT      HIDE      DECL  Go_trl =0 (0x00000000)
1194: 50150    20     0 long                INIT      HIDE      DECL  go_trl@CMDTRIAL =0 (0x00000000)
1195: 50192    21  1194 long                INIT      HIDE      DECL  go_trl@MGTRIAL =0 (0x00000000)
1196: 50234    22  1195 long                INIT      HIDE      DECL  go_trl@SCHTRIAL =0 (0x00000000)
1197: 50276    51  1193 long CONS           INIT      HIDE      DECL  Go_trl@SETMGTRL =0 (0x00000000)
1198: 50318    53  1197 long CONS           INIT      HIDE      DECL  Go_trl@SETG_TRL =0 (0x00000000)
1199: 50360    59  1198 long                INIT      HIDE      DECL  go_trl@GNGTRIAL =0 (0x00000000)
1200: 50402    67  1199 long                INIT      HIDE      DECL  go_trl@SUCCESS =0 (0x00000000)
1201: 50444     0     0 flot                                    DECL  Go_weight =0.000000 (0x00000000)
1202: 50486    49  1201 flot                                    DECL  go_weight@SETC_TRL =0.000000 (0x00000000)
1203: 50528    51  1202 flot                                    DECL  go_weight@SETMGTRL =0.000000 (0x00000000)
1204: 50570    58  1203 flot                                    DECL  go_weight@SETS_TRL =0.000000 (0x00000000)
1205: 50612    20     0 long CONS           INIT      HIDE      DECL  go_wrong@CMDTRIAL =3 (0x00000003)
1206: 50654    21  1205 long CONS           INIT      HIDE      DECL  go_wrong@MGTRIAL =3 (0x00000003)
1207: 50696    59  1206 long CONS           INIT      HIDE      DECL  go_wrong@GNGTRIAL =3 (0x00000003)
1208: 50738    69  1207 long CONS           INIT      HIDE      DECL  go_wrong@END_TRL =3 (0x00000003)
1209: 50780     0     0 long CONS           INIT      HIDE      DECL  GOCorrect_ =2755 (0x00000AC3)
1210: 50822     0     0 long CONS           INIT      HIDE      DECL  GoError_ =2752 (0x00000AC0)
1211: 50864     0     0 long CONS PROC      INIT HDDN           DECL  GONOGO =77 (0x0000004D)
1212: 50906     0     0 long CONS           INIT      HIDE      DECL  GONOGOHeader_ =1503 (0x000005DF)
1213: 50948     0     0 long CONS PROC      INIT HDDN           DECL  GOODVARS =2 (0x00000002)
1214: 50990     0     0 long CONS           INIT      HIDE      DECL  GoSaccade_ =2751 (0x00000ABF)
1215: 51032     0     0 long CONS           INIT      HIDE      DECL  GoTargFixError_ =2754 (0x00000AC2)
1216: 51074     0     0 flot                                    DECL  graph_rand_rt =0.000000 (0x00000000)
1217: 51116     0     0 flot                                    DECL  graph_rep_rt =0.000000 (0x00000000)
1218: 51158     0     0 long CONS PROC      INIT HDDN           DECL  GRAPHS =7 (0x00000007)
1219: 51200     0     0 long CONS           INIT      HIDE      DECL  gRIGHT =1 (0x00000001)
1220: 51242     6     0 flot                          HIDE      DECL  half_height@SET_COOR =0.000000 (0x00000000)
1221: 51284    41     0 flot                          HIDE      DECL  half_length@DRW_T =0.000000 (0x00000000)
1222: 51326    42  1221 flot                          HIDE      DECL  half_length@DRW_L =0.000000 (0x00000000)
1223: 51368    43     0 flot                          HIDE      DECL  half_size@DRW_PLAC =0.000000 (0x00000000)
1224: 51410    44  1223 flot                          HIDE      DECL  half_size@DRW_SQR =0.000000 (0x00000000)
1225: 51452    11     0 flot                          HIDE      DECL  half_size_tw@WINDOWS =0.000000 (0x00000000)
1226: 51494     6     0 flot                          HIDE      DECL  half_width@SET_COOR =0.000000 (0x00000000)
1227: 51536    41  1226 flot                          HIDE      DECL  half_width@DRW_T =0.000000 (0x00000000)
1228: 51578    42  1227 flot                          HIDE      DECL  half_width@DRW_L =0.000000 (0x00000000)
1229: 51620     1     0 long                INIT      HIDE      DECL  helmholtz@DEFAULT =4 (0x00000004)
1230: 51662    49     0 flot                          HIDE      DECL  holdtime_diff@SETC_TRL =0.000000 (0x00000000)
1231: 51704    51  1230 flot                          HIDE      DECL  holdtime_diff@SETMGTRL =0.000000 (0x00000000)
1232: 51746    53  1231 flot                          HIDE      DECL  holdtime_diff@SETG_TRL =0.000000 (0x00000000)
1233: 51788    55  1232 flot                          HIDE      DECL  holdtime_diff@SETD_TRL =0.000000 (0x00000000)
1234: 51830    58  1233 flot                          HIDE      DECL  holdtime_diff@SETS_TRL =0.000000 (0x00000000)
1235: 51872     0     0 flot                                    DECL  Homo_orient =0.000000 (0x00000000)
1236: 51914     0  1237 long                                    DECL  i =0 (0x00000000)
1237: 51956     2     0 long                          HIDE      DECL  i@GOODVARS =0 (0x00000000)
1238: 51998    26  1236 long                                    DECL  i@RandomizeRepDistAngles =0 (0x00000000)
1239: 52040    27  1238 long                                    DECL  i@RandomizeRepDistEccentricities =0 (0x00000000)
1240: 52082    28  1239 long                                    DECL  i@RandomizeRepTargAngles =0 (0x00000000)
1241: 52124    35  1240 long                                    DECL  i@RandomizeRanDistAngles =0 (0x00000000)
1242: 52166    36  1241 long                                    DECL  i@RandomizeRanDistEccentricities =0 (0x00000000)
1243: 52208    37  1242 long                                    DECL  i@RandomizeRanTargAngles =0 (0x00000000)
1244: 52250     0     0 long CONS           INIT      HIDE      DECL  Identify_Room_ =1500 (0x000005DC)
1245: 52292     0     0 long CONS PROC      INIT HDDN           DECL  IDLE =84 (0x00000054)
1246: 52334    84     0 long                          HIDE      DECL  idling@IDLE =0 (0x00000000)
1247: 52376     0     0 flot                                    DECL  IFI =0.000000 (0x00000000)
1248: 52418     0     0 arry                                    DECL  Ignore_sig_color len=4 xmsOff=4152 [3] 1 @72 = {}
1249: 52460    49  1248 long                INIT      HIDE      DECL  ignore_sig_color@SETC_TRL =253 (0x000000FD)
1250: 52502    51  1249 long                INIT      HIDE      DECL  ignore_sig_color@SETMGTRL =253 (0x000000FD)
1251: 52544    53  1250 long                INIT      HIDE      DECL  ignore_sig_color@SETG_TRL =253 (0x000000FD)
1252: 52586     0     0 long                                    DECL  ignore_sig_color_b =0 (0x00000000)
1253: 52628     0     0 long                                    DECL  ignore_sig_color_g =0 (0x00000000)
1254: 52670     0     0 long                                    DECL  ignore_sig_color_r =0 (0x00000000)
1255: 52712     0  1258 long CONS           INIT      HIDE      DECL  Ignore_trl =2 (0x00000002)
1256: 52754    20     0 long                INIT      HIDE      DECL  ignore_trl@CMDTRIAL =2 (0x00000002)
1257: 52796    21  1256 long                INIT      HIDE      DECL  ignore_trl@MGTRIAL =2 (0x00000002)
1258: 52838    22  1257 long                INIT      HIDE      DECL  ignore_trl@SCHTRIAL =2 (0x00000002)
1259: 52880    51  1255 long CONS           INIT      HIDE      DECL  Ignore_trl@SETMGTRL =2 (0x00000002)
1260: 52922    53  1259 long CONS           INIT      HIDE      DECL  Ignore_trl@SETG_TRL =2 (0x00000002)
1261: 52964    59  1260 long                INIT      HIDE      DECL  ignore_trl@GNGTRIAL =2 (0x00000002)
1262: 53006    67  1261 long                INIT      HIDE      DECL  ignore_trl@SUCCESS =2 (0x00000002)
1263: 53048     0     0 flot                                    DECL  Ignore_weight =0.000000 (0x00000000)
1264: 53090    49  1263 flot                                    DECL  ignore_weight@SETC_TRL =0.000000 (0x00000000)
1265: 53132    51  1264 flot                                    DECL  ignore_weight@SETMGTRL =0.000000 (0x00000000)
1266: 53174    58  1265 flot                                    DECL  ignore_weight@SETS_TRL =0.000000 (0x00000000)
1267: 53216    49     0 long                          HIDE      DECL  ii@SETC_TRL =0 (0x00000000)
1268: 53258    51  1267 long                          HIDE      DECL  ii@SETMGTRL =0 (0x00000000)
1269: 53300    58  1268 long                          HIDE      DECL  ii@SETS_TRL =0 (0x00000000)
1270: 53342     0     0 long                                    DECL  In_FixWin =0 (0x00000000)
1271: 53384    20     0 long                INIT      HIDE      DECL  in_flight@CMDTRIAL =4 (0x00000004)
1272: 53426    21  1271 long                INIT      HIDE      DECL  in_flight@MGTRIAL =5 (0x00000005)
1273: 53468    22  1272 long                INIT      HIDE      DECL  in_flight@SCHTRIAL =6 (0x00000006)
1274: 53510    59  1273 long                INIT      HIDE      DECL  in_flight@GNGTRIAL =5 (0x00000005)
1275: 53552    60  1274 long                INIT      HIDE      DECL  in_flight@DELTRIAL =5 (0x00000005)
1276: 53594     0     0 long                                    DECL  In_TargWin =0 (0x00000000)
1277: 53636     0     0 long CONS PROC      INIT HDDN           DECL  INFOS =64 (0x00000040)
1278: 53678     0     0 flot                INIT      HIDE      DECL  InfosZero =3000.000000 (0x453B8000)
1279: 53720     8     0 long                                    DECL  inh_box_size@SET_INH =0 (0x00000000)
1280: 53762     8     0 long                                    DECL  inh_left@SET_INH =0 (0x00000000)
1281: 53804     8     0 long                                    DECL  inh_right@SET_INH =0 (0x00000000)
1282: 53846     0     0 long                                    DECL  Inter_trl_int =0 (0x00000000)
1283: 53888    67  1282 long                                    DECL  inter_trl_int@SUCCESS =0 (0x00000000)
1284: 53930    68  1283 long                                    DECL  inter_trl_int@FAILURE =0 (0x00000000)
1285: 53972     0     0 long                                    DECL  j =0 (0x00000000)
1286: 54014    26  1285 long                                    DECL  j@RandomizeRepDistAngles =0 (0x00000000)
1287: 54056    27  1286 long                                    DECL  j@RandomizeRepDistEccentricities =0 (0x00000000)
1288: 54098    28  1287 long                                    DECL  j@RandomizeRepTargAngles =0 (0x00000000)
1289: 54140    35  1288 long                                    DECL  j@RandomizeRanDistAngles =0 (0x00000000)
1290: 54182    36  1289 long                                    DECL  j@RandomizeRanDistEccentricities =0 (0x00000000)
1291: 54224    37  1290 long                                    DECL  j@RandomizeRanTargAngles =0 (0x00000000)
1292: 54266    49     0 flot                          HIDE      DECL  jitter@SETC_TRL =0.000000 (0x00000000)
1293: 54308    51  1292 flot                          HIDE      DECL  jitter@SETMGTRL =0.000000 (0x00000000)
1294: 54350    53  1293 flot                          HIDE      DECL  jitter@SETG_TRL =0.000000 (0x00000000)
1295: 54392    55  1294 flot                          HIDE      DECL  jitter@SETD_TRL =0.000000 (0x00000000)
1296: 54434    58  1295 flot                          HIDE      DECL  jitter@SETS_TRL =0.000000 (0x00000000)
1297: 54476     0     0 long CONS PROC      INIT HDDN           DECL  JUICE =66 (0x00000042)
1298: 54518     0     0 long CONS           INIT      HIDE      DECL  Juice_channel =9 (0x00000009)
1299: 54560    70     0 long                          HIDE      DECL  juice_duration@KEY_REWD =0 (0x00000000)
1300: 54602     0     0 long CONS PROC      INIT HDDN           DECL  KEY_REWD =70 (0x00000046)
1301: 54644     0     0 long CONS PROC      INIT HDDN           DECL  KEY_STIM =4 (0x00000004)
1302: 54686     0     0 long CONS PROC      INIT HDDN           DECL  KEY_T_DN =72 (0x00000048)
1303: 54728     0     0 long CONS PROC      INIT HDDN           DECL  KEY_T_UP =71 (0x00000047)
1304: 54770    16     0 long                INIT                DECL  last_status@WATCHMTH =0 (0x00000000)
1305: 54812     0     0 long                                    DECL  Last_task =0 (0x00000000)
1306: 54854     0     0 long                          HIDE      DECL  LastSearchOutcome =0 (0x00000000)
1307: 54896     0     0 long                                    DECL  LastStim =0 (0x00000000)
1308: 54938     0     0 long                INIT      HIDE      DECL  LastStopOutcome =2 (0x00000002)
1309: 54980    48  1308 long                                    DECL  laststopoutcome@STAIR =0 (0x00000000)
1310: 55022    61  1309 long                                    DECL  laststopoutcome@UPD8_INH =0 (0x00000000)
1311: 55064    62  1310 long                                    DECL  laststopoutcome@UPD8_SOA =0 (0x00000000)
1312: 55106    13     0 long                          HIDE      DECL  lasttime@WATCHEYE =0 (0x00000000)
1313: 55148     0     0 long                                    DECL  LatStruct =0 (0x00000000)
1314: 55190     7     0 long                          HIDE      DECL  left@GRAPHS =0 (0x00000000)
1315: 55232    42     0 flot                          HIDE      DECL  LHx1@DRW_L =0.000000 (0x00000000)
1316: 55274    42     0 flot                          HIDE      DECL  LHx2@DRW_L =0.000000 (0x00000000)
1317: 55316    42     0 flot                          HIDE      DECL  LHy1@DRW_L =0.000000 (0x00000000)
1318: 55358    42     0 flot                          HIDE      DECL  LHy2@DRW_L =0.000000 (0x00000000)
1319: 55400     0     0 flot                INIT      HIDE      DECL  llength =1.600000 (0x3FCCCCCD)
1320: 55442     0     0 long CONS PROC      INIT HDDN           DECL  LOC_ASYM =39 (0x00000027)
1321: 55484     0     0 long CONS PROC      INIT HDDN           DECL  LOC_RAND =38 (0x00000026)
1322: 55526     0     0 long CONS PROC      INIT HDDN           DECL  LOC_REP =25 (0x00000019)
1323: 55568     0     0 long CONS PROC      INIT HDDN           DECL  LOCATE_I =12 (0x0000000C)
1324: 55610    43     0 long                          HIDE      DECL  lrx@DRW_PLAC =0 (0x00000000)
1325: 55652    44  1324 long                          HIDE      DECL  lrx@DRW_SQR =0 (0x00000000)
1326: 55694    43     0 long                          HIDE      DECL  lry@DRW_PLAC =0 (0x00000000)
1327: 55736    44  1326 long                          HIDE      DECL  lry@DRW_SQR =0 (0x00000000)
1328: 55778     0     0 long CONS PROC      INIT HDDN           DECL  LSCH_PGS =57 (0x00000039)
1329: 55820    42     0 flot                          HIDE      DECL  LVx1@DRW_L =0.000000 (0x00000000)
1330: 55862    42     0 flot                          HIDE      DECL  LVx2@DRW_L =0.000000 (0x00000000)
1331: 55904    42     0 flot                          HIDE      DECL  LVy1@DRW_L =0.000000 (0x00000000)
1332: 55946    42     0 flot                          HIDE      DECL  LVy2@DRW_L =0.000000 (0x00000000)
1333: 55988     0     0 flot                INIT      HIDE      DECL  lwidth =0.500000 (0x3F000000)
1334: 56030     0     0 long CONS           INIT      HIDE      DECL  MapHeader_ =1503 (0x000005DF)
1335: 56072     0     0 arry                                    DECL  Mask_sig_color len=4 xmsOff=4176 [3] 1 @88 = {}
1336: 56114    52     0 long                                    DECL  maskcolor@GNG_PGS =0 (0x00000000)
1337: 56156    53  1336 long                INIT      HIDE      DECL  maskcolor@SETG_TRL =252 (0x000000FC)
1338: 56198     0     0 long                                    DECL  Max_Holdtime =0 (0x00000000)
1339: 56240    49  1338 long                                    DECL  max_holdtime@SETC_TRL =0 (0x00000000)
1340: 56282    51  1339 long                                    DECL  max_holdtime@SETMGTRL =0 (0x00000000)
1341: 56324    53  1340 long                                    DECL  max_holdtime@SETG_TRL =0 (0x00000000)
1342: 56366    55  1341 long                                    DECL  max_holdtime@SETD_TRL =0 (0x00000000)
1343: 56408    58  1342 long                                    DECL  max_holdtime@SETS_TRL =0 (0x00000000)
1344: 56450     0     0 long                                    DECL  Max_move_ct =0 (0x00000000)
1345: 56492     0     0 flot                                    DECL  max_plactime =0.000000 (0x00000000)
1346: 56534     0     0 long                                    DECL  Max_sacc_duration =0 (0x00000000)
1347: 56576    20  1346 long                                    DECL  max_sacc_duration@CMDTRIAL =0 (0x00000000)
1348: 56618    21  1347 long                                    DECL  max_sacc_duration@MGTRIAL =0 (0x00000000)
1349: 56660    22  1348 long                                    DECL  max_sacc_duration@SCHTRIAL =0 (0x00000000)
1350: 56702    59  1349 long                                    DECL  max_sacc_duration@GNGTRIAL =0 (0x00000000)
1351: 56744    60  1350 long                                    DECL  max_sacc_duration@DELTRIAL =0 (0x00000000)
1352: 56786     0     0 long                                    DECL  Max_saccade_time =0 (0x00000000)
1353: 56828    20  1352 long                                    DECL  max_saccade_time@CMDTRIAL =0 (0x00000000)
1354: 56870    21  1353 long                                    DECL  max_saccade_time@MGTRIAL =0 (0x00000000)
1355: 56912    22  1354 long                                    DECL  max_saccade_time@SCHTRIAL =0 (0x00000000)
1356: 56954    59  1355 long                                    DECL  max_saccade_time@GNGTRIAL =0 (0x00000000)
1357: 56996    60  1356 long                                    DECL  max_saccade_time@DELTRIAL =0 (0x00000000)
1358: 57038    73  1357 long                                    DECL  max_saccade_time@FIXTRIAL =0 (0x00000000)
1359: 57080     0     0 long                                    DECL  Max_SOA =0 (0x00000000)
1360: 57122     9  1359 long                                    DECL  max_soa@SET_SOA =0 (0x00000000)
1361: 57164    53  1360 long                                    DECL  max_soa@SETG_TRL =0 (0x00000000)
1362: 57206    55  1361 long                                    DECL  max_soa@SETD_TRL =0 (0x00000000)
1363: 57248     0     0 long                                    DECL  Max_SSD =0 (0x00000000)
1364: 57290     8  1363 long                                    DECL  max_ssd@SET_INH =0 (0x00000000)
1365: 57332     0     0 flot CONS           INIT      HIDE      DECL  MaxVoltage =10.000000 (0x41200000)
1366: 57374    13  1365 flot                                    DECL  maxvoltage@WATCHEYE =0.000000 (0x00000000)
1367: 57416     0     0 flot                                    DECL  MedP_weight =0.000000 (0x00000000)
1368: 57458     0     0 flot                                    DECL  MedR_weight =0.000000 (0x00000000)
1369: 57500     0     0 long CONS           INIT      HIDE      DECL  MemHeader_ =1502 (0x000005DE)
1370: 57542     0     0 long CONS PROC      INIT HDDN           DECL  MG_PGS =50 (0x00000032)
1371: 57584     0     0 long CONS PROC      INIT HDDN           DECL  MGTRIAL =21 (0x00000015)
1372: 57626     0     0 long CONS PROC      INIT HDDN           DECL  MGUIDE =76 (0x0000004C)
1373: 57668     0     0 long                                    DECL  Min_Holdtime =0 (0x00000000)
1374: 57710    49  1373 long                                    DECL  min_holdtime@SETC_TRL =0 (0x00000000)
1375: 57752    51  1374 long                                    DECL  min_holdtime@SETMGTRL =0 (0x00000000)
1376: 57794    53  1375 long                                    DECL  min_holdtime@SETG_TRL =0 (0x00000000)
1377: 57836    55  1376 long                                    DECL  min_holdtime@SETD_TRL =0 (0x00000000)
1378: 57878    58  1377 long                                    DECL  min_holdtime@SETS_TRL =0 (0x00000000)
1379: 57920     0     0 flot                                    DECL  min_plactime =0.000000 (0x00000000)
1380: 57962     0     0 long                                    DECL  Min_saccade_time =0 (0x00000000)
1381: 58004     0     0 long                                    DECL  Min_SOA =0 (0x00000000)
1382: 58046     9  1381 long                                    DECL  min_soa@SET_SOA =0 (0x00000000)
1383: 58088    53  1382 long                                    DECL  min_soa@SETG_TRL =0 (0x00000000)
1384: 58130    55  1383 long                                    DECL  min_soa@SETD_TRL =0 (0x00000000)
1385: 58172     0     0 long                                    DECL  Min_SSD =0 (0x00000000)
1386: 58214     8  1385 long                                    DECL  min_ssd@SET_INH =0 (0x00000000)
1387: 58256     0     0 long                                    DECL  Monkey =0 (0x00000000)
1388: 58298     1  1387 long                                    DECL  monkey@DEFAULT =0 (0x00000000)
1389: 58340    16     0 long                                    DECL  mouth@WATCHMTH =0 (0x00000000)
1390: 58382    16     0 long                INIT                DECL  mouth_channel@WATCHMTH =3 (0x00000003)
1391: 58424    16     0 long                INIT                DECL  mouth_status@WATCHMTH =0 (0x00000000)
1392: 58466    16     0 long                INIT                DECL  mouth_thresh@WATCHMTH =13720 (0x00003598)
1393: 58508    16     0 long                                    DECL  mouth_time@WATCHMTH =0 (0x00000000)
1394: 58550     0     0 long CONS           INIT      HIDE      DECL  MouthBegin_ =2655 (0x00000A5F)
1395: 58592     0     0 long CONS           INIT      HIDE      DECL  MouthEnd_ =2656 (0x00000A60)
1396: 58634     0     0 long                                    DECL  Move_ct =0 (0x00000000)
1397: 58676    16     0 long                INIT                DECL  moving@WATCHMTH =1 (0x00000001)
1398: 58718    83     0 long                                    DECL  n_evs_sent@QUE_TTL =0 (0x00000000)
1399: 58760     0     0 long                                    DECL  N_SOAs =0 (0x00000000)
1400: 58802     9  1399 long                                    DECL  n_soas@SET_SOA =0 (0x00000000)
1401: 58844    51  1400 long                                    DECL  n_SOAs@SETMGTRL =0 (0x00000000)
1402: 58886     0     0 long                                    DECL  N_SSDs =0 (0x00000000)
1403: 58928     8  1402 long                                    DECL  n_ssds@SET_INH =0 (0x00000000)
1404: 58970    48  1403 long                                    DECL  n_SSDs@STAIR =0 (0x00000000)
1405: 59012    49  1404 long                                    DECL  n_SSDs@SETC_TRL =0 (0x00000000)
1406: 59054    58  1405 long                                    DECL  n_SSDs@SETS_TRL =0 (0x00000000)
1407: 59096     0     0 long                                    DECL  N_targ_pos =0 (0x00000000)
1408: 59138     5  1407 long                                    DECL  n_targ_pos@SET_CLRS =0 (0x00000000)
1409: 59180    49  1408 long                                    DECL  n_targ_pos@SETC_TRL =0 (0x00000000)
1410: 59222    51  1409 long                                    DECL  n_targ_pos@SETMGTRL =0 (0x00000000)
1411: 59264    53  1410 long                                    DECL  n_targ_pos@SETG_TRL =0 (0x00000000)
1412: 59306    55  1411 long                                    DECL  n_targ_pos@SETD_TRL =0 (0x00000000)
1413: 59348    58  1412 long                                    DECL  n_targ_pos@SETS_TRL =0 (0x00000000)
1414: 59390    20     0 long                INIT      HIDE      DECL  need_fix@CMDTRIAL =1 (0x00000001)
1415: 59432    21  1414 long                INIT      HIDE      DECL  need_fix@MGTRIAL =1 (0x00000001)
1416: 59474    22  1415 long                INIT      HIDE      DECL  need_fix@SCHTRIAL =1 (0x00000001)
1417: 59516    59  1416 long                INIT      HIDE      DECL  need_fix@GNGTRIAL =1 (0x00000001)
1418: 59558    60  1417 long                INIT      HIDE      DECL  need_fix@DELTRIAL =1 (0x00000001)
1419: 59600    80  1418 long                INIT      HIDE      DECL  need_fix@FLSHSCRN =1 (0x00000001)
1420: 59642    73     0 long                INIT      HIDE      DECL  need_targ@FIXTRIAL =1 (0x00000001)
1421: 59684     0     0 long CONS           INIT      HIDE      DECL  Neg2Reinforcement_ =2773 (0x00000AD5)
1422: 59726    20     0 long                INIT      HIDE      DECL  no_change@CMDTRIAL =2 (0x00000002)
1423: 59768    21  1422 long                INIT      HIDE      DECL  no_change@MGTRIAL =2 (0x00000002)
1424: 59810    22  1423 long                INIT      HIDE      DECL  no_change@SCHTRIAL =2 (0x00000002)
1425: 59852    59  1424 long                INIT      HIDE      DECL  no_change@GNGTRIAL =2 (0x00000002)
1426: 59894    20     0 long CONS           INIT      HIDE      DECL  no_fix@CMDTRIAL =1 (0x00000001)
1427: 59936    21  1426 long CONS           INIT      HIDE      DECL  no_fix@MGTRIAL =1 (0x00000001)
1428: 59978    22  1427 long CONS           INIT      HIDE      DECL  no_fix@SCHTRIAL =1 (0x00000001)
1429: 60020    59  1428 long CONS           INIT      HIDE      DECL  no_fix@GNGTRIAL =1 (0x00000001)
1430: 60062    60  1429 long CONS           INIT      HIDE      DECL  no_fix@DELTRIAL =1 (0x00000001)
1431: 60104    69  1430 long CONS           INIT      HIDE      DECL  no_fix@END_TRL =1 (0x00000001)
1432: 60146    21     0 long CONS           INIT      HIDE      DECL  no_sacc@MGTRIAL =10 (0x0000000A)
1433: 60188    59  1432 long CONS           INIT      HIDE      DECL  no_sacc@GNGTRIAL =10 (0x0000000A)
1434: 60230    60  1433 long CONS           INIT      HIDE      DECL  no_sacc@DELTRIAL =10 (0x0000000A)
1435: 60272    69  1434 long CONS           INIT      HIDE      DECL  no_sacc@END_TRL =10 (0x0000000A)
1436: 60314    22     0 long CONS           INIT      HIDE      DECL  no_saccade@SCHTRIAL =3 (0x00000003)
1437: 60356    20     0 long CONS           INIT      HIDE      DECL  nogo_correct@CMDTRIAL =4 (0x00000004)
1438: 60398    21  1437 long CONS           INIT      HIDE      DECL  nogo_correct@MGTRIAL =4 (0x00000004)
1439: 60440    22  1438 long CONS           INIT      HIDE      DECL  nogo_correct@SCHTRIAL =4 (0x00000004)
1440: 60482    49  1439 long CONS           INIT      HIDE      DECL  nogo_correct@SETC_TRL =4 (0x00000004)
1441: 60524    51  1440 long CONS           INIT      HIDE      DECL  nogo_correct@SETMGTRL =4 (0x00000004)
1442: 60566    58  1441 long CONS           INIT      HIDE      DECL  nogo_correct@SETS_TRL =4 (0x00000004)
1443: 60608    59  1442 long CONS           INIT      HIDE      DECL  nogo_correct@GNGTRIAL =4 (0x00000004)
1444: 60650    69  1443 long CONS           INIT      HIDE      DECL  nogo_correct@END_TRL =4 (0x00000004)
1445: 60692    22     0 long                INIT      HIDE      DECL  nogo_success@SCHTRIAL =3 (0x00000003)
1446: 60734    63  1445 long                INIT                DECL  nogo_success@UPD8_SCH =3 (0x00000003)
1447: 60776    20     0 long CONS           INIT      HIDE      DECL  nogo_wrong@CMDTRIAL =8 (0x00000008)
1448: 60818    21  1447 long CONS           INIT      HIDE      DECL  nogo_wrong@MGTRIAL =8 (0x00000008)
1449: 60860    22  1448 long CONS           INIT      HIDE      DECL  nogo_wrong@SCHTRIAL =8 (0x00000008)
1450: 60902    59  1449 long CONS           INIT      HIDE      DECL  nogo_wrong@GNGTRIAL =8 (0x00000008)
1451: 60944    69  1450 long CONS           INIT      HIDE      DECL  nogo_wrong@END_TRL =8 (0x00000008)
1452: 60986     0     0 long CONS           INIT      HIDE      DECL  NOGOCorrect_ =2756 (0x00000AC4)
1453: 61028     0     0 long                          HIDE      DECL  nogosoa =0 (0x00000000)
1454: 61070     0     0 long CONS           INIT      HIDE      DECL  NOGOWrong_ =2753 (0x00000AC1)
1455: 61112     0     0 arry                                    DECL  NonSingleton_color len=4 xmsOff=4128 [3] 1 @56 = {}
1456: 61154    69     0 long                                    DECL  now@END_TRL =0 (0x00000000)
1457: 61196     0     0 long                                    DECL  Npulse =0 (0x00000000)
1458: 61238     0     0 long                INIT      HIDE      DECL  numDistAngles =8 (0x00000008)
1459: 61280     0     0 long                INIT      HIDE      DECL  numDistEcc =9 (0x00000009)
1460: 61322     0     0 long                INIT      HIDE      DECL  numTargAngles =4 (0x00000004)
1461: 61364     0     0 long                          HIDE      DECL  object_30_70 =0 (0x00000000)
1462: 61406     0     0 long                          HIDE      DECL  object_eye =0 (0x00000000)
1463: 61448     0     0 long                          HIDE      DECL  object_fix =0 (0x00000000)
1464: 61490    20  1463 long                                    DECL  object_fix@CMDTRIAL =0 (0x00000000)
1465: 61532    21  1464 long                                    DECL  object_fix@MGTRIAL =0 (0x00000000)
1466: 61574    22  1465 long                                    DECL  object_fix@SCHTRIAL =0 (0x00000000)
1467: 61616    59  1466 long                                    DECL  object_fix@GNGTRIAL =0 (0x00000000)
1468: 61658    60  1467 long                                    DECL  object_fix@DELTRIAL =0 (0x00000000)
1469: 61700     0     0 long                          HIDE      DECL  object_fixwin =0 (0x00000000)
1470: 61742    11  1469 long                                    DECL  object_fixwin@WINDOWS =0 (0x00000000)
1471: 61784     0     0 long                          HIDE      DECL  object_random =0 (0x00000000)
1472: 61826     0     0 long                          HIDE      DECL  object_repeat =0 (0x00000000)
1473: 61868     0     0 long                          HIDE      DECL  object_soa0 =0 (0x00000000)
1474: 61910     0     0 long                          HIDE      DECL  object_soa1 =0 (0x00000000)
1475: 61952     0     0 long                          HIDE      DECL  object_soa10 =0 (0x00000000)
1476: 61994     0     0 long                          HIDE      DECL  object_soa11 =0 (0x00000000)
1477: 62036     0     0 long                          HIDE      DECL  object_soa12 =0 (0x00000000)
1478: 62078     0     0 long                          HIDE      DECL  object_soa13 =0 (0x00000000)
1479: 62120     0     0 long                          HIDE      DECL  object_soa14 =0 (0x00000000)
1480: 62162     0     0 long                          HIDE      DECL  object_soa15 =0 (0x00000000)
1481: 62204     0     0 long                          HIDE      DECL  object_soa16 =0 (0x00000000)
1482: 62246     0     0 long                          HIDE      DECL  object_soa17 =0 (0x00000000)
1483: 62288     0     0 long                          HIDE      DECL  object_soa18 =0 (0x00000000)
1484: 62330     0     0 long                          HIDE      DECL  object_soa19 =0 (0x00000000)
1485: 62372     0     0 long                          HIDE      DECL  object_soa2 =0 (0x00000000)
1486: 62414     0     0 long                          HIDE      DECL  object_soa3 =0 (0x00000000)
1487: 62456     0     0 long                          HIDE      DECL  object_soa4 =0 (0x00000000)
1488: 62498     0     0 long                          HIDE      DECL  object_soa5 =0 (0x00000000)
1489: 62540     0     0 long                          HIDE      DECL  object_soa6 =0 (0x00000000)
1490: 62582     0     0 long                          HIDE      DECL  object_soa7 =0 (0x00000000)
1491: 62624     0     0 long                          HIDE      DECL  object_soa8 =0 (0x00000000)
1492: 62666     0     0 long                          HIDE      DECL  object_soa9 =0 (0x00000000)
1493: 62708     0     0 long                          HIDE      DECL  object_ssd0 =0 (0x00000000)
1494: 62750     0     0 long                          HIDE      DECL  object_ssd1 =0 (0x00000000)
1495: 62792     0     0 long                          HIDE      DECL  object_ssd10 =0 (0x00000000)
1496: 62834     0     0 long                          HIDE      DECL  object_ssd11 =0 (0x00000000)
1497: 62876     0     0 long                          HIDE      DECL  object_ssd12 =0 (0x00000000)
1498: 62918     0     0 long                          HIDE      DECL  object_ssd13 =0 (0x00000000)
1499: 62960     0     0 long                          HIDE      DECL  object_ssd14 =0 (0x00000000)
1500: 63002     0     0 long                          HIDE      DECL  object_ssd15 =0 (0x00000000)
1501: 63044     0     0 long                          HIDE      DECL  object_ssd16 =0 (0x00000000)
1502: 63086     0     0 long                          HIDE      DECL  object_ssd17 =0 (0x00000000)
1503: 63128     0     0 long                          HIDE      DECL  object_ssd18 =0 (0x00000000)
1504: 63170     0     0 long                          HIDE      DECL  object_ssd19 =0 (0x00000000)
1505: 63212     0     0 long                          HIDE      DECL  object_ssd2 =0 (0x00000000)
1506: 63254     0     0 long                          HIDE      DECL  object_ssd3 =0 (0x00000000)
1507: 63296     0     0 long                          HIDE      DECL  object_ssd4 =0 (0x00000000)
1508: 63338     0     0 long                          HIDE      DECL  object_ssd5 =0 (0x00000000)
1509: 63380     0     0 long                          HIDE      DECL  object_ssd6 =0 (0x00000000)
1510: 63422     0     0 long                          HIDE      DECL  object_ssd7 =0 (0x00000000)
1511: 63464     0     0 long                          HIDE      DECL  object_ssd8 =0 (0x00000000)
1512: 63506     0     0 long                          HIDE      DECL  object_ssd9 =0 (0x00000000)
1513: 63548     0     0 long                          HIDE      DECL  object_targ =0 (0x00000000)
1514: 63590    45  1513 long                                    DECL  object_targ@FIX_PGS =0 (0x00000000)
1515: 63632    46  1514 long                                    DECL  object_targ@FLS_PGS =0 (0x00000000)
1516: 63674    47  1515 long                                    DECL  object_targ@CMD_PGS =0 (0x00000000)
1517: 63716    50  1516 long                                    DECL  object_targ@MG_PGS =0 (0x00000000)
1518: 63758    52  1517 long                                    DECL  object_targ@GNG_PGS =0 (0x00000000)
1519: 63800    54  1518 long                                    DECL  object_targ@DEL_PGS =0 (0x00000000)
1520: 63842    56  1519 long                                    DECL  object_targ@TSCH_PGS =0 (0x00000000)
1521: 63884    57  1520 long                                    DECL  object_targ@LSCH_PGS =0 (0x00000000)
1522: 63926    73  1521 long                                    DECL  object_targ@FIXTRIAL =0 (0x00000000)
1523: 63968     0     0 long                          HIDE      DECL  object_targwin =0 (0x00000000)
1524: 64010    11  1523 long                                    DECL  object_targwin@WINDOWS =0 (0x00000000)
1525: 64052     3     0 long                INIT      HIDE      DECL  off@STIM =0 (0x00000000)
1526: 64094    14  1525 long                INIT      HIDE      DECL  off@TONE =0 (0x00000000)
1527: 64136    79  1526 long                INIT      HIDE      DECL  off@SEARCH =0 (0x00000000)
1528: 64178    84  1527 long                INIT      HIDE      DECL  off@IDLE =0 (0x00000000)
1529: 64220    80     0 flot                          HIDE      DECL  offTime@FLSHSCRN =0.000000 (0x00000000)
1530: 64262     0     0 long                                    DECL  OK =0 (0x00000000)
1531: 64304    11     0 flot                          HIDE      DECL  old_fix_win_size@WINDOWS =0.000000 (0x00000000)
1532: 64346    11     0 flot                          HIDE      DECL  old_targ_win_size@WINDOWS =0.000000 (0x00000000)
1533: 64388    13     0 flot                          HIDE      DECL  oldx@WATCHEYE =0.000000 (0x00000000)
1534: 64430    13     0 flot                          HIDE      DECL  oldy@WATCHEYE =0.000000 (0x00000000)
1535: 64472     3     0 long                INIT      HIDE      DECL  on@STIM =1 (0x00000001)
1536: 64514    79  1535 long                INIT      HIDE      DECL  on@SEARCH =1 (0x00000001)
1537: 64556    20     0 long                INIT      HIDE      DECL  on_target@CMDTRIAL =5 (0x00000005)
1538: 64598    21  1537 long                INIT      HIDE      DECL  on_target@MGTRIAL =6 (0x00000006)
1539: 64640    22  1538 long                INIT      HIDE      DECL  on_target@SCHTRIAL =7 (0x00000007)
1540: 64682    59  1539 long                INIT      HIDE      DECL  on_target@GNGTRIAL =6 (0x00000006)
1541: 64724    60  1540 long                INIT      HIDE      DECL  on_target@DELTRIAL =6 (0x00000006)
1542: 64766    45     0 long                INIT      HIDE      DECL  open@FIX_PGS =0 (0x00000000)
1543: 64808    47  1542 long                INIT      HIDE      DECL  open@CMD_PGS =0 (0x00000000)
1544: 64850    50  1543 long                INIT      HIDE      DECL  open@MG_PGS =0 (0x00000000)
1545: 64892    52  1544 long                INIT      HIDE      DECL  open@GNG_PGS =0 (0x00000000)
1546: 64934    54  1545 long                INIT      HIDE      DECL  open@DEL_PGS =0 (0x00000000)
1547: 64976    56  1546 long                INIT      HIDE      DECL  open@TSCH_PGS =0 (0x00000000)
1548: 65018    57  1547 long                INIT      HIDE      DECL  open@LSCH_PGS =0 (0x00000000)
1549: 65060    66  1548 long                INIT      HIDE      DECL  open@JUICE =1 (0x00000001)
1550: 65102    46     0 flot                          HIDE      DECL  opposite@FLS_PGS =0.000000 (0x00000000)
1551: 65144    47  1550 flot                          HIDE      DECL  opposite@CMD_PGS =0.000000 (0x00000000)
1552: 65186    50  1551 flot                          HIDE      DECL  opposite@MG_PGS =0.000000 (0x00000000)
1553: 65228    52  1552 flot                          HIDE      DECL  opposite@GNG_PGS =0.000000 (0x00000000)
1554: 65270    54  1553 flot                          HIDE      DECL  opposite@DEL_PGS =0.000000 (0x00000000)
1555: 65312    56  1554 flot                          HIDE      DECL  opposite@TSCH_PGS =0.000000 (0x00000000)
1556: 65354    57  1555 flot                          HIDE      DECL  opposite@LSCH_PGS =0.000000 (0x00000000)
1557: 65396     0     0 long                                    DECL  orientation =0 (0x00000000)
1558: 65438    41  1557 flot                                    DECL  orientation@DRW_T =0.000000 (0x00000000)
1559: 65480    42  1558 flot                                    DECL  orientation@DRW_L =0.000000 (0x00000000)
1560: 65522    82     0 long                INIT                DECL  output@SEND_TTL =1 (0x00000001)
1561: 65564     0     0 long                                    DECL  Pause =0 (0x00000000)
1562: 65606    79     0 long                INIT      HIDE      DECL  pcnt@SEARCH =0 (0x00000000)
1563: 65648    46     0 flot                          HIDE      DECL  pd_angle@FLS_PGS =0.000000 (0x00000000)
1564: 65690    47  1563 flot                          HIDE      DECL  pd_angle@CMD_PGS =0.000000 (0x00000000)
1565: 65732    50  1564 flot                          HIDE      DECL  pd_angle@MG_PGS =0.000000 (0x00000000)
1566: 65774    52  1565 flot                          HIDE      DECL  pd_angle@GNG_PGS =0.000000 (0x00000000)
1567: 65816    54  1566 flot                          HIDE      DECL  pd_angle@DEL_PGS =0.000000 (0x00000000)
1568: 65858    56  1567 flot                          HIDE      DECL  pd_angle@TSCH_PGS =0.000000 (0x00000000)
1569: 65900    57  1568 flot                          HIDE      DECL  pd_angle@LSCH_PGS =0.000000 (0x00000000)
1570: 65942     0     0 flot CONS           INIT      HIDE      DECL  PD_bottom =7.000000 (0x40E00000)
1571: 65984    46  1570 flot                                    DECL  pd_bottom@FLS_PGS =0.000000 (0x00000000)
1572: 66026    47  1571 flot                                    DECL  pd_bottom@CMD_PGS =0.000000 (0x00000000)
1573: 66068    50  1572 flot                                    DECL  pd_bottom@MG_PGS =0.000000 (0x00000000)
1574: 66110    52  1573 flot                                    DECL  pd_bottom@GNG_PGS =0.000000 (0x00000000)
1575: 66152    54  1574 flot                                    DECL  pd_bottom@DEL_PGS =0.000000 (0x00000000)
1576: 66194    56  1575 flot                                    DECL  pd_bottom@TSCH_PGS =0.000000 (0x00000000)
1577: 66236    57  1576 flot                                    DECL  pd_bottom@LSCH_PGS =0.000000 (0x00000000)
1578: 66278    46     0 flot                          HIDE      DECL  pd_eccentricity@FLS_PGS =0.000000 (0x00000000)
1579: 66320    47  1578 flot                          HIDE      DECL  pd_eccentricity@CMD_PGS =0.000000 (0x00000000)
1580: 66362    50  1579 flot                          HIDE      DECL  pd_eccentricity@MG_PGS =0.000000 (0x00000000)
1581: 66404    52  1580 flot                          HIDE      DECL  pd_eccentricity@GNG_PGS =0.000000 (0x00000000)
1582: 66446    54  1581 flot                          HIDE      DECL  pd_eccentricity@DEL_PGS =0.000000 (0x00000000)
1583: 66488    56  1582 flot                          HIDE      DECL  pd_eccentricity@TSCH_PGS =0.000000 (0x00000000)
1584: 66530    57  1583 flot                          HIDE      DECL  pd_eccentricity@LSCH_PGS =0.000000 (0x00000000)
1585: 66572     0     0 flot CONS           INIT      HIDE      DECL  PD_left =6.000000 (0x40C00000)
1586: 66614    46  1585 flot                                    DECL  pd_left@FLS_PGS =0.000000 (0x00000000)
1587: 66656    47  1586 flot                                    DECL  pd_left@CMD_PGS =0.000000 (0x00000000)
1588: 66698    50  1587 flot                                    DECL  pd_left@MG_PGS =0.000000 (0x00000000)
1589: 66740    52  1588 flot                                    DECL  pd_left@GNG_PGS =0.000000 (0x00000000)
1590: 66782    54  1589 flot                                    DECL  pd_left@DEL_PGS =0.000000 (0x00000000)
1591: 66824    56  1590 flot                                    DECL  pd_left@TSCH_PGS =0.000000 (0x00000000)
1592: 66866    57  1591 flot                                    DECL  pd_left@LSCH_PGS =0.000000 (0x00000000)
1593: 66908     0     0 flot CONS           INIT      HIDE      DECL  PD_size =25.000000 (0x41C80000)
1594: 66950    46  1593 flot                                    DECL  pd_size@FLS_PGS =0.000000 (0x00000000)
1595: 66992    47  1594 flot                                    DECL  pd_size@CMD_PGS =0.000000 (0x00000000)
1596: 67034    50  1595 flot                                    DECL  pd_size@MG_PGS =0.000000 (0x00000000)
1597: 67076    52  1596 flot                                    DECL  pd_size@GNG_PGS =0.000000 (0x00000000)
1598: 67118    54  1597 flot                                    DECL  pd_size@DEL_PGS =0.000000 (0x00000000)
1599: 67160    56  1598 flot                                    DECL  pd_size@TSCH_PGS =0.000000 (0x00000000)
1600: 67202    57  1599 flot                                    DECL  pd_size@LSCH_PGS =0.000000 (0x00000000)
1601: 67244     0  1602 long                          HIDE      DECL  per_jitter =0 (0x00000000)
1602: 67286    49     0 flot                          HIDE      DECL  per_jitter@SETC_TRL =0.000000 (0x00000000)
1603: 67328    53  1601 flot                          HIDE      DECL  per_jitter@SETG_TRL =0.000000 (0x00000000)
1604: 67370    55  1603 flot                          HIDE      DECL  per_jitter@SETD_TRL =0.000000 (0x00000000)
1605: 67412    58  1604 flot                          HIDE      DECL  per_jitter@SETS_TRL =0.000000 (0x00000000)
1606: 67454    62  1605 long                                    DECL  per_jitter@UPD8_SOA =0 (0x00000000)
1607: 67496     0     0 long                          HIDE      DECL  per_soa_jitter =0 (0x00000000)
1608: 67538     0     0 flot                                    DECL  Perc_catch =0.000000 (0x00000000)
1609: 67580     0     0 long                                    DECL  PercSingTrl =0 (0x00000000)
1610: 67622     0     0 long CONS           INIT      HIDE      DECL  PhotoD_channel =5 (0x00000005)
1611: 67664    22     0 long                INIT      HIDE      DECL  plac@SCHTRIAL =4 (0x00000004)
1612: 67706    56  1611 long                INIT      HIDE      DECL  plac@TSCH_PGS =4 (0x00000004)
1613: 67748    57  1612 long                INIT      HIDE      DECL  plac@LSCH_PGS =4 (0x00000004)
1614: 67790    58     0 flot                          HIDE      DECL  plac_diff@SETS_TRL =0.000000 (0x00000000)
1615: 67832     0     0 flot                                    DECL  plac_duration =0.000000 (0x00000000)
1616: 67874    58     0 flot                          HIDE      DECL  plac_jitter@SETS_TRL =0.000000 (0x00000000)
1617: 67916    22     0 long                INIT      HIDE      DECL  plac_pd@SCHTRIAL =3 (0x00000003)
1618: 67958    56  1617 long                INIT      HIDE      DECL  plac_pd@TSCH_PGS =3 (0x00000003)
1619: 68000    57  1618 long                INIT      HIDE      DECL  plac_pd@LSCH_PGS =3 (0x00000003)
1620: 68042     0     0 long CONS           INIT      HIDE      DECL  PlacOn_ =2320 (0x00000910)
1621: 68084     0     0 long                                    DECL  PlacPres =0 (0x00000000)
1622: 68126    69     0 flot                          HIDE      DECL  play_the_odds@END_TRL =0.000000 (0x00000000)
1623: 68168    13     0 long                          HIDE      DECL  plot_x@WATCHEYE =0 (0x00000000)
1624: 68210    13     0 long                          HIDE      DECL  plot_y@WATCHEYE =0 (0x00000000)
1625: 68252    48     0 long                          HIDE      DECL  plus_minus@STAIR =0 (0x00000000)
1626: 68294     0     0 long CONS           INIT      HIDE      DECL  PORTA =1 (0x00000001)
1627: 68336     0     0 long CONS           INIT      HIDE      DECL  PORTB =2 (0x00000002)
1628: 68378     0     0 long CONS           INIT      HIDE      DECL  PORTC =4 (0x00000004)
1629: 68420    61     0 long                          HIDE      DECL  position_x@UPD8_INH =0 (0x00000000)
1630: 68462    62  1629 long                          HIDE      DECL  position_x@UPD8_SOA =0 (0x00000000)
1631: 68504    61     0 farr                          HIDE      DECL  position_y@UPD8_INH len=4 xmsOff=4700 [20] 1 @178 = {}
1632: 68546    62  1631 farr                          HIDE      DECL  position_y@UPD8_SOA len=4 xmsOff=4860 [20] 1 @194 = {}
1633: 68588     0     0 long                                    DECL  ProbCue =0 (0x00000000)
1634: 68630     0     0 long                                    DECL  ProbSide =0 (0x00000000)
1635: 68672     0     0 long                                    DECL  PulseGap =0 (0x00000000)
1636: 68714     0     0 long                                    DECL  Punish_time =0 (0x00000000)
1637: 68756    68  1636 long                                    DECL  punish_time@FAILURE =0 (0x00000000)
1638: 68798     0     0 long CONS PROC      INIT HDDN           DECL  QUE_TTL =83 (0x00000053)
1639: 68840     0     0 long                                    DECL  R1_d10_angle =0 (0x00000000)
1640: 68882     0     0 long                                    DECL  R1_d10_ecc =0 (0x00000000)
1641: 68924     0     0 long                                    DECL  R1_d10_orient =0 (0x00000000)
1642: 68966     0     0 long                                    DECL  R1_d11_angle =0 (0x00000000)
1643: 69008     0     0 long                                    DECL  R1_d11_ecc =0 (0x00000000)
1644: 69050     0     0 long                                    DECL  R1_d11_orient =0 (0x00000000)
1645: 69092     0     0 long                                    DECL  R1_d1_angle =0 (0x00000000)
1646: 69134     0     0 long                                    DECL  R1_d1_ecc =0 (0x00000000)
1647: 69176     0     0 long                                    DECL  R1_d1_orient =0 (0x00000000)
1648: 69218     0     0 long                                    DECL  R1_d2_angle =0 (0x00000000)
1649: 69260     0     0 long                                    DECL  R1_d2_ecc =0 (0x00000000)
1650: 69302     0     0 long                                    DECL  R1_d2_orient =0 (0x00000000)
1651: 69344     0     0 long                                    DECL  R1_d3_angle =0 (0x00000000)
1652: 69386     0     0 long                                    DECL  R1_d3_ecc =0 (0x00000000)
1653: 69428     0     0 long                                    DECL  R1_d3_orient =0 (0x00000000)
1654: 69470     0     0 long                                    DECL  R1_d4_angle =0 (0x00000000)
1655: 69512     0     0 long                                    DECL  R1_d4_ecc =0 (0x00000000)
1656: 69554     0     0 long                                    DECL  R1_d4_orient =0 (0x00000000)
1657: 69596     0     0 long                                    DECL  R1_d5_angle =0 (0x00000000)
1658: 69638     0     0 long                                    DECL  R1_d5_ecc =0 (0x00000000)
1659: 69680     0     0 long                                    DECL  R1_d5_orient =0 (0x00000000)
1660: 69722     0     0 long                                    DECL  R1_d6_angle =0 (0x00000000)
1661: 69764     0     0 long                                    DECL  R1_d6_ecc =0 (0x00000000)
1662: 69806     0     0 long                                    DECL  R1_d6_orient =0 (0x00000000)
1663: 69848     0     0 long                                    DECL  R1_d7_angle =0 (0x00000000)
1664: 69890     0     0 long                                    DECL  R1_d7_ecc =0 (0x00000000)
1665: 69932     0     0 long                                    DECL  R1_d7_orient =0 (0x00000000)
1666: 69974     0     0 long                                    DECL  R1_d8_angle =0 (0x00000000)
1667: 70016     0     0 long                                    DECL  R1_d8_ecc =0 (0x00000000)
1668: 70058     0     0 long                                    DECL  R1_d8_orient =0 (0x00000000)
1669: 70100     0     0 long                                    DECL  R1_d9_angle =0 (0x00000000)
1670: 70142     0     0 long                                    DECL  R1_d9_ecc =0 (0x00000000)
1671: 70184     0     0 long                                    DECL  R1_d9_orient =0 (0x00000000)
1672: 70226     0     0 long                                    DECL  R1_targ_angle =0 (0x00000000)
1673: 70268     0     0 long                                    DECL  R1_targ_ecc =0 (0x00000000)
1674: 70310     0     0 long                                    DECL  R1_targ_orient =0 (0x00000000)
1675: 70352     0     0 long                                    DECL  R2_d10_angle =0 (0x00000000)
1676: 70394     0     0 long                                    DECL  R2_d10_ecc =0 (0x00000000)
1677: 70436     0     0 long                                    DECL  R2_d10_orient =0 (0x00000000)
1678: 70478     0     0 long                                    DECL  R2_d11_angle =0 (0x00000000)
1679: 70520     0     0 long                                    DECL  R2_d11_ecc =0 (0x00000000)
1680: 70562     0     0 long                                    DECL  R2_d11_orient =0 (0x00000000)
1681: 70604     0     0 long                                    DECL  R2_d1_angle =0 (0x00000000)
1682: 70646     0     0 long                                    DECL  R2_d1_ecc =0 (0x00000000)
1683: 70688     0     0 long                                    DECL  R2_d1_orient =0 (0x00000000)
1684: 70730     0     0 long                                    DECL  R2_d2_angle =0 (0x00000000)
1685: 70772     0     0 long                                    DECL  R2_d2_ecc =0 (0x00000000)
1686: 70814     0     0 long                                    DECL  R2_d2_orient =0 (0x00000000)
1687: 70856     0     0 long                                    DECL  R2_d3_angle =0 (0x00000000)
1688: 70898     0     0 long                                    DECL  R2_d3_ecc =0 (0x00000000)
1689: 70940     0     0 long                                    DECL  R2_d3_orient =0 (0x00000000)
1690: 70982     0     0 long                                    DECL  R2_d4_angle =0 (0x00000000)
1691: 71024     0     0 long                                    DECL  R2_d4_ecc =0 (0x00000000)
1692: 71066     0     0 long                                    DECL  R2_d4_orient =0 (0x00000000)
1693: 71108     0     0 long                                    DECL  R2_d5_angle =0 (0x00000000)
1694: 71150     0     0 long                                    DECL  R2_d5_ecc =0 (0x00000000)
1695: 71192     0     0 long                                    DECL  R2_d5_orient =0 (0x00000000)
1696: 71234     0     0 long                                    DECL  R2_d6_angle =0 (0x00000000)
1697: 71276     0     0 long                                    DECL  R2_d6_ecc =0 (0x00000000)
1698: 71318     0     0 long                                    DECL  R2_d6_orient =0 (0x00000000)
1699: 71360     0     0 long                                    DECL  R2_d7_angle =0 (0x00000000)
1700: 71402     0     0 long                                    DECL  R2_d7_ecc =0 (0x00000000)
1701: 71444     0     0 long                                    DECL  R2_d7_orient =0 (0x00000000)
1702: 71486     0     0 long                                    DECL  R2_d8_angle =0 (0x00000000)
1703: 71528     0     0 long                                    DECL  R2_d8_ecc =0 (0x00000000)
1704: 71570     0     0 long                                    DECL  R2_d8_orient =0 (0x00000000)
1705: 71612     0     0 long                                    DECL  R2_d9_angle =0 (0x00000000)
1706: 71654     0     0 long                                    DECL  R2_d9_ecc =0 (0x00000000)
1707: 71696     0     0 long                                    DECL  R2_d9_orient =0 (0x00000000)
1708: 71738     0     0 long                                    DECL  R2_targ_angle =0 (0x00000000)
1709: 71780     0     0 long                                    DECL  R2_targ_ecc =0 (0x00000000)
1710: 71822     0     0 long                                    DECL  R2_targ_orient =0 (0x00000000)
1711: 71864     0     0 long                                    DECL  R3_d10_angle =0 (0x00000000)
1712: 71906     0     0 long                                    DECL  R3_d10_ecc =0 (0x00000000)
1713: 71948     0     0 long                                    DECL  R3_d10_orient =0 (0x00000000)
1714: 71990     0     0 long                                    DECL  R3_d11_angle =0 (0x00000000)
1715: 72032     0     0 long                                    DECL  R3_d11_ecc =0 (0x00000000)
1716: 72074     0     0 long                                    DECL  R3_d11_orient =0 (0x00000000)
1717: 72116     0     0 long                                    DECL  R3_d1_angle =0 (0x00000000)
1718: 72158     0     0 long                                    DECL  R3_d1_ecc =0 (0x00000000)
1719: 72200     0     0 long                                    DECL  R3_d1_orient =0 (0x00000000)
1720: 72242     0     0 long                                    DECL  R3_d2_angle =0 (0x00000000)
1721: 72284     0     0 long                                    DECL  R3_d2_ecc =0 (0x00000000)
1722: 72326     0     0 long                                    DECL  R3_d2_orient =0 (0x00000000)
1723: 72368     0     0 long                                    DECL  R3_d3_angle =0 (0x00000000)
1724: 72410     0     0 long                                    DECL  R3_d3_ecc =0 (0x00000000)
1725: 72452     0     0 long                                    DECL  R3_d3_orient =0 (0x00000000)
1726: 72494     0     0 long                                    DECL  R3_d4_angle =0 (0x00000000)
1727: 72536     0     0 long                                    DECL  R3_d4_ecc =0 (0x00000000)
1728: 72578     0     0 long                                    DECL  R3_d4_orient =0 (0x00000000)
1729: 72620     0     0 long                                    DECL  R3_d5_angle =0 (0x00000000)
1730: 72662     0     0 long                                    DECL  R3_d5_ecc =0 (0x00000000)
1731: 72704     0     0 long                                    DECL  R3_d5_orient =0 (0x00000000)
1732: 72746     0     0 long                                    DECL  R3_d6_angle =0 (0x00000000)
1733: 72788     0     0 long                                    DECL  R3_d6_ecc =0 (0x00000000)
1734: 72830     0     0 long                                    DECL  R3_d6_orient =0 (0x00000000)
1735: 72872     0     0 long                                    DECL  R3_d7_angle =0 (0x00000000)
1736: 72914     0     0 long                                    DECL  R3_d7_ecc =0 (0x00000000)
1737: 72956     0     0 long                                    DECL  R3_d7_orient =0 (0x00000000)
1738: 72998     0     0 long                                    DECL  R3_d8_angle =0 (0x00000000)
1739: 73040     0     0 long                                    DECL  R3_d8_ecc =0 (0x00000000)
1740: 73082     0     0 long                                    DECL  R3_d8_orient =0 (0x00000000)
1741: 73124     0     0 long                                    DECL  R3_d9_angle =0 (0x00000000)
1742: 73166     0     0 long                                    DECL  R3_d9_ecc =0 (0x00000000)
1743: 73208     0     0 long                                    DECL  R3_d9_orient =0 (0x00000000)
1744: 73250     0     0 long                                    DECL  R3_targ_angle =0 (0x00000000)
1745: 73292     0     0 long                                    DECL  R3_targ_ecc =0 (0x00000000)
1746: 73334     0     0 long                                    DECL  R3_targ_orient =0 (0x00000000)
1747: 73376     0     0 long                                    DECL  R4_d10_angle =0 (0x00000000)
1748: 73418     0     0 long                                    DECL  R4_d10_ecc =0 (0x00000000)
1749: 73460     0     0 long                                    DECL  R4_d10_orient =0 (0x00000000)
1750: 73502     0     0 long                                    DECL  R4_d11_angle =0 (0x00000000)
1751: 73544     0     0 long                                    DECL  R4_d11_ecc =0 (0x00000000)
1752: 73586     0     0 long                                    DECL  R4_d11_orient =0 (0x00000000)
1753: 73628     0     0 long                                    DECL  R4_d1_angle =0 (0x00000000)
1754: 73670     0     0 long                                    DECL  R4_d1_ecc =0 (0x00000000)
1755: 73712     0     0 long                                    DECL  R4_d1_orient =0 (0x00000000)
1756: 73754     0     0 long                                    DECL  R4_d2_angle =0 (0x00000000)
1757: 73796     0     0 long                                    DECL  R4_d2_ecc =0 (0x00000000)
1758: 73838     0     0 long                                    DECL  R4_d2_orient =0 (0x00000000)
1759: 73880     0     0 long                                    DECL  R4_d3_angle =0 (0x00000000)
1760: 73922     0     0 long                                    DECL  R4_d3_ecc =0 (0x00000000)
1761: 73964     0     0 long                                    DECL  R4_d3_orient =0 (0x00000000)
1762: 74006     0     0 long                                    DECL  R4_d4_angle =0 (0x00000000)
1763: 74048     0     0 long                                    DECL  R4_d4_ecc =0 (0x00000000)
1764: 74090     0     0 long                                    DECL  R4_d4_orient =0 (0x00000000)
1765: 74132     0     0 long                                    DECL  R4_d5_angle =0 (0x00000000)
1766: 74174     0     0 long                                    DECL  R4_d5_ecc =0 (0x00000000)
1767: 74216     0     0 long                                    DECL  R4_d5_orient =0 (0x00000000)
1768: 74258     0     0 long                                    DECL  R4_d6_angle =0 (0x00000000)
1769: 74300     0     0 long                                    DECL  R4_d6_ecc =0 (0x00000000)
1770: 74342     0     0 long                                    DECL  R4_d6_orient =0 (0x00000000)
1771: 74384     0     0 long                                    DECL  R4_d7_angle =0 (0x00000000)
1772: 74426     0     0 long                                    DECL  R4_d7_ecc =0 (0x00000000)
1773: 74468     0     0 long                                    DECL  R4_d7_orient =0 (0x00000000)
1774: 74510     0     0 long                                    DECL  R4_d8_angle =0 (0x00000000)
1775: 74552     0     0 long                                    DECL  R4_d8_ecc =0 (0x00000000)
1776: 74594     0     0 long                                    DECL  R4_d8_orient =0 (0x00000000)
1777: 74636     0     0 long                                    DECL  R4_d9_angle =0 (0x00000000)
1778: 74678     0     0 long                                    DECL  R4_d9_ecc =0 (0x00000000)
1779: 74720     0     0 long                                    DECL  R4_d9_orient =0 (0x00000000)
1780: 74762     0     0 long                                    DECL  R4_targ_angle =0 (0x00000000)
1781: 74804     0     0 long                                    DECL  R4_targ_ecc =0 (0x00000000)
1782: 74846     0     0 long                                    DECL  R4_targ_orient =0 (0x00000000)
1783: 74888     0     0 long                                    DECL  R5_d10_angle =0 (0x00000000)
1784: 74930     0     0 long                                    DECL  R5_d10_ecc =0 (0x00000000)
1785: 74972     0     0 long                                    DECL  R5_d10_orient =0 (0x00000000)
1786: 75014     0     0 long                                    DECL  R5_d11_angle =0 (0x00000000)
1787: 75056     0     0 long                                    DECL  R5_d11_ecc =0 (0x00000000)
1788: 75098     0     0 long                                    DECL  R5_d11_orient =0 (0x00000000)
1789: 75140     0     0 long                                    DECL  R5_d1_angle =0 (0x00000000)
1790: 75182     0     0 long                                    DECL  R5_d1_ecc =0 (0x00000000)
1791: 75224     0     0 long                                    DECL  R5_d1_orient =0 (0x00000000)
1792: 75266     0     0 long                                    DECL  R5_d2_angle =0 (0x00000000)
1793: 75308     0     0 long                                    DECL  R5_d2_ecc =0 (0x00000000)
1794: 75350     0     0 long                                    DECL  R5_d2_orient =0 (0x00000000)
1795: 75392     0     0 long                                    DECL  R5_d3_angle =0 (0x00000000)
1796: 75434     0     0 long                                    DECL  R5_d3_ecc =0 (0x00000000)
1797: 75476     0     0 long                                    DECL  R5_d3_orient =0 (0x00000000)
1798: 75518     0     0 long                                    DECL  R5_d4_angle =0 (0x00000000)
1799: 75560     0     0 long                                    DECL  R5_d4_ecc =0 (0x00000000)
1800: 75602     0     0 long                                    DECL  R5_d4_orient =0 (0x00000000)
1801: 75644     0     0 long                                    DECL  R5_d5_angle =0 (0x00000000)
1802: 75686     0     0 long                                    DECL  R5_d5_ecc =0 (0x00000000)
1803: 75728     0     0 long                                    DECL  R5_d5_orient =0 (0x00000000)
1804: 75770     0     0 long                                    DECL  R5_d6_angle =0 (0x00000000)
1805: 75812     0     0 long                                    DECL  R5_d6_ecc =0 (0x00000000)
1806: 75854     0     0 long                                    DECL  R5_d6_orient =0 (0x00000000)
1807: 75896     0     0 long                                    DECL  R5_d7_angle =0 (0x00000000)
1808: 75938     0     0 long                                    DECL  R5_d7_ecc =0 (0x00000000)
1809: 75980     0     0 long                                    DECL  R5_d7_orient =0 (0x00000000)
1810: 76022     0     0 long                                    DECL  R5_d8_angle =0 (0x00000000)
1811: 76064     0     0 long                                    DECL  R5_d8_ecc =0 (0x00000000)
1812: 76106     0     0 long                                    DECL  R5_d8_orient =0 (0x00000000)
1813: 76148     0     0 long                                    DECL  R5_d9_angle =0 (0x00000000)
1814: 76190     0     0 long                                    DECL  R5_d9_ecc =0 (0x00000000)
1815: 76232     0     0 long                                    DECL  R5_d9_orient =0 (0x00000000)
1816: 76274     0     0 long                                    DECL  R5_targ_angle =0 (0x00000000)
1817: 76316     0     0 long                                    DECL  R5_targ_ecc =0 (0x00000000)
1818: 76358     0     0 long                                    DECL  R5_targ_orient =0 (0x00000000)
1819: 76400     0     0 long                                    DECL  R6_d10_angle =0 (0x00000000)
1820: 76442     0     0 long                                    DECL  R6_d10_ecc =0 (0x00000000)
1821: 76484     0     0 long                                    DECL  R6_d10_orient =0 (0x00000000)
1822: 76526     0     0 long                                    DECL  R6_d11_angle =0 (0x00000000)
1823: 76568     0     0 long                                    DECL  R6_d11_ecc =0 (0x00000000)
1824: 76610     0     0 long                                    DECL  R6_d11_orient =0 (0x00000000)
1825: 76652     0     0 long                                    DECL  R6_d1_angle =0 (0x00000000)
1826: 76694     0     0 long                                    DECL  R6_d1_ecc =0 (0x00000000)
1827: 76736     0     0 long                                    DECL  R6_d1_orient =0 (0x00000000)
1828: 76778     0     0 long                                    DECL  R6_d2_angle =0 (0x00000000)
1829: 76820     0     0 long                                    DECL  R6_d2_ecc =0 (0x00000000)
1830: 76862     0     0 long                                    DECL  R6_d2_orient =0 (0x00000000)
1831: 76904     0     0 long                                    DECL  R6_d3_angle =0 (0x00000000)
1832: 76946     0     0 long                                    DECL  R6_d3_ecc =0 (0x00000000)
1833: 76988     0     0 long                                    DECL  R6_d3_orient =0 (0x00000000)
1834: 77030     0     0 long                                    DECL  R6_d4_angle =0 (0x00000000)
1835: 77072     0     0 long                                    DECL  R6_d4_ecc =0 (0x00000000)
1836: 77114     0     0 long                                    DECL  R6_d4_orient =0 (0x00000000)
1837: 77156     0     0 long                                    DECL  R6_d5_angle =0 (0x00000000)
1838: 77198     0     0 long                                    DECL  R6_d5_ecc =0 (0x00000000)
1839: 77240     0     0 long                                    DECL  R6_d5_orient =0 (0x00000000)
1840: 77282     0     0 long                                    DECL  R6_d6_angle =0 (0x00000000)
1841: 77324     0     0 long                                    DECL  R6_d6_ecc =0 (0x00000000)
1842: 77366     0     0 long                                    DECL  R6_d6_orient =0 (0x00000000)
1843: 77408     0     0 long                                    DECL  R6_d7_angle =0 (0x00000000)
1844: 77450     0     0 long                                    DECL  R6_d7_ecc =0 (0x00000000)
1845: 77492     0     0 long                                    DECL  R6_d7_orient =0 (0x00000000)
1846: 77534     0     0 long                                    DECL  R6_d8_angle =0 (0x00000000)
1847: 77576     0     0 long                                    DECL  R6_d8_ecc =0 (0x00000000)
1848: 77618     0     0 long                                    DECL  R6_d8_orient =0 (0x00000000)
1849: 77660     0     0 long                                    DECL  R6_d9_angle =0 (0x00000000)
1850: 77702     0     0 long                                    DECL  R6_d9_ecc =0 (0x00000000)
1851: 77744     0     0 long                                    DECL  R6_d9_orient =0 (0x00000000)
1852: 77786     0     0 long                                    DECL  R6_targ_angle =0 (0x00000000)
1853: 77828     0     0 long                                    DECL  R6_targ_ecc =0 (0x00000000)
1854: 77870     0     0 long                                    DECL  R6_targ_orient =0 (0x00000000)
1855: 77912     1     0 long                          HIDE      DECL  r_@DEFAULT =0 (0x00000000)
1856: 77954     5  1855 long                          HIDE      DECL  r_@SET_CLRS =0 (0x00000000)
1857: 77996     0     0 flot                                    DECL  Rand_Comp_NG_Trl =0.000000 (0x00000000)
1858: 78038     0     0 flot                                    DECL  Rand_Comp_Trl_DA =0.000000 (0x00000000)
1859: 78080     0     0 flot                                    DECL  Rand_Comp_Trl_DP =0.000000 (0x00000000)
1860: 78122     0     0 flot                                    DECL  Rand_Comp_Trl_number =0.000000 (0x00000000)
1861: 78164     0     0 flot                                    DECL  Rand_Comp_Trl_number_DA =0.000000 (0x00000000)
1862: 78206     0     0 flot                                    DECL  Rand_Comp_Trl_number_DP =0.000000 (0x00000000)
1863: 78248     0     0 long                                    DECL  Rand_d10_ecc =0 (0x00000000)
1864: 78290     0     0 long                                    DECL  Rand_d10_orient =0 (0x00000000)
1865: 78332     0     0 long                                    DECL  Rand_d11_ecc =0 (0x00000000)
1866: 78374     0     0 long                                    DECL  Rand_d11_orient =0 (0x00000000)
1867: 78416     0     0 long                                    DECL  Rand_d1_angle =0 (0x00000000)
1868: 78458     0     0 long                                    DECL  Rand_d1_ecc =0 (0x00000000)
1869: 78500     0     0 long                                    DECL  Rand_d1_orient =0 (0x00000000)
1870: 78542     0     0 long                                    DECL  Rand_d2_angle =0 (0x00000000)
1871: 78584     0     0 long                                    DECL  Rand_d2_ecc =0 (0x00000000)
1872: 78626     0     0 long                                    DECL  Rand_d2_orient =0 (0x00000000)
1873: 78668     0     0 long                                    DECL  Rand_d3_angle =0 (0x00000000)
1874: 78710     0     0 long                                    DECL  Rand_d3_ecc =0 (0x00000000)
1875: 78752     0     0 long                                    DECL  Rand_d3_orient =0 (0x00000000)
1876: 78794     0     0 long                                    DECL  Rand_d4_angle =0 (0x00000000)
1877: 78836     0     0 long                                    DECL  Rand_d4_ecc =0 (0x00000000)
1878: 78878     0     0 long                                    DECL  Rand_d4_orient =0 (0x00000000)
1879: 78920     0     0 long                                    DECL  Rand_d5_angle =0 (0x00000000)
1880: 78962     0     0 long                                    DECL  Rand_d5_ecc =0 (0x00000000)
1881: 79004     0     0 long                                    DECL  Rand_d5_orient =0 (0x00000000)
1882: 79046     0     0 long                                    DECL  Rand_d6_angle =0 (0x00000000)
1883: 79088     0     0 long                                    DECL  Rand_d6_ecc =0 (0x00000000)
1884: 79130     0     0 long                                    DECL  Rand_d6_orient =0 (0x00000000)
1885: 79172     0     0 long                                    DECL  Rand_d7_angle =0 (0x00000000)
1886: 79214     0     0 long                                    DECL  Rand_d7_ecc =0 (0x00000000)
1887: 79256     0     0 long                                    DECL  Rand_d7_orient =0 (0x00000000)
1888: 79298     0     0 long                                    DECL  Rand_d8_ecc =0 (0x00000000)
1889: 79340     0     0 long                                    DECL  Rand_d8_orient =0 (0x00000000)
1890: 79382     0     0 long                                    DECL  Rand_d9_ecc =0 (0x00000000)
1891: 79424     0     0 long                                    DECL  Rand_d9_orient =0 (0x00000000)
1892: 79466     0     0 flot                                    DECL  rand_inacc_sacc =0.000000 (0x00000000)
1893: 79508     0     0 flot                                    DECL  rand_inacc_sacc_DA =0.000000 (0x00000000)
1894: 79550     0     0 flot                                    DECL  rand_inacc_sacc_DP =0.000000 (0x00000000)
1895: 79592     0     0 long CONS PROC      INIT HDDN           DECL  RAND_ORT =24 (0x00000018)
1896: 79634     0     0 long                                    DECL  Rand_targ_angle =0 (0x00000000)
1897: 79676     0     0 long                                    DECL  Rand_targ_ecc =0 (0x00000000)
1898: 79718     0     0 long                                    DECL  Rand_targ_orient =0 (0x00000000)
1899: 79760     0     0 flot                                    DECL  RandHomo_orient =0.000000 (0x00000000)
1900: 79802    63     0 long                                    DECL  random_position_x@UPD8_SCH =0 (0x00000000)
1901: 79844    63     0 flot                                    DECL  random_position_y@UPD8_SCH =0.000000 (0x00000000)
1902: 79886     0     0 long CONS PROC      INIT HDDN           DECL  RandomizeRanDistAngles =35 (0x00000023)
1903: 79928     0     0 long CONS PROC      INIT HDDN           DECL  RandomizeRanDistEccentricities =36 (0x00000024)
1904: 79970     0     0 long CONS PROC      INIT HDDN           DECL  RandomizeRanTargAngles =37 (0x00000025)
1905: 80012     0     0 long CONS PROC      INIT HDDN           DECL  RandomizeRepDistAngles =26 (0x0000001A)
1906: 80054     0     0 long CONS PROC      INIT HDDN           DECL  RandomizeRepDistEccentricities =27 (0x0000001B)
1907: 80096     0     0 long CONS PROC      INIT HDDN           DECL  RandomizeRepTargAngles =28 (0x0000001C)
1908: 80138     0     0 long                                    DECL  RandPerAcc =0 (0x00000000)
1909: 80180     0     0 long                                    DECL  RandPerAcc_DA =0 (0x00000000)
1910: 80222     0     0 long                                    DECL  RandPerAcc_DP =0 (0x00000000)
1911: 80264     0     0 farr                INIT                DECL  RanTarg_Ang_list len=4 xmsOff=4068 [4] 1 @24 = {}
1912: 80306     0     0 long                          HIDE      DECL  ReactionTime =0 (0x00000000)
1913: 80348     0     0 flot CONS           INIT      HIDE      DECL  Refresh_rate =70.000000 (0x428C0000)
1914: 80390     0     0 long CONS PROC      INIT HDDN           DECL  REP1_LOC =29 (0x0000001D)
1915: 80432     0     0 long CONS PROC      INIT HDDN           DECL  REP2_LOC =30 (0x0000001E)
1916: 80474     0     0 long CONS PROC      INIT HDDN           DECL  REP3_LOC =31 (0x0000001F)
1917: 80516     0     0 long CONS PROC      INIT HDDN           DECL  REP4_LOC =32 (0x00000020)
1918: 80558     0     0 long CONS PROC      INIT HDDN           DECL  REP5_LOC =33 (0x00000021)
1919: 80600     0     0 long CONS PROC      INIT HDDN           DECL  REP6_LOC =34 (0x00000022)
1920: 80642     0     0 flot                                    DECL  Rep_Comp_NG_Trl =0.000000 (0x00000000)
1921: 80684     0     0 flot                                    DECL  Rep_Comp_Trl_number =0.000000 (0x00000000)
1922: 80726     0     0 flot                                    DECL  rep_inacc_sacc =0.000000 (0x00000000)
1923: 80768     0     0 long CONS PROC      INIT HDDN           DECL  REP_ORT =23 (0x00000017)
1924: 80810     0     0 arry                INIT      HIDE      DECL  RepDistOrients len=4 xmsOff=4636 [4] 1 @146 = {}
1925: 80852    63     0 long                                    DECL  repeat_position_x@UPD8_SCH =0 (0x00000000)
1926: 80894    63     0 flot                                    DECL  repeat_position_y@UPD8_SCH =0.000000 (0x00000000)
1927: 80936     0     0 long                                    DECL  RepPerAcc =0 (0x00000000)
1928: 80978     0     0 farr                INIT                DECL  RepTarg_Ang_list len=4 xmsOff=4084 [4] 1 @32 = {}
1929: 81020     0     0 arry                INIT      HIDE      DECL  RepTargOrients len=4 xmsOff=4652 [4] 1 @154 = {}
1930: 81062     0     0 long CONS           INIT      HIDE      DECL  Reward_ =2727 (0x00000AA7)
1931: 81104     0     0 long                                    DECL  Reward_duration =0 (0x00000000)
1932: 81146     0     0 long                                    DECL  Reward_Offset =0 (0x00000000)
1933: 81188    67  1932 long                                    DECL  reward_offset@SUCCESS =0 (0x00000000)
1934: 81230     0     0 long CONS           INIT      HIDE      DECL  Reward_tone =777 (0x00000309)
1935: 81272     0     0 long CONS           INIT      HIDE      DECL  RewardSize_ =2927 (0x00000B6F)
1936: 81314     7     0 long                          HIDE      DECL  right@GRAPHS =0 (0x00000000)
1937: 81356     0     0 long CONS           INIT      HIDE      DECL  Room =28 (0x0000001C)
1938: 81398     1  1937 long                                    DECL  room@DEFAULT =0 (0x00000000)
1939: 81440    62     0 farr                          HIDE      DECL  rts@UPD8_SOA len=4 xmsOff=5020 [20] 1 @210 = {}
1940: 81482     1     0 long                INIT      HIDE      DECL  run_cmd_sess@DEFAULT =1 (0x00000001)
1941: 81524     2  1940 long                INIT      HIDE      DECL  run_cmd_sess@GOODVARS =1 (0x00000001)
1942: 81566    65  1941 long                INIT      HIDE      DECL  run_cmd_sess@ABORT =1 (0x00000001)
1943: 81608    67  1942 long                INIT      HIDE      DECL  run_cmd_sess@SUCCESS =1 (0x00000001)
1944: 81650    68  1943 long                INIT      HIDE      DECL  run_cmd_sess@FAILURE =1 (0x00000001)
1945: 81692    75  1944 long                INIT      HIDE      DECL  run_cmd_sess@CMANDING =1 (0x00000001)
1946: 81734    84  1945 long                INIT      HIDE      DECL  run_cmd_sess@IDLE =1 (0x00000001)
1947: 81776     1     0 long                INIT      HIDE      DECL  run_delayed_sess@DEFAULT =6 (0x00000006)
1948: 81818     2  1947 long                INIT      HIDE      DECL  run_delayed_sess@GOODVARS =6 (0x00000006)
1949: 81860    65  1948 long                INIT      HIDE      DECL  run_delayed_sess@ABORT =6 (0x00000006)
1950: 81902    67  1949 long                INIT      HIDE      DECL  run_delayed_sess@SUCCESS =6 (0x00000006)
1951: 81944    68  1950 long                INIT      HIDE      DECL  run_delayed_sess@FAILURE =6 (0x00000006)
1952: 81986    78  1951 long                INIT      HIDE      DECL  run_delayed_sess@DELAYED =6 (0x00000006)
1953: 82028    84  1952 long                INIT      HIDE      DECL  run_delayed_sess@IDLE =6 (0x00000006)
1954: 82070     1     0 long                INIT      HIDE      DECL  run_fix_sess@DEFAULT =2 (0x00000002)
1955: 82112     2  1954 long                INIT      HIDE      DECL  run_fix_sess@GOODVARS =2 (0x00000002)
1956: 82154    74  1955 long                INIT      HIDE      DECL  run_fix_sess@FIXATION =2 (0x00000002)
1957: 82196    84  1956 long                INIT      HIDE      DECL  run_fix_sess@IDLE =2 (0x00000002)
1958: 82238     1     0 long                INIT      HIDE      DECL  run_flash_sess@DEFAULT =5 (0x00000005)
1959: 82280    80  1958 long                INIT      HIDE      DECL  run_flash_sess@FLSHSCRN =5 (0x00000005)
1960: 82322    84  1959 long                INIT      HIDE      DECL  run_flash_sess@IDLE =5 (0x00000005)
1961: 82364     1     0 long                INIT      HIDE      DECL  run_gonogo_sess@DEFAULT =4 (0x00000004)
1962: 82406     2  1961 long                INIT      HIDE      DECL  run_gonogo_sess@GOODVARS =4 (0x00000004)
1963: 82448    65  1962 long                INIT      HIDE      DECL  run_gonogo_sess@ABORT =4 (0x00000004)
1964: 82490    67  1963 long                INIT      HIDE      DECL  run_gonogo_sess@SUCCESS =4 (0x00000004)
1965: 82532    68  1964 long                INIT      HIDE      DECL  run_gonogo_sess@FAILURE =4 (0x00000004)
1966: 82574    77  1965 long                INIT      HIDE      DECL  run_gonogo_sess@GONOGO =4 (0x00000004)
1967: 82616    84  1966 long                INIT      HIDE      DECL  run_gonogo_sess@IDLE =4 (0x00000004)
1968: 82658    74     0 long                INIT      HIDE      DECL  run_idle@FIXATION =0 (0x00000000)
1969: 82700    75  1968 long                INIT      HIDE      DECL  run_idle@CMANDING =0 (0x00000000)
1970: 82742    76  1969 long                INIT      HIDE      DECL  run_idle@MGUIDE =0 (0x00000000)
1971: 82784    77  1970 long                INIT      HIDE      DECL  run_idle@GONOGO =0 (0x00000000)
1972: 82826    78  1971 long                INIT      HIDE      DECL  run_idle@DELAYED =0 (0x00000000)
1973: 82868    79  1972 long                INIT      HIDE      DECL  run_idle@SEARCH =0 (0x00000000)
1974: 82910    80  1973 long                INIT      HIDE      DECL  run_idle@FLSHSCRN =0 (0x00000000)
1975: 82952     1     0 long                INIT      HIDE      DECL  run_mg_sess@DEFAULT =3 (0x00000003)
1976: 82994     2  1975 long                INIT      HIDE      DECL  run_mg_sess@GOODVARS =3 (0x00000003)
1977: 83036    65  1976 long                INIT      HIDE      DECL  run_mg_sess@ABORT =3 (0x00000003)
1978: 83078    67  1977 long                INIT      HIDE      DECL  run_mg_sess@SUCCESS =3 (0x00000003)
1979: 83120    68  1978 long                INIT      HIDE      DECL  run_mg_sess@FAILURE =3 (0x00000003)
1980: 83162    76  1979 long                INIT      HIDE      DECL  run_mg_sess@MGUIDE =3 (0x00000003)
1981: 83204    84  1980 long                INIT      HIDE      DECL  run_mg_sess@IDLE =3 (0x00000003)
1982: 83246     0  1983 long                INIT      HIDE      DECL  run_search_sess =7 (0x00000007)
1983: 83288     1     0 long                INIT      HIDE      DECL  run_search_sess@DEFAULT =7 (0x00000007)
1984: 83330    65  1982 long                INIT      HIDE      DECL  run_search_sess@ABORT =7 (0x00000007)
1985: 83372    67  1984 long                INIT      HIDE      DECL  run_search_sess@SUCCESS =7 (0x00000007)
1986: 83414    68  1985 long                INIT      HIDE      DECL  run_search_sess@FAILURE =7 (0x00000007)
1987: 83456    79  1986 long                INIT      HIDE      DECL  run_search_sess@SEARCH =7 (0x00000007)
1988: 83498    84  1987 long                INIT      HIDE      DECL  run_search_sess@IDLE =7 (0x00000007)
1989: 83540    84     0 long                INIT      HIDE      DECL  run_vm_sess@IDLE =8 (0x00000008)
1990: 83582    20     0 long CONS           INIT      HIDE      DECL  sacc_out@CMDTRIAL =5 (0x00000005)
1991: 83624    21  1990 long CONS           INIT      HIDE      DECL  sacc_out@MGTRIAL =5 (0x00000005)
1992: 83666    22  1991 long CONS           INIT      HIDE      DECL  sacc_out@SCHTRIAL =5 (0x00000005)
1993: 83708    59  1992 long CONS           INIT      HIDE      DECL  sacc_out@GNGTRIAL =5 (0x00000005)
1994: 83750    60  1993 long CONS           INIT      HIDE      DECL  sacc_out@DELTRIAL =5 (0x00000005)
1995: 83792    69  1994 long CONS           INIT      HIDE      DECL  sacc_out@END_TRL =5 (0x00000005)
1996: 83834     0     0 long CONS           INIT      HIDE      DECL  Saccade_ =2810 (0x00000AFA)
1997: 83876    20     0 flot                          HIDE      DECL  saccade_time@CMDTRIAL =0.000000 (0x00000000)
1998: 83918    21  1997 flot                          HIDE      DECL  saccade_time@MGTRIAL =0.000000 (0x00000000)
1999: 83960    22  1998 flot                          HIDE      DECL  saccade_time@SCHTRIAL =0.000000 (0x00000000)
2000: 84002    59  1999 flot                          HIDE      DECL  saccade_time@GNGTRIAL =0.000000 (0x00000000)
2001: 84044    60  2000 flot                          HIDE      DECL  saccade_time@DELTRIAL =0.000000 (0x00000000)
2002: 84086     0     0 long                          HIDE      DECL  sacctarg =0 (0x00000000)
2003: 84128    17     0 long                INIT                DECL  sample_n@WATCHBOD =0 (0x00000000)
2004: 84170     0     0 long CONS PROC      INIT HDDN           DECL  SCHTRIAL =22 (0x00000016)
2005: 84212     0     0 flot CONS           INIT      HIDE      DECL  Scr_height =291.000000 (0x43918000)
2006: 84254     6  2005 flot                                    DECL  scr_height@SET_COOR =0.000000 (0x00000000)
2007: 84296    46  2006 flot                                    DECL  scr_height@FLS_PGS =0.000000 (0x00000000)
2008: 84338    47  2007 flot                                    DECL  scr_height@CMD_PGS =0.000000 (0x00000000)
2009: 84380    50  2008 flot                                    DECL  scr_height@MG_PGS =0.000000 (0x00000000)
2010: 84422    52  2009 flot                                    DECL  scr_height@GNG_PGS =0.000000 (0x00000000)
2011: 84464    54  2010 flot                                    DECL  scr_height@DEL_PGS =0.000000 (0x00000000)
2012: 84506    56  2011 flot                                    DECL  scr_height@TSCH_PGS =0.000000 (0x00000000)
2013: 84548    57  2012 flot                                    DECL  scr_height@LSCH_PGS =0.000000 (0x00000000)
2014: 84590     0     0 long CONS           INIT      HIDE      DECL  Scr_pixX =640 (0x00000280)
2015: 84632     6  2014 long                                    DECL  scr_pixX@SET_COOR =0 (0x00000000)
2016: 84674     7  2015 long                                    DECL  scr_pixX@GRAPHS =0 (0x00000000)
2017: 84716     0     0 long CONS           INIT      HIDE      DECL  Scr_pixY =400 (0x00000190)
2018: 84758     6  2017 long                                    DECL  scr_pixY@SET_COOR =0 (0x00000000)
2019: 84800     7  2018 long                                    DECL  scr_pixY@GRAPHS =0 (0x00000000)
2020: 84842     0     0 flot CONS           INIT      HIDE      DECL  Scr_width =381.000000 (0x43BE8000)
2021: 84884     6  2020 flot                                    DECL  scr_width@SET_COOR =0.000000 (0x00000000)
2022: 84926    46  2021 flot                                    DECL  scr_width@FLS_PGS =0.000000 (0x00000000)
2023: 84968    47  2022 flot                                    DECL  scr_width@CMD_PGS =0.000000 (0x00000000)
2024: 85010    50  2023 flot                                    DECL  scr_width@MG_PGS =0.000000 (0x00000000)
2025: 85052    52  2024 flot                                    DECL  scr_width@GNG_PGS =0.000000 (0x00000000)
2026: 85094    54  2025 flot                                    DECL  scr_width@DEL_PGS =0.000000 (0x00000000)
2027: 85136    56  2026 flot                                    DECL  scr_width@TSCH_PGS =0.000000 (0x00000000)
2028: 85178    57  2027 flot                                    DECL  scr_width@LSCH_PGS =0.000000 (0x00000000)
2029: 85220     0     0 long CONS PROC      INIT HDDN           DECL  SEARCH =79 (0x0000004F)
2030: 85262     0     0 flot                                    DECL  search_fix_time =0.000000 (0x00000000)
2031: 85304     0     0 long                                    DECL  SearchEcc =0 (0x00000000)
2032: 85346     0     0 long CONS           INIT      HIDE      DECL  SearchHeader_ =1507 (0x000005E3)
2033: 85388     0     0 long                                    DECL  SearchType =0 (0x00000000)
2034: 85430     0     0 long CONS PROC      INIT HDDN           DECL  SEL_LOCS =40 (0x00000028)
2035: 85472     0     0 long                                    DECL  SelEcc =0 (0x00000000)
2036: 85514    83     0 long                                    DECL  send_event@QUE_TTL =0 (0x00000000)
2037: 85556     0     0 long CONS PROC      INIT HDDN           DECL  SEND_TTL =82 (0x00000052)
2038: 85598     0     0 long CONS           INIT      HIDE      DECL  SendPenatrInfo_ =2929 (0x00000B71)
2039: 85640     0     0 long CONS PROC      INIT HDDN           DECL  SET_CLRS =5 (0x00000005)
2040: 85682     0     0 long CONS PROC      INIT HDDN           DECL  SET_COOR =6 (0x00000006)
2041: 85724     0     0 long                INIT                DECL  Set_event =0 (0x00000000)
2042: 85766     0     0 long CONS PROC      INIT HDDN           DECL  SET_INH =8 (0x00000008)
2043: 85808     0     0 long                                    DECL  Set_monkey =0 (0x00000000)
2044: 85850     0     0 long CONS PROC      INIT HDDN           DECL  SET_SCH =10 (0x0000000A)
2045: 85892     0     0 long CONS PROC      INIT HDDN           DECL  SET_SOA =9 (0x00000009)
2046: 85934     0     0 long                                    DECL  Set_Tones =0 (0x00000000)
2047: 85976     0     0 long CONS PROC      INIT HDDN           DECL  SETC_TRL =49 (0x00000031)
2048: 86018     0     0 long CONS PROC      INIT HDDN           DECL  SETD_TRL =55 (0x00000037)
2049: 86060     0     0 long CONS PROC      INIT HDDN           DECL  SETG_TRL =53 (0x00000035)
2050: 86102     0     0 long CONS PROC      INIT HDDN           DECL  SETMGTRL =51 (0x00000033)
2051: 86144     0     0 long CONS           INIT HDDN           DECL  SETS =2 (0x00000002)
2052: 86186     0     0 long CONS PROC      INIT HDDN           DECL  SETS_TRL =58 (0x0000003A)
2053: 86228     0     0 long                                    DECL  SetSize =0 (0x00000000)
2054: 86270     0     0 long CONS           INIT      HIDE      DECL  ShamStim_ =665 (0x00000299)
2055: 86312    82     0 long                                    DECL  shiftVal@SEND_TTL =0 (0x00000000)
2056: 86354     0  2057 long                          HIDE      DECL  Sig_color =0 (0x00000000)
2057: 86396    47     0 long                                    DECL  sig_color@CMD_PGS =0 (0x00000000)
2058: 86438    50  2056 long                                    DECL  sig_color@MG_PGS =0 (0x00000000)
2059: 86480    52  2058 long                                    DECL  sig_color@GNG_PGS =0 (0x00000000)
2060: 86522    56  2059 long                                    DECL  sig_color@TSCH_PGS =0 (0x00000000)
2061: 86564    57  2060 long                                    DECL  sig_color@LSCH_PGS =0 (0x00000000)
2062: 86606    20     0 long                INIT      HIDE      DECL  signal@CMDTRIAL =6 (0x00000006)
2063: 86648    21  2062 long                INIT      HIDE      DECL  signal@MGTRIAL =6 (0x00000006)
2064: 86690    47  2063 long                INIT      HIDE      DECL  signal@CMD_PGS =6 (0x00000006)
2065: 86732    50  2064 long                INIT      HIDE      DECL  signal@MG_PGS =6 (0x00000006)
2066: 86774    20     0 long                INIT      HIDE      DECL  signal_pd@CMDTRIAL =5 (0x00000005)
2067: 86816    21  2066 long                INIT      HIDE      DECL  signal_pd@MGTRIAL =5 (0x00000005)
2068: 86858    47  2067 long                INIT      HIDE      DECL  signal_pd@CMD_PGS =5 (0x00000005)
2069: 86900    50  2068 long                INIT      HIDE      DECL  signal_pd@MG_PGS =5 (0x00000005)
2070: 86942    52     0 long                INIT      HIDE      DECL  signal_pd_S@GNG_PGS =5 (0x00000005)
2071: 86984    59  2070 long                INIT      HIDE      DECL  signal_pd_S@GNGTRIAL =5 (0x00000005)
2072: 87026    52     0 long                INIT      HIDE      DECL  signal_pd_T@GNG_PGS =4 (0x00000004)
2073: 87068    59  2072 long                INIT      HIDE      DECL  signal_pd_T@GNGTRIAL =4 (0x00000004)
2074: 87110     0     0 long                                    DECL  SingCol =0 (0x00000000)
2075: 87152     0     0 long                                    DECL  SingFreq =0 (0x00000000)
2076: 87194     0     0 arry                                    DECL  Singleton_color len=4 xmsOff=4116 [3] 1 @48 = {}
2077: 87236     0     0 long                                    DECL  SingMode =0 (0x00000000)
2078: 87278     0  2080 flot                          HIDE      DECL  Size =0.000000 (0x00000000)
2079: 87320    44     0 flot                                    DECL  size@DRW_SQR =0.000000 (0x00000000)
2080: 87362    45  2079 flot                          HIDE      DECL  size@FIX_PGS =0.000000 (0x00000000)
2081: 87404     0     0 farr                                    DECL  Size_list len=4 xmsOff=4332 [12] 1 @106 = {}
2082: 87446     0     0 flot                                    DECL  SmlP_weight =0.000000 (0x00000000)
2083: 87488     0     0 flot                                    DECL  SmlR_weight =0.000000 (0x00000000)
2084: 87530     0     0 long                          HIDE      DECL  soa =0 (0x00000000)
2085: 87572     9     0 long                                    DECL  soa_box_size@SET_SOA =0 (0x00000000)
2086: 87614    53     0 flot                          HIDE      DECL  soa_diff@SETG_TRL =0.000000 (0x00000000)
2087: 87656    55  2086 flot                          HIDE      DECL  soa_diff@SETD_TRL =0.000000 (0x00000000)
2088: 87698     0     0 long                          HIDE      DECL  soa_jitter =0 (0x00000000)
2089: 87740     9     0 long                                    DECL  soa_left@SET_SOA =0 (0x00000000)
2090: 87782     0     0 farr                                    DECL  SOA_list len=4 xmsOff=4556 [20] 1 @138 = {}
2091: 87824     0     0 long                                    DECL  soa_mode =0 (0x00000000)
2092: 87866     9     0 long                                    DECL  soa_range@SET_SOA =0 (0x00000000)
2093: 87908     9     0 long                                    DECL  soa_right@SET_SOA =0 (0x00000000)
2094: 87950     0     0 long CONS           INIT      HIDE      DECL  SoundNoReward_ =2779 (0x00000ADB)
2095: 87992     0     0 long CONS           INIT      HIDE      DECL  SoundOnReward_ =2778 (0x00000ADA)
2096: 88034     0     0 long CONS           INIT HDDN           DECL  SPEED =100 (0x00000064)
2097: 88076     0     0 long CONS           INIT HDDN           DECL  SPEED_UNITS =100000 (0x000186A0)
2098: 88118     0     0 long                                    DECL  SSD_ceil =0 (0x00000000)
2099: 88160     0     0 long                                    DECL  SSD_floor =0 (0x00000000)
2100: 88202     0     0 farr                                    DECL  SSD_list len=4 xmsOff=4476 [20] 1 @130 = {}
2101: 88244     8     0 long                                    DECL  ssd_range@SET_INH =0 (0x00000000)
2102: 88286    20     0 long                          HIDE      DECL  stage@CMDTRIAL =0 (0x00000000)
2103: 88328    21  2102 long                          HIDE      DECL  stage@MGTRIAL =0 (0x00000000)
2104: 88370    22  2103 long                          HIDE      DECL  stage@SCHTRIAL =0 (0x00000000)
2105: 88412    59  2104 long                          HIDE      DECL  stage@GNGTRIAL =0 (0x00000000)
2106: 88454    60  2105 long                          HIDE      DECL  stage@DELTRIAL =0 (0x00000000)
2107: 88496    73  2106 long                          HIDE      DECL  stage@FIXTRIAL =0 (0x00000000)
2108: 88538    80  2107 long                          HIDE      DECL  stage@FLSHSCRN =0 (0x00000000)
2109: 88580     0     0 long CONS PROC      INIT HDDN           DECL  STAIR =48 (0x00000030)
2110: 88622     0     0 long                                    DECL  Staircase =0 (0x00000000)
2111: 88664    49  2110 long                                    DECL  staircase@SETC_TRL =0 (0x00000000)
2112: 88706    58  2111 long                                    DECL  staircase@SETS_TRL =0 (0x00000000)
2113: 88748     0     0 long CONS           INIT      HIDE      DECL  Staircase_ =2772 (0x00000AD4)
2114: 88790    81     0 long                                    DECL  start@WAIT_MU =0 (0x00000000)
2115: 88832     0     0 long CONS           INIT      HIDE      DECL  StartInfos_ =2998 (0x00000BB6)
2116: 88874     0     0 long                                    DECL  State =0 (0x00000000)
2117: 88916     1  2116 long                                    DECL  state@DEFAULT =0 (0x00000000)
2118: 88958     2  2117 long                                    DECL  state@GOODVARS =0 (0x00000000)
2119: 89000    16     0 long                INIT                DECL  still@WATCHMTH =0 (0x00000000)
2120: 89042     0     0 long CONS PROC      INIT HDDN           DECL  STIM =3 (0x00000003)
2121: 89084     0     0 long CONS           INIT      HIDE      DECL  Stim_channel =13 (0x0000000D)
2122: 89126    11     0 flot                          HIDE      DECL  stim_ecc_x@WINDOWS =0.000000 (0x00000000)
2123: 89168    41  2122 flot                          HIDE      DECL  stim_ecc_x@DRW_T =0.000000 (0x00000000)
2124: 89210    42  2123 flot                          HIDE      DECL  stim_ecc_x@DRW_L =0.000000 (0x00000000)
2125: 89252    43  2124 flot                          HIDE      DECL  stim_ecc_x@DRW_PLAC =0.000000 (0x00000000)
2126: 89294    44  2125 flot                          HIDE      DECL  stim_ecc_x@DRW_SQR =0.000000 (0x00000000)
2127: 89336    45  2126 flot                          HIDE      DECL  stim_ecc_x@FIX_PGS =0.000000 (0x00000000)
2128: 89378    47  2127 flot                          HIDE      DECL  stim_ecc_x@CMD_PGS =0.000000 (0x00000000)
2129: 89420    50  2128 flot                          HIDE      DECL  stim_ecc_x@MG_PGS =0.000000 (0x00000000)
2130: 89462    52  2129 flot                          HIDE      DECL  stim_ecc_x@GNG_PGS =0.000000 (0x00000000)
2131: 89504    54  2130 flot                          HIDE      DECL  stim_ecc_x@DEL_PGS =0.000000 (0x00000000)
2132: 89546    56  2131 flot                          HIDE      DECL  stim_ecc_x@TSCH_PGS =0.000000 (0x00000000)
2133: 89588    57  2132 flot                          HIDE      DECL  stim_ecc_x@LSCH_PGS =0.000000 (0x00000000)
2134: 89630    11     0 flot                          HIDE      DECL  stim_ecc_y@WINDOWS =0.000000 (0x00000000)
2135: 89672    41  2134 flot                          HIDE      DECL  stim_ecc_y@DRW_T =0.000000 (0x00000000)
2136: 89714    42  2135 flot                          HIDE      DECL  stim_ecc_y@DRW_L =0.000000 (0x00000000)
2137: 89756    43  2136 flot                          HIDE      DECL  stim_ecc_y@DRW_PLAC =0.000000 (0x00000000)
2138: 89798    44  2137 flot                          HIDE      DECL  stim_ecc_y@DRW_SQR =0.000000 (0x00000000)
2139: 89840    45  2138 flot                          HIDE      DECL  stim_ecc_y@FIX_PGS =0.000000 (0x00000000)
2140: 89882    47  2139 flot                          HIDE      DECL  stim_ecc_y@CMD_PGS =0.000000 (0x00000000)
2141: 89924    50  2140 flot                          HIDE      DECL  stim_ecc_y@MG_PGS =0.000000 (0x00000000)
2142: 89966    52  2141 flot                          HIDE      DECL  stim_ecc_y@GNG_PGS =0.000000 (0x00000000)
2143: 90008    54  2142 flot                          HIDE      DECL  stim_ecc_y@DEL_PGS =0.000000 (0x00000000)
2144: 90050    56  2143 flot                          HIDE      DECL  stim_ecc_y@TSCH_PGS =0.000000 (0x00000000)
2145: 90092    57  2144 flot                          HIDE      DECL  stim_ecc_y@LSCH_PGS =0.000000 (0x00000000)
2146: 90134     0     0 long                                    DECL  StimCond =0 (0x00000000)
2147: 90176    21     0 long                          HIDE      DECL  StimDone@MGTRIAL =0 (0x00000000)
2148: 90218    22  2147 long                          HIDE      DECL  StimDone@SCHTRIAL =0 (0x00000000)
2149: 90260     0     0 long CONS           INIT      HIDE      DECL  StimFailed_ =667 (0x0000029B)
2150: 90302     0     0 long                                    DECL  StimInterval =0 (0x00000000)
2151: 90344     0     0 long                          HIDE      DECL  StimTm =0 (0x00000000)
2152: 90386     0     0 long CONS           INIT      HIDE      DECL  Stimulation_ =666 (0x0000029A)
2153: 90428     0     0 arry                                    DECL  Stop_sig_color len=4 xmsOff=4140 [3] 1 @64 = {}
2154: 90470    49  2153 long                INIT      HIDE      DECL  stop_sig_color@SETC_TRL =254 (0x000000FE)
2155: 90512    51  2154 long                INIT      HIDE      DECL  stop_sig_color@SETMGTRL =254 (0x000000FE)
2156: 90554    53  2155 long                INIT      HIDE      DECL  stop_sig_color@SETG_TRL =254 (0x000000FE)
2157: 90596     0     0 long                                    DECL  stop_sig_color_b =0 (0x00000000)
2158: 90638     0     0 long                                    DECL  stop_sig_color_g =0 (0x00000000)
2159: 90680     0     0 long                                    DECL  stop_sig_color_r =0 (0x00000000)
2160: 90722    20     0 flot                          HIDE      DECL  stop_sig_time@CMDTRIAL =0.000000 (0x00000000)
2161: 90764    21  2160 flot                          HIDE      DECL  stop_sig_time@MGTRIAL =0.000000 (0x00000000)
2162: 90806    22  2161 flot                          HIDE      DECL  stop_sig_time@SCHTRIAL =0.000000 (0x00000000)
2163: 90848     0  2166 long CONS           INIT      HIDE      DECL  Stop_trl =1 (0x00000001)
2164: 90890    20     0 long                INIT      HIDE      DECL  stop_trl@CMDTRIAL =1 (0x00000001)
2165: 90932    21  2164 long                INIT      HIDE      DECL  stop_trl@MGTRIAL =1 (0x00000001)
2166: 90974    22  2165 long                INIT      HIDE      DECL  stop_trl@SCHTRIAL =1 (0x00000001)
2167: 91016    51  2163 long CONS           INIT      HIDE      DECL  Stop_trl@SETMGTRL =1 (0x00000001)
2168: 91058    53  2167 long CONS           INIT      HIDE      DECL  Stop_trl@SETG_TRL =1 (0x00000001)
2169: 91100    59  2168 long                INIT      HIDE      DECL  stop_trl@GNGTRIAL =1 (0x00000001)
2170: 91142    67  2169 long                INIT      HIDE      DECL  stop_trl@SUCCESS =1 (0x00000001)
2171: 91184     0     0 flot                                    DECL  Stop_weight =0.000000 (0x00000000)
2172: 91226    49  2171 flot                                    DECL  stop_weight@SETC_TRL =0.000000 (0x00000000)
2173: 91268    51  2172 flot                                    DECL  stop_weight@SETMGTRL =0.000000 (0x00000000)
2174: 91310    58  2173 flot                                    DECL  stop_weight@SETS_TRL =0.000000 (0x00000000)
2175: 91352     0     0 long CONS           INIT      HIDE      DECL  StopOn_ =2654 (0x00000A5E)
2176: 91394     0     0 long CONS           INIT      HIDE      DECL  StopSignal_ =2653 (0x00000A5D)
2177: 91436     0     0 flot                INIT      HIDE      DECL  Subj_dist =450.000000 (0x43E10000)
2178: 91478     6  2177 flot                                    DECL  subj_dist@SET_COOR =0.000000 (0x00000000)
2179: 91520     0  2187 long CONS PROC      INIT HDDN           DECL  SUCCESS =67 (0x00000043)
2180: 91562    20     0 long                INIT      HIDE      DECL  success@CMDTRIAL =1 (0x00000001)
2181: 91604    21  2180 long                INIT      HIDE      DECL  success@MGTRIAL =1 (0x00000001)
2182: 91646    22  2181 long                INIT      HIDE      DECL  success@SCHTRIAL =1 (0x00000001)
2183: 91688    48  2182 long                INIT      HIDE      DECL  success@STAIR =1 (0x00000001)
2184: 91730    59  2183 long                INIT      HIDE      DECL  success@GNGTRIAL =1 (0x00000001)
2185: 91772    61  2184 long                INIT      HIDE      DECL  success@UPD8_INH =1 (0x00000001)
2186: 91814    62  2185 long                INIT      HIDE      DECL  success@UPD8_SOA =1 (0x00000001)
2187: 91856    63  2186 long                INIT                DECL  success@UPD8_SCH =1 (0x00000001)
2188: 91898     0     0 long                                    DECL  Success_tone =0 (0x00000000)
2189: 91940    67  2188 long                                    DECL  success_tone@SUCCESS =0 (0x00000000)
2190: 91982     0     0 long                                    DECL  Success_Tone_bigR =0 (0x00000000)
2191: 92024     0     0 long                                    DECL  Success_Tone_medR =0 (0x00000000)
2192: 92066     0     0 long                                    DECL  Success_Tone_smlR =0 (0x00000000)
2193: 92108     0     0 long CONS PROC      INIT HDDN           DECL  SVR_BEL2 =19 (0x00000013)
2194: 92150     0     0 long CONS PROC      INIT HDDN           DECL  SVR_BELL =18 (0x00000012)
2195: 92192     0     0 flot                          HIDE      DECL  targ_angle =0.000000 (0x00000000)
2196: 92234     0     0 flot                          HIDE      DECL  targ_ecc =0.000000 (0x00000000)
2197: 92276     0     0 long                                    DECL  Targ_hold_time =0 (0x00000000)
2198: 92318    20  2197 long                                    DECL  targ_hold_time@CMDTRIAL =0 (0x00000000)
2199: 92360    21  2198 long                                    DECL  targ_hold_time@MGTRIAL =0 (0x00000000)
2200: 92402    22  2199 long                                    DECL  targ_hold_time@SCHTRIAL =0 (0x00000000)
2201: 92444    59  2200 long                                    DECL  targ_hold_time@GNGTRIAL =0 (0x00000000)
2202: 92486    60  2201 long                                    DECL  targ_hold_time@DELTRIAL =0 (0x00000000)
2203: 92528    73  2202 long                                    DECL  targ_hold_time@FIXTRIAL =0 (0x00000000)
2204: 92570    20     0 long                INIT      HIDE      DECL  targ_on@CMDTRIAL =3 (0x00000003)
2205: 92612    21  2204 long                INIT      HIDE      DECL  targ_on@MGTRIAL =3 (0x00000003)
2206: 92654    59  2205 long                INIT      HIDE      DECL  targ_on@GNGTRIAL =3 (0x00000003)
2207: 92696    60  2206 long                INIT      HIDE      DECL  targ_on@DELTRIAL =3 (0x00000003)
2208: 92738     0     0 flot                          HIDE      DECL  targ_orient =0.000000 (0x00000000)
2209: 92780    20     0 flot                          HIDE      DECL  targ_time@CMDTRIAL =0.000000 (0x00000000)
2210: 92822    21  2209 flot                          HIDE      DECL  targ_time@MGTRIAL =0.000000 (0x00000000)
2211: 92864    22  2210 flot                          HIDE      DECL  targ_time@SCHTRIAL =0.000000 (0x00000000)
2212: 92906    59  2211 flot                          HIDE      DECL  targ_time@GNGTRIAL =0.000000 (0x00000000)
2213: 92948    60  2212 flot                          HIDE      DECL  targ_time@DELTRIAL =0.000000 (0x00000000)
2214: 92990    73  2213 flot                          HIDE      DECL  targ_time@FIXTRIAL =0.000000 (0x00000000)
2215: 93032     0     0 flot                          HIDE      DECL  Targ_win_down =0.000000 (0x00000000)
2216: 93074    12  2215 flot                                    DECL  targ_win_down@LOCATE_I =0.000000 (0x00000000)
2217: 93116     0     0 flot                          HIDE      DECL  Targ_win_left =0.000000 (0x00000000)
2218: 93158    12  2217 flot                                    DECL  targ_win_left@LOCATE_I =0.000000 (0x00000000)
2219: 93200     0     0 flot                          HIDE      DECL  Targ_win_right =0.000000 (0x00000000)
2220: 93242    12  2219 flot                                    DECL  targ_win_right@LOCATE_I =0.000000 (0x00000000)
2221: 93284     0     0 flot                                    DECL  Targ_win_size =0.000000 (0x00000000)
2222: 93326    11  2221 flot                                    DECL  targ_win_size@WINDOWS =0.000000 (0x00000000)
2223: 93368     0     0 flot                          HIDE      DECL  Targ_win_up =0.000000 (0x00000000)
2224: 93410    12  2223 flot                                    DECL  targ_win_up@LOCATE_I =0.000000 (0x00000000)
2225: 93452    20     0 long                INIT      HIDE      DECL  target@CMDTRIAL =4 (0x00000004)
2226: 93494    21  2225 long                INIT      HIDE      DECL  target@MGTRIAL =4 (0x00000004)
2227: 93536    22  2226 long                INIT      HIDE      DECL  target@SCHTRIAL =7 (0x00000007)
2228: 93578    45  2227 long                INIT      HIDE      DECL  target@FIX_PGS =1 (0x00000001)
2229: 93620    47  2228 long                INIT      HIDE      DECL  target@CMD_PGS =4 (0x00000004)
2230: 93662    50  2229 long                INIT      HIDE      DECL  target@MG_PGS =4 (0x00000004)
2231: 93704    52  2230 long                INIT      HIDE      DECL  target@GNG_PGS =6 (0x00000006)
2232: 93746    54  2231 long                INIT      HIDE      DECL  target@DEL_PGS =6 (0x00000006)
2233: 93788    56  2232 long                INIT      HIDE      DECL  target@TSCH_PGS =7 (0x00000007)
2234: 93830    57  2233 long                INIT      HIDE      DECL  target@LSCH_PGS =7 (0x00000007)
2235: 93872    59  2234 long                INIT      HIDE      DECL  target@GNGTRIAL =6 (0x00000006)
2236: 93914    60  2235 long                INIT      HIDE      DECL  target@DELTRIAL =6 (0x00000006)
2237: 93956    73  2236 long                INIT      HIDE      DECL  target@FIXTRIAL =1 (0x00000001)
2238: 93998     0     0 long CONS           INIT      HIDE      DECL  Target_ =2651 (0x00000A5B)
2239: 94040     0     0 long                                    DECL  target_color_b =0 (0x00000000)
2240: 94082     0     0 long                                    DECL  target_color_g =0 (0x00000000)
2241: 94124     0     0 long                                    DECL  target_color_r =0 (0x00000000)
2242: 94166    22     0 long                INIT      HIDE      DECL  target_f@SCHTRIAL =6 (0x00000006)
2243: 94208    56  2242 long                INIT      HIDE      DECL  target_f@TSCH_PGS =6 (0x00000006)
2244: 94250    57  2243 long                INIT      HIDE      DECL  target_f@LSCH_PGS =6 (0x00000006)
2245: 94292    22     0 long                INIT      HIDE      DECL  target_f_pd@SCHTRIAL =5 (0x00000005)
2246: 94334    56  2245 long                INIT      HIDE      DECL  target_f_pd@TSCH_PGS =5 (0x00000005)
2247: 94376    57  2246 long                INIT      HIDE      DECL  target_f_pd@LSCH_PGS =5 (0x00000005)
2248: 94418    20     0 long                INIT      HIDE      DECL  target_pd@CMDTRIAL =3 (0x00000003)
2249: 94460    21  2248 long                INIT      HIDE      DECL  target_pd@MGTRIAL =3 (0x00000003)
2250: 94502    47  2249 long                INIT      HIDE      DECL  target_pd@CMD_PGS =3 (0x00000003)
2251: 94544    50  2250 long                INIT      HIDE      DECL  target_pd@MG_PGS =3 (0x00000003)
2252: 94586    54  2251 long                INIT      HIDE      DECL  target_pd@DEL_PGS =5 (0x00000005)
2253: 94628    60  2252 long                INIT      HIDE      DECL  target_pd@DELTRIAL =5 (0x00000005)
2254: 94670     0     0 long CONS           INIT      HIDE      DECL  TargetPre_ =2650 (0x00000A5A)
2255: 94712     0     0 long                                    DECL  TargetType =0 (0x00000000)
2256: 94754     0     0 long CONS           INIT      HIDE      DECL  TargetWindow_ =2771 (0x00000AD3)
2257: 94796     0     0 arry                INIT      HIDE      DECL  TargOrients len=4 xmsOff=4684 [4] 1 @170 = {}
2258: 94838     0     0 long                                    DECL  TargOrt =0 (0x00000000)
2259: 94880     0     0 long                                    DECL  TargOrt1 =0 (0x00000000)
2260: 94922     0     0 long                                    DECL  TargOrt2 =0 (0x00000000)
2261: 94964     0     0 long                                    DECL  TargTrainSet =0 (0x00000000)
2262: 95006     0     0 long                                    DECL  TaskStim =0 (0x00000000)
2263: 95048     0     0 long CONS           INIT      HIDE      DECL  tBOX =2 (0x00000002)
2264: 95090     0     0 long CONS           INIT      HIDE      DECL  tCROSS =3 (0x00000003)
2265: 95132     0     0 long                                    DECL  TD_Select =0 (0x00000000)
2266: 95174     0     0 long CONS           INIT      HIDE      DECL  tELLIPSE =5 (0x00000005)
2267: 95216     0     0 long                                    DECL  temp =0 (0x00000000)
2268: 95258    26  2267 long                                    DECL  temp@RandomizeRepDistAngles =0 (0x00000000)
2269: 95300    27  2268 long                                    DECL  temp@RandomizeRepDistEccentricities =0 (0x00000000)
2270: 95342    28  2269 long                                    DECL  temp@RandomizeRepTargAngles =0 (0x00000000)
2271: 95384    35  2270 long                                    DECL  temp@RandomizeRanDistAngles =0 (0x00000000)
2272: 95426    36  2271 long                                    DECL  temp@RandomizeRanDistEccentricities =0 (0x00000000)
2273: 95468    37  2272 long                                    DECL  temp@RandomizeRanTargAngles =0 (0x00000000)
2274: 95510     0     0 long                          HIDE      DECL  TgAng =0 (0x00000000)
2275: 95552     0     0 long                                    DECL  THemi =0 (0x00000000)
2276: 95594    41     0 flot                          HIDE      DECL  THx1@DRW_T =0.000000 (0x00000000)
2277: 95636    41     0 flot                          HIDE      DECL  THx2@DRW_T =0.000000 (0x00000000)
2278: 95678    41     0 flot                          HIDE      DECL  THy1@DRW_T =0.000000 (0x00000000)
2279: 95720    41     0 flot                          HIDE      DECL  THy2@DRW_T =0.000000 (0x00000000)
2280: 95762     0     0 long CONS PROC      INIT HDDN           DECL  TONE =14 (0x0000000E)
2281: 95804     0     0 long CONS           INIT      HIDE      DECL  Tone_ =2001 (0x000007D1)
2282: 95846     0     0 long                                    DECL  Tone_Duration =0 (0x00000000)
2283: 95888    67  2282 long                                    DECL  tone_duration@SUCCESS =0 (0x00000000)
2284: 95930    70     0 long                          HIDE      DECL  tone_durr@KEY_REWD =0 (0x00000000)
2285: 95972    70     0 long                          HIDE      DECL  tone_freq@KEY_REWD =0 (0x00000000)
2286: 96014    67     0 long                          HIDE      DECL  tone_time@SUCCESS =0 (0x00000000)
2287: 96056     0     0 long CONS PROC      INIT HDDN           DECL  TONESWEP =15 (0x0000000F)
2288: 96098    20     0 long CONS           INIT      HIDE      DECL  too_fast@CMDTRIAL =14 (0x0000000E)
2289: 96140    21  2288 long CONS           INIT      HIDE      DECL  too_fast@MGTRIAL =14 (0x0000000E)
2290: 96182    22  2289 long CONS           INIT      HIDE      DECL  too_fast@SCHTRIAL =14 (0x0000000E)
2291: 96224    69  2290 long CONS           INIT      HIDE      DECL  too_fast@END_TRL =14 (0x0000000E)
2292: 96266     0     0 long CONS           INIT      HIDE      DECL  tPOINT =1 (0x00000001)
2293: 96308     0     0 long                                    DECL  TrainingStill =0 (0x00000000)
2294: 96350     0     0 farr                INIT                DECL  TrAngList len=4 xmsOff=4100 [4] 1 @40 = {}
2295: 96392     0     0 long                                    DECL  Trial_length =0 (0x00000000)
2296: 96434    67  2295 long                                    DECL  trial_length@SUCCESS =0 (0x00000000)
2297: 96476    68  2296 long                                    DECL  trial_length@FAILURE =0 (0x00000000)
2298: 96518     0     0 long CONS           INIT      HIDE      DECL  TrialInBlock =2928 (0x00000B70)
2299: 96560     0     0 long CONS           INIT      HIDE      DECL  TrialStart_ =1666 (0x00000682)
2300: 96602     0     0 long                                    DECL  TrialTp =0 (0x00000000)
2301: 96644     0     0 long                                    DECL  trialtype =0 (0x00000000)
2302: 96686    80     0 long                INIT                DECL  trl_ct@FLSHSCRN =0 (0x00000000)
2303: 96728    67     0 long                          HIDE      DECL  trl_end_time@SUCCESS =0 (0x00000000)
2304: 96770    68  2303 long                          HIDE      DECL  trl_end_time@FAILURE =0 (0x00000000)
2305: 96812     0     0 long                                    DECL  Trl_number =0 (0x00000000)
2306: 96854     0     0 long                          HIDE      DECL  Trl_Outcome =0 (0x00000000)
2307: 96896    69  2306 long                                    DECL  trl_outcome@END_TRL =0 (0x00000000)
2308: 96938    20     0 long                          HIDE      DECL  trl_running@CMDTRIAL =0 (0x00000000)
2309: 96980    21  2308 long                          HIDE      DECL  trl_running@MGTRIAL =0 (0x00000000)
2310: 97022    22  2309 long                          HIDE      DECL  trl_running@SCHTRIAL =0 (0x00000000)
2311: 97064    59  2310 long                          HIDE      DECL  trl_running@GNGTRIAL =0 (0x00000000)
2312: 97106    60  2311 long                          HIDE      DECL  trl_running@DELTRIAL =0 (0x00000000)
2313: 97148    73  2312 long                          HIDE      DECL  trl_running@FIXTRIAL =0 (0x00000000)
2314: 97190    80  2313 long                          HIDE      DECL  trl_running@FLSHSCRN =0 (0x00000000)
2315: 97232     0     0 long                          HIDE      DECL  Trl_Start_Time =0 (0x00000000)
2316: 97274    67  2315 long                                    DECL  trl_start_time@SUCCESS =0 (0x00000000)
2317: 97316    68  2316 long                                    DECL  trl_start_time@FAILURE =0 (0x00000000)
2318: 97358     0  2321 long                          HIDE      DECL  Trl_type =0 (0x00000000)
2319: 97400    20     0 long                                    DECL  trl_type@CMDTRIAL =0 (0x00000000)
2320: 97442    21  2319 long                                    DECL  trl_type@MGTRIAL =0 (0x00000000)
2321: 97484    22  2320 long                                    DECL  trl_type@SCHTRIAL =0 (0x00000000)
2322: 97526    59  2318 long                                    DECL  trl_type@GNGTRIAL =0 (0x00000000)
2323: 97568     0     0 long                                    DECL  Trls_per_block =0 (0x00000000)
2324: 97610     0     0 long CONS PROC      INIT HDDN           DECL  TSCH_PGS =56 (0x00000038)
2325: 97652    41     0 flot                          HIDE      DECL  TVx1@DRW_T =0.000000 (0x00000000)
2326: 97694    41     0 flot                          HIDE      DECL  TVx2@DRW_T =0.000000 (0x00000000)
2327: 97736    41     0 flot                          HIDE      DECL  TVy1@DRW_T =0.000000 (0x00000000)
2328: 97778    41     0 flot                          HIDE      DECL  TVy2@DRW_T =0.000000 (0x00000000)
2329: 97820     0     0 long CONS           INIT      HIDE      DECL  tXCROSS =4 (0x00000004)
2330: 97862    81     0 long                                    DECL  u_sec@WAIT_MU =0 (0x00000000)
2331: 97904    43     0 long                          HIDE      DECL  ulx@DRW_PLAC =0 (0x00000000)
2332: 97946    44  2331 long                          HIDE      DECL  ulx@DRW_SQR =0 (0x00000000)
2333: 97988    43     0 long                          HIDE      DECL  uly@DRW_PLAC =0 (0x00000000)
2334: 98030    44  2333 long                          HIDE      DECL  uly@DRW_SQR =0 (0x00000000)
2335: 98072     0     0 flot                          HIDE      DECL  Unit2Pix_X =0.000000 (0x00000000)
2336: 98114    46  2335 flot                                    DECL  unit2pix_X@FLS_PGS =0.000000 (0x00000000)
2337: 98156    47  2336 flot                                    DECL  unit2pix_X@CMD_PGS =0.000000 (0x00000000)
2338: 98198    50  2337 flot                                    DECL  unit2pix_X@MG_PGS =0.000000 (0x00000000)
2339: 98240    52  2338 flot                                    DECL  unit2pix_X@GNG_PGS =0.000000 (0x00000000)
2340: 98282    54  2339 flot                                    DECL  unit2pix_X@DEL_PGS =0.000000 (0x00000000)
2341: 98324    56  2340 flot                                    DECL  unit2pix_X@TSCH_PGS =0.000000 (0x00000000)
2342: 98366    57  2341 flot                                    DECL  unit2pix_X@LSCH_PGS =0.000000 (0x00000000)
2343: 98408     0     0 flot                          HIDE      DECL  Unit2Pix_Y =0.000000 (0x00000000)
2344: 98450    46  2343 flot                                    DECL  unit2pix_Y@FLS_PGS =0.000000 (0x00000000)
2345: 98492    47  2344 flot                                    DECL  unit2pix_Y@CMD_PGS =0.000000 (0x00000000)
2346: 98534    50  2345 flot                                    DECL  unit2pix_Y@MG_PGS =0.000000 (0x00000000)
2347: 98576    52  2346 flot                                    DECL  unit2pix_Y@GNG_PGS =0.000000 (0x00000000)
2348: 98618    54  2347 flot                                    DECL  unit2pix_Y@DEL_PGS =0.000000 (0x00000000)
2349: 98660    56  2348 flot                                    DECL  unit2pix_Y@TSCH_PGS =0.000000 (0x00000000)
2350: 98702    57  2349 flot                                    DECL  unit2pix_Y@LSCH_PGS =0.000000 (0x00000000)
2351: 98744     7     0 long                          HIDE      DECL  up@GRAPHS =0 (0x00000000)
2352: 98786     0     0 long CONS PROC      INIT HDDN           DECL  UPD8_INH =61 (0x0000003D)
2353: 98828     0     0 long CONS PROC      INIT HDDN           DECL  UPD8_SCH =63 (0x0000003F)
2354: 98870     0     0 long CONS PROC      INIT HDDN           DECL  UPD8_SOA =62 (0x0000003E)
2355: 98912    82     0 long                                    DECL  value@SEND_TTL =0 (0x00000000)
2356: 98954     0     0 long                                    DECL  VarEcc =0 (0x00000000)
2357: 98996     0     0 long CONS           INIT      HIDE      DECL  VSyncSynced_ =999 (0x000003E7)
2358: 99038    80     0 long                INIT      HIDE      DECL  wait_flash@FLSHSCRN =2 (0x00000002)
2359: 99080     0     0 long CONS PROC      INIT HDDN           DECL  WAIT_MU =81 (0x00000051)
2360: 99122    80     0 long                INIT      HIDE      DECL  waitIFI@FLSHSCRN =3 (0x00000003)
2361: 99164     0     0 long CONS PROC      INIT HDDN           DECL  WATCHBOD =17 (0x00000011)
2362: 99206     0     0 long CONS PROC      INIT HDDN           DECL  WATCHEYE =13 (0x0000000D)
2363: 99248     0     0 long CONS PROC      INIT HDDN           DECL  WATCHMTH =16 (0x00000010)
2364: 99290    61     0 flot                          HIDE      DECL  weight@UPD8_INH =0.000000 (0x00000000)
2365: 99332    62  2364 flot                          HIDE      DECL  weight@UPD8_SOA =0.000000 (0x00000000)
2366: 99374     0     0 long CONS PROC      INIT HDDN           DECL  WINDOWS =11 (0x0000000B)
2367: 99416     0     0 flot                INIT                DECL  X_Gain =3.492000 (0x405F7CEE)
2368: 99458     0     0 flot                                    DECL  X_Offset =0.000000 (0x00000000)
2369: 99500     1     0 long                INIT      HIDE      DECL  xena@DEFAULT =1 (0x00000001)
2370: 99542     0     0 flot                INIT                DECL  Y_Gain =3.729000 (0x406EA7F0)
2371: 99584     0     0 flot                                    DECL  Y_Offset =0.000000 (0x00000000)
2372: 99626     0     0 long CONS           INIT      HIDE      DECL  ZeroEyePosition_ =2302 (0x000008FE)
----- ----- ----- ----- ---- ---------------------------------------- -------------


PROCESS   1: DEFAULT (Args=3 CtrlBlk=33F4:1C90 Size=12548  iOp=2-12549 iCache=2-12549) DISABLED
 33F4:4012 37F5:0002     0: state@1:2117 = #P1:241
 33F4:401C 37F5:000C    10: monkey@1:1388 = #P2:246
 33F4:4026 37F5:0016    20: room@1:1938 = #P3:247
 33F4:4030 37F5:0020    30: r_@1:1855 = #I0:16
 33F4:403A 37F5:002A    40: g_@1:1179 = #I1:17
 33F4:4044 37F5:0034    50: b_@1:771 = #I2:53
 33F4:404E 37F5:003E    60: Trls_per_block:2323 = #I100:19
 33F4:4058 37F5:0048    70: Go_weight:1201 = F= Go_weight:1201
 33F4:4062 37F5:0052    80: Stop_weight:2171 = F= Stop_weight:2171
 33F4:406C 37F5:005C    90: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:4076 37F5:0066   100: DR1_flag:992 = #I0:16
 33F4:4080 37F5:0070   110: TargetType:2255 = #I1:17
 33F4:408A 37F5:007A   120: PlacPres:1621 = #I1:17
 33F4:4094 37F5:0084   130: SearchType:2033 = #I2:53
 33F4:409E 37F5:008E   140: SetSize:2053 = #I1:17
 33F4:40A8 37F5:0098   150: search_fix_time:2030 = F= search_fix_time:2030
 33F4:40B2 37F5:00A2   160: plac_duration:1615 = F= plac_duration:1615
 33F4:40BC 37F5:00AC   170: Consec_trl:855 = #I0:16
 33F4:40C6 37F5:00B6   180: NonSingleton_color:1455[r_@1:1855] = #I35:82
 33F4:40CE 37F5:00BE   188: NonSingleton_color:1455[g_@1:1179] = #I33:80
 33F4:40D6 37F5:00C6   196: NonSingleton_color:1455[b_@1:771] = #I27:69
 33F4:40DE 37F5:00CE   204: Singleton_color:2076[r_@1:1855] = #I35:82
 33F4:40E6 37F5:00D6   212: Singleton_color:2076[g_@1:1179] = #I33:80
 33F4:40EE 37F5:00DE   220: Singleton_color:2076[b_@1:771] = #I27:69
 33F4:40F6 37F5:00E6   228: Classic:837 = #I0:16
 33F4:4100 37F5:00F0   238: Stop_sig_color:2153[r_@1:1855] = #I63:126
 33F4:4108 37F5:00F8   246: Stop_sig_color:2153[g_@1:1179] = #I0:16
 33F4:4110 37F5:0100   254: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:4118 37F5:0108   262: Ignore_sig_color:1248[r_@1:1855] = #I0:16
 33F4:4120 37F5:0110   270: Ignore_sig_color:1248[g_@1:1179] = #I36:84
 33F4:4128 37F5:0118   278: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:4130 37F5:0120   286: Fixation_color:1117[r_@1:1855] = #I35:82
 33F4:4138 37F5:0128   294: Fixation_color:1117[g_@1:1179] = #I33:80
 33F4:4140 37F5:0130   302: Fixation_color:1117[b_@1:771] = #I27:69
 33F4:4148 37F5:0138   310: N_targ_pos:1407 = #I2:53
 33F4:4152 37F5:0142   320: Color_list:850[#I0:16,r_@1:1855] = #I35:82
 33F4:415C 37F5:014C   330: Color_list:850[#I0:16,g_@1:1179] = #I33:80
 33F4:4166 37F5:0156   340: Color_list:850[#I0:16,b_@1:771] = #I27:69
 33F4:4170 37F5:0160   350: Color_list:850[#I1:17,r_@1:1855] = #I35:82
 33F4:417A 37F5:016A   360: Color_list:850[#I1:17,g_@1:1179] = #I33:80
 33F4:4184 37F5:0174   370: Color_list:850[#I1:17,b_@1:771] = #I27:69
 33F4:418E 37F5:017E   380: Color_list:850[#I2:53,r_@1:1855] = #I35:82
 33F4:4198 37F5:0188   390: Color_list:850[#I2:53,g_@1:1179] = #I33:80
 33F4:41A2 37F5:0192   400: Color_list:850[#I2:53,b_@1:771] = #I27:69
 33F4:41AC 37F5:019C   410: Color_list:850[#I3:74,r_@1:1855] = #I35:82
 33F4:41B6 37F5:01A6   420: Color_list:850[#I3:74,g_@1:1179] = #I33:80
 33F4:41C0 37F5:01B0   430: Color_list:850[#I3:74,b_@1:771] = #I27:69
 33F4:41CA 37F5:01BA   440: Color_list:850[#I4:87,r_@1:1855] = #I35:82
 33F4:41D4 37F5:01C4   450: Color_list:850[#I4:87,g_@1:1179] = #I33:80
 33F4:41DE 37F5:01CE   460: Color_list:850[#I4:87,b_@1:771] = #I27:69
 33F4:41E8 37F5:01D8   470: Color_list:850[#I5:111,r_@1:1855] = #I35:82
 33F4:41F2 37F5:01E2   480: Color_list:850[#I5:111,g_@1:1179] = #I33:80
 33F4:41FC 37F5:01EC   490: Color_list:850[#I5:111,b_@1:771] = #I27:69
 33F4:4206 37F5:01F6   500: Color_list:850[#I6:120,r_@1:1855] = #I35:82
 33F4:4210 37F5:0200   510: Color_list:850[#I6:120,g_@1:1179] = #I33:80
 33F4:421A 37F5:020A   520: Color_list:850[#I6:120,b_@1:771] = #I27:69
 33F4:4224 37F5:0214   530: Color_list:850[#I7:129,r_@1:1855] = #I35:82
 33F4:422E 37F5:021E   540: Color_list:850[#I7:129,g_@1:1179] = #I33:80
 33F4:4238 37F5:0228   550: Color_list:850[#I7:129,b_@1:771] = #I27:69
 33F4:4242 37F5:0232   560: Color_list:850[#I8:133,r_@1:1855] = #I35:82
 33F4:424C 37F5:023C   570: Color_list:850[#I8:133,g_@1:1179] = #I33:80
 33F4:4256 37F5:0246   580: Color_list:850[#I8:133,b_@1:771] = #I27:69
 33F4:4260 37F5:0250   590: Color_list:850[#I9:140,r_@1:1855] = #I35:82
 33F4:426A 37F5:025A   600: Color_list:850[#I9:140,g_@1:1179] = #I33:80
 33F4:4274 37F5:0264   610: Color_list:850[#I9:140,b_@1:771] = #I27:69
 33F4:427E 37F5:026E   620: Color_list:850[#I10:18,r_@1:1855] = #I35:82
 33F4:4288 37F5:0278   630: Color_list:850[#I10:18,g_@1:1179] = #I33:80
 33F4:4292 37F5:0282   640: Color_list:850[#I10:18,b_@1:771] = #I27:69
 33F4:429C 37F5:028C   650: Color_list:850[#I11:27,r_@1:1855] = #I35:82
 33F4:42A6 37F5:0296   660: Color_list:850[#I11:27,g_@1:1179] = #I33:80
 33F4:42B0 37F5:02A0   670: Color_list:850[#I11:27,b_@1:771] = #I27:69
 33F4:42BA 37F5:02AA   680: Size_list:2081[#I0:16] = #M3F000000:166
 33F4:42C2 37F5:02B2   688: Size_list:2081[#I1:17] = #M3F000000:166
 33F4:42CA 37F5:02BA   696: Size_list:2081[#I2:53] = #M3F000000:166
 33F4:42D2 37F5:02C2   704: Size_list:2081[#I3:74] = #M3F000000:166
 33F4:42DA 37F5:02CA   712: Size_list:2081[#I4:87] = #M3F000000:166
 33F4:42E2 37F5:02D2   720: Size_list:2081[#I5:111] = #M3F000000:166
 33F4:42EA 37F5:02DA   728: Size_list:2081[#I6:120] = #M3F000000:166
 33F4:42F2 37F5:02E2   736: Size_list:2081[#I7:129] = #M3F000000:166
 33F4:42FA 37F5:02EA   744: Size_list:2081[#I8:133] = #M3F000000:166
 33F4:4302 37F5:02F2   752: Size_list:2081[#I9:140] = #M3F000000:166
 33F4:430A 37F5:02FA   760: Size_list:2081[#I10:18] = #M3F000000:166
 33F4:4312 37F5:0302   768: Size_list:2081[#I11:27] = #M3F000000:166
 33F4:431A 37F5:030A   776: Angle_list:743[#I0:16] = #M00000000:164
 33F4:4322 37F5:0312   784: Angle_list:743[#I1:17] = #M43340000:205
 33F4:432A 37F5:031A   792: Angle_list:743[#I2:53] = #M42B40000:200
 33F4:4332 37F5:0322   800: Angle_list:743[#I3:74] = #M43070000:203
 33F4:433A 37F5:032A   808: Angle_list:743[#I4:87] = #M43340000:205
 33F4:4342 37F5:0332   816: Angle_list:743[#I5:111] = #MC3070000:239
 33F4:434A 37F5:033A   824: Angle_list:743[#I6:120] = #MC2B40000:238
 33F4:4352 37F5:0342   832: Angle_list:743[#I7:129] = #MC2340000:237
 33F4:435A 37F5:034A   840: Eccentricity_list:1012[#I0:16] = #M41000000:177
 33F4:4362 37F5:0352   848: Eccentricity_list:1012[#I1:17] = #M41000000:177
 33F4:436A 37F5:035A   856: Eccentricity_list:1012[#I2:53] = #M41000000:177
 33F4:4372 37F5:0362   864: Eccentricity_list:1012[#I3:74] = #M41000000:177
 33F4:437A 37F5:036A   872: Eccentricity_list:1012[#I4:87] = #M41000000:177
 33F4:4382 37F5:0372   880: Eccentricity_list:1012[#I5:111] = #M41000000:177
 33F4:438A 37F5:037A   888: Eccentricity_list:1012[#I6:120] = #M41000000:177
 33F4:4392 37F5:0382   896: Eccentricity_list:1012[#I7:129] = #M41000000:177
 33F4:439A 37F5:038A   904: Eccentricity_list:1012[#I8:133] = #M41000000:177
 33F4:43A2 37F5:0392   912: Eccentricity_list:1012[#I9:140] = #M41000000:177
 33F4:43AA 37F5:039A   920: Eccentricity_list:1012[#I10:18] = #M41000000:177
 33F4:43B2 37F5:03A2   928: Eccentricity_list:1012[#I11:27] = #M41000000:177
 33F4:43BA 37F5:03AA   936: Fixation_size:1144 = F= Fixation_size:1144
 33F4:43C4 37F5:03B4   946: Success_Tone_bigR:2190 = #I100:19
 33F4:43CE 37F5:03BE   956: Success_Tone_medR:2191 = #I200:55
 33F4:43D8 37F5:03C8   966: Success_Tone_smlR:2192 = #I400:89
 33F4:43E2 37F5:03D2   976: Failure_Tone_smlP:1055 = #I800:135
 33F4:43EC 37F5:03DC   986: Failure_Tone_medP:1054 = #I1600:45
 33F4:43F6 37F5:03E6   996: Failure_Tone_bigP:1053 = #I3200:78
 33F4:4400 37F5:03F0  1006: Fixation_Target:1151 = #I0:16
 33F4:440A 37F5:03FA  1016: Fix_win_size:1092 = F= Fix_win_size:1092
 33F4:4414 37F5:0404  1026: Targ_win_size:2221 = F= Targ_win_size:2221
 33F4:441E 37F5:040E  1036: Allowed_fix_time:727 = #I2000:56
 33F4:4428 37F5:0418  1046: Expo_Jitter_SOA:1028 = #I0:16
 33F4:4432 37F5:0422  1056: Expo_Jitter:1022 = #I0:16
 33F4:443C 37F5:042C  1066: Min_Holdtime:1373 = #I500:113
 33F4:4446 37F5:0436  1076: Max_Holdtime:1338 = #I1000:20
 33F4:4450 37F5:0440  1086: Min_SOA:1381 = #I0:16
 33F4:445A 37F5:044A  1096: Max_SOA:1359 = #I1000:20
 33F4:4464 37F5:0454  1106: Min_saccade_time:1380 = #I0:16
 33F4:446E 37F5:045E  1116: Max_saccade_time:1352 = #I800:135
 33F4:4478 37F5:0468  1126: Max_sacc_duration:1346 = #I100:19
 33F4:4482 37F5:0472  1136: Targ_hold_time:2197 = #I600:122
 33F4:448C 37F5:047C  1146: Staircase:2110 = #I1:17
 33F4:4496 37F5:0486  1156: SSD_list:2100[#I0:16] = #M40400000:172
 33F4:449E 37F5:048E  1164: SSD_list:2100[#I1:17] = #M40C00000:176
 33F4:44A6 37F5:0496  1172: SSD_list:2100[#I2:53] = #M41100000:178
 33F4:44AE 37F5:049E  1180: SSD_list:2100[#I3:74] = #M41400000:180
 33F4:44B6 37F5:04A6  1188: SSD_list:2100[#I4:87] = #M00000000:164
 33F4:44BE 37F5:04AE  1196: SSD_list:2100[#I5:111] = #M00000000:164
 33F4:44C6 37F5:04B6  1204: SSD_list:2100[#I6:120] = #M00000000:164
 33F4:44CE 37F5:04BE  1212: SSD_list:2100[#I7:129] = #M00000000:164
 33F4:44D6 37F5:04C6  1220: SSD_list:2100[#I8:133] = #M00000000:164
 33F4:44DE 37F5:04CE  1228: SSD_list:2100[#I9:140] = #M00000000:164
 33F4:44E6 37F5:04D6  1236: SSD_list:2100[#I10:18] = #M00000000:164
 33F4:44EE 37F5:04DE  1244: SSD_list:2100[#I11:27] = #M00000000:164
 33F4:44F6 37F5:04E6  1252: SSD_list:2100[#I12:30] = #M00000000:164
 33F4:44FE 37F5:04EE  1260: SSD_list:2100[#I13:34] = #M00000000:164
 33F4:4506 37F5:04F6  1268: SSD_list:2100[#I14:38] = #M00000000:164
 33F4:450E 37F5:04FE  1276: SSD_list:2100[#I15:41] = #M00000000:164
 33F4:4516 37F5:0506  1284: SSD_list:2100[#I16:44] = #M00000000:164
 33F4:451E 37F5:050E  1292: SSD_list:2100[#I17:47] = #M00000000:164
 33F4:4526 37F5:0516  1300: SSD_list:2100[#I18:49] = #M00000000:164
 33F4:452E 37F5:051E  1308: SSD_list:2100[#I19:52] = #M00000000:164
 33F4:4536 37F5:0526  1316: SSD_floor:2099 = #I0:16
 33F4:4540 37F5:0530  1326: SSD_ceil:2098 = #I0:16
 33F4:454A 37F5:053A  1336: Cancl_time:815 = Max_saccade_time:1352 * #I2:53
 33F4:4558 37F5:0548  1350: Tone_Duration:2282 = #I30:75
 33F4:4562 37F5:0552  1360: Exp_juice:1021 = #I0:16
 33F4:456C 37F5:055C  1370: Reward_Offset:1932 = #I600:122
 33F4:4576 37F5:0566  1380: Base_Reward_time:774 = #I60:121
 33F4:4580 37F5:0570  1390: Base_Punish_time:773 = #I2000:56
 33F4:458A 37F5:057A  1400: Max_move_ct:1344 = #I1:17
 33F4:4594 37F5:0584  1410: Bmove_tout:793 = #I2000:56
 33F4:459E 37F5:058E  1420: TrainingStill:2293 = #I0:16
 33F4:45A8 37F5:0598  1430: Canc_alert:814 = #I0:16
 33F4:45B2 37F5:05A2  1440: Fixed_trl_length:1158 = #I0:16
 33F4:45BC 37F5:05AC  1450: Trial_length:2295 = #I0:16
 33F4:45C6 37F5:05B6  1460: Inter_trl_int:1282 = #I4000:90
 33F4:45D0 37F5:05C0  1470: #L0:145 = monkey@1:1388 == xena@1:2369
 33F4:45DE 37F5:05CE  1484: IFnot (#L0:145) GOTO .+2242 (goto 3726)
 33F4:45E6 37F5:05D6  1492: #L1:146 = room@1:1938 == #I28:72
 33F4:45F4 37F5:05E4  1506: IFnot (#L1:146) GOTO .+32 (goto 1538)
 33F4:45FC 37F5:05EC  1514: Subj_dist:2177 = F= Subj_dist:2177
 33F4:4606 37F5:05F6  1524: TrainingStill:2293 = #I0:16
 33F4:4610 37F5:0600  1534: GOTO .+36 (goto 1570)
 33F4:4614 37F5:0604  1538: #L0:145 = room@1:1938 == #I29:73
 33F4:4622 37F5:0612  1552: IFnot (#L0:145) GOTO .+18 (goto 1570)
 33F4:462A 37F5:061A  1560: Subj_dist:2177 = F= Subj_dist:2177
 33F4:4634 37F5:0624  1570: Set_Tones:2046 = #I1:17
 33F4:463E 37F5:062E  1580: Fix_win_size:1092 = F= Fix_win_size:1092
 33F4:4648 37F5:0638  1590: Targ_win_size:2221 = F= Targ_win_size:2221
 33F4:4652 37F5:0642  1600: Allowed_fix_time:727 = #I1000:20
 33F4:465C 37F5:064C  1610: Max_saccade_time:1352 = #I800:135
 33F4:4666 37F5:0656  1620: Base_Reward_time:774 = #I50:112
 33F4:4670 37F5:0660  1630: Base_Punish_time:773 = #I1000:20
 33F4:467A 37F5:066A  1640: #L0:145 = state@1:2117 == run_search_sess@1:1983
 33F4:4688 37F5:0678  1654: IFnot (#L0:145) GOTO .+346 (goto 2000)
 33F4:4690 37F5:0680  1662: Trls_per_block:2323 = #I10000:21
 33F4:469A 37F5:068A  1672: DR1_flag:992 = #I0:16
 33F4:46A4 37F5:0694  1682: Go_weight:1201 = F= Go_weight:1201
 33F4:46AE 37F5:069E  1692: Stop_weight:2171 = F= Stop_weight:2171
 33F4:46B8 37F5:06A8  1702: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:46C2 37F5:06B2  1712: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:46CA 37F5:06BA  1720: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:46D2 37F5:06C2  1728: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:46DA 37F5:06CA  1736: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:46E2 37F5:06D2  1744: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:46EA 37F5:06DA  1752: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:46F2 37F5:06E2  1760: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:46FA 37F5:06EA  1768: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:4702 37F5:06F2  1776: Size_list:2081[#I8:133] = #M3FC00000:169
 33F4:470A 37F5:06FA  1784: Size_list:2081[#I9:140] = #M3FC00000:169
 33F4:4712 37F5:0702  1792: Size_list:2081[#I10:18] = #M3FC00000:169
 33F4:471A 37F5:070A  1800: Size_list:2081[#I11:27] = #M3FC00000:169
 33F4:4722 37F5:0712  1808: Eccentricity_list:1012[#I0:16] = #M40400000:172
 33F4:472A 37F5:071A  1816: Eccentricity_list:1012[#I1:17] = #M40C00000:176
 33F4:4732 37F5:0722  1824: Eccentricity_list:1012[#I2:53] = #M41100000:178
 33F4:473A 37F5:072A  1832: Eccentricity_list:1012[#I3:74] = #M40C00000:176
 33F4:4742 37F5:0732  1840: Eccentricity_list:1012[#I4:87] = #M40C00000:176
 33F4:474A 37F5:073A  1848: Eccentricity_list:1012[#I5:111] = #M41100000:178
 33F4:4752 37F5:0742  1856: Eccentricity_list:1012[#I6:120] = #M40000000:170
 33F4:475A 37F5:074A  1864: Eccentricity_list:1012[#I7:129] = #M40800000:174
 33F4:4762 37F5:0752  1872: Eccentricity_list:1012[#I8:133] = #M40A00000:175
 33F4:476A 37F5:075A  1880: Eccentricity_list:1012[#I9:140] = #M40C00000:176
 33F4:4772 37F5:0762  1888: Eccentricity_list:1012[#I10:18] = #M41000000:177
 33F4:477A 37F5:076A  1896: Eccentricity_list:1012[#I11:27] = #M41100000:178
 33F4:4782 37F5:0772  1904: Angle_list:743[#I0:16] = #M00000000:164
 33F4:478A 37F5:077A  1912: Angle_list:743[#I1:17] = #M41F00000:187
 33F4:4792 37F5:0782  1920: Angle_list:743[#I2:53] = #M42700000:196
 33F4:479A 37F5:078A  1928: Angle_list:743[#I3:74] = #M42B40000:200
 33F4:47A2 37F5:0792  1936: Angle_list:743[#I4:87] = #M42F00000:202
 33F4:47AA 37F5:079A  1944: Angle_list:743[#I5:111] = #M43160000:204
 33F4:47B2 37F5:07A2  1952: Angle_list:743[#I6:120] = #M43340000:205
 33F4:47BA 37F5:07AA  1960: Angle_list:743[#I7:129] = #M43520000:207
 33F4:47C2 37F5:07B2  1968: Angle_list:743[#I8:133] = #M43700000:209
 33F4:47CA 37F5:07BA  1976: Angle_list:743[#I9:140] = #M43870000:211
 33F4:47D2 37F5:07C2  1984: Angle_list:743[#I10:18] = #M43960000:212
 33F4:47DA 37F5:07CA  1992: Angle_list:743[#I11:27] = #M43A50000:214
 33F4:47E2 37F5:07D2  2000: #L0:145 = state@1:2117 == run_cmd_sess@1:1940
 33F4:47F0 37F5:07E0  2014: IFnot (#L0:145) GOTO .+372 (goto 2386)
 33F4:47F8 37F5:07E8  2022: Trls_per_block:2323 = #I20:54
 33F4:4802 37F5:07F2  2032: N_targ_pos:1407 = #I2:53
 33F4:480C 37F5:07FC  2042: DR1_flag:992 = #I1:17
 33F4:4816 37F5:0806  2052: Go_weight:1201 = F= Go_weight:1201
 33F4:4820 37F5:0810  2062: Stop_weight:2171 = F= Stop_weight:2171
 33F4:482A 37F5:081A  2072: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:4834 37F5:0824  2082: Stop_sig_color:2153[r_@1:1855] = #I0:16
 33F4:483C 37F5:082C  2090: Stop_sig_color:2153[g_@1:1179] = #I36:84
 33F4:4844 37F5:0834  2098: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:484C 37F5:083C  2106: Ignore_sig_color:1248[r_@1:1855] = #I63:126
 33F4:4854 37F5:0844  2114: Ignore_sig_color:1248[g_@1:1179] = #I0:16
 33F4:485C 37F5:084C  2122: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:4864 37F5:0854  2130: SSD_list:2100[#I0:16] = #M40400000:172
 33F4:486C 37F5:085C  2138: SSD_list:2100[#I1:17] = #M41500000:181
 33F4:4874 37F5:0864  2146: SSD_list:2100[#I2:53] = #M41B80000:185
 33F4:487C 37F5:086C  2154: SSD_list:2100[#I3:74] = #M42040000:188
 33F4:4884 37F5:0874  2162: SSD_list:2100[#I4:87] = #M422C0000:191
 33F4:488C 37F5:087C  2170: SSD_list:2100[#I5:111] = #M42540000:195
 33F4:4894 37F5:0884  2178: SSD_list:2100[#I6:120] = #M427C0000:197
 33F4:489C 37F5:088C  2186: SSD_list:2100[#I7:129] = #M00000000:164
 33F4:48A4 37F5:0894  2194: SSD_list:2100[#I8:133] = #M00000000:164
 33F4:48AC 37F5:089C  2202: SSD_list:2100[#I9:140] = #M00000000:164
 33F4:48B4 37F5:08A4  2210: SSD_list:2100[#I10:18] = #M00000000:164
 33F4:48BC 37F5:08AC  2218: SSD_list:2100[#I11:27] = #M00000000:164
 33F4:48C4 37F5:08B4  2226: SSD_list:2100[#I12:30] = #M00000000:164
 33F4:48CC 37F5:08BC  2234: SSD_list:2100[#I13:34] = #M00000000:164
 33F4:48D4 37F5:08C4  2242: SSD_list:2100[#I14:38] = #M00000000:164
 33F4:48DC 37F5:08CC  2250: SSD_list:2100[#I15:41] = #M00000000:164
 33F4:48E4 37F5:08D4  2258: SSD_list:2100[#I16:44] = #M00000000:164
 33F4:48EC 37F5:08DC  2266: SSD_list:2100[#I17:47] = #M00000000:164
 33F4:48F4 37F5:08E4  2274: SSD_list:2100[#I18:49] = #M00000000:164
 33F4:48FC 37F5:08EC  2282: SSD_list:2100[#I19:52] = #M00000000:164
 33F4:4904 37F5:08F4  2290: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:490C 37F5:08FC  2298: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:4914 37F5:0904  2306: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:491C 37F5:090C  2314: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:4924 37F5:0914  2322: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:492C 37F5:091C  2330: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:4934 37F5:0924  2338: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:493C 37F5:092C  2346: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:4944 37F5:0934  2354: Size_list:2081[#I8:133] = #M3FC00000:169
 33F4:494C 37F5:093C  2362: Size_list:2081[#I9:140] = #M3FC00000:169
 33F4:4954 37F5:0944  2370: Size_list:2081[#I10:18] = #M3FC00000:169
 33F4:495C 37F5:094C  2378: Size_list:2081[#I11:27] = #M3FC00000:169
 33F4:4964 37F5:0954  2386: #L0:145 = state@1:2117 == run_mg_sess@1:1975
 33F4:4972 37F5:0962  2400: IFnot (#L0:145) GOTO .+758 (goto 3158)
 33F4:497A 37F5:096A  2408: Go_weight:1201 = F= Go_weight:1201
 33F4:4984 37F5:0974  2418: Stop_weight:2171 = F= Stop_weight:2171
 33F4:498E 37F5:097E  2428: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:4998 37F5:0988  2438: Min_SOA:1381 = #I600:122
 33F4:49A2 37F5:0992  2448: Max_SOA:1359 = #I1400:40
 33F4:49AC 37F5:099C  2458: Expo_Jitter_SOA:1028 = #I0:16
 33F4:49B6 37F5:09A6  2468: Exp_juice:1021 = #I1:17
 33F4:49C0 37F5:09B0  2478: Trial_length:2295 = #I5000:114
 33F4:49CA 37F5:09BA  2488: Cancl_time:815 = #I1200:32
 33F4:49D4 37F5:09C4  2498: Min_Holdtime:1373 = #I500:113
 33F4:49DE 37F5:09CE  2508: Max_Holdtime:1338 = #I1000:20
 33F4:49E8 37F5:09D8  2518: Max_saccade_time:1352 = #I1000:20
 33F4:49F2 37F5:09E2  2528: Base_Reward_time:774 = #I30:75
 33F4:49FC 37F5:09EC  2538: Base_Punish_time:773 = #I5000:114
 33F4:4A06 37F5:09F6  2548: N_targ_pos:1407 = #I8:133
 33F4:4A10 37F5:0A00  2558: Stop_sig_color:2153[r_@1:1855] = #I63:126
 33F4:4A18 37F5:0A08  2566: Stop_sig_color:2153[g_@1:1179] = #I0:16
 33F4:4A20 37F5:0A10  2574: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:4A28 37F5:0A18  2582: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:4A30 37F5:0A20  2590: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:4A38 37F5:0A28  2598: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:4A40 37F5:0A30  2606: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:4A48 37F5:0A38  2614: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:4A50 37F5:0A40  2622: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:4A58 37F5:0A48  2630: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:4A60 37F5:0A50  2638: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:4A68 37F5:0A58  2646: Angle_list:743[#I0:16] = #M42B40000:200
 33F4:4A70 37F5:0A60  2654: Angle_list:743[#I1:17] = #M42340000:192
 33F4:4A78 37F5:0A68  2662: Angle_list:743[#I2:53] = #M00000000:164
 33F4:4A80 37F5:0A70  2670: Angle_list:743[#I3:74] = #M439D8000:213
 33F4:4A88 37F5:0A78  2678: Angle_list:743[#I4:87] = #M43870000:211
 33F4:4A90 37F5:0A80  2686: Angle_list:743[#I5:111] = #M43610000:208
 33F4:4A98 37F5:0A88  2694: Angle_list:743[#I6:120] = #M43340000:205
 33F4:4AA0 37F5:0A90  2702: Angle_list:743[#I7:129] = #M43070000:203
 33F4:4AA8 37F5:0A98  2710: Stop_sig_color:2153[r_@1:1855] = #I63:126
 33F4:4AB0 37F5:0AA0  2718: Stop_sig_color:2153[g_@1:1179] = #I0:16
 33F4:4AB8 37F5:0AA8  2726: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:4AC0 37F5:0AB0  2734: Ignore_sig_color:1248[r_@1:1855] = #I0:16
 33F4:4AC8 37F5:0AB8  2742: Ignore_sig_color:1248[g_@1:1179] = #I36:84
 33F4:4AD0 37F5:0AC0  2750: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:4AD8 37F5:0AC8  2758: Color_list:850[#I0:16,r_@1:1855] = #I35:82
 33F4:4AE2 37F5:0AD2  2768: Color_list:850[#I0:16,g_@1:1179] = #I33:80
 33F4:4AEC 37F5:0ADC  2778: Color_list:850[#I0:16,b_@1:771] = #I27:69
 33F4:4AF6 37F5:0AE6  2788: Color_list:850[#I1:17,r_@1:1855] = #I35:82
 33F4:4B00 37F5:0AF0  2798: Color_list:850[#I1:17,g_@1:1179] = #I33:80
 33F4:4B0A 37F5:0AFA  2808: Color_list:850[#I1:17,b_@1:771] = #I27:69
 33F4:4B14 37F5:0B04  2818: Color_list:850[#I2:53,r_@1:1855] = #I35:82
 33F4:4B1E 37F5:0B0E  2828: Color_list:850[#I2:53,g_@1:1179] = #I33:80
 33F4:4B28 37F5:0B18  2838: Color_list:850[#I2:53,b_@1:771] = #I27:69
 33F4:4B32 37F5:0B22  2848: Color_list:850[#I3:74,r_@1:1855] = #I35:82
 33F4:4B3C 37F5:0B2C  2858: Color_list:850[#I3:74,g_@1:1179] = #I33:80
 33F4:4B46 37F5:0B36  2868: Color_list:850[#I3:74,b_@1:771] = #I27:69
 33F4:4B50 37F5:0B40  2878: Color_list:850[#I4:87,r_@1:1855] = #I35:82
 33F4:4B5A 37F5:0B4A  2888: Color_list:850[#I4:87,g_@1:1179] = #I33:80
 33F4:4B64 37F5:0B54  2898: Color_list:850[#I4:87,b_@1:771] = #I27:69
 33F4:4B6E 37F5:0B5E  2908: Color_list:850[#I5:111,r_@1:1855] = #I35:82
 33F4:4B78 37F5:0B68  2918: Color_list:850[#I5:111,g_@1:1179] = #I33:80
 33F4:4B82 37F5:0B72  2928: Color_list:850[#I5:111,b_@1:771] = #I27:69
 33F4:4B8C 37F5:0B7C  2938: Color_list:850[#I6:120,r_@1:1855] = #I35:82
 33F4:4B96 37F5:0B86  2948: Color_list:850[#I6:120,g_@1:1179] = #I33:80
 33F4:4BA0 37F5:0B90  2958: Color_list:850[#I6:120,b_@1:771] = #I27:69
 33F4:4BAA 37F5:0B9A  2968: Color_list:850[#I7:129,r_@1:1855] = #I35:82
 33F4:4BB4 37F5:0BA4  2978: Color_list:850[#I7:129,g_@1:1179] = #I33:80
 33F4:4BBE 37F5:0BAE  2988: Color_list:850[#I7:129,b_@1:771] = #I27:69
 33F4:4BC8 37F5:0BB8  2998: SOA_list:2090[#I0:16] = #M43480000:206
 33F4:4BD0 37F5:0BC0  3006: SOA_list:2090[#I1:17] = #M43960000:212
 33F4:4BD8 37F5:0BC8  3014: SOA_list:2090[#I2:53] = #M43C80000:216
 33F4:4BE0 37F5:0BD0  3022: SOA_list:2090[#I3:74] = #M43960000:212
 33F4:4BE8 37F5:0BD8  3030: SOA_list:2090[#I4:87] = #M43C80000:216
 33F4:4BF0 37F5:0BE0  3038: SOA_list:2090[#I5:111] = #M43C80000:216
 33F4:4BF8 37F5:0BE8  3046: SOA_list:2090[#I6:120] = #M44610000:225
 33F4:4C00 37F5:0BF0  3054: SOA_list:2090[#I7:129] = #M447A0000:226
 33F4:4C08 37F5:0BF8  3062: SOA_list:2090[#I8:133] = #M00000000:164
 33F4:4C10 37F5:0C00  3070: SOA_list:2090[#I9:140] = #M00000000:164
 33F4:4C18 37F5:0C08  3078: SOA_list:2090[#I10:18] = #M00000000:164
 33F4:4C20 37F5:0C10  3086: SOA_list:2090[#I11:27] = #M00000000:164
 33F4:4C28 37F5:0C18  3094: SOA_list:2090[#I12:30] = #M00000000:164
 33F4:4C30 37F5:0C20  3102: SOA_list:2090[#I13:34] = #M00000000:164
 33F4:4C38 37F5:0C28  3110: SOA_list:2090[#I14:38] = #M00000000:164
 33F4:4C40 37F5:0C30  3118: SOA_list:2090[#I15:41] = #M00000000:164
 33F4:4C48 37F5:0C38  3126: SOA_list:2090[#I16:44] = #M00000000:164
 33F4:4C50 37F5:0C40  3134: SOA_list:2090[#I17:47] = #M00000000:164
 33F4:4C58 37F5:0C48  3142: SOA_list:2090[#I18:49] = #M00000000:164
 33F4:4C60 37F5:0C50  3150: SOA_list:2090[#I19:52] = #M00000000:164
 33F4:4C68 37F5:0C58  3158: #L0:145 = state@1:2117 == run_fix_sess@1:1954
 33F4:4C76 37F5:0C66  3172: IFnot (#L0:145) GOTO .+554 (goto 3726)
 33F4:4C7E 37F5:0C6E  3180: N_targ_pos:1407 = #I9:140
 33F4:4C88 37F5:0C78  3190: Color_list:850[#I0:16,r_@1:1855] = #I35:82
 33F4:4C92 37F5:0C82  3200: Color_list:850[#I0:16,g_@1:1179] = #I33:80
 33F4:4C9C 37F5:0C8C  3210: Color_list:850[#I0:16,b_@1:771] = #I27:69
 33F4:4CA6 37F5:0C96  3220: Color_list:850[#I1:17,r_@1:1855] = #I35:82
 33F4:4CB0 37F5:0CA0  3230: Color_list:850[#I1:17,g_@1:1179] = #I33:80
 33F4:4CBA 37F5:0CAA  3240: Color_list:850[#I1:17,b_@1:771] = #I27:69
 33F4:4CC4 37F5:0CB4  3250: Color_list:850[#I2:53,r_@1:1855] = #I35:82
 33F4:4CCE 37F5:0CBE  3260: Color_list:850[#I2:53,g_@1:1179] = #I33:80
 33F4:4CD8 37F5:0CC8  3270: Color_list:850[#I2:53,b_@1:771] = #I27:69
 33F4:4CE2 37F5:0CD2  3280: Color_list:850[#I3:74,r_@1:1855] = #I35:82
 33F4:4CEC 37F5:0CDC  3290: Color_list:850[#I3:74,g_@1:1179] = #I33:80
 33F4:4CF6 37F5:0CE6  3300: Color_list:850[#I3:74,b_@1:771] = #I27:69
 33F4:4D00 37F5:0CF0  3310: Color_list:850[#I4:87,r_@1:1855] = #I35:82
 33F4:4D0A 37F5:0CFA  3320: Color_list:850[#I4:87,g_@1:1179] = #I33:80
 33F4:4D14 37F5:0D04  3330: Color_list:850[#I4:87,b_@1:771] = #I27:69
 33F4:4D1E 37F5:0D0E  3340: Color_list:850[#I5:111,r_@1:1855] = #I35:82
 33F4:4D28 37F5:0D18  3350: Color_list:850[#I5:111,g_@1:1179] = #I33:80
 33F4:4D32 37F5:0D22  3360: Color_list:850[#I5:111,b_@1:771] = #I27:69
 33F4:4D3C 37F5:0D2C  3370: Color_list:850[#I6:120,r_@1:1855] = #I35:82
 33F4:4D46 37F5:0D36  3380: Color_list:850[#I6:120,g_@1:1179] = #I33:80
 33F4:4D50 37F5:0D40  3390: Color_list:850[#I6:120,b_@1:771] = #I27:69
 33F4:4D5A 37F5:0D4A  3400: Color_list:850[#I7:129,r_@1:1855] = #I35:82
 33F4:4D64 37F5:0D54  3410: Color_list:850[#I7:129,g_@1:1179] = #I33:80
 33F4:4D6E 37F5:0D5E  3420: Color_list:850[#I7:129,b_@1:771] = #I27:69
 33F4:4D78 37F5:0D68  3430: Color_list:850[#I8:133,r_@1:1855] = #I35:82
 33F4:4D82 37F5:0D72  3440: Color_list:850[#I8:133,g_@1:1179] = #I33:80
 33F4:4D8C 37F5:0D7C  3450: Color_list:850[#I8:133,b_@1:771] = #I27:69
 33F4:4D96 37F5:0D86  3460: Size_list:2081[#I0:16] = #M3F000000:166
 33F4:4D9E 37F5:0D8E  3468: Size_list:2081[#I1:17] = #M3F000000:166
 33F4:4DA6 37F5:0D96  3476: Size_list:2081[#I2:53] = #M3F000000:166
 33F4:4DAE 37F5:0D9E  3484: Size_list:2081[#I3:74] = #M3F000000:166
 33F4:4DB6 37F5:0DA6  3492: Size_list:2081[#I4:87] = #M3F000000:166
 33F4:4DBE 37F5:0DAE  3500: Size_list:2081[#I5:111] = #M3F000000:166
 33F4:4DC6 37F5:0DB6  3508: Size_list:2081[#I6:120] = #M3F000000:166
 33F4:4DCE 37F5:0DBE  3516: Size_list:2081[#I7:129] = #M3F000000:166
 33F4:4DD6 37F5:0DC6  3524: Size_list:2081[#I8:133] = #M3F000000:166
 33F4:4DDE 37F5:0DCE  3532: Angle_list:743[#I0:16] = #M00000000:164
 33F4:4DE6 37F5:0DD6  3540: Angle_list:743[#I1:17] = #M42B40000:200
 33F4:4DEE 37F5:0DDE  3548: Angle_list:743[#I2:53] = #MC2B40000:238
 33F4:4DF6 37F5:0DE6  3556: Angle_list:743[#I3:74] = #M43340000:205
 33F4:4DFE 37F5:0DEE  3564: Angle_list:743[#I4:87] = #M00000000:164
 33F4:4E06 37F5:0DF6  3572: Angle_list:743[#I5:111] = #M43070000:203
 33F4:4E0E 37F5:0DFE  3580: Angle_list:743[#I6:120] = #M42340000:192
 33F4:4E16 37F5:0E06  3588: Angle_list:743[#I7:129] = #MC3070000:239
 33F4:4E1E 37F5:0E0E  3596: Angle_list:743[#I8:133] = #MC2340000:237
 33F4:4E26 37F5:0E16  3604: Eccentricity_list:1012[#I0:16] = #M00000000:164
 33F4:4E2E 37F5:0E1E  3612: Eccentricity_list:1012[#I1:17] = #M41300000:179
 33F4:4E36 37F5:0E26  3620: Eccentricity_list:1012[#I2:53] = #M41300000:179
 33F4:4E3E 37F5:0E2E  3628: Eccentricity_list:1012[#I3:74] = #M41300000:179
 33F4:4E46 37F5:0E36  3636: Eccentricity_list:1012[#I4:87] = #M41300000:179
 33F4:4E4E 37F5:0E3E  3644: Eccentricity_list:1012[#I5:111] = #M4179999A:183
 33F4:4E56 37F5:0E46  3652: Eccentricity_list:1012[#I6:120] = #M4179999A:183
 33F4:4E5E 37F5:0E4E  3660: Eccentricity_list:1012[#I7:129] = #M4179999A:183
 33F4:4E66 37F5:0E56  3668: Eccentricity_list:1012[#I8:133] = #M4179999A:183
 33F4:4E6E 37F5:0E5E  3676: Fix_win_size:1092 = F= Fix_win_size:1092
 33F4:4E78 37F5:0E68  3686: Targ_win_size:2221 = F= Targ_win_size:2221
 33F4:4E82 37F5:0E72  3696: Allowed_fix_time:727 = #I1200:32
 33F4:4E8C 37F5:0E7C  3706: Max_saccade_time:1352 = #I800:135
 33F4:4E96 37F5:0E86  3716: Targ_hold_time:2197 = #I600:122
 33F4:4EA0 37F5:0E90  3726: #L0:145 = monkey@1:1388 == broca@1:801
 33F4:4EAE 37F5:0E9E  3740: IFnot (#L0:145) GOTO .+1208 (goto 4948)
 33F4:4EB6 37F5:0EA6  3748: #L1:146 = room@1:1938 == #I28:72
 33F4:4EC4 37F5:0EB4  3762: IFnot (#L1:146) GOTO .+32 (goto 3794)
 33F4:4ECC 37F5:0EBC  3770: Subj_dist:2177 = F= Subj_dist:2177
 33F4:4ED6 37F5:0EC6  3780: TrainingStill:2293 = #I0:16
 33F4:4EE0 37F5:0ED0  3790: GOTO .+36 (goto 3826)
 33F4:4EE4 37F5:0ED4  3794: #L0:145 = room@1:1938 == #I29:73
 33F4:4EF2 37F5:0EE2  3808: IFnot (#L0:145) GOTO .+18 (goto 3826)
 33F4:4EFA 37F5:0EEA  3816: Subj_dist:2177 = F= Subj_dist:2177
 33F4:4F04 37F5:0EF4  3826: Set_Tones:2046 = #I1:17
 33F4:4F0E 37F5:0EFE  3836: Fix_win_size:1092 = F= Fix_win_size:1092
 33F4:4F18 37F5:0F08  3846: Targ_win_size:2221 = F= Targ_win_size:2221
 33F4:4F22 37F5:0F12  3856: Allowed_fix_time:727 = #I1000:20
 33F4:4F2C 37F5:0F1C  3866: Max_saccade_time:1352 = #I800:135
 33F4:4F36 37F5:0F26  3876: Base_Reward_time:774 = #I50:112
 33F4:4F40 37F5:0F30  3886: Base_Punish_time:773 = #I1000:20
 33F4:4F4A 37F5:0F3A  3896: #L0:145 = state@1:2117 == run_cmd_sess@1:1940
 33F4:4F58 37F5:0F48  3910: IFnot (#L0:145) GOTO .+266 (goto 4176)
 33F4:4F60 37F5:0F50  3918: Trls_per_block:2323 = #I20:54
 33F4:4F6A 37F5:0F5A  3928: DR1_flag:992 = #I1:17
 33F4:4F74 37F5:0F64  3938: Go_weight:1201 = F= Go_weight:1201
 33F4:4F7E 37F5:0F6E  3948: Stop_weight:2171 = F= Stop_weight:2171
 33F4:4F88 37F5:0F78  3958: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:4F92 37F5:0F82  3968: Stop_sig_color:2153[r_@1:1855] = #I0:16
 33F4:4F9A 37F5:0F8A  3976: Stop_sig_color:2153[g_@1:1179] = #I36:84
 33F4:4FA2 37F5:0F92  3984: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:4FAA 37F5:0F9A  3992: Ignore_sig_color:1248[r_@1:1855] = #I63:126
 33F4:4FB2 37F5:0FA2  4000: Ignore_sig_color:1248[g_@1:1179] = #I0:16
 33F4:4FBA 37F5:0FAA  4008: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:4FC2 37F5:0FB2  4016: SSD_list:2100[#I0:16] = #M40400000:172
 33F4:4FCA 37F5:0FBA  4024: SSD_list:2100[#I1:17] = #M41500000:181
 33F4:4FD2 37F5:0FC2  4032: SSD_list:2100[#I2:53] = #M41B80000:185
 33F4:4FDA 37F5:0FCA  4040: SSD_list:2100[#I3:74] = #M42040000:188
 33F4:4FE2 37F5:0FD2  4048: SSD_list:2100[#I4:87] = #M422C0000:191
 33F4:4FEA 37F5:0FDA  4056: SSD_list:2100[#I5:111] = #M42540000:195
 33F4:4FF2 37F5:0FE2  4064: SSD_list:2100[#I6:120] = #M427C0000:197
 33F4:4FFA 37F5:0FEA  4072: SSD_list:2100[#I7:129] = #M00000000:164
 33F4:5002 37F5:0FF2  4080: SSD_list:2100[#I8:133] = #M00000000:164
 33F4:500A 37F5:0FFA  4088: SSD_list:2100[#I9:140] = #M00000000:164
 33F4:5012 37F5:1002  4096: SSD_list:2100[#I10:18] = #M00000000:164
 33F4:501A 37F5:100A  4104: SSD_list:2100[#I11:27] = #M00000000:164
 33F4:5022 37F5:1012  4112: SSD_list:2100[#I12:30] = #M00000000:164
 33F4:502A 37F5:101A  4120: SSD_list:2100[#I13:34] = #M00000000:164
 33F4:5032 37F5:1022  4128: SSD_list:2100[#I14:38] = #M00000000:164
 33F4:503A 37F5:102A  4136: SSD_list:2100[#I15:41] = #M00000000:164
 33F4:5042 37F5:1032  4144: SSD_list:2100[#I16:44] = #M00000000:164
 33F4:504A 37F5:103A  4152: SSD_list:2100[#I17:47] = #M00000000:164
 33F4:5052 37F5:1042  4160: SSD_list:2100[#I18:49] = #M00000000:164
 33F4:505A 37F5:104A  4168: SSD_list:2100[#I19:52] = #M00000000:164
 33F4:5062 37F5:1052  4176: #L0:145 = state@1:2117 == run_mg_sess@1:1975
 33F4:5070 37F5:1060  4190: IFnot (#L0:145) GOTO .+758 (goto 4948)
 33F4:5078 37F5:1068  4198: Go_weight:1201 = F= Go_weight:1201
 33F4:5082 37F5:1072  4208: Stop_weight:2171 = F= Stop_weight:2171
 33F4:508C 37F5:107C  4218: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:5096 37F5:1086  4228: Min_SOA:1381 = #I600:122
 33F4:50A0 37F5:1090  4238: Max_SOA:1359 = #I1400:40
 33F4:50AA 37F5:109A  4248: Expo_Jitter_SOA:1028 = #I0:16
 33F4:50B4 37F5:10A4  4258: Exp_juice:1021 = #I1:17
 33F4:50BE 37F5:10AE  4268: Trial_length:2295 = #I5000:114
 33F4:50C8 37F5:10B8  4278: Cancl_time:815 = #I1200:32
 33F4:50D2 37F5:10C2  4288: Min_Holdtime:1373 = #I500:113
 33F4:50DC 37F5:10CC  4298: Max_Holdtime:1338 = #I1000:20
 33F4:50E6 37F5:10D6  4308: Max_saccade_time:1352 = #I400:89
 33F4:50F0 37F5:10E0  4318: Base_Reward_time:774 = #I100:19
 33F4:50FA 37F5:10EA  4328: Base_Punish_time:773 = #I1000:20
 33F4:5104 37F5:10F4  4338: N_targ_pos:1407 = #I2:53
 33F4:510E 37F5:10FE  4348: Stop_sig_color:2153[r_@1:1855] = #I63:126
 33F4:5116 37F5:1106  4356: Stop_sig_color:2153[g_@1:1179] = #I0:16
 33F4:511E 37F5:110E  4364: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:5126 37F5:1116  4372: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:512E 37F5:111E  4380: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:5136 37F5:1126  4388: Size_list:2081[#I2:53] = #M00000000:164
 33F4:513E 37F5:112E  4396: Size_list:2081[#I3:74] = #M00000000:164
 33F4:5146 37F5:1136  4404: Size_list:2081[#I4:87] = #M00000000:164
 33F4:514E 37F5:113E  4412: Size_list:2081[#I5:111] = #M00000000:164
 33F4:5156 37F5:1146  4420: Size_list:2081[#I6:120] = #M00000000:164
 33F4:515E 37F5:114E  4428: Size_list:2081[#I7:129] = #M00000000:164
 33F4:5166 37F5:1156  4436: Angle_list:743[#I0:16] = #M00000000:164
 33F4:516E 37F5:115E  4444: Angle_list:743[#I1:17] = #M43340000:205
 33F4:5176 37F5:1166  4452: Angle_list:743[#I2:53] = #M42B40000:200
 33F4:517E 37F5:116E  4460: Angle_list:743[#I3:74] = #M43070000:203
 33F4:5186 37F5:1176  4468: Angle_list:743[#I4:87] = #M43340000:205
 33F4:518E 37F5:117E  4476: Angle_list:743[#I5:111] = #MC3070000:239
 33F4:5196 37F5:1186  4484: Angle_list:743[#I6:120] = #MC2B40000:238
 33F4:519E 37F5:118E  4492: Angle_list:743[#I7:129] = #MC2340000:237
 33F4:51A6 37F5:1196  4500: Stop_sig_color:2153[r_@1:1855] = #I63:126
 33F4:51AE 37F5:119E  4508: Stop_sig_color:2153[g_@1:1179] = #I0:16
 33F4:51B6 37F5:11A6  4516: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:51BE 37F5:11AE  4524: Ignore_sig_color:1248[r_@1:1855] = #I0:16
 33F4:51C6 37F5:11B6  4532: Ignore_sig_color:1248[g_@1:1179] = #I36:84
 33F4:51CE 37F5:11BE  4540: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:51D6 37F5:11C6  4548: Color_list:850[#I0:16,r_@1:1855] = #I35:82
 33F4:51E0 37F5:11D0  4558: Color_list:850[#I0:16,g_@1:1179] = #I33:80
 33F4:51EA 37F5:11DA  4568: Color_list:850[#I0:16,b_@1:771] = #I27:69
 33F4:51F4 37F5:11E4  4578: Color_list:850[#I1:17,r_@1:1855] = #I35:82
 33F4:51FE 37F5:11EE  4588: Color_list:850[#I1:17,g_@1:1179] = #I33:80
 33F4:5208 37F5:11F8  4598: Color_list:850[#I1:17,b_@1:771] = #I27:69
 33F4:5212 37F5:1202  4608: Color_list:850[#I2:53,r_@1:1855] = #I35:82
 33F4:521C 37F5:120C  4618: Color_list:850[#I2:53,g_@1:1179] = #I33:80
 33F4:5226 37F5:1216  4628: Color_list:850[#I2:53,b_@1:771] = #I27:69
 33F4:5230 37F5:1220  4638: Color_list:850[#I3:74,r_@1:1855] = #I35:82
 33F4:523A 37F5:122A  4648: Color_list:850[#I3:74,g_@1:1179] = #I33:80
 33F4:5244 37F5:1234  4658: Color_list:850[#I3:74,b_@1:771] = #I27:69
 33F4:524E 37F5:123E  4668: Color_list:850[#I4:87,r_@1:1855] = #I35:82
 33F4:5258 37F5:1248  4678: Color_list:850[#I4:87,g_@1:1179] = #I33:80
 33F4:5262 37F5:1252  4688: Color_list:850[#I4:87,b_@1:771] = #I27:69
 33F4:526C 37F5:125C  4698: Color_list:850[#I5:111,r_@1:1855] = #I35:82
 33F4:5276 37F5:1266  4708: Color_list:850[#I5:111,g_@1:1179] = #I33:80
 33F4:5280 37F5:1270  4718: Color_list:850[#I5:111,b_@1:771] = #I27:69
 33F4:528A 37F5:127A  4728: Color_list:850[#I6:120,r_@1:1855] = #I35:82
 33F4:5294 37F5:1284  4738: Color_list:850[#I6:120,g_@1:1179] = #I33:80
 33F4:529E 37F5:128E  4748: Color_list:850[#I6:120,b_@1:771] = #I27:69
 33F4:52A8 37F5:1298  4758: Color_list:850[#I7:129,r_@1:1855] = #I35:82
 33F4:52B2 37F5:12A2  4768: Color_list:850[#I7:129,g_@1:1179] = #I33:80
 33F4:52BC 37F5:12AC  4778: Color_list:850[#I7:129,b_@1:771] = #I27:69
 33F4:52C6 37F5:12B6  4788: SOA_list:2090[#I0:16] = #M42480000:194
 33F4:52CE 37F5:12BE  4796: SOA_list:2090[#I1:17] = #M42700000:196
 33F4:52D6 37F5:12C6  4804: SOA_list:2090[#I2:53] = #M428C0000:198
 33F4:52DE 37F5:12CE  4812: SOA_list:2090[#I3:74] = #M42A00000:199
 33F4:52E6 37F5:12D6  4820: SOA_list:2090[#I4:87] = #M42B40000:200
 33F4:52EE 37F5:12DE  4828: SOA_list:2090[#I5:111] = #M00000000:164
 33F4:52F6 37F5:12E6  4836: SOA_list:2090[#I6:120] = #M00000000:164
 33F4:52FE 37F5:12EE  4844: SOA_list:2090[#I7:129] = #M00000000:164
 33F4:5306 37F5:12F6  4852: SOA_list:2090[#I8:133] = #M00000000:164
 33F4:530E 37F5:12FE  4860: SOA_list:2090[#I9:140] = #M00000000:164
 33F4:5316 37F5:1306  4868: SOA_list:2090[#I10:18] = #M00000000:164
 33F4:531E 37F5:130E  4876: SOA_list:2090[#I11:27] = #M00000000:164
 33F4:5326 37F5:1316  4884: SOA_list:2090[#I12:30] = #M00000000:164
 33F4:532E 37F5:131E  4892: SOA_list:2090[#I13:34] = #M00000000:164
 33F4:5336 37F5:1326  4900: SOA_list:2090[#I14:38] = #M00000000:164
 33F4:533E 37F5:132E  4908: SOA_list:2090[#I15:41] = #M00000000:164
 33F4:5346 37F5:1336  4916: SOA_list:2090[#I16:44] = #M00000000:164
 33F4:534E 37F5:133E  4924: SOA_list:2090[#I17:47] = #M00000000:164
 33F4:5356 37F5:1346  4932: SOA_list:2090[#I18:49] = #M00000000:164
 33F4:535E 37F5:134E  4940: SOA_list:2090[#I19:52] = #M00000000:164
 33F4:5366 37F5:1356  4948: #L0:145 = monkey@1:1388 == helmholtz@1:1229
 33F4:5374 37F5:1364  4962: IFnot (#L0:145) GOTO .+3748 (goto 8710)
 33F4:537C 37F5:136C  4970: #L1:146 = room@1:1938 == #I28:72
 33F4:538A 37F5:137A  4984: IFnot (#L1:146) GOTO .+32 (goto 5016)
 33F4:5392 37F5:1382  4992: Subj_dist:2177 = F= Subj_dist:2177
 33F4:539C 37F5:138C  5002: TrainingStill:2293 = #I0:16
 33F4:53A6 37F5:1396  5012: GOTO .+36 (goto 5048)
 33F4:53AA 37F5:139A  5016: #L0:145 = room@1:1938 == #I29:73
 33F4:53B8 37F5:13A8  5030: IFnot (#L0:145) GOTO .+18 (goto 5048)
 33F4:53C0 37F5:13B0  5038: Subj_dist:2177 = F= Subj_dist:2177
 33F4:53CA 37F5:13BA  5048: Set_Tones:2046 = #I1:17
 33F4:53D4 37F5:13C4  5058: Fix_win_size:1092 = F= Fix_win_size:1092
 33F4:53DE 37F5:13CE  5068: Targ_win_size:2221 = F= Targ_win_size:2221
 33F4:53E8 37F5:13D8  5078: Allowed_fix_time:727 = #I1000:20
 33F4:53F2 37F5:13E2  5088: Max_saccade_time:1352 = #I800:135
 33F4:53FC 37F5:13EC  5098: Base_Reward_time:774 = #I30:75
 33F4:5406 37F5:13F6  5108: Base_Punish_time:773 = #I10000:21
 33F4:5410 37F5:1400  5118: #L0:145 = state@1:2117 == run_cmd_sess@1:1940
 33F4:541E 37F5:140E  5132: IFnot (#L0:145) GOTO .+394 (goto 5526)
 33F4:5426 37F5:1416  5140: Trls_per_block:2323 = #I10000:21
 33F4:5430 37F5:1420  5150: DR1_flag:992 = #I0:16
 33F4:543A 37F5:142A  5160: Go_weight:1201 = F= Go_weight:1201
 33F4:5444 37F5:1434  5170: Stop_weight:2171 = F= Stop_weight:2171
 33F4:544E 37F5:143E  5180: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:5458 37F5:1448  5190: Stop_sig_color:2153[r_@1:1855] = #I0:16
 33F4:5460 37F5:1450  5198: Stop_sig_color:2153[g_@1:1179] = #I36:84
 33F4:5468 37F5:1458  5206: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:5470 37F5:1460  5214: Ignore_sig_color:1248[r_@1:1855] = #I63:126
 33F4:5478 37F5:1468  5222: Ignore_sig_color:1248[g_@1:1179] = #I0:16
 33F4:5480 37F5:1470  5230: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:5488 37F5:1478  5238: SSD_list:2100[#I0:16] = #M40400000:172
 33F4:5490 37F5:1480  5246: SSD_list:2100[#I1:17] = #M41500000:181
 33F4:5498 37F5:1488  5254: SSD_list:2100[#I2:53] = #M41B80000:185
 33F4:54A0 37F5:1490  5262: SSD_list:2100[#I3:74] = #M42040000:188
 33F4:54A8 37F5:1498  5270: SSD_list:2100[#I4:87] = #M422C0000:191
 33F4:54B0 37F5:14A0  5278: SSD_list:2100[#I5:111] = #M42540000:195
 33F4:54B8 37F5:14A8  5286: SSD_list:2100[#I6:120] = #M427C0000:197
 33F4:54C0 37F5:14B0  5294: SSD_list:2100[#I7:129] = #M00000000:164
 33F4:54C8 37F5:14B8  5302: SSD_list:2100[#I8:133] = #M00000000:164
 33F4:54D0 37F5:14C0  5310: SSD_list:2100[#I9:140] = #M00000000:164
 33F4:54D8 37F5:14C8  5318: SSD_list:2100[#I10:18] = #M00000000:164
 33F4:54E0 37F5:14D0  5326: SSD_list:2100[#I11:27] = #M00000000:164
 33F4:54E8 37F5:14D8  5334: SSD_list:2100[#I12:30] = #M00000000:164
 33F4:54F0 37F5:14E0  5342: SSD_list:2100[#I13:34] = #M00000000:164
 33F4:54F8 37F5:14E8  5350: SSD_list:2100[#I14:38] = #M00000000:164
 33F4:5500 37F5:14F0  5358: SSD_list:2100[#I15:41] = #M00000000:164
 33F4:5508 37F5:14F8  5366: SSD_list:2100[#I16:44] = #M00000000:164
 33F4:5510 37F5:1500  5374: SSD_list:2100[#I17:47] = #M00000000:164
 33F4:5518 37F5:1508  5382: SSD_list:2100[#I18:49] = #M00000000:164
 33F4:5520 37F5:1510  5390: SSD_list:2100[#I19:52] = #M00000000:164
 33F4:5528 37F5:1518  5398: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:5530 37F5:1520  5406: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:5538 37F5:1528  5414: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:5540 37F5:1530  5422: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:5548 37F5:1538  5430: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:5550 37F5:1540  5438: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:5558 37F5:1548  5446: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:5560 37F5:1550  5454: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:5568 37F5:1558  5462: Angle_list:743[#I0:16] = #M00000000:164
 33F4:5570 37F5:1560  5470: Angle_list:743[#I1:17] = #M42340000:192
 33F4:5578 37F5:1568  5478: Angle_list:743[#I2:53] = #M42B40000:200
 33F4:5580 37F5:1570  5486: Angle_list:743[#I3:74] = #M43070000:203
 33F4:5588 37F5:1578  5494: Angle_list:743[#I4:87] = #M43340000:205
 33F4:5590 37F5:1580  5502: Angle_list:743[#I5:111] = #MC3070000:239
 33F4:5598 37F5:1588  5510: Angle_list:743[#I6:120] = #MC2B40000:238
 33F4:55A0 37F5:1590  5518: Angle_list:743[#I7:129] = #MC2340000:237
 33F4:55A8 37F5:1598  5526: #L0:145 = state@1:2117 == run_gonogo_sess@1:1961
 33F4:55B6 37F5:15A6  5540: IFnot (#L0:145) GOTO .+668 (goto 6208)
 33F4:55BE 37F5:15AE  5548: Go_weight:1201 = F= Go_weight:1201
 33F4:55C8 37F5:15B8  5558: Stop_weight:2171 = F= Stop_weight:2171
 33F4:55D2 37F5:15C2  5568: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:55DC 37F5:15CC  5578: Min_SOA:1381 = #I0:16
 33F4:55E6 37F5:15D6  5588: Max_SOA:1359 = #I1000:20
 33F4:55F0 37F5:15E0  5598: Expo_Jitter_SOA:1028 = #I0:16
 33F4:55FA 37F5:15EA  5608: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:5602 37F5:15F2  5616: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:560A 37F5:15FA  5624: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:5612 37F5:1602  5632: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:561A 37F5:160A  5640: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:5622 37F5:1612  5648: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:562A 37F5:161A  5656: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:5632 37F5:1622  5664: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:563A 37F5:162A  5672: Angle_list:743[#I0:16] = #M00000000:164
 33F4:5642 37F5:1632  5680: Angle_list:743[#I1:17] = #M42340000:192
 33F4:564A 37F5:163A  5688: Angle_list:743[#I2:53] = #M43070000:203
 33F4:5652 37F5:1642  5696: Angle_list:743[#I3:74] = #M43340000:205
 33F4:565A 37F5:164A  5704: Angle_list:743[#I4:87] = #MC3070000:239
 33F4:5662 37F5:1652  5712: Angle_list:743[#I5:111] = #MC2340000:237
 33F4:566A 37F5:165A  5720: Angle_list:743[#I6:120] = #M00000000:164
 33F4:5672 37F5:1662  5728: Angle_list:743[#I7:129] = #M43340000:205
 33F4:567A 37F5:166A  5736: Stop_sig_color:2153[r_@1:1855] = #I0:16
 33F4:5682 37F5:1672  5744: Stop_sig_color:2153[g_@1:1179] = #I36:84
 33F4:568A 37F5:167A  5752: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:5692 37F5:1682  5760: Ignore_sig_color:1248[r_@1:1855] = #I63:126
 33F4:569A 37F5:168A  5768: Ignore_sig_color:1248[g_@1:1179] = #I0:16
 33F4:56A2 37F5:1692  5776: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:56AA 37F5:169A  5784: Mask_sig_color:1335[r_@1:1855] = #I0:16
 33F4:56B2 37F5:16A2  5792: Mask_sig_color:1335[g_@1:1179] = #I0:16
 33F4:56BA 37F5:16AA  5800: Mask_sig_color:1335[b_@1:771] = #I0:16
 33F4:56C2 37F5:16B2  5808: Color_list:850[#I0:16,r_@1:1855] = #I35:82
 33F4:56CC 37F5:16BC  5818: Color_list:850[#I0:16,g_@1:1179] = #I33:80
 33F4:56D6 37F5:16C6  5828: Color_list:850[#I0:16,b_@1:771] = #I27:69
 33F4:56E0 37F5:16D0  5838: Color_list:850[#I1:17,r_@1:1855] = #I35:82
 33F4:56EA 37F5:16DA  5848: Color_list:850[#I1:17,g_@1:1179] = #I33:80
 33F4:56F4 37F5:16E4  5858: Color_list:850[#I1:17,b_@1:771] = #I27:69
 33F4:56FE 37F5:16EE  5868: Color_list:850[#I2:53,r_@1:1855] = #I35:82
 33F4:5708 37F5:16F8  5878: Color_list:850[#I2:53,g_@1:1179] = #I33:80
 33F4:5712 37F5:1702  5888: Color_list:850[#I2:53,b_@1:771] = #I27:69
 33F4:571C 37F5:170C  5898: Color_list:850[#I3:74,r_@1:1855] = #I35:82
 33F4:5726 37F5:1716  5908: Color_list:850[#I3:74,g_@1:1179] = #I33:80
 33F4:5730 37F5:1720  5918: Color_list:850[#I3:74,b_@1:771] = #I27:69
 33F4:573A 37F5:172A  5928: Color_list:850[#I4:87,r_@1:1855] = #I35:82
 33F4:5744 37F5:1734  5938: Color_list:850[#I4:87,g_@1:1179] = #I33:80
 33F4:574E 37F5:173E  5948: Color_list:850[#I4:87,b_@1:771] = #I27:69
 33F4:5758 37F5:1748  5958: Color_list:850[#I5:111,r_@1:1855] = #I35:82
 33F4:5762 37F5:1752  5968: Color_list:850[#I5:111,g_@1:1179] = #I33:80
 33F4:576C 37F5:175C  5978: Color_list:850[#I5:111,b_@1:771] = #I27:69
 33F4:5776 37F5:1766  5988: Color_list:850[#I6:120,r_@1:1855] = #I35:82
 33F4:5780 37F5:1770  5998: Color_list:850[#I6:120,g_@1:1179] = #I33:80
 33F4:578A 37F5:177A  6008: Color_list:850[#I6:120,b_@1:771] = #I27:69
 33F4:5794 37F5:1784  6018: Color_list:850[#I7:129,r_@1:1855] = #I35:82
 33F4:579E 37F5:178E  6028: Color_list:850[#I7:129,g_@1:1179] = #I33:80
 33F4:57A8 37F5:1798  6038: Color_list:850[#I7:129,b_@1:771] = #I27:69
 33F4:57B2 37F5:17A2  6048: SSD_list:2100[#I0:16] = #M40400000:172
 33F4:57BA 37F5:17AA  6056: SSD_list:2100[#I1:17] = #M41000000:177
 33F4:57C2 37F5:17B2  6064: SSD_list:2100[#I2:53] = #M41500000:181
 33F4:57CA 37F5:17BA  6072: SSD_list:2100[#I3:74] = #M41900000:184
 33F4:57D2 37F5:17C2  6080: SSD_list:2100[#I4:87] = #M41B80000:185
 33F4:57DA 37F5:17CA  6088: SSD_list:2100[#I5:111] = #M41E00000:186
 33F4:57E2 37F5:17D2  6096: SSD_list:2100[#I6:120] = #M42040000:188
 33F4:57EA 37F5:17DA  6104: SSD_list:2100[#I7:129] = #M42180000:189
 33F4:57F2 37F5:17E2  6112: SSD_list:2100[#I8:133] = #M422C0000:191
 33F4:57FA 37F5:17EA  6120: SSD_list:2100[#I9:140] = #M42400000:193
 33F4:5802 37F5:17F2  6128: SSD_list:2100[#I10:18] = #M00000000:164
 33F4:580A 37F5:17FA  6136: SSD_list:2100[#I11:27] = #M00000000:164
 33F4:5812 37F5:1802  6144: SSD_list:2100[#I12:30] = #M00000000:164
 33F4:581A 37F5:180A  6152: SSD_list:2100[#I13:34] = #M00000000:164
 33F4:5822 37F5:1812  6160: SSD_list:2100[#I14:38] = #M00000000:164
 33F4:582A 37F5:181A  6168: SSD_list:2100[#I15:41] = #M00000000:164
 33F4:5832 37F5:1822  6176: SSD_list:2100[#I16:44] = #M00000000:164
 33F4:583A 37F5:182A  6184: SSD_list:2100[#I17:47] = #M00000000:164
 33F4:5842 37F5:1832  6192: SSD_list:2100[#I18:49] = #M00000000:164
 33F4:584A 37F5:183A  6200: SSD_list:2100[#I19:52] = #M00000000:164
 33F4:5852 37F5:1842  6208: #L0:145 = state@1:2117 == run_mg_sess@1:1975
 33F4:5860 37F5:1850  6222: IFnot (#L0:145) GOTO .+768 (goto 6990)
 33F4:5868 37F5:1858  6230: TaskStim:2262 = #I1:17
 33F4:5872 37F5:1862  6240: Go_weight:1201 = F= Go_weight:1201
 33F4:587C 37F5:186C  6250: Stop_weight:2171 = F= Stop_weight:2171
 33F4:5886 37F5:1876  6260: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:5890 37F5:1880  6270: Min_SOA:1381 = #I600:122
 33F4:589A 37F5:188A  6280: Max_SOA:1359 = #I1400:40
 33F4:58A4 37F5:1894  6290: Expo_Jitter_SOA:1028 = #I0:16
 33F4:58AE 37F5:189E  6300: Exp_juice:1021 = #I1:17
 33F4:58B8 37F5:18A8  6310: Trial_length:2295 = #I5000:114
 33F4:58C2 37F5:18B2  6320: Cancl_time:815 = #I1200:32
 33F4:58CC 37F5:18BC  6330: Min_Holdtime:1373 = #I500:113
 33F4:58D6 37F5:18C6  6340: Max_Holdtime:1338 = #I500:113
 33F4:58E0 37F5:18D0  6350: Max_saccade_time:1352 = #I350:83
 33F4:58EA 37F5:18DA  6360: Base_Reward_time:774 = #I30:75
 33F4:58F4 37F5:18E4  6370: Base_Punish_time:773 = #I5000:114
 33F4:58FE 37F5:18EE  6380: N_targ_pos:1407 = #I8:133
 33F4:5908 37F5:18F8  6390: Stop_sig_color:2153[r_@1:1855] = #I63:126
 33F4:5910 37F5:1900  6398: Stop_sig_color:2153[g_@1:1179] = #I0:16
 33F4:5918 37F5:1908  6406: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:5920 37F5:1910  6414: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:5928 37F5:1918  6422: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:5930 37F5:1920  6430: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:5938 37F5:1928  6438: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:5940 37F5:1930  6446: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:5948 37F5:1938  6454: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:5950 37F5:1940  6462: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:5958 37F5:1948  6470: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:5960 37F5:1950  6478: Angle_list:743[#I0:16] = #M42B40000:200
 33F4:5968 37F5:1958  6486: Angle_list:743[#I1:17] = #M42340000:192
 33F4:5970 37F5:1960  6494: Angle_list:743[#I2:53] = #M00000000:164
 33F4:5978 37F5:1968  6502: Angle_list:743[#I3:74] = #M439D8000:213
 33F4:5980 37F5:1970  6510: Angle_list:743[#I4:87] = #M43870000:211
 33F4:5988 37F5:1978  6518: Angle_list:743[#I5:111] = #M43610000:208
 33F4:5990 37F5:1980  6526: Angle_list:743[#I6:120] = #M43340000:205
 33F4:5998 37F5:1988  6534: Angle_list:743[#I7:129] = #M43070000:203
 33F4:59A0 37F5:1990  6542: Stop_sig_color:2153[r_@1:1855] = #I63:126
 33F4:59A8 37F5:1998  6550: Stop_sig_color:2153[g_@1:1179] = #I0:16
 33F4:59B0 37F5:19A0  6558: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:59B8 37F5:19A8  6566: Ignore_sig_color:1248[r_@1:1855] = #I0:16
 33F4:59C0 37F5:19B0  6574: Ignore_sig_color:1248[g_@1:1179] = #I36:84
 33F4:59C8 37F5:19B8  6582: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:59D0 37F5:19C0  6590: Color_list:850[#I0:16,r_@1:1855] = #I35:82
 33F4:59DA 37F5:19CA  6600: Color_list:850[#I0:16,g_@1:1179] = #I33:80
 33F4:59E4 37F5:19D4  6610: Color_list:850[#I0:16,b_@1:771] = #I27:69
 33F4:59EE 37F5:19DE  6620: Color_list:850[#I1:17,r_@1:1855] = #I35:82
 33F4:59F8 37F5:19E8  6630: Color_list:850[#I1:17,g_@1:1179] = #I33:80
 33F4:5A02 37F5:19F2  6640: Color_list:850[#I1:17,b_@1:771] = #I27:69
 33F4:5A0C 37F5:19FC  6650: Color_list:850[#I2:53,r_@1:1855] = #I35:82
 33F4:5A16 37F5:1A06  6660: Color_list:850[#I2:53,g_@1:1179] = #I33:80
 33F4:5A20 37F5:1A10  6670: Color_list:850[#I2:53,b_@1:771] = #I27:69
 33F4:5A2A 37F5:1A1A  6680: Color_list:850[#I3:74,r_@1:1855] = #I35:82
 33F4:5A34 37F5:1A24  6690: Color_list:850[#I3:74,g_@1:1179] = #I33:80
 33F4:5A3E 37F5:1A2E  6700: Color_list:850[#I3:74,b_@1:771] = #I27:69
 33F4:5A48 37F5:1A38  6710: Color_list:850[#I4:87,r_@1:1855] = #I35:82
 33F4:5A52 37F5:1A42  6720: Color_list:850[#I4:87,g_@1:1179] = #I33:80
 33F4:5A5C 37F5:1A4C  6730: Color_list:850[#I4:87,b_@1:771] = #I27:69
 33F4:5A66 37F5:1A56  6740: Color_list:850[#I5:111,r_@1:1855] = #I35:82
 33F4:5A70 37F5:1A60  6750: Color_list:850[#I5:111,g_@1:1179] = #I33:80
 33F4:5A7A 37F5:1A6A  6760: Color_list:850[#I5:111,b_@1:771] = #I27:69
 33F4:5A84 37F5:1A74  6770: Color_list:850[#I6:120,r_@1:1855] = #I35:82
 33F4:5A8E 37F5:1A7E  6780: Color_list:850[#I6:120,g_@1:1179] = #I33:80
 33F4:5A98 37F5:1A88  6790: Color_list:850[#I6:120,b_@1:771] = #I27:69
 33F4:5AA2 37F5:1A92  6800: Color_list:850[#I7:129,r_@1:1855] = #I35:82
 33F4:5AAC 37F5:1A9C  6810: Color_list:850[#I7:129,g_@1:1179] = #I33:80
 33F4:5AB6 37F5:1AA6  6820: Color_list:850[#I7:129,b_@1:771] = #I27:69
 33F4:5AC0 37F5:1AB0  6830: SOA_list:2090[#I0:16] = #M43960000:212
 33F4:5AC8 37F5:1AB8  6838: SOA_list:2090[#I1:17] = #M43E10000:219
 33F4:5AD0 37F5:1AC0  6846: SOA_list:2090[#I2:53] = #M44160000:223
 33F4:5AD8 37F5:1AC8  6854: SOA_list:2090[#I3:74] = #M443B8000:224
 33F4:5AE0 37F5:1AD0  6862: SOA_list:2090[#I4:87] = #M44610000:225
 33F4:5AE8 37F5:1AD8  6870: SOA_list:2090[#I5:111] = #M44834000:227
 33F4:5AF0 37F5:1AE0  6878: SOA_list:2090[#I6:120] = #M44960000:229
 33F4:5AF8 37F5:1AE8  6886: SOA_list:2090[#I7:129] = #M44A8C000:231
 33F4:5B00 37F5:1AF0  6894: SOA_list:2090[#I8:133] = #M00000000:164
 33F4:5B08 37F5:1AF8  6902: SOA_list:2090[#I9:140] = #M00000000:164
 33F4:5B10 37F5:1B00  6910: SOA_list:2090[#I10:18] = #M00000000:164
 33F4:5B18 37F5:1B08  6918: SOA_list:2090[#I11:27] = #M00000000:164
 33F4:5B20 37F5:1B10  6926: SOA_list:2090[#I12:30] = #M00000000:164
 33F4:5B28 37F5:1B18  6934: SOA_list:2090[#I13:34] = #M00000000:164
 33F4:5B30 37F5:1B20  6942: SOA_list:2090[#I14:38] = #M00000000:164
 33F4:5B38 37F5:1B28  6950: SOA_list:2090[#I15:41] = #M00000000:164
 33F4:5B40 37F5:1B30  6958: SOA_list:2090[#I16:44] = #M00000000:164
 33F4:5B48 37F5:1B38  6966: SOA_list:2090[#I17:47] = #M00000000:164
 33F4:5B50 37F5:1B40  6974: SOA_list:2090[#I18:49] = #M00000000:164
 33F4:5B58 37F5:1B48  6982: SOA_list:2090[#I19:52] = #M00000000:164
 33F4:5B60 37F5:1B50  6990: #L0:145 = state@1:2117 == run_search_sess@1:1983
 33F4:5B6E 37F5:1B5E  7004: IFnot (#L0:145) GOTO .+592 (goto 7596)
 33F4:5B76 37F5:1B66  7012: Trls_per_block:2323 = #I100:19
 33F4:5B80 37F5:1B70  7022: Base_Punish_time:773 = #I2000:56
 33F4:5B8A 37F5:1B7A  7032: Catch_Rew:823 = #I1:17
 33F4:5B94 37F5:1B84  7042: ProbCue:1633 = #I0:16
 33F4:5B9E 37F5:1B8E  7052: ProbSide:1634 = #I1:17
 33F4:5BA8 37F5:1B98  7062: VarEcc:2356 = #I0:16
 33F4:5BB2 37F5:1BA2  7072: LatStruct:1313 = #I1:17
 33F4:5BBC 37F5:1BAC  7082: Npulse:1457 = #I600:122
 33F4:5BC6 37F5:1BB6  7092: PulseGap:1635 = #I1000:20
 33F4:5BD0 37F5:1BC0  7102: StimInterval:2150 = #I60000:124
 33F4:5BDA 37F5:1BCA  7112: StimCond:2146 = #I0:16
 33F4:5BE4 37F5:1BD4  7122: ArrStruct:759 = #I1:17
 33F4:5BEE 37F5:1BDE  7132: TargTrainSet:2261 = #I1:17
 33F4:5BF8 37F5:1BE8  7142: DistOrt:989 = #I2:53
 33F4:5C02 37F5:1BF2  7152: TargOrt:2258 = #I2:53
 33F4:5C0C 37F5:1BFC  7162: SearchEcc:2031 = #I8:133
 33F4:5C16 37F5:1C06  7172: SingMode:2077 = #I0:16
 33F4:5C20 37F5:1C10  7182: SingCol:2074 = #I2:53
 33F4:5C2A 37F5:1C1A  7192: PercSingTrl:1609 = #I50:112
 33F4:5C34 37F5:1C24  7202: soa_mode:2091 = #I0:16
 33F4:5C3E 37F5:1C2E  7212: FixJitter:1162 = #I0:16
 33F4:5C48 37F5:1C38  7222: catch_hold_time:822 = F= catch_hold_time:822
 33F4:5C52 37F5:1C42  7232: Perc_catch:1608 = F= Perc_catch:1608
 33F4:5C5C 37F5:1C4C  7242: TargetType:2255 = #I2:53
 33F4:5C66 37F5:1C56  7252: PlacPres:1621 = #I1:17
 33F4:5C70 37F5:1C60  7262: SetSize:2053 = #I8:133
 33F4:5C7A 37F5:1C6A  7272: SearchType:2033 = #I2:53
 33F4:5C84 37F5:1C74  7282: TargOrt1:2259 = #I2:53
 33F4:5C8E 37F5:1C7E  7292: TargOrt2:2260 = #I2:53
 33F4:5C98 37F5:1C88  7302: max_plactime:1345 = F= max_plactime:1345
 33F4:5CA2 37F5:1C92  7312: min_plactime:1379 = F= min_plactime:1379
 33F4:5CAC 37F5:1C9C  7322: Targ_hold_time:2197 = #I200:55
 33F4:5CB6 37F5:1CA6  7332: Max_sacc_duration:1346 = #I50:112
 33F4:5CC0 37F5:1CB0  7342: Min_saccade_time:1380 = #I70:130
 33F4:5CCA 37F5:1CBA  7352: Max_saccade_time:1352 = #I300:76
 33F4:5CD4 37F5:1CC4  7362: Min_Holdtime:1373 = #I300:76
 33F4:5CDE 37F5:1CCE  7372: Max_Holdtime:1338 = #I800:135
 33F4:5CE8 37F5:1CD8  7382: Go_weight:1201 = F= Go_weight:1201
 33F4:5CF2 37F5:1CE2  7392: Stop_weight:2171 = F= Stop_weight:2171
 33F4:5CFC 37F5:1CEC  7402: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:5D06 37F5:1CF6  7412: NonSingleton_color:1455[r_@1:1855] = #I35:82
 33F4:5D0E 37F5:1CFE  7420: NonSingleton_color:1455[g_@1:1179] = #I33:80
 33F4:5D16 37F5:1D06  7428: NonSingleton_color:1455[b_@1:771] = #I27:69
 33F4:5D1E 37F5:1D0E  7436: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:5D26 37F5:1D16  7444: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:5D2E 37F5:1D1E  7452: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:5D36 37F5:1D26  7460: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:5D3E 37F5:1D2E  7468: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:5D46 37F5:1D36  7476: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:5D4E 37F5:1D3E  7484: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:5D56 37F5:1D46  7492: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:5D5E 37F5:1D4E  7500: Size_list:2081[#I8:133] = #M3FC00000:169
 33F4:5D66 37F5:1D56  7508: Size_list:2081[#I9:140] = #M3FC00000:169
 33F4:5D6E 37F5:1D5E  7516: Size_list:2081[#I10:18] = #M3FC00000:169
 33F4:5D76 37F5:1D66  7524: Size_list:2081[#I11:27] = #M3FC00000:169
 33F4:5D7E 37F5:1D6E  7532: Angle_list:743[#I0:16] = #M42B40000:200
 33F4:5D86 37F5:1D76  7540: Angle_list:743[#I1:17] = #M42340000:192
 33F4:5D8E 37F5:1D7E  7548: Angle_list:743[#I2:53] = #M00000000:164
 33F4:5D96 37F5:1D86  7556: Angle_list:743[#I3:74] = #M439D8000:213
 33F4:5D9E 37F5:1D8E  7564: Angle_list:743[#I4:87] = #M43870000:211
 33F4:5DA6 37F5:1D96  7572: Angle_list:743[#I5:111] = #M43610000:208
 33F4:5DAE 37F5:1D9E  7580: Angle_list:743[#I6:120] = #M43340000:205
 33F4:5DB6 37F5:1DA6  7588: Angle_list:743[#I7:129] = #M43070000:203
 33F4:5DBE 37F5:1DAE  7596: SOA_list:2090[#I0:16] = #M43960000:212
 33F4:5DC6 37F5:1DB6  7604: SOA_list:2090[#I1:17] = #M43E10000:219
 33F4:5DCE 37F5:1DBE  7612: SOA_list:2090[#I2:53] = #M44160000:223
 33F4:5DD6 37F5:1DC6  7620: SOA_list:2090[#I3:74] = #M443B8000:224
 33F4:5DDE 37F5:1DCE  7628: #L0:145 = state@1:2117 == run_fix_sess@1:1954
 33F4:5DEC 37F5:1DDC  7642: IFnot (#L0:145) GOTO .+554 (goto 8196)
 33F4:5DF4 37F5:1DE4  7650: N_targ_pos:1407 = #I9:140
 33F4:5DFE 37F5:1DEE  7660: Color_list:850[#I0:16,r_@1:1855] = #I35:82
 33F4:5E08 37F5:1DF8  7670: Color_list:850[#I0:16,g_@1:1179] = #I33:80
 33F4:5E12 37F5:1E02  7680: Color_list:850[#I0:16,b_@1:771] = #I27:69
 33F4:5E1C 37F5:1E0C  7690: Color_list:850[#I1:17,r_@1:1855] = #I35:82
 33F4:5E26 37F5:1E16  7700: Color_list:850[#I1:17,g_@1:1179] = #I33:80
 33F4:5E30 37F5:1E20  7710: Color_list:850[#I1:17,b_@1:771] = #I27:69
 33F4:5E3A 37F5:1E2A  7720: Color_list:850[#I2:53,r_@1:1855] = #I35:82
 33F4:5E44 37F5:1E34  7730: Color_list:850[#I2:53,g_@1:1179] = #I33:80
 33F4:5E4E 37F5:1E3E  7740: Color_list:850[#I2:53,b_@1:771] = #I27:69
 33F4:5E58 37F5:1E48  7750: Color_list:850[#I3:74,r_@1:1855] = #I35:82
 33F4:5E62 37F5:1E52  7760: Color_list:850[#I3:74,g_@1:1179] = #I33:80
 33F4:5E6C 37F5:1E5C  7770: Color_list:850[#I3:74,b_@1:771] = #I27:69
 33F4:5E76 37F5:1E66  7780: Color_list:850[#I4:87,r_@1:1855] = #I35:82
 33F4:5E80 37F5:1E70  7790: Color_list:850[#I4:87,g_@1:1179] = #I33:80
 33F4:5E8A 37F5:1E7A  7800: Color_list:850[#I4:87,b_@1:771] = #I27:69
 33F4:5E94 37F5:1E84  7810: Color_list:850[#I5:111,r_@1:1855] = #I35:82
 33F4:5E9E 37F5:1E8E  7820: Color_list:850[#I5:111,g_@1:1179] = #I33:80
 33F4:5EA8 37F5:1E98  7830: Color_list:850[#I5:111,b_@1:771] = #I27:69
 33F4:5EB2 37F5:1EA2  7840: Color_list:850[#I6:120,r_@1:1855] = #I35:82
 33F4:5EBC 37F5:1EAC  7850: Color_list:850[#I6:120,g_@1:1179] = #I33:80
 33F4:5EC6 37F5:1EB6  7860: Color_list:850[#I6:120,b_@1:771] = #I27:69
 33F4:5ED0 37F5:1EC0  7870: Color_list:850[#I7:129,r_@1:1855] = #I35:82
 33F4:5EDA 37F5:1ECA  7880: Color_list:850[#I7:129,g_@1:1179] = #I33:80
 33F4:5EE4 37F5:1ED4  7890: Color_list:850[#I7:129,b_@1:771] = #I27:69
 33F4:5EEE 37F5:1EDE  7900: Color_list:850[#I8:133,r_@1:1855] = #I35:82
 33F4:5EF8 37F5:1EE8  7910: Color_list:850[#I8:133,g_@1:1179] = #I33:80
 33F4:5F02 37F5:1EF2  7920: Color_list:850[#I8:133,b_@1:771] = #I27:69
 33F4:5F0C 37F5:1EFC  7930: Size_list:2081[#I0:16] = #M3F000000:166
 33F4:5F14 37F5:1F04  7938: Size_list:2081[#I1:17] = #M3F000000:166
 33F4:5F1C 37F5:1F0C  7946: Size_list:2081[#I2:53] = #M3F000000:166
 33F4:5F24 37F5:1F14  7954: Size_list:2081[#I3:74] = #M3F000000:166
 33F4:5F2C 37F5:1F1C  7962: Size_list:2081[#I4:87] = #M3F000000:166
 33F4:5F34 37F5:1F24  7970: Size_list:2081[#I5:111] = #M3F000000:166
 33F4:5F3C 37F5:1F2C  7978: Size_list:2081[#I6:120] = #M3F000000:166
 33F4:5F44 37F5:1F34  7986: Size_list:2081[#I7:129] = #M3F000000:166
 33F4:5F4C 37F5:1F3C  7994: Size_list:2081[#I8:133] = #M3F000000:166
 33F4:5F54 37F5:1F44  8002: Angle_list:743[#I0:16] = #M00000000:164
 33F4:5F5C 37F5:1F4C  8010: Angle_list:743[#I1:17] = #M42B40000:200
 33F4:5F64 37F5:1F54  8018: Angle_list:743[#I2:53] = #MC2B40000:238
 33F4:5F6C 37F5:1F5C  8026: Angle_list:743[#I3:74] = #M43340000:205
 33F4:5F74 37F5:1F64  8034: Angle_list:743[#I4:87] = #M00000000:164
 33F4:5F7C 37F5:1F6C  8042: Angle_list:743[#I5:111] = #M43070000:203
 33F4:5F84 37F5:1F74  8050: Angle_list:743[#I6:120] = #M42340000:192
 33F4:5F8C 37F5:1F7C  8058: Angle_list:743[#I7:129] = #MC3070000:239
 33F4:5F94 37F5:1F84  8066: Angle_list:743[#I8:133] = #MC2340000:237
 33F4:5F9C 37F5:1F8C  8074: Eccentricity_list:1012[#I0:16] = #M00000000:164
 33F4:5FA4 37F5:1F94  8082: Eccentricity_list:1012[#I1:17] = #M41300000:179
 33F4:5FAC 37F5:1F9C  8090: Eccentricity_list:1012[#I2:53] = #M41300000:179
 33F4:5FB4 37F5:1FA4  8098: Eccentricity_list:1012[#I3:74] = #M41300000:179
 33F4:5FBC 37F5:1FAC  8106: Eccentricity_list:1012[#I4:87] = #M41300000:179
 33F4:5FC4 37F5:1FB4  8114: Eccentricity_list:1012[#I5:111] = #M4179999A:183
 33F4:5FCC 37F5:1FBC  8122: Eccentricity_list:1012[#I6:120] = #M4179999A:183
 33F4:5FD4 37F5:1FC4  8130: Eccentricity_list:1012[#I7:129] = #M4179999A:183
 33F4:5FDC 37F5:1FCC  8138: Eccentricity_list:1012[#I8:133] = #M4179999A:183
 33F4:5FE4 37F5:1FD4  8146: Fix_win_size:1092 = F= Fix_win_size:1092
 33F4:5FEE 37F5:1FDE  8156: Targ_win_size:2221 = F= Targ_win_size:2221
 33F4:5FF8 37F5:1FE8  8166: Allowed_fix_time:727 = #I1200:32
 33F4:6002 37F5:1FF2  8176: Max_saccade_time:1352 = #I800:135
 33F4:600C 37F5:1FFC  8186: Targ_hold_time:2197 = #I600:122
 33F4:6016 37F5:2006  8196: #L0:145 = state@1:2117 == run_delayed_sess@1:1947
 33F4:6024 37F5:2014  8210: IFnot (#L0:145) GOTO .+428 (goto 8638)
 33F4:602C 37F5:201C  8218: Go_weight:1201 = F= Go_weight:1201
 33F4:6036 37F5:2026  8228: Stop_weight:2171 = F= Stop_weight:2171
 33F4:6040 37F5:2030  8238: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:604A 37F5:203A  8248: Min_Holdtime:1373 = #I500:113
 33F4:6054 37F5:2044  8258: Max_Holdtime:1338 = #I1000:20
 33F4:605E 37F5:204E  8268: Min_SOA:1381 = #I200:55
 33F4:6068 37F5:2058  8278: Max_SOA:1359 = #I200:55
 33F4:6072 37F5:2062  8288: Reward_Offset:1932 = #I0:16
 33F4:607C 37F5:206C  8298: Exp_juice:1021 = #I0:16
 33F4:6086 37F5:2076  8308: N_targ_pos:1407 = #I4:87
 33F4:6090 37F5:2080  8318: Angle_list:743[#I0:16] = #M42B40000:200
 33F4:6098 37F5:2088  8326: Angle_list:743[#I1:17] = #M42340000:192
 33F4:60A0 37F5:2090  8334: Angle_list:743[#I2:53] = #M00000000:164
 33F4:60A8 37F5:2098  8342: Angle_list:743[#I3:74] = #M439D8000:213
 33F4:60B0 37F5:20A0  8350: Angle_list:743[#I4:87] = #M43870000:211
 33F4:60B8 37F5:20A8  8358: Angle_list:743[#I5:111] = #M43610000:208
 33F4:60C0 37F5:20B0  8366: Angle_list:743[#I6:120] = #M43340000:205
 33F4:60C8 37F5:20B8  8374: Angle_list:743[#I7:129] = #M43070000:203
 33F4:60D0 37F5:20C0  8382: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:60D8 37F5:20C8  8390: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:60E0 37F5:20D0  8398: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:60E8 37F5:20D8  8406: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:60F0 37F5:20E0  8414: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:60F8 37F5:20E8  8422: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:6100 37F5:20F0  8430: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:6108 37F5:20F8  8438: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:6110 37F5:2100  8446: Size_list:2081[#I8:133] = #M3FC00000:169
 33F4:6118 37F5:2108  8454: Size_list:2081[#I9:140] = #M3FC00000:169
 33F4:6120 37F5:2110  8462: Size_list:2081[#I10:18] = #M3FC00000:169
 33F4:6128 37F5:2118  8470: Size_list:2081[#I11:27] = #M3FC00000:169
 33F4:6130 37F5:2120  8478: SOA_list:2090[#I0:16] = #M43480000:206
 33F4:6138 37F5:2128  8486: SOA_list:2090[#I1:17] = #M43480000:206
 33F4:6140 37F5:2130  8494: SOA_list:2090[#I2:53] = #M43960000:212
 33F4:6148 37F5:2138  8502: SOA_list:2090[#I3:74] = #M43960000:212
 33F4:6150 37F5:2140  8510: SOA_list:2090[#I4:87] = #M43C80000:216
 33F4:6158 37F5:2148  8518: SOA_list:2090[#I5:111] = #M44898000:228
 33F4:6160 37F5:2150  8526: SOA_list:2090[#I6:120] = #M44960000:229
 33F4:6168 37F5:2158  8534: SOA_list:2090[#I7:129] = #M44A28000:230
 33F4:6170 37F5:2160  8542: SOA_list:2090[#I8:133] = #M00000000:164
 33F4:6178 37F5:2168  8550: SOA_list:2090[#I9:140] = #M00000000:164
 33F4:6180 37F5:2170  8558: SOA_list:2090[#I10:18] = #M00000000:164
 33F4:6188 37F5:2178  8566: SOA_list:2090[#I11:27] = #M00000000:164
 33F4:6190 37F5:2180  8574: SOA_list:2090[#I12:30] = #M00000000:164
 33F4:6198 37F5:2188  8582: SOA_list:2090[#I13:34] = #M00000000:164
 33F4:61A0 37F5:2190  8590: SOA_list:2090[#I14:38] = #M00000000:164
 33F4:61A8 37F5:2198  8598: SOA_list:2090[#I15:41] = #M00000000:164
 33F4:61B0 37F5:21A0  8606: SOA_list:2090[#I16:44] = #M00000000:164
 33F4:61B8 37F5:21A8  8614: SOA_list:2090[#I17:47] = #M00000000:164
 33F4:61C0 37F5:21B0  8622: SOA_list:2090[#I18:49] = #M00000000:164
 33F4:61C8 37F5:21B8  8630: SOA_list:2090[#I19:52] = #M00000000:164
 33F4:61D0 37F5:21C0  8638: #L0:145 = state@1:2117 == run_flash_sess@1:1958
 33F4:61DE 37F5:21CE  8652: IFnot (#L0:145) GOTO .+58 (goto 8710)
 33F4:61E6 37F5:21D6  8660: Success_Tone_medR:2191 = #I1600:45
 33F4:61F0 37F5:21E0  8670: Base_Reward_time:774 = #I10:18
 33F4:61FA 37F5:21EA  8680: Fix_win_size:1092 = F= Fix_win_size:1092
 33F4:6204 37F5:21F4  8690: IFI:1247 = F= IFI:1247
 33F4:620E 37F5:21FE  8700: flashTime:1175 = F= flashTime:1175
 33F4:6218 37F5:2208  8710: #L0:145 = monkey@1:1388 == gauss@1:1181
 33F4:6226 37F5:2216  8724: IFnot (#L0:145) GOTO .+3824 (goto 12548)
 33F4:622E 37F5:221E  8732: #L1:146 = room@1:1938 == #I28:72
 33F4:623C 37F5:222C  8746: IFnot (#L1:146) GOTO .+32 (goto 8778)
 33F4:6244 37F5:2234  8754: Subj_dist:2177 = F= Subj_dist:2177
 33F4:624E 37F5:223E  8764: TrainingStill:2293 = #I0:16
 33F4:6258 37F5:2248  8774: GOTO .+36 (goto 8810)
 33F4:625C 37F5:224C  8778: #L0:145 = room@1:1938 == #I29:73
 33F4:626A 37F5:225A  8792: IFnot (#L0:145) GOTO .+18 (goto 8810)
 33F4:6272 37F5:2262  8800: Subj_dist:2177 = F= Subj_dist:2177
 33F4:627C 37F5:226C  8810: Set_Tones:2046 = #I1:17
 33F4:6286 37F5:2276  8820: Fix_win_size:1092 = F= Fix_win_size:1092
 33F4:6290 37F5:2280  8830: Targ_win_size:2221 = F= Targ_win_size:2221
 33F4:629A 37F5:228A  8840: Allowed_fix_time:727 = #I1000:20
 33F4:62A4 37F5:2294  8850: Max_saccade_time:1352 = #I350:83
 33F4:62AE 37F5:229E  8860: Base_Reward_time:774 = #I30:75
 33F4:62B8 37F5:22A8  8870: Base_Punish_time:773 = #I5000:114
 33F4:62C2 37F5:22B2  8880: #L0:145 = state@1:2117 == run_cmd_sess@1:1940
 33F4:62D0 37F5:22C0  8894: IFnot (#L0:145) GOTO .+394 (goto 9288)
 33F4:62D8 37F5:22C8  8902: Trls_per_block:2323 = #I10000:21
 33F4:62E2 37F5:22D2  8912: DR1_flag:992 = #I0:16
 33F4:62EC 37F5:22DC  8922: Go_weight:1201 = F= Go_weight:1201
 33F4:62F6 37F5:22E6  8932: Stop_weight:2171 = F= Stop_weight:2171
 33F4:6300 37F5:22F0  8942: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:630A 37F5:22FA  8952: Stop_sig_color:2153[r_@1:1855] = #I0:16
 33F4:6312 37F5:2302  8960: Stop_sig_color:2153[g_@1:1179] = #I36:84
 33F4:631A 37F5:230A  8968: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:6322 37F5:2312  8976: Ignore_sig_color:1248[r_@1:1855] = #I63:126
 33F4:632A 37F5:231A  8984: Ignore_sig_color:1248[g_@1:1179] = #I0:16
 33F4:6332 37F5:2322  8992: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:633A 37F5:232A  9000: SSD_list:2100[#I0:16] = #M40400000:172
 33F4:6342 37F5:2332  9008: SSD_list:2100[#I1:17] = #M41500000:181
 33F4:634A 37F5:233A  9016: SSD_list:2100[#I2:53] = #M41B80000:185
 33F4:6352 37F5:2342  9024: SSD_list:2100[#I3:74] = #M42040000:188
 33F4:635A 37F5:234A  9032: SSD_list:2100[#I4:87] = #M422C0000:191
 33F4:6362 37F5:2352  9040: SSD_list:2100[#I5:111] = #M42540000:195
 33F4:636A 37F5:235A  9048: SSD_list:2100[#I6:120] = #M427C0000:197
 33F4:6372 37F5:2362  9056: SSD_list:2100[#I7:129] = #M00000000:164
 33F4:637A 37F5:236A  9064: SSD_list:2100[#I8:133] = #M00000000:164
 33F4:6382 37F5:2372  9072: SSD_list:2100[#I9:140] = #M00000000:164
 33F4:638A 37F5:237A  9080: SSD_list:2100[#I10:18] = #M00000000:164
 33F4:6392 37F5:2382  9088: SSD_list:2100[#I11:27] = #M00000000:164
 33F4:639A 37F5:238A  9096: SSD_list:2100[#I12:30] = #M00000000:164
 33F4:63A2 37F5:2392  9104: SSD_list:2100[#I13:34] = #M00000000:164
 33F4:63AA 37F5:239A  9112: SSD_list:2100[#I14:38] = #M00000000:164
 33F4:63B2 37F5:23A2  9120: SSD_list:2100[#I15:41] = #M00000000:164
 33F4:63BA 37F5:23AA  9128: SSD_list:2100[#I16:44] = #M00000000:164
 33F4:63C2 37F5:23B2  9136: SSD_list:2100[#I17:47] = #M00000000:164
 33F4:63CA 37F5:23BA  9144: SSD_list:2100[#I18:49] = #M00000000:164
 33F4:63D2 37F5:23C2  9152: SSD_list:2100[#I19:52] = #M00000000:164
 33F4:63DA 37F5:23CA  9160: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:63E2 37F5:23D2  9168: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:63EA 37F5:23DA  9176: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:63F2 37F5:23E2  9184: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:63FA 37F5:23EA  9192: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:6402 37F5:23F2  9200: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:640A 37F5:23FA  9208: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:6412 37F5:2402  9216: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:641A 37F5:240A  9224: Angle_list:743[#I0:16] = #M00000000:164
 33F4:6422 37F5:2412  9232: Angle_list:743[#I1:17] = #M42340000:192
 33F4:642A 37F5:241A  9240: Angle_list:743[#I2:53] = #M42B40000:200
 33F4:6432 37F5:2422  9248: Angle_list:743[#I3:74] = #M43070000:203
 33F4:643A 37F5:242A  9256: Angle_list:743[#I4:87] = #M43340000:205
 33F4:6442 37F5:2432  9264: Angle_list:743[#I5:111] = #MC3070000:239
 33F4:644A 37F5:243A  9272: Angle_list:743[#I6:120] = #MC2B40000:238
 33F4:6452 37F5:2442  9280: Angle_list:743[#I7:129] = #MC2340000:237
 33F4:645A 37F5:244A  9288: #L0:145 = state@1:2117 == run_gonogo_sess@1:1961
 33F4:6468 37F5:2458  9302: IFnot (#L0:145) GOTO .+668 (goto 9970)
 33F4:6470 37F5:2460  9310: Go_weight:1201 = F= Go_weight:1201
 33F4:647A 37F5:246A  9320: Stop_weight:2171 = F= Stop_weight:2171
 33F4:6484 37F5:2474  9330: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:648E 37F5:247E  9340: Min_SOA:1381 = #I0:16
 33F4:6498 37F5:2488  9350: Max_SOA:1359 = #I1000:20
 33F4:64A2 37F5:2492  9360: Expo_Jitter_SOA:1028 = #I0:16
 33F4:64AC 37F5:249C  9370: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:64B4 37F5:24A4  9378: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:64BC 37F5:24AC  9386: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:64C4 37F5:24B4  9394: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:64CC 37F5:24BC  9402: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:64D4 37F5:24C4  9410: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:64DC 37F5:24CC  9418: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:64E4 37F5:24D4  9426: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:64EC 37F5:24DC  9434: Angle_list:743[#I0:16] = #M00000000:164
 33F4:64F4 37F5:24E4  9442: Angle_list:743[#I1:17] = #M42340000:192
 33F4:64FC 37F5:24EC  9450: Angle_list:743[#I2:53] = #M43070000:203
 33F4:6504 37F5:24F4  9458: Angle_list:743[#I3:74] = #M43340000:205
 33F4:650C 37F5:24FC  9466: Angle_list:743[#I4:87] = #MC3070000:239
 33F4:6514 37F5:2504  9474: Angle_list:743[#I5:111] = #MC2340000:237
 33F4:651C 37F5:250C  9482: Angle_list:743[#I6:120] = #M00000000:164
 33F4:6524 37F5:2514  9490: Angle_list:743[#I7:129] = #M43340000:205
 33F4:652C 37F5:251C  9498: Stop_sig_color:2153[r_@1:1855] = #I0:16
 33F4:6534 37F5:2524  9506: Stop_sig_color:2153[g_@1:1179] = #I36:84
 33F4:653C 37F5:252C  9514: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:6544 37F5:2534  9522: Ignore_sig_color:1248[r_@1:1855] = #I63:126
 33F4:654C 37F5:253C  9530: Ignore_sig_color:1248[g_@1:1179] = #I0:16
 33F4:6554 37F5:2544  9538: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:655C 37F5:254C  9546: Mask_sig_color:1335[r_@1:1855] = #I0:16
 33F4:6564 37F5:2554  9554: Mask_sig_color:1335[g_@1:1179] = #I0:16
 33F4:656C 37F5:255C  9562: Mask_sig_color:1335[b_@1:771] = #I0:16
 33F4:6574 37F5:2564  9570: Color_list:850[#I0:16,r_@1:1855] = #I35:82
 33F4:657E 37F5:256E  9580: Color_list:850[#I0:16,g_@1:1179] = #I33:80
 33F4:6588 37F5:2578  9590: Color_list:850[#I0:16,b_@1:771] = #I27:69
 33F4:6592 37F5:2582  9600: Color_list:850[#I1:17,r_@1:1855] = #I35:82
 33F4:659C 37F5:258C  9610: Color_list:850[#I1:17,g_@1:1179] = #I33:80
 33F4:65A6 37F5:2596  9620: Color_list:850[#I1:17,b_@1:771] = #I27:69
 33F4:65B0 37F5:25A0  9630: Color_list:850[#I2:53,r_@1:1855] = #I35:82
 33F4:65BA 37F5:25AA  9640: Color_list:850[#I2:53,g_@1:1179] = #I33:80
 33F4:65C4 37F5:25B4  9650: Color_list:850[#I2:53,b_@1:771] = #I27:69
 33F4:65CE 37F5:25BE  9660: Color_list:850[#I3:74,r_@1:1855] = #I35:82
 33F4:65D8 37F5:25C8  9670: Color_list:850[#I3:74,g_@1:1179] = #I33:80
 33F4:65E2 37F5:25D2  9680: Color_list:850[#I3:74,b_@1:771] = #I27:69
 33F4:65EC 37F5:25DC  9690: Color_list:850[#I4:87,r_@1:1855] = #I35:82
 33F4:65F6 37F5:25E6  9700: Color_list:850[#I4:87,g_@1:1179] = #I33:80
 33F4:6600 37F5:25F0  9710: Color_list:850[#I4:87,b_@1:771] = #I27:69
 33F4:660A 37F5:25FA  9720: Color_list:850[#I5:111,r_@1:1855] = #I35:82
 33F4:6614 37F5:2604  9730: Color_list:850[#I5:111,g_@1:1179] = #I33:80
 33F4:661E 37F5:260E  9740: Color_list:850[#I5:111,b_@1:771] = #I27:69
 33F4:6628 37F5:2618  9750: Color_list:850[#I6:120,r_@1:1855] = #I35:82
 33F4:6632 37F5:2622  9760: Color_list:850[#I6:120,g_@1:1179] = #I33:80
 33F4:663C 37F5:262C  9770: Color_list:850[#I6:120,b_@1:771] = #I27:69
 33F4:6646 37F5:2636  9780: Color_list:850[#I7:129,r_@1:1855] = #I35:82
 33F4:6650 37F5:2640  9790: Color_list:850[#I7:129,g_@1:1179] = #I33:80
 33F4:665A 37F5:264A  9800: Color_list:850[#I7:129,b_@1:771] = #I27:69
 33F4:6664 37F5:2654  9810: SSD_list:2100[#I0:16] = #M40400000:172
 33F4:666C 37F5:265C  9818: SSD_list:2100[#I1:17] = #M41000000:177
 33F4:6674 37F5:2664  9826: SSD_list:2100[#I2:53] = #M41500000:181
 33F4:667C 37F5:266C  9834: SSD_list:2100[#I3:74] = #M41900000:184
 33F4:6684 37F5:2674  9842: SSD_list:2100[#I4:87] = #M41B80000:185
 33F4:668C 37F5:267C  9850: SSD_list:2100[#I5:111] = #M41E00000:186
 33F4:6694 37F5:2684  9858: SSD_list:2100[#I6:120] = #M42040000:188
 33F4:669C 37F5:268C  9866: SSD_list:2100[#I7:129] = #M42180000:189
 33F4:66A4 37F5:2694  9874: SSD_list:2100[#I8:133] = #M422C0000:191
 33F4:66AC 37F5:269C  9882: SSD_list:2100[#I9:140] = #M42400000:193
 33F4:66B4 37F5:26A4  9890: SSD_list:2100[#I10:18] = #M00000000:164
 33F4:66BC 37F5:26AC  9898: SSD_list:2100[#I11:27] = #M00000000:164
 33F4:66C4 37F5:26B4  9906: SSD_list:2100[#I12:30] = #M00000000:164
 33F4:66CC 37F5:26BC  9914: SSD_list:2100[#I13:34] = #M00000000:164
 33F4:66D4 37F5:26C4  9922: SSD_list:2100[#I14:38] = #M00000000:164
 33F4:66DC 37F5:26CC  9930: SSD_list:2100[#I15:41] = #M00000000:164
 33F4:66E4 37F5:26D4  9938: SSD_list:2100[#I16:44] = #M00000000:164
 33F4:66EC 37F5:26DC  9946: SSD_list:2100[#I17:47] = #M00000000:164
 33F4:66F4 37F5:26E4  9954: SSD_list:2100[#I18:49] = #M00000000:164
 33F4:66FC 37F5:26EC  9962: SSD_list:2100[#I19:52] = #M00000000:164
 33F4:6704 37F5:26F4  9970: #L0:145 = state@1:2117 == run_mg_sess@1:1975
 33F4:6712 37F5:2702  9984: IFnot (#L0:145) GOTO .+738 (goto 10722)
 33F4:671A 37F5:270A  9992: TaskStim:2262 = #I1:17
 33F4:6724 37F5:2714 10002: Go_weight:1201 = F= Go_weight:1201
 33F4:672E 37F5:271E 10012: Stop_weight:2171 = F= Stop_weight:2171
 33F4:6738 37F5:2728 10022: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:6742 37F5:2732 10032: Min_SOA:1381 = #I300:76
 33F4:674C 37F5:273C 10042: Max_SOA:1359 = #I1400:40
 33F4:6756 37F5:2746 10052: Expo_Jitter_SOA:1028 = #I0:16
 33F4:6760 37F5:2750 10062: Exp_juice:1021 = #I1:17
 33F4:676A 37F5:275A 10072: Trial_length:2295 = #I5000:114
 33F4:6774 37F5:2764 10082: Cancl_time:815 = #I1200:32
 33F4:677E 37F5:276E 10092: Min_Holdtime:1373 = #I500:113
 33F4:6788 37F5:2778 10102: Max_Holdtime:1338 = #I1000:20
 33F4:6792 37F5:2782 10112: Max_saccade_time:1352 = #I350:83
 33F4:679C 37F5:278C 10122: Base_Reward_time:774 = #I30:75
 33F4:67A6 37F5:2796 10132: Base_Punish_time:773 = #I5000:114
 33F4:67B0 37F5:27A0 10142: N_targ_pos:1407 = #I8:133
 33F4:67BA 37F5:27AA 10152: Stop_sig_color:2153[r_@1:1855] = #I63:126
 33F4:67C2 37F5:27B2 10160: Stop_sig_color:2153[g_@1:1179] = #I0:16
 33F4:67CA 37F5:27BA 10168: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:67D2 37F5:27C2 10176: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:67DA 37F5:27CA 10184: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:67E2 37F5:27D2 10192: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:67EA 37F5:27DA 10200: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:67F2 37F5:27E2 10208: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:67FA 37F5:27EA 10216: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:6802 37F5:27F2 10224: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:680A 37F5:27FA 10232: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:6812 37F5:2802 10240: Angle_list:743[#I0:16] = #M42B40000:200
 33F4:681A 37F5:280A 10248: Angle_list:743[#I1:17] = #M42340000:192
 33F4:6822 37F5:2812 10256: Angle_list:743[#I2:53] = #M00000000:164
 33F4:682A 37F5:281A 10264: Angle_list:743[#I3:74] = #M439D8000:213
 33F4:6832 37F5:2822 10272: Angle_list:743[#I4:87] = #M43870000:211
 33F4:683A 37F5:282A 10280: Angle_list:743[#I5:111] = #M43610000:208
 33F4:6842 37F5:2832 10288: Angle_list:743[#I6:120] = #M43340000:205
 33F4:684A 37F5:283A 10296: Angle_list:743[#I7:129] = #M43070000:203
 33F4:6852 37F5:2842 10304: Stop_sig_color:2153[r_@1:1855] = #I63:126
 33F4:685A 37F5:284A 10312: Stop_sig_color:2153[g_@1:1179] = #I0:16
 33F4:6862 37F5:2852 10320: Stop_sig_color:2153[b_@1:771] = #I0:16
 33F4:686A 37F5:285A 10328: Ignore_sig_color:1248[r_@1:1855] = #I0:16
 33F4:6872 37F5:2862 10336: Ignore_sig_color:1248[g_@1:1179] = #I36:84
 33F4:687A 37F5:286A 10344: Ignore_sig_color:1248[b_@1:771] = #I0:16
 33F4:6882 37F5:2872 10352: Color_list:850[#I1:17,r_@1:1855] = #I35:82
 33F4:688C 37F5:287C 10362: Color_list:850[#I1:17,g_@1:1179] = #I33:80
 33F4:6896 37F5:2886 10372: Color_list:850[#I1:17,b_@1:771] = #I27:69
 33F4:68A0 37F5:2890 10382: Color_list:850[#I2:53,r_@1:1855] = #I35:82
 33F4:68AA 37F5:289A 10392: Color_list:850[#I2:53,g_@1:1179] = #I33:80
 33F4:68B4 37F5:28A4 10402: Color_list:850[#I2:53,b_@1:771] = #I27:69
 33F4:68BE 37F5:28AE 10412: Color_list:850[#I3:74,r_@1:1855] = #I35:82
 33F4:68C8 37F5:28B8 10422: Color_list:850[#I3:74,g_@1:1179] = #I33:80
 33F4:68D2 37F5:28C2 10432: Color_list:850[#I3:74,b_@1:771] = #I27:69
 33F4:68DC 37F5:28CC 10442: Color_list:850[#I4:87,r_@1:1855] = #I35:82
 33F4:68E6 37F5:28D6 10452: Color_list:850[#I4:87,g_@1:1179] = #I33:80
 33F4:68F0 37F5:28E0 10462: Color_list:850[#I4:87,b_@1:771] = #I27:69
 33F4:68FA 37F5:28EA 10472: Color_list:850[#I5:111,r_@1:1855] = #I35:82
 33F4:6904 37F5:28F4 10482: Color_list:850[#I5:111,g_@1:1179] = #I33:80
 33F4:690E 37F5:28FE 10492: Color_list:850[#I5:111,b_@1:771] = #I27:69
 33F4:6918 37F5:2908 10502: Color_list:850[#I6:120,r_@1:1855] = #I35:82
 33F4:6922 37F5:2912 10512: Color_list:850[#I6:120,g_@1:1179] = #I33:80
 33F4:692C 37F5:291C 10522: Color_list:850[#I6:120,b_@1:771] = #I27:69
 33F4:6936 37F5:2926 10532: Color_list:850[#I7:129,r_@1:1855] = #I35:82
 33F4:6940 37F5:2930 10542: Color_list:850[#I7:129,g_@1:1179] = #I33:80
 33F4:694A 37F5:293A 10552: Color_list:850[#I7:129,b_@1:771] = #I27:69
 33F4:6954 37F5:2944 10562: SOA_list:2090[#I0:16] = #M43960000:212
 33F4:695C 37F5:294C 10570: SOA_list:2090[#I1:17] = #M43C80000:216
 33F4:6964 37F5:2954 10578: SOA_list:2090[#I2:53] = #M43FA0000:221
 33F4:696C 37F5:295C 10586: SOA_list:2090[#I3:74] = #M44160000:223
 33F4:6974 37F5:2964 10594: SOA_list:2090[#I4:87] = #M44960000:229
 33F4:697C 37F5:296C 10602: SOA_list:2090[#I5:111] = #M44AF0000:232
 33F4:6984 37F5:2974 10610: SOA_list:2090[#I6:120] = #M44C80000:233
 33F4:698C 37F5:297C 10618: SOA_list:2090[#I7:129] = #M44E10000:234
 33F4:6994 37F5:2984 10626: SOA_list:2090[#I8:133] = #M44FA0000:235
 33F4:699C 37F5:298C 10634: SOA_list:2090[#I9:140] = #M00000000:164
 33F4:69A4 37F5:2994 10642: SOA_list:2090[#I10:18] = #M00000000:164
 33F4:69AC 37F5:299C 10650: SOA_list:2090[#I11:27] = #M00000000:164
 33F4:69B4 37F5:29A4 10658: SOA_list:2090[#I12:30] = #M00000000:164
 33F4:69BC 37F5:29AC 10666: SOA_list:2090[#I13:34] = #M00000000:164
 33F4:69C4 37F5:29B4 10674: SOA_list:2090[#I14:38] = #M00000000:164
 33F4:69CC 37F5:29BC 10682: SOA_list:2090[#I15:41] = #M00000000:164
 33F4:69D4 37F5:29C4 10690: SOA_list:2090[#I16:44] = #M00000000:164
 33F4:69DC 37F5:29CC 10698: SOA_list:2090[#I17:47] = #M00000000:164
 33F4:69E4 37F5:29D4 10706: SOA_list:2090[#I18:49] = #M00000000:164
 33F4:69EC 37F5:29DC 10714: SOA_list:2090[#I19:52] = #M00000000:164
 33F4:69F4 37F5:29E4 10722: #L0:145 = state@1:2117 == run_search_sess@1:1983
 33F4:6A02 37F5:29F2 10736: IFnot (#L0:145) GOTO .+730 (goto 11466)
 33F4:6A0A 37F5:29FA 10744: Trls_per_block:2323 = #I100:19
 33F4:6A14 37F5:2A04 10754: Base_Punish_time:773 = #I5000:114
 33F4:6A1E 37F5:2A0E 10764: Catch_Rew:823 = #I1:17
 33F4:6A28 37F5:2A18 10774: Consec_trl:855 = #I0:16
 33F4:6A32 37F5:2A22 10784: ProbCue:1633 = #I0:16
 33F4:6A3C 37F5:2A2C 10794: ProbSide:1634 = #I1:17
 33F4:6A46 37F5:2A36 10804: VarEcc:2356 = #I0:16
 33F4:6A50 37F5:2A40 10814: LatStruct:1313 = #I1:17
 33F4:6A5A 37F5:2A4A 10824: Npulse:1457 = #I600:122
 33F4:6A64 37F5:2A54 10834: PulseGap:1635 = #I1000:20
 33F4:6A6E 37F5:2A5E 10844: StimInterval:2150 = #I600000:125
 33F4:6A78 37F5:2A68 10854: StimCond:2146 = #I1:17
 33F4:6A82 37F5:2A72 10864: ArrStruct:759 = #I1:17
 33F4:6A8C 37F5:2A7C 10874: TargTrainSet:2261 = #I1:17
 33F4:6A96 37F5:2A86 10884: DistOrt:989 = #I4:87
 33F4:6AA0 37F5:2A90 10894: TargOrt:2258 = #I2:53
 33F4:6AAA 37F5:2A9A 10904: SearchEcc:2031 = #I8:133
 33F4:6AB4 37F5:2AA4 10914: SingMode:2077 = #I0:16
 33F4:6ABE 37F5:2AAE 10924: SingCol:2074 = #I1:17
 33F4:6AC8 37F5:2AB8 10934: PercSingTrl:1609 = #I50:112
 33F4:6AD2 37F5:2AC2 10944: soa_mode:2091 = #I0:16
 33F4:6ADC 37F5:2ACC 10954: FixJitter:1162 = #I0:16
 33F4:6AE6 37F5:2AD6 10964: catch_hold_time:822 = F= catch_hold_time:822
 33F4:6AF0 37F5:2AE0 10974: Perc_catch:1608 = F= Perc_catch:1608
 33F4:6AFA 37F5:2AEA 10984: TargetType:2255 = #I1:17
 33F4:6B04 37F5:2AF4 10994: PlacPres:1621 = #I1:17
 33F4:6B0E 37F5:2AFE 11004: SetSize:2053 = #I8:133
 33F4:6B18 37F5:2B08 11014: SearchType:2033 = #I2:53
 33F4:6B22 37F5:2B12 11024: TargOrt1:2259 = #I3:74
 33F4:6B2C 37F5:2B1C 11034: TargOrt2:2260 = #I3:74
 33F4:6B36 37F5:2B26 11044: max_plactime:1345 = F= max_plactime:1345
 33F4:6B40 37F5:2B30 11054: min_plactime:1379 = F= min_plactime:1379
 33F4:6B4A 37F5:2B3A 11064: Targ_hold_time:2197 = #I200:55
 33F4:6B54 37F5:2B44 11074: Max_sacc_duration:1346 = #I50:112
 33F4:6B5E 37F5:2B4E 11084: Min_saccade_time:1380 = #I70:130
 33F4:6B68 37F5:2B58 11094: Max_saccade_time:1352 = #I300:76
 33F4:6B72 37F5:2B62 11104: Min_Holdtime:1373 = #I300:76
 33F4:6B7C 37F5:2B6C 11114: Max_Holdtime:1338 = #I1000:20
 33F4:6B86 37F5:2B76 11124: Go_weight:1201 = F= Go_weight:1201
 33F4:6B90 37F5:2B80 11134: Stop_weight:2171 = F= Stop_weight:2171
 33F4:6B9A 37F5:2B8A 11144: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:6BA4 37F5:2B94 11154: NonSingleton_color:1455[r_@1:1855] = #I35:82
 33F4:6BAC 37F5:2B9C 11162: NonSingleton_color:1455[g_@1:1179] = #I33:80
 33F4:6BB4 37F5:2BA4 11170: NonSingleton_color:1455[b_@1:771] = #I27:69
 33F4:6BBC 37F5:2BAC 11178: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:6BC4 37F5:2BB4 11186: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:6BCC 37F5:2BBC 11194: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:6BD4 37F5:2BC4 11202: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:6BDC 37F5:2BCC 11210: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:6BE4 37F5:2BD4 11218: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:6BEC 37F5:2BDC 11226: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:6BF4 37F5:2BE4 11234: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:6BFC 37F5:2BEC 11242: Size_list:2081[#I8:133] = #M3FC00000:169
 33F4:6C04 37F5:2BF4 11250: Size_list:2081[#I9:140] = #M3FC00000:169
 33F4:6C0C 37F5:2BFC 11258: Size_list:2081[#I10:18] = #M3FC00000:169
 33F4:6C14 37F5:2C04 11266: Size_list:2081[#I11:27] = #M3FC00000:169
 33F4:6C1C 37F5:2C0C 11274: Eccentricity_list:1012[#I0:16] = #M40400000:172
 33F4:6C24 37F5:2C14 11282: Eccentricity_list:1012[#I1:17] = #M40C00000:176
 33F4:6C2C 37F5:2C1C 11290: Eccentricity_list:1012[#I2:53] = #M41100000:178
 33F4:6C34 37F5:2C24 11298: Eccentricity_list:1012[#I3:74] = #M40C00000:176
 33F4:6C3C 37F5:2C2C 11306: Eccentricity_list:1012[#I4:87] = #M40C00000:176
 33F4:6C44 37F5:2C34 11314: Eccentricity_list:1012[#I5:111] = #M41100000:178
 33F4:6C4C 37F5:2C3C 11322: Eccentricity_list:1012[#I6:120] = #M40000000:170
 33F4:6C54 37F5:2C44 11330: Eccentricity_list:1012[#I7:129] = #M40800000:174
 33F4:6C5C 37F5:2C4C 11338: Eccentricity_list:1012[#I8:133] = #M40A00000:175
 33F4:6C64 37F5:2C54 11346: Eccentricity_list:1012[#I9:140] = #M40C00000:176
 33F4:6C6C 37F5:2C5C 11354: Eccentricity_list:1012[#I10:18] = #M41000000:177
 33F4:6C74 37F5:2C64 11362: Eccentricity_list:1012[#I11:27] = #M41100000:178
 33F4:6C7C 37F5:2C6C 11370: Angle_list:743[#I0:16] = #M42B40000:200
 33F4:6C84 37F5:2C74 11378: Angle_list:743[#I1:17] = #M42340000:192
 33F4:6C8C 37F5:2C7C 11386: Angle_list:743[#I2:53] = #M00000000:164
 33F4:6C94 37F5:2C84 11394: Angle_list:743[#I3:74] = #M439D8000:213
 33F4:6C9C 37F5:2C8C 11402: Angle_list:743[#I4:87] = #M43870000:211
 33F4:6CA4 37F5:2C94 11410: Angle_list:743[#I5:111] = #M43610000:208
 33F4:6CAC 37F5:2C9C 11418: Angle_list:743[#I6:120] = #M43340000:205
 33F4:6CB4 37F5:2CA4 11426: Angle_list:743[#I7:129] = #M43070000:203
 33F4:6CBC 37F5:2CAC 11434: SOA_list:2090[#I0:16] = #M437A0000:210
 33F4:6CC4 37F5:2CB4 11442: SOA_list:2090[#I1:17] = #M43960000:212
 33F4:6CCC 37F5:2CBC 11450: SOA_list:2090[#I2:53] = #M43AF0000:215
 33F4:6CD4 37F5:2CC4 11458: SOA_list:2090[#I3:74] = #M43C80000:216
 33F4:6CDC 37F5:2CCC 11466: #L0:145 = state@1:2117 == run_fix_sess@1:1954
 33F4:6CEA 37F5:2CDA 11480: IFnot (#L0:145) GOTO .+554 (goto 12034)
 33F4:6CF2 37F5:2CE2 11488: N_targ_pos:1407 = #I9:140
 33F4:6CFC 37F5:2CEC 11498: Color_list:850[#I0:16,r_@1:1855] = #I35:82
 33F4:6D06 37F5:2CF6 11508: Color_list:850[#I0:16,g_@1:1179] = #I33:80
 33F4:6D10 37F5:2D00 11518: Color_list:850[#I0:16,b_@1:771] = #I27:69
 33F4:6D1A 37F5:2D0A 11528: Color_list:850[#I1:17,r_@1:1855] = #I35:82
 33F4:6D24 37F5:2D14 11538: Color_list:850[#I1:17,g_@1:1179] = #I33:80
 33F4:6D2E 37F5:2D1E 11548: Color_list:850[#I1:17,b_@1:771] = #I27:69
 33F4:6D38 37F5:2D28 11558: Color_list:850[#I2:53,r_@1:1855] = #I35:82
 33F4:6D42 37F5:2D32 11568: Color_list:850[#I2:53,g_@1:1179] = #I33:80
 33F4:6D4C 37F5:2D3C 11578: Color_list:850[#I2:53,b_@1:771] = #I27:69
 33F4:6D56 37F5:2D46 11588: Color_list:850[#I3:74,r_@1:1855] = #I35:82
 33F4:6D60 37F5:2D50 11598: Color_list:850[#I3:74,g_@1:1179] = #I33:80
 33F4:6D6A 37F5:2D5A 11608: Color_list:850[#I3:74,b_@1:771] = #I27:69
 33F4:6D74 37F5:2D64 11618: Color_list:850[#I4:87,r_@1:1855] = #I35:82
 33F4:6D7E 37F5:2D6E 11628: Color_list:850[#I4:87,g_@1:1179] = #I33:80
 33F4:6D88 37F5:2D78 11638: Color_list:850[#I4:87,b_@1:771] = #I27:69
 33F4:6D92 37F5:2D82 11648: Color_list:850[#I5:111,r_@1:1855] = #I35:82
 33F4:6D9C 37F5:2D8C 11658: Color_list:850[#I5:111,g_@1:1179] = #I33:80
 33F4:6DA6 37F5:2D96 11668: Color_list:850[#I5:111,b_@1:771] = #I27:69
 33F4:6DB0 37F5:2DA0 11678: Color_list:850[#I6:120,r_@1:1855] = #I35:82
 33F4:6DBA 37F5:2DAA 11688: Color_list:850[#I6:120,g_@1:1179] = #I33:80
 33F4:6DC4 37F5:2DB4 11698: Color_list:850[#I6:120,b_@1:771] = #I27:69
 33F4:6DCE 37F5:2DBE 11708: Color_list:850[#I7:129,r_@1:1855] = #I35:82
 33F4:6DD8 37F5:2DC8 11718: Color_list:850[#I7:129,g_@1:1179] = #I33:80
 33F4:6DE2 37F5:2DD2 11728: Color_list:850[#I7:129,b_@1:771] = #I27:69
 33F4:6DEC 37F5:2DDC 11738: Color_list:850[#I8:133,r_@1:1855] = #I35:82
 33F4:6DF6 37F5:2DE6 11748: Color_list:850[#I8:133,g_@1:1179] = #I33:80
 33F4:6E00 37F5:2DF0 11758: Color_list:850[#I8:133,b_@1:771] = #I27:69
 33F4:6E0A 37F5:2DFA 11768: Size_list:2081[#I0:16] = #M3F000000:166
 33F4:6E12 37F5:2E02 11776: Size_list:2081[#I1:17] = #M3F000000:166
 33F4:6E1A 37F5:2E0A 11784: Size_list:2081[#I2:53] = #M3F000000:166
 33F4:6E22 37F5:2E12 11792: Size_list:2081[#I3:74] = #M3F000000:166
 33F4:6E2A 37F5:2E1A 11800: Size_list:2081[#I4:87] = #M3F000000:166
 33F4:6E32 37F5:2E22 11808: Size_list:2081[#I5:111] = #M3F000000:166
 33F4:6E3A 37F5:2E2A 11816: Size_list:2081[#I6:120] = #M3F000000:166
 33F4:6E42 37F5:2E32 11824: Size_list:2081[#I7:129] = #M3F000000:166
 33F4:6E4A 37F5:2E3A 11832: Size_list:2081[#I8:133] = #M3F000000:166
 33F4:6E52 37F5:2E42 11840: Angle_list:743[#I0:16] = #M00000000:164
 33F4:6E5A 37F5:2E4A 11848: Angle_list:743[#I1:17] = #M42B40000:200
 33F4:6E62 37F5:2E52 11856: Angle_list:743[#I2:53] = #MC2B40000:238
 33F4:6E6A 37F5:2E5A 11864: Angle_list:743[#I3:74] = #M43340000:205
 33F4:6E72 37F5:2E62 11872: Angle_list:743[#I4:87] = #M00000000:164
 33F4:6E7A 37F5:2E6A 11880: Angle_list:743[#I5:111] = #M43070000:203
 33F4:6E82 37F5:2E72 11888: Angle_list:743[#I6:120] = #M42340000:192
 33F4:6E8A 37F5:2E7A 11896: Angle_list:743[#I7:129] = #MC3070000:239
 33F4:6E92 37F5:2E82 11904: Angle_list:743[#I8:133] = #MC2340000:237
 33F4:6E9A 37F5:2E8A 11912: Eccentricity_list:1012[#I0:16] = #M00000000:164
 33F4:6EA2 37F5:2E92 11920: Eccentricity_list:1012[#I1:17] = #M41300000:179
 33F4:6EAA 37F5:2E9A 11928: Eccentricity_list:1012[#I2:53] = #M41300000:179
 33F4:6EB2 37F5:2EA2 11936: Eccentricity_list:1012[#I3:74] = #M41300000:179
 33F4:6EBA 37F5:2EAA 11944: Eccentricity_list:1012[#I4:87] = #M41300000:179
 33F4:6EC2 37F5:2EB2 11952: Eccentricity_list:1012[#I5:111] = #M4179999A:183
 33F4:6ECA 37F5:2EBA 11960: Eccentricity_list:1012[#I6:120] = #M4179999A:183
 33F4:6ED2 37F5:2EC2 11968: Eccentricity_list:1012[#I7:129] = #M4179999A:183
 33F4:6EDA 37F5:2ECA 11976: Eccentricity_list:1012[#I8:133] = #M4179999A:183
 33F4:6EE2 37F5:2ED2 11984: Fix_win_size:1092 = F= Fix_win_size:1092
 33F4:6EEC 37F5:2EDC 11994: Targ_win_size:2221 = F= Targ_win_size:2221
 33F4:6EF6 37F5:2EE6 12004: Allowed_fix_time:727 = #I1200:32
 33F4:6F00 37F5:2EF0 12014: Max_saccade_time:1352 = #I800:135
 33F4:6F0A 37F5:2EFA 12024: Targ_hold_time:2197 = #I600:122
 33F4:6F14 37F5:2F04 12034: #L0:145 = state@1:2117 == run_delayed_sess@1:1947
 33F4:6F22 37F5:2F12 12048: IFnot (#L0:145) GOTO .+428 (goto 12476)
 33F4:6F2A 37F5:2F1A 12056: Go_weight:1201 = F= Go_weight:1201
 33F4:6F34 37F5:2F24 12066: Stop_weight:2171 = F= Stop_weight:2171
 33F4:6F3E 37F5:2F2E 12076: Ignore_weight:1263 = F= Ignore_weight:1263
 33F4:6F48 37F5:2F38 12086: Min_Holdtime:1373 = #I500:113
 33F4:6F52 37F5:2F42 12096: Max_Holdtime:1338 = #I1000:20
 33F4:6F5C 37F5:2F4C 12106: Min_SOA:1381 = #I200:55
 33F4:6F66 37F5:2F56 12116: Max_SOA:1359 = #I200:55
 33F4:6F70 37F5:2F60 12126: Reward_Offset:1932 = #I0:16
 33F4:6F7A 37F5:2F6A 12136: Exp_juice:1021 = #I0:16
 33F4:6F84 37F5:2F74 12146: N_targ_pos:1407 = #I8:133
 33F4:6F8E 37F5:2F7E 12156: Angle_list:743[#I0:16] = #M42B40000:200
 33F4:6F96 37F5:2F86 12164: Angle_list:743[#I1:17] = #M43870000:211
 33F4:6F9E 37F5:2F8E 12172: Angle_list:743[#I2:53] = #M00000000:164
 33F4:6FA6 37F5:2F96 12180: Angle_list:743[#I3:74] = #M43340000:205
 33F4:6FAE 37F5:2F9E 12188: Angle_list:743[#I4:87] = #M42340000:192
 33F4:6FB6 37F5:2FA6 12196: Angle_list:743[#I5:111] = #M43070000:203
 33F4:6FBE 37F5:2FAE 12204: Angle_list:743[#I6:120] = #M43610000:208
 33F4:6FC6 37F5:2FB6 12212: Angle_list:743[#I7:129] = #M439D8000:213
 33F4:6FCE 37F5:2FBE 12220: Size_list:2081[#I0:16] = #M3FC00000:169
 33F4:6FD6 37F5:2FC6 12228: Size_list:2081[#I1:17] = #M3FC00000:169
 33F4:6FDE 37F5:2FCE 12236: Size_list:2081[#I2:53] = #M3FC00000:169
 33F4:6FE6 37F5:2FD6 12244: Size_list:2081[#I3:74] = #M3FC00000:169
 33F4:6FEE 37F5:2FDE 12252: Size_list:2081[#I4:87] = #M3FC00000:169
 33F4:6FF6 37F5:2FE6 12260: Size_list:2081[#I5:111] = #M3FC00000:169
 33F4:6FFE 37F5:2FEE 12268: Size_list:2081[#I6:120] = #M3FC00000:169
 33F4:7006 37F5:2FF6 12276: Size_list:2081[#I7:129] = #M3FC00000:169
 33F4:700E 37F5:2FFE 12284: Size_list:2081[#I8:133] = #M3FC00000:169
 33F4:7016 37F5:3006 12292: Size_list:2081[#I9:140] = #M3FC00000:169
 33F4:701E 37F5:300E 12300: Size_list:2081[#I10:18] = #M3FC00000:169
 33F4:7026 37F5:3016 12308: Size_list:2081[#I11:27] = #M3FC00000:169
 33F4:702E 37F5:301E 12316: SOA_list:2090[#I0:16] = #M43960000:212
 33F4:7036 37F5:3026 12324: SOA_list:2090[#I1:17] = #M43960000:212
 33F4:703E 37F5:302E 12332: SOA_list:2090[#I2:53] = #M43C80000:216
 33F4:7046 37F5:3036 12340: SOA_list:2090[#I3:74] = #M43C80000:216
 33F4:704E 37F5:303E 12348: SOA_list:2090[#I4:87] = #M43FA0000:221
 33F4:7056 37F5:3046 12356: SOA_list:2090[#I5:111] = #M43C80000:216
 33F4:705E 37F5:304E 12364: SOA_list:2090[#I6:120] = #M44610000:225
 33F4:7066 37F5:3056 12372: SOA_list:2090[#I7:129] = #M447A0000:226
 33F4:706E 37F5:305E 12380: SOA_list:2090[#I8:133] = #M00000000:164
 33F4:7076 37F5:3066 12388: SOA_list:2090[#I9:140] = #M00000000:164
 33F4:707E 37F5:306E 12396: SOA_list:2090[#I10:18] = #M00000000:164
 33F4:7086 37F5:3076 12404: SOA_list:2090[#I11:27] = #M00000000:164
 33F4:708E 37F5:307E 12412: SOA_list:2090[#I12:30] = #M00000000:164
 33F4:7096 37F5:3086 12420: SOA_list:2090[#I13:34] = #M00000000:164
 33F4:709E 37F5:308E 12428: SOA_list:2090[#I14:38] = #M00000000:164
 33F4:70A6 37F5:3096 12436: SOA_list:2090[#I15:41] = #M00000000:164
 33F4:70AE 37F5:309E 12444: SOA_list:2090[#I16:44] = #M00000000:164
 33F4:70B6 37F5:30A6 12452: SOA_list:2090[#I17:47] = #M00000000:164
 33F4:70BE 37F5:30AE 12460: SOA_list:2090[#I18:49] = #M00000000:164
 33F4:70C6 37F5:30B6 12468: SOA_list:2090[#I19:52] = #M00000000:164
 33F4:70CE 37F5:30BE 12476: #L0:145 = state@1:2117 == run_flash_sess@1:1958
 33F4:70DC 37F5:30CC 12490: IFnot (#L0:145) GOTO .+58 (goto 12548)
 33F4:70E4 37F5:30D4 12498: Success_Tone_medR:2191 = #I1600:45
 33F4:70EE 37F5:30DE 12508: Base_Reward_time:774 = #I100:19
 33F4:70F8 37F5:30E8 12518: Fix_win_size:1092 = F= Fix_win_size:1092
 33F4:7102 37F5:30F2 12528: IFI:1247 = F= IFI:1247
 33F4:710C 37F5:30FC 12538: flashTime:1175 = F= flashTime:1175

PROCESS   2: GOODVARS (Args=1 CtrlBlk=33F4:1CBC Size=1742  iOp=2-1743 iCache=12550-14291) DISABLED
 33F4:4012 37F5:0002     0: state@2:2118 = #P1:241
 33F4:401C 37F5:000C    10: #L0:145 = state@2:2118 == run_cmd_sess@2:1941
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+888 (goto 912)
 33F4:4032 37F5:0022    32: #F0:1 = Go_weight:1201 F+ Stop_weight:2171
 33F4:4040 37F5:0030    46: #F1:2 = #F0:1 F+ Ignore_weight:1263
 33F4:404E 37F5:003E    60: #L1:146 = #F1:2 F!= #I100:19
 33F4:405C 37F5:004C    74: IFnot (#L1:146) GOTO .+50 (goto 124)
 33F4:4064 37F5:0054    82: #L2 = CALL1 printf(#S0:268)
 33F4:406C 37F5:005C    90: #L0 = CALL1 printf(#S1:269)
 33F4:4074 37F5:0064    98: #L0 = CALL1 printf(#S2:380)
 33F4:407C 37F5:006C   106: state@2:2118 = #I0:16
 33F4:4086 37F5:0076   116: #L0 = CALL1 system(#S3:491)
 33F4:408E 37F5:007E   124: i@2:1237 = #I0:16
 33F4:4098 37F5:0088   134: N_targ_pos:1407 = #I0:16
 33F4:40A2 37F5:0092   144: #L0:145 = i@2:1237 < #I8:133
 33F4:40B0 37F5:00A0   158: IFnot (#L0:145) GOTO .+72 (goto 230)
 33F4:40B8 37F5:00A8   166: #F0:1 = Size_list:2081[i@2:1237]
 33F4:40C0 37F5:00B0   174: #L1:146 = #F0:1 F!= #I0:16
 33F4:40CE 37F5:00BE   188: IFnot (#L1:146) GOTO .+22 (goto 210)
 33F4:40D6 37F5:00C6   196: N_targ_pos:1407 = N_targ_pos:1407 + #I1:17
 33F4:40E4 37F5:00D4   210: i@2:1237 = i@2:1237 + #I1:17
 33F4:40F2 37F5:00E2   224: NEXTTICK1
 33F4:40F4 37F5:00E4   226: GOTO .-82 (goto 144)
 33F4:40F8 37F5:00E8   230: i@2:1237 = #I0:16
 33F4:4102 37F5:00F2   240: N_SSDs:1402 = #I0:16
 33F4:410C 37F5:00FC   250: #L0:145 = i@2:1237 < #I20:54
 33F4:411A 37F5:010A   264: IFnot (#L0:145) GOTO .+72 (goto 336)
 33F4:4122 37F5:0112   272: #F0:1 = SSD_list:2100[i@2:1237]
 33F4:412A 37F5:011A   280: #L1:146 = #F0:1 F!= #I0:16
 33F4:4138 37F5:0128   294: IFnot (#L1:146) GOTO .+22 (goto 316)
 33F4:4140 37F5:0130   302: N_SSDs:1402 = N_SSDs:1402 + #I1:17
 33F4:414E 37F5:013E   316: i@2:1237 = i@2:1237 + #I1:17
 33F4:415C 37F5:014C   330: NEXTTICK1
 33F4:415E 37F5:014E   332: GOTO .-82 (goto 250)
 33F4:4162 37F5:0152   336: #L0:145 = N_SSDs:1402 - #I1:17
 33F4:4170 37F5:0160   350: #F0:1 = SSD_list:2100[#L0:145]
 33F4:4178 37F5:0168   358: Max_SSD:1363 = F= Max_SSD:1363
 33F4:4182 37F5:0172   368: #F0:1 = Max_SSD:1363 F* #M41649249:182
 33F4:4190 37F5:0180   382: #F1 = CALL1 ceil(#F0:1)
 33F4:4198 37F5:0188   390: Max_SSD:1363 = F= Max_SSD:1363
 33F4:41A2 37F5:0192   400: #F0:1 = SSD_list:2100[#I0:16]
 33F4:41AA 37F5:019A   408: Min_SSD:1385 = F= Min_SSD:1385
 33F4:41B4 37F5:01A4   418: #F0:1 = Min_SSD:1385 F* #M41649249:182
 33F4:41C2 37F5:01B2   432: #F1 = CALL1 ceil(#F0:1)
 33F4:41CA 37F5:01BA   440: Min_SSD:1385 = F= Min_SSD:1385
 33F4:41D4 37F5:01C4   450: #L0:145 = Max_SSD:1363 > Max_saccade_time:1352
 33F4:41E2 37F5:01D2   464: IFnot (#L0:145) GOTO .+58 (goto 522)
 33F4:41EA 37F5:01DA   472: #L1 = CALL1 printf(#S4:602)
 33F4:41F2 37F5:01E2   480: #L0 = CALL1 printf(#S5:658)
 33F4:41FA 37F5:01EA   488: #L0 = CALL1 printf(#S6:669)
 33F4:4202 37F5:01F2   496: #L0 = CALL1 printf(#S7:680)
 33F4:420A 37F5:01FA   504: state@2:2118 = #I0:16
 33F4:4214 37F5:0204   514: #L0 = CALL1 system(#S8:691)
 33F4:421C 37F5:020C   522: #L0:145 = Max_Holdtime:1338 + Max_SSD:1363
 33F4:422A 37F5:021A   536: #L1:146 = #L0:145 + Cancl_time:815
 33F4:4238 37F5:0228   550: #L2:156 = #L1:146 + Tone_Duration:2282
 33F4:4246 37F5:0236   564: #L3:157 = #L2:156 + Reward_Offset:1932
 33F4:4254 37F5:0244   578: #L4:158 = Base_Reward_time:774 * #I2:53
 33F4:4262 37F5:0252   592: #L5:159 = #L3:157 + #L4:158
 33F4:4270 37F5:0260   606: #L6:160 = #L5:159 + #I100:19
 33F4:427E 37F5:026E   620: #L7:161 = Trial_length:2295 < #L6:160
 33F4:428C 37F5:027C   634: IFnot (#L7:161) GOTO .+132 (goto 766)
 33F4:4294 37F5:0284   642: #L8:162 = Max_Holdtime:1338 + Max_SSD:1363
 33F4:42A2 37F5:0292   656: #L9:163 = #L8:162 + Cancl_time:815
 33F4:42B0 37F5:02A0   670: #L10:147 = #L9:163 + Tone_Duration:2282
 33F4:42BE 37F5:02AE   684: #L11:148 = #L10:147 + Reward_Offset:1932
 33F4:42CC 37F5:02BC   698: #L12:149 = Base_Reward_time:774 * #I2:53
 33F4:42DA 37F5:02CA   712: #L13:150 = #L11:148 + #L12:149
 33F4:42E8 37F5:02D8   726: Trial_length:2295 = #L13:150 + #I100:19
 33F4:42F6 37F5:02E6   740: #L0 = CALL1 printf(#S9:702)
 33F4:42FE 37F5:02EE   748: #L0 = CALL1 printf(#S10:270)
 33F4:4306 37F5:02F6   756: #L0 = CALL2 printf(#S11:281,Trial_length:2295)
 33F4:4310 37F5:0300   766: #L0:145 = Set_Tones:2046 == #I1:17
 33F4:431E 37F5:030E   780: IFnot (#L0:145) GOTO .+72 (goto 852)
 33F4:4326 37F5:0316   788: Success_Tone_bigR:2190 = #I3200:78
 33F4:4330 37F5:0320   798: Success_Tone_medR:2191 = #I1600:45
 33F4:433A 37F5:032A   808: Success_Tone_smlR:2192 = #I800:135
 33F4:4344 37F5:0334   818: Failure_Tone_smlP:1055 = #I400:89
 33F4:434E 37F5:033E   828: Failure_Tone_medP:1054 = #I200:55
 33F4:4358 37F5:0348   838: Failure_Tone_bigP:1053 = #I100:19
 33F4:4362 37F5:0352   848: GOTO .+64 (goto 912)
 33F4:4366 37F5:0356   852: Success_Tone_bigR:2190 = #I100:19
 33F4:4370 37F5:0360   862: Success_Tone_medR:2191 = #I200:55
 33F4:437A 37F5:036A   872: Success_Tone_smlR:2192 = #I400:89
 33F4:4384 37F5:0374   882: Failure_Tone_smlP:1055 = #I800:135
 33F4:438E 37F5:037E   892: Failure_Tone_medP:1054 = #I1600:45
 33F4:4398 37F5:0388   902: Failure_Tone_bigP:1053 = #I3200:78
 33F4:43A2 37F5:0392   912: #L0:145 = state@2:2118 == run_mg_sess@2:1976
 33F4:43B0 37F5:03A0   926: IFnot (#L0:145) GOTO .+816 (goto 1742)
 33F4:43B8 37F5:03A8   934: #F0:1 = Go_weight:1201 F+ Stop_weight:2171
 33F4:43C6 37F5:03B6   948: #F1:2 = #F0:1 F+ Ignore_weight:1263
 33F4:43D4 37F5:03C4   962: #L1:146 = #F1:2 F!= #I100:19
 33F4:43E2 37F5:03D2   976: IFnot (#L1:146) GOTO .+50 (goto 1026)
 33F4:43EA 37F5:03DA   984: #L2 = CALL1 printf(#S12:292)
 33F4:43F2 37F5:03E2   992: #L0 = CALL1 printf(#S13:303)
 33F4:43FA 37F5:03EA  1000: #L0 = CALL1 printf(#S14:314)
 33F4:4402 37F5:03F2  1008: state@2:2118 = #I0:16
 33F4:440C 37F5:03FC  1018: #L0 = CALL1 system(#S15:325)
 33F4:4414 37F5:0404  1026: i@2:1237 = #I0:16
 33F4:441E 37F5:040E  1036: N_targ_pos:1407 = #I0:16
 33F4:4428 37F5:0418  1046: #L0:145 = i@2:1237 < #I8:133
 33F4:4436 37F5:0426  1060: IFnot (#L0:145) GOTO .+72 (goto 1132)
 33F4:443E 37F5:042E  1068: #F0:1 = Size_list:2081[i@2:1237]
 33F4:4446 37F5:0436  1076: #L1:146 = #F0:1 F!= #I0:16
 33F4:4454 37F5:0444  1090: IFnot (#L1:146) GOTO .+22 (goto 1112)
 33F4:445C 37F5:044C  1098: N_targ_pos:1407 = N_targ_pos:1407 + #I1:17
 33F4:446A 37F5:045A  1112: i@2:1237 = i@2:1237 + #I1:17
 33F4:4478 37F5:0468  1126: NEXTTICK1
 33F4:447A 37F5:046A  1128: GOTO .-82 (goto 1046)
 33F4:447E 37F5:046E  1132: i@2:1237 = #I0:16
 33F4:4488 37F5:0478  1142: N_SOAs:1399 = #I0:16
 33F4:4492 37F5:0482  1152: #L0:145 = i@2:1237 < #I20:54
 33F4:44A0 37F5:0490  1166: IFnot (#L0:145) GOTO .+72 (goto 1238)
 33F4:44A8 37F5:0498  1174: #F0:1 = SOA_list:2090[i@2:1237]
 33F4:44B0 37F5:04A0  1182: #L1:146 = #F0:1 F!= #I0:16
 33F4:44BE 37F5:04AE  1196: IFnot (#L1:146) GOTO .+22 (goto 1218)
 33F4:44C6 37F5:04B6  1204: N_SOAs:1399 = N_SOAs:1399 + #I1:17
 33F4:44D4 37F5:04C4  1218: i@2:1237 = i@2:1237 + #I1:17
 33F4:44E2 37F5:04D2  1232: NEXTTICK1
 33F4:44E4 37F5:04D4  1234: GOTO .-82 (goto 1152)
 33F4:44E8 37F5:04D8  1238: #L0:145 = N_SOAs:1399 - #I1:17
 33F4:44F6 37F5:04E6  1252: #F0:1 = SOA_list:2090[#L0:145]
 33F4:44FE 37F5:04EE  1260: Max_SOA:1359 = F= Max_SOA:1359
 33F4:4508 37F5:04F8  1270: #F0:1 = Max_SOA:1359 F* #M41649249:182
 33F4:4516 37F5:0506  1284: #F1 = CALL1 ceil(#F0:1)
 33F4:451E 37F5:050E  1292: Max_SOA:1359 = F= Max_SOA:1359
 33F4:4528 37F5:0518  1302: #F0:1 = SOA_list:2090[#I0:16]
 33F4:4530 37F5:0520  1310: Min_SOA:1381 = F= Min_SOA:1381
 33F4:453A 37F5:052A  1320: #F0:1 = Min_SOA:1381 F* #M41649249:182
 33F4:4548 37F5:0538  1334: #F1 = CALL1 ceil(#F0:1)
 33F4:4550 37F5:0540  1342: Min_SOA:1381 = F= Min_SOA:1381
 33F4:455A 37F5:054A  1352: #L0:145 = Max_Holdtime:1338 + Max_SOA:1359
 33F4:4568 37F5:0558  1366: #L1:146 = #L0:145 + Cancl_time:815
 33F4:4576 37F5:0566  1380: #L2:156 = #L1:146 + Tone_Duration:2282
 33F4:4584 37F5:0574  1394: #L3:157 = #L2:156 + Reward_Offset:1932
 33F4:4592 37F5:0582  1408: #L4:158 = Base_Reward_time:774 * #I2:53
 33F4:45A0 37F5:0590  1422: #L5:159 = #L3:157 + #L4:158
 33F4:45AE 37F5:059E  1436: #L6:160 = #L5:159 + #I100:19
 33F4:45BC 37F5:05AC  1450: #L7:161 = Trial_length:2295 < #L6:160
 33F4:45CA 37F5:05BA  1464: IFnot (#L7:161) GOTO .+132 (goto 1596)
 33F4:45D2 37F5:05C2  1472: #L8:162 = Max_Holdtime:1338 + Max_SOA:1359
 33F4:45E0 37F5:05D0  1486: #L9:163 = #L8:162 + Cancl_time:815
 33F4:45EE 37F5:05DE  1500: #L10:147 = #L9:163 + Tone_Duration:2282
 33F4:45FC 37F5:05EC  1514: #L11:148 = #L10:147 + Reward_Offset:1932
 33F4:460A 37F5:05FA  1528: #L12:149 = Base_Reward_time:774 * #I2:53
 33F4:4618 37F5:0608  1542: #L13:150 = #L11:148 + #L12:149
 33F4:4626 37F5:0616  1556: Trial_length:2295 = #L13:150 + #I100:19
 33F4:4634 37F5:0624  1570: #L0 = CALL1 printf(#S16:336)
 33F4:463C 37F5:062C  1578: #L0 = CALL1 printf(#S17:347)
 33F4:4644 37F5:0634  1586: #L0 = CALL2 printf(#S18:358,Trial_length:2295)
 33F4:464E 37F5:063E  1596: #L0:145 = Set_Tones:2046 == #I1:17
 33F4:465C 37F5:064C  1610: IFnot (#L0:145) GOTO .+72 (goto 1682)
 33F4:4664 37F5:0654  1618: Success_Tone_bigR:2190 = #I3200:78
 33F4:466E 37F5:065E  1628: Success_Tone_medR:2191 = #I1600:45
 33F4:4678 37F5:0668  1638: Success_Tone_smlR:2192 = #I800:135
 33F4:4682 37F5:0672  1648: Failure_Tone_smlP:1055 = #I400:89
 33F4:468C 37F5:067C  1658: Failure_Tone_medP:1054 = #I200:55
 33F4:4696 37F5:0686  1668: Failure_Tone_bigP:1053 = #I100:19
 33F4:46A0 37F5:0690  1678: GOTO .+64 (goto 1742)
 33F4:46A4 37F5:0694  1682: Success_Tone_bigR:2190 = #I100:19
 33F4:46AE 37F5:069E  1692: Success_Tone_medR:2191 = #I200:55
 33F4:46B8 37F5:06A8  1702: Success_Tone_smlR:2192 = #I400:89
 33F4:46C2 37F5:06B2  1712: Failure_Tone_smlP:1055 = #I800:135
 33F4:46CC 37F5:06BC  1722: Failure_Tone_medP:1054 = #I1600:45
 33F4:46D6 37F5:06C6  1732: Failure_Tone_bigP:1053 = #I3200:78

PROCESS   3: STIM (Args=1 CtrlBlk=33F4:1CE8 Size= 70  iOp=2-71 iCache=14292-14361) DISABLED
 33F4:4012 37F5:0002     0: channel@3:832 = #P1:241
 33F4:401C 37F5:000C    10: #L0 = CALL2 mio_dig_set(channel@3:832,on@3:1535)
 33F4:4026 37F5:0016    20: WAIT #I2:53
 33F4:402A 37F5:001A    24: #L0 = CALL2 mio_dig_set(channel@3:832,off@3:1525)
 33F4:4034 37F5:0024    34: Event_fifo:1019[Set_event:2041] = Stimulation_:2152
 33F4:403C 37F5:002C    42: #L0:145 = Set_event:2041 + #I1:17
 33F4:404A 37F5:003A    56: Set_event:2041 = #L0:145 % Event_fifo_N:1020

PROCESS   4: KEY_STIM (Args=0 CtrlBlk=33F4:1D14 Size= 16  iOp=2-17 iCache=14362-14377) DISABLED
 33F4:4012 37F5:0002     0: #P1:241 = Stim_channel:2121
 33F4:401C 37F5:000C    10: SPAWN STIM:2120(with 1 args)

PROCESS   5: SET_CLRS (Args=1 CtrlBlk=33F4:1D40 Size=626  iOp=2-627 iCache=14378-15003) DISABLED
 33F4:4012 37F5:0002     0: n_targ_pos@5:1408 = #P1:241
 33F4:401C 37F5:000C    10: r_@5:1856 = #I0:16
 33F4:4026 37F5:0016    20: g_@5:1180 = #I1:17
 33F4:4030 37F5:0020    30: b_@5:772 = #I2:53
 33F4:403A 37F5:002A    40: color_num@5:852 = #I0:16
 33F4:4044 37F5:0034    50: #L0:145 = color_num@5:852 <= n_targ_pos@5:1408
 33F4:4052 37F5:0042    64: IFnot (#L0:145) GOTO .+88 (goto 152)
 33F4:405A 37F5:004A    72: #L1:146 = color_num@5:852 + #I1:17
 33F4:4068 37F5:0058    86: #L2:156 = Color_list:850[color_num@5:852,r_@5:1856]
 33F4:4072 37F5:0062    96: #L3:157 = Color_list:850[color_num@5:852,g_@5:1180]
 33F4:407C 37F5:006C   106: #L4:158 = Color_list:850[color_num@5:852,b_@5:772]
 33F4:4086 37F5:0076   116: #L5 = CALL5 dSendf(#S19:369,#L1:146,#L2:156,#L3:157,#L4:158)
 33F4:4096 37F5:0086   132: color_num@5:852 = color_num@5:852 + #I1:17
 33F4:40A4 37F5:0094   146: NEXTTICK1
 33F4:40A6 37F5:0096   148: GOTO .-98 (goto 50)
 33F4:40AA 37F5:009A   152: #L0:145 = SingCol:2074 == #I0:16
 33F4:40B8 37F5:00A8   166: IFnot (#L0:145) GOTO .+36 (goto 202)
 33F4:40C0 37F5:00B0   174: Singleton_color:2076[r_@5:1856] = #I63:126
 33F4:40C8 37F5:00B8   182: Singleton_color:2076[g_@5:1180] = #I0:16
 33F4:40D0 37F5:00C0   190: Singleton_color:2076[b_@5:772] = #I0:16
 33F4:40D8 37F5:00C8   198: GOTO .+200 (goto 398)
 33F4:40DC 37F5:00CC   202: #L0:145 = SingCol:2074 == #I1:17
 33F4:40EA 37F5:00DA   216: IFnot (#L0:145) GOTO .+36 (goto 252)
 33F4:40F2 37F5:00E2   224: Singleton_color:2076[r_@5:1856] = #I0:16
 33F4:40FA 37F5:00EA   232: Singleton_color:2076[g_@5:1180] = #I36:84
 33F4:4102 37F5:00F2   240: Singleton_color:2076[b_@5:772] = #I0:16
 33F4:410A 37F5:00FA   248: GOTO .+150 (goto 398)
 33F4:410E 37F5:00FE   252: #L0:145 = SingCol:2074 == #I2:53
 33F4:411C 37F5:010C   266: IFnot (#L0:145) GOTO .+36 (goto 302)
 33F4:4124 37F5:0114   274: Singleton_color:2076[r_@5:1856] = #I0:16
 33F4:412C 37F5:011C   282: Singleton_color:2076[g_@5:1180] = #I0:16
 33F4:4134 37F5:0124   290: Singleton_color:2076[b_@5:772] = #I59:119
 33F4:413C 37F5:012C   298: GOTO .+100 (goto 398)
 33F4:4140 37F5:0130   302: #L0:145 = SingCol:2074 == #I3:74
 33F4:414E 37F5:013E   316: IFnot (#L0:145) GOTO .+36 (goto 352)
 33F4:4156 37F5:0146   324: Singleton_color:2076[r_@5:1856] = #I100:19
 33F4:415E 37F5:014E   332: Singleton_color:2076[g_@5:1180] = #I100:19
 33F4:4166 37F5:0156   340: Singleton_color:2076[b_@5:772] = #I0:16
 33F4:416E 37F5:015E   348: GOTO .+50 (goto 398)
 33F4:4172 37F5:0162   352: #L0:145 = SingCol:2074 == #I4:87
 33F4:4180 37F5:0170   366: IFnot (#L0:145) GOTO .+32 (goto 398)
 33F4:4188 37F5:0178   374: Singleton_color:2076[r_@5:1856] = #I255:68
 33F4:4190 37F5:0180   382: Singleton_color:2076[g_@5:1180] = #I33:80
 33F4:4198 37F5:0188   390: Singleton_color:2076[b_@5:772] = #I255:68
 33F4:41A0 37F5:0190   398: #L0:145 = Fixation_color:1117[r_@5:1856]
 33F4:41A8 37F5:0198   406: #L1:146 = Fixation_color:1117[g_@5:1180]
 33F4:41B0 37F5:01A0   414: #L2:156 = Fixation_color:1117[b_@5:772]
 33F4:41B8 37F5:01A8   422: #L3 = CALL4 dSendf(#S20:381,#L0:145,#L1:146,#L2:156)
 33F4:41C6 37F5:01B6   436: #L0:145 = Stop_sig_color:2153[r_@5:1856]
 33F4:41CE 37F5:01BE   444: #L1:146 = Stop_sig_color:2153[g_@5:1180]
 33F4:41D6 37F5:01C6   452: #L2:156 = Stop_sig_color:2153[b_@5:772]
 33F4:41DE 37F5:01CE   460: #L3 = CALL4 dSendf(#S21:392,#L0:145,#L1:146,#L2:156)
 33F4:41EC 37F5:01DC   474: #L0:145 = Ignore_sig_color:1248[r_@5:1856]
 33F4:41F4 37F5:01E4   482: #L1:146 = Ignore_sig_color:1248[g_@5:1180]
 33F4:41FC 37F5:01EC   490: #L2:156 = Ignore_sig_color:1248[b_@5:772]
 33F4:4204 37F5:01F4   498: #L3 = CALL4 dSendf(#S22:403,#L0:145,#L1:146,#L2:156)
 33F4:4212 37F5:0202   512: #L0:145 = Mask_sig_color:1335[r_@5:1856]
 33F4:421A 37F5:020A   520: #L1:146 = Mask_sig_color:1335[g_@5:1180]
 33F4:4222 37F5:0212   528: #L2:156 = Mask_sig_color:1335[b_@5:772]
 33F4:422A 37F5:021A   536: #L3 = CALL4 dSendf(#S23:414,#L0:145,#L1:146,#L2:156)
 33F4:4238 37F5:0228   550: #L0:145 = Singleton_color:2076[r_@5:1856]
 33F4:4240 37F5:0230   558: #L1:146 = Singleton_color:2076[g_@5:1180]
 33F4:4248 37F5:0238   566: #L2:156 = Singleton_color:2076[b_@5:772]
 33F4:4250 37F5:0240   574: #L3 = CALL4 dSendf(#S24:425,#L0:145,#L1:146,#L2:156)
 33F4:425E 37F5:024E   588: #L0:145 = NonSingleton_color:1455[r_@5:1856]
 33F4:4266 37F5:0256   596: #L1:146 = NonSingleton_color:1455[g_@5:1180]
 33F4:426E 37F5:025E   604: #L2:156 = NonSingleton_color:1455[b_@5:772]
 33F4:4276 37F5:0266   612: #L3 = CALL4 dSendf(#S25:436,#L0:145,#L1:146,#L2:156)

PROCESS   6: SET_COOR (Args=5 CtrlBlk=33F4:1D6C Size=286  iOp=2-287 iCache=15004-15289) DISABLED
 33F4:4012 37F5:0002     0: scr_width@6:2021 = F= scr_width@6:2021
 33F4:401C 37F5:000C    10: scr_height@6:2006 = F= scr_height@6:2006
 33F4:4026 37F5:0016    20: subj_dist@6:2178 = F= subj_dist@6:2178
 33F4:4030 37F5:0020    30: scr_pixX@6:2015 = #P4:248
 33F4:403A 37F5:002A    40: scr_pixY@6:2018 = #P5:249
 33F4:4044 37F5:0034    50: half_width@6:1226 = scr_width@6:2021 F/ #I2:53
 33F4:4052 37F5:0042    64: half_height@6:1220 = scr_height@6:2006 F/ #I2:53
 33F4:4060 37F5:0050    78: #F0:1 = half_width@6:1226 F/ subj_dist@6:2178
 33F4:406E 37F5:005E    92: #F1 = CALL1 atan(#F0:1)
 33F4:4076 37F5:0066   100: deg_x = CALL1 rad2deg(#F1:2)
 33F4:407E 37F5:006E   108: #F0:1 = half_height@6:1220 F/ subj_dist@6:2178
 33F4:408C 37F5:007C   122: #F1 = CALL1 atan(#F0:1)
 33F4:4094 37F5:0084   130: deg_y = CALL1 rad2deg(#F1:2)
 33F4:409C 37F5:008C   138: #L0:145 = scr_pixX@6:2015 / #I2:53
 33F4:40AA 37F5:009A   152: half_width@6:1226 = F= half_width@6:1226
 33F4:40B4 37F5:00A4   162: #L0:145 = scr_pixY@6:2018 / #I2:53
 33F4:40C2 37F5:00B2   176: half_height@6:1220 = F= half_height@6:1220
 33F4:40CC 37F5:00BC   186: #F0:1 = #I-1:7 F* half_width@6:1226
 33F4:40DA 37F5:00CA   200: #F1:2 = #I-1:7 F* half_height@6:1220
 33F4:40E8 37F5:00D8   214: #L0 = CALL5 dSendf(#S26:447,#F0:1,half_width@6:1226,half_height@6:1220,#F1:2)
 33F4:40F8 37F5:00E8   230: Deg2Pix_X:954 = half_width@6:1226 F/ deg_x@6:978
 33F4:4106 37F5:00F6   244: Deg2Pix_Y:966 = half_height@6:1220 F/ deg_y@6:979
 33F4:4114 37F5:0104   258: Unit2Pix_X:2335 = scr_pixX@6:2015 F/ scr_width@6:2021
 33F4:4122 37F5:0112   272: Unit2Pix_Y:2343 = scr_pixY@6:2018 F/ scr_height@6:2006

PROCESS   7: GRAPHS (Args=4 CtrlBlk=33F4:1D98 Size=314  iOp=2-315 iCache=15290-15603) DISABLED
 33F4:4012 37F5:0002     0: scr_pixX@7:2016 = #P1:241
 33F4:401C 37F5:000C    10: scr_pixY@7:2019 = #P2:246
 33F4:4026 37F5:0016    20: deg2pix_X@7:955 = F= deg2pix_X@7:955
 33F4:4030 37F5:0020    30: deg2pix_Y@7:967 = F= deg2pix_Y@7:967
 33F4:403A 37F5:002A    40: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:4044 37F5:0034    50: left@7:1314 = scr_pixX@7:2016 / #I-2:10
 33F4:4052 37F5:0042    64: right@7:1936 = scr_pixX@7:2016 / #I2:53
 33F4:4060 37F5:0050    78: up@7:2351 = scr_pixY@7:2019 / #I-2:10
 33F4:406E 37F5:005E    92: down@7:991 = scr_pixY@7:2019 / #I2:53
 33F4:407C 37F5:006C   106: #L0 = CALL6 oSetGraph(gLEFT:1182,aRANGE:757,left@7:1314,right@7:1936,up@7:2351,down@7:991)
 33F4:408E 37F5:007E   124: #L0 = CALL3 oSetGraph(gLEFT:1182,aTITLE:763,#S27:458)
 33F4:409A 37F5:008A   136: object_fixwin = CALL4 oCreate(tBOX:2263,gLEFT:1182,#I0:16,#I0:16)
 33F4:40A8 37F5:0098   150: #L0 = CALL2 oSetAttribute(object_fixwin:1469,aINVISIBLE:726)
 33F4:40B2 37F5:00A2   160: object_targwin = CALL4 oCreate(tBOX:2263,gLEFT:1182,#I0:16,#I0:16)
 33F4:40C0 37F5:00B0   174: #L0 = CALL2 oSetAttribute(object_targwin:1523,aINVISIBLE:726)
 33F4:40CA 37F5:00BA   184: object_fix = CALL4 oCreate(tBOX:2263,gLEFT:1182,#I0:16,#I0:16)
 33F4:40D8 37F5:00C8   198: #L0 = CALL2 oSetAttribute(object_fix:1463,aFILLED:725)
 33F4:40E2 37F5:00D2   208: #L0 = CALL2 oSetAttribute(object_fix:1463,aINVISIBLE:726)
 33F4:40EC 37F5:00DC   218: object_targ = CALL4 oCreate(tBOX:2263,gLEFT:1182,#I0:16,#I0:16)
 33F4:40FA 37F5:00EA   232: #L0 = CALL2 oSetAttribute(object_targ:1513,aFILLED:725)
 33F4:4104 37F5:00F4   242: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:410E 37F5:00FE   252: #F0:1 = #I2:53 F* deg2pix_X@7:955
 33F4:411C 37F5:010C   266: #L1:146 = #I2:53 F* deg2pix_Y@7:967
 33F4:412A 37F5:011A   280: #L2:156 = F= #L2:156
 33F4:4134 37F5:0124   290: object_eye = CALL4 oCreate(tCROSS:2264,gLEFT:1182,#L2:156,#L1:146)
 33F4:4142 37F5:0132   304: #L0 = CALL2 oSetAttribute(object_eye:1462,aVISIBLE:769)

PROCESS   8: SET_INH (Args=3 CtrlBlk=33F4:1DC4 Size=798  iOp=2-799 iCache=15604-16401) DISABLED
 33F4:4012 37F5:0002     0: max_ssd@8:1364 = #P1:241
 33F4:401C 37F5:000C    10: min_ssd@8:1386 = #P2:246
 33F4:4026 37F5:0016    20: n_ssds@8:1403 = #P3:247
 33F4:4030 37F5:0020    30: FirstStopTrial:1071 = #I1:17
 33F4:403A 37F5:002A    40: #L0:145 = max_ssd@8:1364 - min_ssd@8:1386
 33F4:4048 37F5:0038    54: ssd_range@8:2101 = #L0:145 * #I1000:20
 33F4:4056 37F5:0046    68: #L0 = CALL2 oSetGraph(gRIGHT:1219,aCLEAR:717)
 33F4:4060 37F5:0050    78: #L0:145 = min_ssd@8:1386 == max_ssd@8:1364
 33F4:406E 37F5:005E    92: IFnot (#L0:145) GOTO .+18 (goto 110)
 33F4:4076 37F5:0066   100: ssd_range@8:2101 = #I200000:57
 33F4:4080 37F5:0070   110: #L0:145 = min_ssd@8:1386 * #I1000:20
 33F4:408E 37F5:007E   124: #L1:146 = ssd_range@8:2101 / #I40:88
 33F4:409C 37F5:008C   138: inh_left@8:1280 = #L0:145 - #L1:146
 33F4:40AA 37F5:009A   152: #L0:145 = max_ssd@8:1364 * #I1000:20
 33F4:40B8 37F5:00A8   166: #L1:146 = ssd_range@8:2101 / #I40:88
 33F4:40C6 37F5:00B6   180: inh_right@8:1281 = #L0:145 + #L1:146
 33F4:40D4 37F5:00C4   194: #L0 = CALL6 oSetGraph(gRIGHT:1219,aRANGE:757,inh_left@8:1280,inh_right@8:1281,#I1025:24,#I-25:11)
 33F4:40E6 37F5:00D6   212: inh_box_size@8:1279 = ssd_range@8:2101 / #I20:54
 33F4:40F4 37F5:00E4   226: #L0 = CALL3 oSetGraph(gRIGHT:1219,aTITLE:763,#S28:469)
 33F4:4100 37F5:00F0   238: object_ssd0 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:410E 37F5:00FE   252: #L0 = CALL2 oSetAttribute(object_ssd0:1493,aINVISIBLE:726)
 33F4:4118 37F5:0108   262: object_ssd1 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:4126 37F5:0116   276: #L0 = CALL2 oSetAttribute(object_ssd1:1494,aINVISIBLE:726)
 33F4:4130 37F5:0120   286: object_ssd2 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:413E 37F5:012E   300: #L0 = CALL2 oSetAttribute(object_ssd2:1505,aINVISIBLE:726)
 33F4:4148 37F5:0138   310: object_ssd3 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:4156 37F5:0146   324: #L0 = CALL2 oSetAttribute(object_ssd3:1506,aINVISIBLE:726)
 33F4:4160 37F5:0150   334: object_ssd4 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:416E 37F5:015E   348: #L0 = CALL2 oSetAttribute(object_ssd4:1507,aINVISIBLE:726)
 33F4:4178 37F5:0168   358: object_ssd5 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:4186 37F5:0176   372: #L0 = CALL2 oSetAttribute(object_ssd5:1508,aINVISIBLE:726)
 33F4:4190 37F5:0180   382: object_ssd6 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:419E 37F5:018E   396: #L0 = CALL2 oSetAttribute(object_ssd6:1509,aINVISIBLE:726)
 33F4:41A8 37F5:0198   406: object_ssd7 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:41B6 37F5:01A6   420: #L0 = CALL2 oSetAttribute(object_ssd7:1510,aINVISIBLE:726)
 33F4:41C0 37F5:01B0   430: object_ssd8 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:41CE 37F5:01BE   444: #L0 = CALL2 oSetAttribute(object_ssd8:1511,aINVISIBLE:726)
 33F4:41D8 37F5:01C8   454: object_ssd9 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:41E6 37F5:01D6   468: #L0 = CALL2 oSetAttribute(object_ssd9:1512,aINVISIBLE:726)
 33F4:41F0 37F5:01E0   478: object_ssd10 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:41FE 37F5:01EE   492: #L0 = CALL2 oSetAttribute(object_ssd10:1495,aINVISIBLE:726)
 33F4:4208 37F5:01F8   502: object_ssd11 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:4216 37F5:0206   516: #L0 = CALL2 oSetAttribute(object_ssd11:1496,aINVISIBLE:726)
 33F4:4220 37F5:0210   526: object_ssd12 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:422E 37F5:021E   540: #L0 = CALL2 oSetAttribute(object_ssd12:1497,aINVISIBLE:726)
 33F4:4238 37F5:0228   550: object_ssd13 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:4246 37F5:0236   564: #L0 = CALL2 oSetAttribute(object_ssd13:1498,aINVISIBLE:726)
 33F4:4250 37F5:0240   574: object_ssd14 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:425E 37F5:024E   588: #L0 = CALL2 oSetAttribute(object_ssd14:1499,aINVISIBLE:726)
 33F4:4268 37F5:0258   598: object_ssd15 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:4276 37F5:0266   612: #L0 = CALL2 oSetAttribute(object_ssd15:1500,aINVISIBLE:726)
 33F4:4280 37F5:0270   622: object_ssd16 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:428E 37F5:027E   636: #L0 = CALL2 oSetAttribute(object_ssd16:1501,aINVISIBLE:726)
 33F4:4298 37F5:0288   646: object_ssd17 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:42A6 37F5:0296   660: #L0 = CALL2 oSetAttribute(object_ssd17:1502,aINVISIBLE:726)
 33F4:42B0 37F5:02A0   670: object_ssd18 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:42BE 37F5:02AE   684: #L0 = CALL2 oSetAttribute(object_ssd18:1503,aINVISIBLE:726)
 33F4:42C8 37F5:02B8   694: object_ssd19 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_box_size@8:1279,#I50:112)
 33F4:42D6 37F5:02C6   708: #L0 = CALL2 oSetAttribute(object_ssd19:1504,aINVISIBLE:726)
 33F4:42E0 37F5:02D0   718: object_30_70 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,inh_right@8:1281,#I400:89)
 33F4:42EE 37F5:02DE   732: #L0 = CALL3 oSetAttribute(object_30_70:1461,aVISIBLE:769,aUNFILLED:764)
 33F4:42FA 37F5:02EA   744: #L0:145 = inh_right@8:1281 - inh_left@8:1280
 33F4:4308 37F5:02F8   758: #L1:146 = #L0:145 / #I2:53
 33F4:4316 37F5:0306   772: #L2:156 = inh_left@8:1280 + #L1:146
 33F4:4324 37F5:0314   786: #L3 = CALL3 oMove(object_30_70:1461,#L2:156,#I500:113)

PROCESS   9: SET_SOA (Args=3 CtrlBlk=33F4:1DF0 Size=656  iOp=2-657 iCache=16402-17057) DISABLED
 33F4:4012 37F5:0002     0: max_soa@9:1360 = #P1:241
 33F4:401C 37F5:000C    10: min_soa@9:1382 = #P2:246
 33F4:4026 37F5:0016    20: n_soas@9:1400 = #P3:247
 33F4:4030 37F5:0020    30: FirstSOATrial:1070 = #I1:17
 33F4:403A 37F5:002A    40: soa_range@9:2092 = max_soa@9:1360 - min_soa@9:1382
 33F4:4048 37F5:0038    54: #L0 = CALL2 oSetGraph(gRIGHT:1219,aCLEAR:717)
 33F4:4052 37F5:0042    64: #L0:145 = min_soa@9:1382 == max_soa@9:1360
 33F4:4060 37F5:0050    78: IFnot (#L0:145) GOTO .+18 (goto 96)
 33F4:4068 37F5:0058    86: soa_range@9:2092 = #I200000:57
 33F4:4072 37F5:0062    96: soa_left@9:2089 = #I500:113
 33F4:407C 37F5:006C   106: soa_right@9:2093 = #I1500:43
 33F4:4086 37F5:0076   116: #L0 = CALL2 print(#S29:480,soa_left@9:2089)
 33F4:4090 37F5:0080   126: #L0 = CALL2 print(#S30:492,soa_right@9:2093)
 33F4:409A 37F5:008A   136: #L0 = CALL6 oSetGraph(gRIGHT:1219,aRANGE:757,soa_left@9:2089,soa_right@9:2093,#I500:113,#I100:19)
 33F4:40AC 37F5:009C   154: soa_box_size@9:2085 = #I15:41
 33F4:40B6 37F5:00A6   164: #L0 = CALL3 oSetGraph(gRIGHT:1219,aTITLE:763,#S31:503)
 33F4:40C2 37F5:00B2   176: object_soa0 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:40D0 37F5:00C0   190: #L0 = CALL2 oSetAttribute(object_soa0:1473,aVISIBLE:769)
 33F4:40DA 37F5:00CA   200: object_soa1 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:40E8 37F5:00D8   214: #L0 = CALL2 oSetAttribute(object_soa1:1474,aINVISIBLE:726)
 33F4:40F2 37F5:00E2   224: object_soa2 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4100 37F5:00F0   238: #L0 = CALL2 oSetAttribute(object_soa2:1485,aINVISIBLE:726)
 33F4:410A 37F5:00FA   248: object_soa3 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4118 37F5:0108   262: #L0 = CALL2 oSetAttribute(object_soa3:1486,aINVISIBLE:726)
 33F4:4122 37F5:0112   272: object_soa4 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4130 37F5:0120   286: #L0 = CALL2 oSetAttribute(object_soa4:1487,aINVISIBLE:726)
 33F4:413A 37F5:012A   296: object_soa5 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4148 37F5:0138   310: #L0 = CALL2 oSetAttribute(object_soa5:1488,aINVISIBLE:726)
 33F4:4152 37F5:0142   320: object_soa6 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4160 37F5:0150   334: #L0 = CALL2 oSetAttribute(object_soa6:1489,aINVISIBLE:726)
 33F4:416A 37F5:015A   344: object_soa7 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4178 37F5:0168   358: #L0 = CALL2 oSetAttribute(object_soa7:1490,aINVISIBLE:726)
 33F4:4182 37F5:0172   368: object_soa8 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4190 37F5:0180   382: #L0 = CALL2 oSetAttribute(object_soa8:1491,aINVISIBLE:726)
 33F4:419A 37F5:018A   392: object_soa9 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:41A8 37F5:0198   406: #L0 = CALL2 oSetAttribute(object_soa9:1492,aINVISIBLE:726)
 33F4:41B2 37F5:01A2   416: object_soa10 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:41C0 37F5:01B0   430: #L0 = CALL2 oSetAttribute(object_soa10:1475,aINVISIBLE:726)
 33F4:41CA 37F5:01BA   440: object_soa11 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:41D8 37F5:01C8   454: #L0 = CALL2 oSetAttribute(object_soa11:1476,aINVISIBLE:726)
 33F4:41E2 37F5:01D2   464: object_soa12 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:41F0 37F5:01E0   478: #L0 = CALL2 oSetAttribute(object_soa12:1477,aINVISIBLE:726)
 33F4:41FA 37F5:01EA   488: object_soa13 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4208 37F5:01F8   502: #L0 = CALL2 oSetAttribute(object_soa13:1478,aINVISIBLE:726)
 33F4:4212 37F5:0202   512: object_soa14 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4220 37F5:0210   526: #L0 = CALL2 oSetAttribute(object_soa14:1479,aINVISIBLE:726)
 33F4:422A 37F5:021A   536: object_soa15 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4238 37F5:0228   550: #L0 = CALL2 oSetAttribute(object_soa15:1480,aINVISIBLE:726)
 33F4:4242 37F5:0232   560: object_soa16 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4250 37F5:0240   574: #L0 = CALL2 oSetAttribute(object_soa16:1481,aINVISIBLE:726)
 33F4:425A 37F5:024A   584: object_soa17 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4268 37F5:0258   598: #L0 = CALL2 oSetAttribute(object_soa17:1482,aINVISIBLE:726)
 33F4:4272 37F5:0262   608: object_soa18 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4280 37F5:0270   622: #L0 = CALL2 oSetAttribute(object_soa18:1483,aINVISIBLE:726)
 33F4:428A 37F5:027A   632: object_soa19 = CALL4 oCreate(tBOX:2263,gRIGHT:1219,soa_box_size@9:2085,#I15:41)
 33F4:4298 37F5:0288   646: #L0 = CALL2 oSetAttribute(object_soa19:1484,aINVISIBLE:726)

PROCESS  10: SET_SCH (Args=0 CtrlBlk=33F4:1E1C Size= 98  iOp=2-99 iCache=17058-17155) DISABLED
 33F4:4012 37F5:0002     0: FirstSearchTrial:1069 = #I1:17
 33F4:401C 37F5:000C    10: #L0 = CALL2 oSetGraph(gRIGHT:1219,aCLEAR:717)
 33F4:4026 37F5:0016    20: #L0 = CALL6 oSetGraph(gRIGHT:1219,aRANGE:757,#I-1000:8,#I1000:20,#I-1000:8,#I1000:20)
 33F4:4038 37F5:0028    38: #L0 = CALL3 oSetGraph(gRIGHT:1219,aTITLE:763,#S32:514)
 33F4:4044 37F5:0034    50: object_repeat = CALL4 oCreate(tBOX:2263,gRIGHT:1219,#I100:19,#I100:19)
 33F4:4052 37F5:0042    64: #L0 = CALL2 oSetAttribute(object_repeat:1472,aINVISIBLE:726)
 33F4:405C 37F5:004C    74: object_random = CALL4 oCreate(tBOX:2263,gRIGHT:1219,#I100:19,#I100:19)
 33F4:406A 37F5:005A    88: #L0 = CALL2 oSetAttribute(object_random:1471,aINVISIBLE:726)

PROCESS  11: WINDOWS (Args=7 CtrlBlk=33F4:1E48 Size=680  iOp=2-681 iCache=17156-17835) DISABLED
 33F4:4012 37F5:0002     0: curr_target@11:895 = #P1:241
 33F4:401C 37F5:000C    10: fix_win_size@11:1093 = F= fix_win_size@11:1093
 33F4:4026 37F5:0016    20: targ_win_size@11:2222 = F= targ_win_size@11:2222
 33F4:4030 37F5:0020    30: object_fixwin@11:1470 = #P4:248
 33F4:403A 37F5:002A    40: object_targwin@11:1524 = #P5:249
 33F4:4044 37F5:0034    50: deg2pix_X@11:956 = F= deg2pix_X@11:956
 33F4:404E 37F5:003E    60: deg2pix_Y@11:968 = F= deg2pix_Y@11:968
 33F4:4058 37F5:0048    70: Fix_win_left:1088 = fix_win_size@11:1093 F/ #I-2:10
 33F4:4066 37F5:0056    84: Fix_win_right:1090 = fix_win_size@11:1093 F/ #I2:53
 33F4:4074 37F5:0064    98: Fix_win_down:1086 = fix_win_size@11:1093 F/ #I2:53
 33F4:4082 37F5:0072   112: Fix_win_up:1094 = fix_win_size@11:1093 F/ #I-2:10
 33F4:4090 37F5:0080   126: #L0:145 = State:2116 == run_search_sess:1982
 33F4:409E 37F5:008E   140: IFnot (#L0:145) GOTO .+32 (goto 172)
 33F4:40A6 37F5:0096   148: angle@11:737 = F= angle@11:737
 33F4:40B0 37F5:00A0   158: eccentricity@11:1006 = F= eccentricity@11:1006
 33F4:40BA 37F5:00AA   168: GOTO .+40 (goto 208)
 33F4:40BE 37F5:00AE   172: #F0:1 = Angle_list:743[curr_target@11:895]
 33F4:40C6 37F5:00B6   180: angle@11:737 = F= angle@11:737
 33F4:40D0 37F5:00C0   190: #F0:1 = Eccentricity_list:1012[curr_target@11:895]
 33F4:40D8 37F5:00C8   198: eccentricity@11:1006 = F= eccentricity@11:1006
 33F4:40E2 37F5:00D2   208: #F0 = CALL1 cos(angle@11:737)
 33F4:40EA 37F5:00DA   216: stim_ecc_x@11:2122 = #F0:1 F* eccentricity@11:1006
 33F4:40F8 37F5:00E8   230: #F0 = CALL1 sin(angle@11:737)
 33F4:4100 37F5:00F0   238: #F1:2 = #F0:1 F* eccentricity@11:1006
 33F4:410E 37F5:00FE   252: stim_ecc_y@11:2134 = #F1:2 F* #I-1:7
 33F4:411C 37F5:010C   266: #F0:1 = stim_ecc_x@11:2122 F* deg2pix_X@11:956
 33F4:412A 37F5:011A   280: #L1:146 = stim_ecc_y@11:2134 F* deg2pix_Y@11:968
 33F4:4138 37F5:0128   294: #L2:156 = F= #L2:156
 33F4:4142 37F5:0132   304: #L0 = CALL3 oMove(object_targwin@11:1524,#L2:156,#L1:146)
 33F4:414E 37F5:013E   316: #F0:1 = stim_ecc_x@11:2122 F* deg2pix_X@11:956
 33F4:415C 37F5:014C   330: #L1:146 = stim_ecc_y@11:2134 F* deg2pix_Y@11:968
 33F4:416A 37F5:015A   344: #L2:156 = F= #L2:156
 33F4:4174 37F5:0164   354: #L0 = CALL3 oMove(object_targ:1513,#L2:156,#L1:146)
 33F4:4180 37F5:0170   366: half_size_tw@11:1225 = targ_win_size@11:2222 F/ #I2:53
 33F4:418E 37F5:017E   380: Targ_win_left:2217 = stim_ecc_x@11:2122 F- half_size_tw@11:1225
 33F4:419C 37F5:018C   394: Targ_win_down:2215 = stim_ecc_y@11:2134 F+ half_size_tw@11:1225
 33F4:41AA 37F5:019A   408: Targ_win_right:2219 = stim_ecc_x@11:2122 F+ half_size_tw@11:1225
 33F4:41B8 37F5:01A8   422: Targ_win_up:2223 = stim_ecc_y@11:2134 F- half_size_tw@11:1225
 33F4:41C6 37F5:01B6   436: #L0:145 = Trl_number:2305 == #I1:17
 33F4:41D4 37F5:01C4   450: #L1:146 = fix_win_size@11:1093 F!= old_fix_win_size@11:1531
 33F4:41E2 37F5:01D2   464: #L2:156 = #L0:145 || #L1:146
 33F4:41F0 37F5:01E0   478: IFnot (#L2:156) GOTO .+80 (goto 558)
 33F4:41F8 37F5:01E8   486: #F0:1 = fix_win_size@11:1093 F* deg2pix_X@11:956
 33F4:4206 37F5:01F6   500: #L4:158 = fix_win_size@11:1093 F* deg2pix_Y@11:968
 33F4:4214 37F5:0204   514: #L5:159 = F= #L5:159
 33F4:421E 37F5:020E   524: #L3 = CALL4 oSetAttribute(object_fixwin@11:1470,aSIZE:760,#L5:159,#L4:158)
 33F4:422C 37F5:021C   538: #L0 = CALL2 oSetAttribute(object_fixwin@11:1470,aVISIBLE:769)
 33F4:4236 37F5:0226   548: old_fix_win_size@11:1531 = F= old_fix_win_size@11:1531
 33F4:4240 37F5:0230   558: #L0:145 = Trl_number:2305 == #I1:17
 33F4:424E 37F5:023E   572: #L1:146 = targ_win_size@11:2222 F!= old_targ_win_size@11:1532
 33F4:425C 37F5:024C   586: #L2:156 = #L0:145 || #L1:146
 33F4:426A 37F5:025A   600: IFnot (#L2:156) GOTO .+80 (goto 680)
 33F4:4272 37F5:0262   608: #F0:1 = targ_win_size@11:2222 F* deg2pix_X@11:956
 33F4:4280 37F5:0270   622: #L4:158 = targ_win_size@11:2222 F* deg2pix_Y@11:968
 33F4:428E 37F5:027E   636: #L5:159 = F= #L5:159
 33F4:4298 37F5:0288   646: #L3 = CALL4 oSetAttribute(object_targwin@11:1524,aSIZE:760,#L5:159,#L4:158)
 33F4:42A6 37F5:0296   660: #L0 = CALL2 oSetAttribute(object_targwin@11:1524,aVISIBLE:769)
 33F4:42B0 37F5:02A0   670: old_targ_win_size@11:1532 = F= old_targ_win_size@11:1532

PROCESS  12: LOCATE_I (Args=10 CtrlBlk=33F4:1E74 Size=360  iOp=2-361 iCache=17836-18195) DISABLED
 33F4:4012 37F5:0002     0: eye_x@12:1034 = F= eye_x@12:1034
 33F4:401C 37F5:000C    10: eye_y@12:1038 = F= eye_y@12:1038
 33F4:4026 37F5:0016    20: fix_win_left@12:1089 = F= fix_win_left@12:1089
 33F4:4030 37F5:0020    30: fix_win_right@12:1091 = F= fix_win_right@12:1091
 33F4:403A 37F5:002A    40: fix_win_down@12:1087 = F= fix_win_down@12:1087
 33F4:4044 37F5:0034    50: fix_win_up@12:1095 = F= fix_win_up@12:1095
 33F4:404E 37F5:003E    60: targ_win_left@12:2218 = F= targ_win_left@12:2218
 33F4:4058 37F5:0048    70: targ_win_right@12:2220 = F= targ_win_right@12:2220
 33F4:4062 37F5:0052    80: targ_win_down@12:2216 = F= targ_win_down@12:2216
 33F4:406C 37F5:005C    90: targ_win_up@12:2224 = F= targ_win_up@12:2224
 33F4:4076 37F5:0066   100: #L0:145 = eye_x@12:1034 F>= fix_win_left@12:1089
 33F4:4084 37F5:0074   114: #L1:146 = eye_x@12:1034 F<= fix_win_right@12:1091
 33F4:4092 37F5:0082   128: #L2:156 = #L0:145 && #L1:146
 33F4:40A0 37F5:0090   142: #L3:157 = eye_y@12:1038 F<= fix_win_down@12:1087
 33F4:40AE 37F5:009E   156: #L4:158 = #L2:156 && #L3:157
 33F4:40BC 37F5:00AC   170: #L5:159 = eye_y@12:1038 F>= fix_win_up@12:1095
 33F4:40CA 37F5:00BA   184: #L6:160 = #L4:158 && #L5:159
 33F4:40D8 37F5:00C8   198: IFnot (#L6:160) GOTO .+22 (goto 220)
 33F4:40E0 37F5:00D0   206: In_FixWin:1270 = #I1:17
 33F4:40EA 37F5:00DA   216: GOTO .+14 (goto 230)
 33F4:40EE 37F5:00DE   220: In_FixWin:1270 = #I0:16
 33F4:40F8 37F5:00E8   230: #L0:145 = eye_x@12:1034 F>= targ_win_left@12:2218
 33F4:4106 37F5:00F6   244: #L1:146 = eye_x@12:1034 F<= targ_win_right@12:2220
 33F4:4114 37F5:0104   258: #L2:156 = #L0:145 && #L1:146
 33F4:4122 37F5:0112   272: #L3:157 = eye_y@12:1038 F<= targ_win_down@12:2216
 33F4:4130 37F5:0120   286: #L4:158 = #L2:156 && #L3:157
 33F4:413E 37F5:012E   300: #L5:159 = eye_y@12:1038 F>= targ_win_up@12:2224
 33F4:414C 37F5:013C   314: #L6:160 = #L4:158 && #L5:159
 33F4:415A 37F5:014A   328: IFnot (#L6:160) GOTO .+22 (goto 350)
 33F4:4162 37F5:0152   336: In_TargWin:1276 = #I1:17
 33F4:416C 37F5:015C   346: GOTO .+14 (goto 360)
 33F4:4170 37F5:0160   350: In_TargWin:1276 = #I0:16

PROCESS  13: WATCHEYE (Args=6 CtrlBlk=33F4:1EA0 Size=686  iOp=2-687 iCache=18196-18881) DISABLED
 33F4:4012 37F5:0002     0: eye_X_channel@13:1037 = #P1:241
 33F4:401C 37F5:000C    10: eye_Y_channel@13:1041 = #P2:246
 33F4:4026 37F5:0016    20: analogUnits@13:735 = F= analogUnits@13:735
 33F4:4030 37F5:0020    30: maxvoltage@13:1366 = F= maxvoltage@13:1366
 33F4:403A 37F5:002A    40: deg2pix_X@13:957 = F= deg2pix_X@13:957
 33F4:4044 37F5:0034    50: deg2pix_Y@13:969 = F= deg2pix_Y@13:969
 33F4:404E 37F5:003E    60: IFnot (#I1:17) GOTO .+626 (goto 686)
 33F4:4056 37F5:0046    68: #L0 = CALL1 atable(eye_X_channel@13:1037)
 33F4:405E 37F5:004E    76: eye_x@13:1035 = F= eye_x@13:1035
 33F4:4068 37F5:0058    86: #L0 = CALL1 atable(eye_Y_channel@13:1041)
 33F4:4070 37F5:0060    94: eye_y@13:1039 = F= eye_y@13:1039
 33F4:407A 37F5:006A   104: #F0:1 = maxvoltage@13:1366 F* #I2:53
 33F4:4088 37F5:0078   118: #F1:2 = #F0:1 F/ analogUnits@13:735
 33F4:4096 37F5:0086   132: #F2:3 = eye_x@13:1035 F* #F1:2
 33F4:40A4 37F5:0094   146: #F3:4 = #F2:3 F* X_Gain:2367
 33F4:40B2 37F5:00A2   160: eye_x@13:1035 = #F3:4 F- X_Offset:2368
 33F4:40C0 37F5:00B0   174: #F0:1 = maxvoltage@13:1366 F* #I2:53
 33F4:40CE 37F5:00BE   188: #F1:2 = #F0:1 F/ analogUnits@13:735
 33F4:40DC 37F5:00CC   202: #F2:3 = eye_y@13:1039 F* #F1:2
 33F4:40EA 37F5:00DA   216: #F3:4 = #F2:3 F* Y_Gain:2370
 33F4:40F8 37F5:00E8   230: eye_y@13:1039 = #F3:4 F- Y_Offset:2371
 33F4:4106 37F5:00F6   244: IFnot (CenterEyeNow:829) GOTO .+46 (goto 290)
 33F4:410E 37F5:00FE   252: X_Offset:2368 = X_Offset:2368 F+ eye_x@13:1035
 33F4:411C 37F5:010C   266: Y_Offset:2371 = Y_Offset:2371 F+ eye_y@13:1039
 33F4:412A 37F5:011A   280: CenterEyeNow:829 = #I0:16
 33F4:4134 37F5:0124   290: plot_x@13:1623 = eye_x@13:1035 F* deg2pix_X@13:957
 33F4:4142 37F5:0132   304: plot_y@13:1624 = eye_y@13:1039 F* deg2pix_Y@13:969
 33F4:4150 37F5:0140   318: #L0:145 = plot_x@13:1623 F!= oldx@13:1533
 33F4:415E 37F5:014E   332: #L1:146 = plot_y@13:1624 F!= oldy@13:1534
 33F4:416C 37F5:015C   346: #L2:156 = #L0:145 || #L1:146
 33F4:417A 37F5:016A   360: IFnot (#L2:156) GOTO .+320 (goto 680)
 33F4:4182 37F5:0172   368: #Q1:254 = F= #Q1:254
 33F4:418C 37F5:017C   378: #Q2:260 = F= #Q2:260
 33F4:4196 37F5:0186   388: #Q3:261 = F= #Q3:261
 33F4:41A0 37F5:0190   398: #Q4:262 = F= #Q4:262
 33F4:41AA 37F5:019A   408: #Q5:263 = F= #Q5:263
 33F4:41B4 37F5:01A4   418: #Q6:264 = F= #Q6:264
 33F4:41BE 37F5:01AE   428: #Q7:265 = F= #Q7:265
 33F4:41C8 37F5:01B8   438: #Q8:266 = F= #Q8:266
 33F4:41D2 37F5:01C2   448: #Q9:267 = F= #Q9:267
 33F4:41DC 37F5:01CC   458: #Q10:255 = F= #Q10:255
 33F4:41E6 37F5:01D6   468: SPAWN LOCATE_I:1323(with 10 args)
 33F4:41EC 37F5:01DC   474: #L0 = CALL0 time()
 33F4:41F2 37F5:01E2   480: #L1:146 = lasttime@13:1312 + #I16:44
 33F4:4200 37F5:01F0   494: #L2:156 = #L0:145 > #L1:146
 33F4:420E 37F5:01FE   508: IFnot (#L2:156) GOTO .+172 (goto 680)
 33F4:4216 37F5:0206   516: #L3 = CALL3 oMove(object_eye:1462,plot_x@13:1623,plot_y@13:1624)
 33F4:4222 37F5:0212   528: IFnot (Eye_on_VDOSync:1033) GOTO .+126 (goto 654)
 33F4:422A 37F5:021A   536: #L0 = CALL1 dSendf(#S33:525)
 33F4:4232 37F5:0222   544: #L0:145 = plot_x@13:1623 - #I4:87
 33F4:4240 37F5:0230   558: #L1:146 = #I-1:7 * plot_y@13:1624
 33F4:424E 37F5:023E   572: #L2:156 = #L1:146 - #I4:87
 33F4:425C 37F5:024C   586: #L3:157 = plot_x@13:1623 + #I3:74
 33F4:426A 37F5:025A   600: #L4:158 = #I-1:7 * plot_y@13:1624
 33F4:4278 37F5:0268   614: #L5:159 = #L4:158 + #I3:74
 33F4:4286 37F5:0276   628: #L6 = CALL5 dSendf(#S34:536,#L0:145,#L2:156,#L3:157,#L5:159)
 33F4:4296 37F5:0286   644: #L0 = CALL2 dSendf(#S35:547,#I5:111)
 33F4:42A0 37F5:0290   654: lasttime = CALL0 time()
 33F4:42A6 37F5:0296   660: oldx@13:1533 = F= oldx@13:1533
 33F4:42B0 37F5:02A0   670: oldy@13:1534 = F= oldy@13:1534
 33F4:42BA 37F5:02AA   680: NEXTTICK1
 33F4:42BC 37F5:02AC   682: GOTO .-622 (goto 60)

PROCESS  14: TONE (Args=2 CtrlBlk=33F4:1ECC Size= 54  iOp=2-55 iCache=18882-18935) DISABLED
 33F4:4012 37F5:0002     0: frequency@14:1178 = #P1:241
 33F4:401C 37F5:000C    10: duration@14:997 = #P2:246
 33F4:4026 37F5:0016    20: count@14:870 = #I10000000:22 / frequency@14:1178
 33F4:4034 37F5:0024    34: #L0 = CALL1 mio_fout(count@14:870)
 33F4:403C 37F5:002C    42: WAIT duration:997
 33F4:4040 37F5:0030    46: #L0 = CALL1 mio_fout(off@14:1526)

PROCESS  15: TONESWEP (Args=0 CtrlBlk=33F4:1EF8 Size=288  iOp=2-289 iCache=18936-19223) DISABLED
 33F4:4012 37F5:0002     0: #P1:241 = #I64000:127
 33F4:401C 37F5:000C    10: #P2:246 = #I10:18
 33F4:4026 37F5:0016    20: SPAWN TONE:2280(with 2 args)
 33F4:402C 37F5:001C    26: WAITFORPROCESS TONE:2280
 33F4:4032 37F5:0022    32: #P1:241 = #I32000:79
 33F4:403C 37F5:002C    42: #P2:246 = #I10:18
 33F4:4046 37F5:0036    52: SPAWN TONE:2280(with 2 args)
 33F4:404C 37F5:003C    58: WAITFORPROCESS TONE:2280
 33F4:4052 37F5:0042    64: #P1:241 = #I16000:46
 33F4:405C 37F5:004C    74: #P2:246 = #I10:18
 33F4:4066 37F5:0056    84: SPAWN TONE:2280(with 2 args)
 33F4:406C 37F5:005C    90: WAITFORPROCESS TONE:2280
 33F4:4072 37F5:0062    96: #P1:241 = #I8000:136
 33F4:407C 37F5:006C   106: #P2:246 = #I10:18
 33F4:4086 37F5:0076   116: SPAWN TONE:2280(with 2 args)
 33F4:408C 37F5:007C   122: WAITFORPROCESS TONE:2280
 33F4:4092 37F5:0082   128: #P1:241 = #I4000:90
 33F4:409C 37F5:008C   138: #P2:246 = #I10:18
 33F4:40A6 37F5:0096   148: SPAWN TONE:2280(with 2 args)
 33F4:40AC 37F5:009C   154: WAITFORPROCESS TONE:2280
 33F4:40B2 37F5:00A2   160: #P1:241 = #I2000:56
 33F4:40BC 37F5:00AC   170: #P2:246 = #I10:18
 33F4:40C6 37F5:00B6   180: SPAWN TONE:2280(with 2 args)
 33F4:40CC 37F5:00BC   186: WAITFORPROCESS TONE:2280
 33F4:40D2 37F5:00C2   192: #P1:241 = #I1000:20
 33F4:40DC 37F5:00CC   202: #P2:246 = #I10:18
 33F4:40E6 37F5:00D6   212: SPAWN TONE:2280(with 2 args)
 33F4:40EC 37F5:00DC   218: WAITFORPROCESS TONE:2280
 33F4:40F2 37F5:00E2   224: #P1:241 = #I500:113
 33F4:40FC 37F5:00EC   234: #P2:246 = #I10:18
 33F4:4106 37F5:00F6   244: SPAWN TONE:2280(with 2 args)
 33F4:410C 37F5:00FC   250: WAITFORPROCESS TONE:2280
 33F4:4112 37F5:0102   256: #P1:241 = #I250:66
 33F4:411C 37F5:010C   266: #P2:246 = #I10:18
 33F4:4126 37F5:0116   276: SPAWN TONE:2280(with 2 args)
 33F4:412C 37F5:011C   282: WAITFORPROCESS TONE:2280

PROCESS  16: WATCHMTH (Args=0 CtrlBlk=33F4:1F24 Size=404  iOp=2-405 iCache=19224-19627) DISABLED
 33F4:4012 37F5:0002     0: #L0 = CALL1 atable(mouth_channel@16:1390)
 33F4:401A 37F5:000A     8: #L1:146 = #L0:145 < mouth_thresh@16:1392
 33F4:4028 37F5:0018    22: IFnot (#L1:146) GOTO .+28 (goto 50)
 33F4:4030 37F5:0020    30: mouth_status@16:1391 = moving@16:1397
 33F4:403A 37F5:002A    40: last_status@16:1304 = moving@16:1397
 33F4:4044 37F5:0034    50: #L0:145 = CheckMouth:836 & CheckMotion:835
 33F4:4052 37F5:0042    64: IFnot (#L0:145) GOTO .+340 (goto 404)
 33F4:405A 37F5:004A    72: mouth = CALL1 atable(mouth_channel@16:1390)
 33F4:4062 37F5:0052    80: #L0:145 = mouth@16:1389 < mouth_thresh@16:1392
 33F4:4070 37F5:0060    94: IFnot (#L0:145) GOTO .+120 (goto 214)
 33F4:4078 37F5:0068   102: mouth_status@16:1391 = moving@16:1397
 33F4:4082 37F5:0072   112: IFnot (TrainingStill:2293) GOTO .+98 (goto 210)
 33F4:408A 37F5:007A   120: #L0 = CALL0 time()
 33F4:4090 37F5:0080   126: #L1:146 = mouth_time@16:1393 + #I200:55
 33F4:409E 37F5:008E   140: #L2:156 = #L0:145 > #L1:146
 33F4:40AC 37F5:009C   154: IFnot (#L2:156) GOTO .+56 (goto 210)
 33F4:40B4 37F5:00A4   162: SPAWN TONESWEP:2287(with 0 args)
 33F4:40BA 37F5:00AA   168: #L0:145 = Move_ct:1396 < Max_move_ct:1344
 33F4:40C8 37F5:00B8   182: IFnot (#L0:145) GOTO .+28 (goto 210)
 33F4:40D0 37F5:00C0   190: Move_ct:1396 = Move_ct:1396 + #I1:17
 33F4:40DE 37F5:00CE   204: mouth_time = CALL0 time()
 33F4:40E4 37F5:00D4   210: GOTO .+36 (goto 246)
 33F4:40E8 37F5:00D8   214: #L0:145 = mouth@16:1389 >= mouth_thresh@16:1392
 33F4:40F6 37F5:00E6   228: IFnot (#L0:145) GOTO .+18 (goto 246)
 33F4:40FE 37F5:00EE   236: mouth_status@16:1391 = still@16:2119
 33F4:4108 37F5:00F8   246: #L0:145 = mouth_status@16:1391 != last_status@16:1304
 33F4:4116 37F5:0106   260: IFnot (#L0:145) GOTO .+138 (goto 398)
 33F4:411E 37F5:010E   268: #L1:146 = mouth_status@16:1391 == moving@16:1397
 33F4:412C 37F5:011C   282: IFnot (#L1:146) GOTO .+48 (goto 330)
 33F4:4134 37F5:0124   290: Event_fifo:1019[Set_event:2041] = MouthBegin_:1394
 33F4:413C 37F5:012C   298: #L0:145 = Set_event:2041 + #I1:17
 33F4:414A 37F5:013A   312: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4158 37F5:0148   326: GOTO .+62 (goto 388)
 33F4:415C 37F5:014C   330: #L0:145 = mouth_status@16:1391 == still@16:2119
 33F4:416A 37F5:015A   344: IFnot (#L0:145) GOTO .+44 (goto 388)
 33F4:4172 37F5:0162   352: Event_fifo:1019[Set_event:2041] = MouthEnd_:1395
 33F4:417A 37F5:016A   360: #L0:145 = Set_event:2041 + #I1:17
 33F4:4188 37F5:0178   374: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4196 37F5:0186   388: last_status@16:1304 = mouth_status@16:1391
 33F4:41A0 37F5:0190   398: NEXTTICK1
 33F4:41A2 37F5:0192   400: GOTO .-350 (goto 50)

PROCESS  17: WATCHBOD (Args=0 CtrlBlk=33F4:1F50 Size=160  iOp=2-161 iCache=19628-19787) DISABLED
 33F4:4012 37F5:0002     0: #L0:145 = CheckBody:834 & CheckMotion:835
 33F4:4020 37F5:0010    14: IFnot (#L0:145) GOTO .+146 (goto 160)
 33F4:4028 37F5:0018    22: sample_n@17:2003 = #I0:16
 33F4:4032 37F5:0022    32: #L0:145 = sample_n@17:2003 < a_sets@17:714
 33F4:4040 37F5:0030    46: IFnot (#L0:145) GOTO .+108 (goto 154)
 33F4:4048 37F5:0038    54: #L1 = CALL3 ctable_set(body_channel@17:794,sample_n@17:2003,#I0:16)
 33F4:4054 37F5:0044    66: IFnot (#L1:146) GOTO .+70 (goto 136)
 33F4:405C 37F5:004C    74: #L2:156 = Move_ct:1396 < Max_move_ct:1344
 33F4:406A 37F5:005A    88: IFnot (#L2:156) GOTO .+22 (goto 110)
 33F4:4072 37F5:0062    96: Move_ct:1396 = Move_ct:1396 + #I1:17
 33F4:4080 37F5:0070   110: #P1:241 = Failure_tone:1051
 33F4:408A 37F5:007A   120: #P2:246 = Tone_Duration:2282
 33F4:4094 37F5:0084   130: SPAWN TONE:2280(with 2 args)
 33F4:409A 37F5:008A   136: sample_n@17:2003 = sample_n@17:2003 + #I1:17
 33F4:40A8 37F5:0098   150: GOTO .-118 (goto 32)
 33F4:40AC 37F5:009C   154: NEXTTICK1
 33F4:40AE 37F5:009E   156: GOTO .-156 (goto 0)

PROCESS  18: SVR_BELL (Args=0 CtrlBlk=33F4:1F7C Size=180  iOp=2-181 iCache=19788-19967) DISABLED
 33F4:4012 37F5:0002     0: #L0 = CALL1 sound(#I250:66)
 33F4:401A 37F5:000A     8: WAIT #I50:112
 33F4:401E 37F5:000E    12: #L0 = CALL1 sound(#I0:16)
 33F4:4026 37F5:0016    20: #L0 = CALL1 sound(#I500:113)
 33F4:402E 37F5:001E    28: WAIT #I50:112
 33F4:4032 37F5:0022    32: #L0 = CALL1 sound(#I0:16)
 33F4:403A 37F5:002A    40: #L0 = CALL1 sound(#I1000:20)
 33F4:4042 37F5:0032    48: WAIT #I50:112
 33F4:4046 37F5:0036    52: #L0 = CALL1 sound(#I0:16)
 33F4:404E 37F5:003E    60: #L0 = CALL1 sound(#I2000:56)
 33F4:4056 37F5:0046    68: WAIT #I50:112
 33F4:405A 37F5:004A    72: #L0 = CALL1 sound(#I0:16)
 33F4:4062 37F5:0052    80: #L0 = CALL1 sound(#I4000:90)
 33F4:406A 37F5:005A    88: WAIT #I50:112
 33F4:406E 37F5:005E    92: #L0 = CALL1 sound(#I0:16)
 33F4:4076 37F5:0066   100: #L0 = CALL1 sound(#I8000:136)
 33F4:407E 37F5:006E   108: WAIT #I50:112
 33F4:4082 37F5:0072   112: #L0 = CALL1 sound(#I0:16)
 33F4:408A 37F5:007A   120: #L0 = CALL1 sound(#I16000:46)
 33F4:4092 37F5:0082   128: WAIT #I50:112
 33F4:4096 37F5:0086   132: #L0 = CALL1 sound(#I0:16)
 33F4:409E 37F5:008E   140: #L0 = CALL1 sound(#I32000:79)
 33F4:40A6 37F5:0096   148: WAIT #I50:112
 33F4:40AA 37F5:009A   152: #L0 = CALL1 sound(#I0:16)
 33F4:40B2 37F5:00A2   160: #L0 = CALL1 sound(#I64000:127)
 33F4:40BA 37F5:00AA   168: WAIT #I50:112
 33F4:40BE 37F5:00AE   172: #L0 = CALL1 sound(#I0:16)

PROCESS  19: SVR_BEL2 (Args=0 CtrlBlk=33F4:1FA8 Size= 20  iOp=2-21 iCache=19968-19987) DISABLED
 33F4:4012 37F5:0002     0: #L0 = CALL1 sound(#I4000:90)
 33F4:401A 37F5:000A     8: WAIT #I100:19
 33F4:401E 37F5:000E    12: #L0 = CALL1 sound(#I0:16)

PROCESS  20: CMDTRIAL (Args=9 CtrlBlk=33F4:1FD4 Size=2698  iOp=2-2699 iCache=19988-22685) DISABLED
 33F4:4012 37F5:0002     0: allowed_fix_time@20:728 = #P1:241
 33F4:401C 37F5:000C    10: curr_holdtime@20:880 = #P2:246
 33F4:4026 37F5:0016    20: trl_type@20:2319 = #P3:247
 33F4:4030 37F5:0020    30: max_saccade_time@20:1353 = #P4:248
 33F4:403A 37F5:002A    40: curr_ssd@20:891 = #P5:249
 33F4:4044 37F5:0034    50: cancl_time@20:816 = #P6:250
 33F4:404E 37F5:003E    60: max_sacc_duration@20:1347 = #P7:251
 33F4:4058 37F5:0048    70: targ_hold_time@20:2198 = #P8:252
 33F4:4062 37F5:0052    80: object_fix@20:1464 = #P9:253
 33F4:406C 37F5:005C    90: trl_running@20:2308 = #I1:17
 33F4:4076 37F5:0066   100: stage@20:2102 = need_fix@20:1414
 33F4:4080 37F5:0070   110: #L0 = CALL1 printf(#S36:558)
 33F4:4088 37F5:0078   118: #L0 = CALL2 printf(#S37:569,Trl_number:2305)
 33F4:4092 37F5:0082   128: #L0 = CALL2 printf(#S38:580,Comp_Trl_number:853)
 33F4:409C 37F5:008C   138: #L0 = CALL1 printf(#S39:591)
 33F4:40A4 37F5:0094   146: #L0:145 = trl_type@20:2319 == go_trl@20:1194
 33F4:40B2 37F5:00A2   160: IFnot (#L0:145) GOTO .+26 (goto 186)
 33F4:40BA 37F5:00AA   168: #L1 = CALL1 printf(#S40:603)
 33F4:40C2 37F5:00B2   176: #L0 = CALL2 printf(#S41:614,curr_holdtime@20:880)
 33F4:40CC 37F5:00BC   186: #L0:145 = trl_type@20:2319 == stop_trl@20:2164
 33F4:40DA 37F5:00CA   200: IFnot (#L0:145) GOTO .+58 (goto 258)
 33F4:40E2 37F5:00D2   208: #L1 = CALL1 printf(#S42:625)
 33F4:40EA 37F5:00DA   216: #L0 = CALL2 printf(#S43:636,curr_holdtime@20:880)
 33F4:40F4 37F5:00E4   226: #F0:1 = curr_ssd@20:891 F* #M41649249:182
 33F4:4102 37F5:00F2   240: #F1 = CALL1 round(#F0:1)
 33F4:410A 37F5:00FA   248: #L0 = CALL2 printf(#S44:647,#F1:2)
 33F4:4114 37F5:0104   258: #L0:145 = trl_type@20:2319 == ignore_trl@20:1256
 33F4:4122 37F5:0112   272: IFnot (#L0:145) GOTO .+58 (goto 330)
 33F4:412A 37F5:011A   280: #L1 = CALL1 printf(#S45:653)
 33F4:4132 37F5:0122   288: #L0 = CALL2 printf(#S46:654,curr_holdtime@20:880)
 33F4:413C 37F5:012C   298: #F0:1 = curr_ssd@20:891 F* #M41649249:182
 33F4:414A 37F5:013A   312: #F1 = CALL1 round(#F0:1)
 33F4:4152 37F5:0142   320: #L0 = CALL2 printf(#S47:655,#F1:2)
 33F4:415C 37F5:014C   330: Event_fifo:1019[Set_event:2041] = TrialStart_:2299
 33F4:4164 37F5:0154   338: #L0:145 = Set_event:2041 + #I1:17
 33F4:4172 37F5:0162   352: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4180 37F5:0170   366: #L0 = CALL2 dSendf(#S48:656,fixation_pd@20:1133)
 33F4:418A 37F5:017A   376: #L0 = CALL0 time()
 33F4:4190 37F5:0180   382: fix_spot_time@20:1083 = F= fix_spot_time@20:1083
 33F4:419A 37F5:018A   392: Event_fifo:1019[Set_event:2041] = FixSpotOn_:1164
 33F4:41A2 37F5:0192   400: #L0:145 = Set_event:2041 + #I1:17
 33F4:41B0 37F5:01A0   414: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41BE 37F5:01AE   428: #L0 = CALL1 dSendf(#S49:657)
 33F4:41C6 37F5:01B6   436: #L0 = CALL2 dSendf(#S50:659,fixation@20:1106)
 33F4:41D0 37F5:01C0   446: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aVISIBLE:769)
 33F4:41DA 37F5:01CA   456: IFnot (trl_running@20:2308) GOTO .+2242 (goto 2698)
 33F4:41E2 37F5:01D2   464: #L0:145 = stage@20:2102 == need_fix@20:1414
 33F4:41F0 37F5:01E0   478: IFnot (#L0:145) GOTO .+206 (goto 684)
 33F4:41F8 37F5:01E8   486: IFnot (In_FixWin:1270) GOTO .+84 (goto 570)
 33F4:4200 37F5:01F0   494: #L1 = CALL0 time()
 33F4:4206 37F5:01F6   500: aquire_fix_time@20:746 = F= aquire_fix_time@20:746
 33F4:4210 37F5:0200   510: Trl_Start_Time:2315 = F= Trl_Start_Time:2315
 33F4:421A 37F5:020A   520: Event_fifo:1019[Set_event:2041] = Fixate_:1096
 33F4:4222 37F5:0212   528: #L0:145 = Set_event:2041 + #I1:17
 33F4:4230 37F5:0220   542: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:423E 37F5:022E   556: stage@20:2102 = fixating@20:1097
 33F4:4248 37F5:0238   566: GOTO .+114 (goto 680)
 33F4:424C 37F5:023C   570: #L0 = CALL0 time()
 33F4:4252 37F5:0242   576: #F0:1 = fix_spot_time@20:1083 F+ allowed_fix_time@20:728
 33F4:4260 37F5:0250   590: #L1:146 = #L0:145 F> #F0:1
 33F4:426E 37F5:025E   604: IFnot (#L1:146) GOTO .+76 (goto 680)
 33F4:4276 37F5:0266   612: Trl_Outcome:2306 = no_fix@20:1426
 33F4:4280 37F5:0270   622: LastStopOutcome:1308 = no_change@20:1422
 33F4:428A 37F5:027A   632: #L0 = CALL2 dSendf(#S51:660,blank@20:777)
 33F4:4294 37F5:0284   642: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:429E 37F5:028E   652: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aINVISIBLE:726)
 33F4:42A8 37F5:0298   662: #L0 = CALL1 printf(#S52:661)
 33F4:42B0 37F5:02A0   670: trl_running@20:2308 = #I0:16
 33F4:42BA 37F5:02AA   680: GOTO .+1922 (goto 2602)
 33F4:42BE 37F5:02AE   684: #L0:145 = stage@20:2102 == fixating@20:1097
 33F4:42CC 37F5:02BC   698: IFnot (#L0:145) GOTO .+468 (goto 1166)
 33F4:42D4 37F5:02C4   706: #L1:146 = ! In_FixWin:1270
 33F4:42E2 37F5:02D2   720: IFnot (#L1:146) GOTO .+80 (goto 800)
 33F4:42EA 37F5:02DA   728: Trl_Outcome:2306 = broke_fix@20:802
 33F4:42F4 37F5:02E4   738: LastStopOutcome:1308 = no_change@20:1422
 33F4:42FE 37F5:02EE   748: #L0 = CALL2 dSendf(#S53:662,blank@20:777)
 33F4:4308 37F5:02F8   758: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4312 37F5:0302   768: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aINVISIBLE:726)
 33F4:431C 37F5:030C   778: #L0 = CALL1 printf(#S54:663)
 33F4:4324 37F5:0314   786: trl_running@20:2308 = #I0:16
 33F4:432E 37F5:031E   796: GOTO .+366 (goto 1162)
 33F4:4332 37F5:0322   800: #L0 = CALL0 time()
 33F4:4338 37F5:0328   806: #F0:1 = aquire_fix_time@20:746 F+ curr_holdtime@20:880
 33F4:4346 37F5:0336   820: #L1:146 = #L0:145 F> #F0:1
 33F4:4354 37F5:0344   834: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:4362 37F5:0352   848: IFnot (#L2:156) GOTO .+314 (goto 1162)
 33F4:436A 37F5:035A   856: #L3 = CALL2 dSendf(#S55:664,target_pd@20:2248)
 33F4:4374 37F5:0364   866: #L0 = CALL0 time()
 33F4:437A 37F5:036A   872: targ_time@20:2209 = F= targ_time@20:2209
 33F4:4384 37F5:0374   882: #L0 = CALL1 dSendf(#S56:665)
 33F4:438C 37F5:037C   890: #L0 = CALL2 dSendf(#S57:666,target@20:2225)
 33F4:4396 37F5:0386   900: #L0:145 = trl_type@20:2319 == stop_trl@20:2164
 33F4:43A4 37F5:0394   914: #L1:146 = trl_type@20:2319 == ignore_trl@20:1256
 33F4:43B2 37F5:03A2   928: #L2:156 = #L0:145 || #L1:146
 33F4:43C0 37F5:03B0   942: IFnot (#L2:156) GOTO .+96 (goto 1038)
 33F4:43C8 37F5:03B8   950: #L3:157 = curr_ssd@20:891 - #I1:17
 33F4:43D6 37F5:03C6   964: #L4 = CALL2 dSendf(#S58:667,#L3:157)
 33F4:43E0 37F5:03D0   974: #L0 = CALL2 dSendf(#S59:668,signal_pd@20:2066)
 33F4:43EA 37F5:03DA   984: #F0:1 = curr_ssd@20:891 F* #M41649249:182
 33F4:43F8 37F5:03E8   998: #F1 = CALL1 round(#F0:1)
 33F4:4400 37F5:03F0  1006: stop_sig_time@20:2160 = targ_time@20:2209 F+ #F1:2
 33F4:440E 37F5:03FE  1020: #L0 = CALL1 dSendf(#S60:670)
 33F4:4416 37F5:0406  1028: #L0 = CALL2 dSendf(#S61:671,signal@20:2062)
 33F4:4420 37F5:0410  1038: Event_fifo:1019[Set_event:2041] = FixSpotOff_:1163
 33F4:4428 37F5:0418  1046: #L0:145 = Set_event:2041 + #I1:17
 33F4:4436 37F5:0426  1060: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4444 37F5:0434  1074: #L0:145 = trl_type@20:2319 == go_trl@20:1194
 33F4:4452 37F5:0442  1088: IFnot (#L0:145) GOTO .+32 (goto 1120)
 33F4:445A 37F5:044A  1096: #L1 = CALL2 oSetAttribute(object_targ:1513,aVISIBLE:769)
 33F4:4464 37F5:0454  1106: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aINVISIBLE:726)
 33F4:446E 37F5:045E  1116: GOTO .+36 (goto 1152)
 33F4:4472 37F5:0462  1120: #L0:145 = trl_type@20:2319 == ignore_trl@20:1256
 33F4:4480 37F5:0470  1134: IFnot (#L0:145) GOTO .+18 (goto 1152)
 33F4:4488 37F5:0478  1142: #L1 = CALL2 oSetAttribute(object_targ:1513,aVISIBLE:769)
 33F4:4492 37F5:0482  1152: stage@20:2102 = targ_on@20:2204
 33F4:449C 37F5:048C  1162: GOTO .+1440 (goto 2602)
 33F4:44A0 37F5:0490  1166: #L0:145 = stage@20:2102 == targ_on@20:2204
 33F4:44AE 37F5:049E  1180: IFnot (#L0:145) GOTO .+648 (goto 1828)
 33F4:44B6 37F5:04A6  1188: #L1:146 = ! In_FixWin:1270
 33F4:44C4 37F5:04B4  1202: IFnot (#L1:146) GOTO .+202 (goto 1404)
 33F4:44CC 37F5:04BC  1210: #L2 = CALL0 time()
 33F4:44D2 37F5:04C2  1216: saccade_time@20:1997 = F= saccade_time@20:1997
 33F4:44DC 37F5:04CC  1226: Event_fifo:1019[Set_event:2041] = Saccade_:1996
 33F4:44E4 37F5:04D4  1234: #L0:145 = Set_event:2041 + #I1:17
 33F4:44F2 37F5:04E2  1248: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4500 37F5:04F0  1262: #F0:1 = saccade_time@20:1997 F- targ_time@20:2209
 33F4:450E 37F5:04FE  1276: #L0 = CALL2 printf(#S62:672,#F0:1)
 33F4:4518 37F5:0508  1286: stage@20:2102 = in_flight@20:1271
 33F4:4522 37F5:0512  1296: #F0:1 = saccade_time@20:1997 F- targ_time@20:2209
 33F4:4530 37F5:0520  1310: #L0:145 = #F0:1 F< Min_saccade_time:1380
 33F4:453E 37F5:052E  1324: IFnot (#L0:145) GOTO .+76 (goto 1400)
 33F4:4546 37F5:0536  1332: Trl_Outcome:2306 = too_fast@20:2288
 33F4:4550 37F5:0540  1342: LastStopOutcome:1308 = no_change@20:1422
 33F4:455A 37F5:054A  1352: #L0 = CALL2 dSendf(#S63:673,blank@20:777)
 33F4:4564 37F5:0554  1362: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:456E 37F5:055E  1372: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aINVISIBLE:726)
 33F4:4578 37F5:0568  1382: #L0 = CALL1 printf(#S64:674)
 33F4:4580 37F5:0570  1390: trl_running@20:2308 = #I0:16
 33F4:458A 37F5:057A  1400: GOTO .+424 (goto 1824)
 33F4:458E 37F5:057E  1404: #L0 = CALL0 time()
 33F4:4594 37F5:0584  1410: #F0:1 = targ_time@20:2209 F+ max_saccade_time@20:1353
 33F4:45A2 37F5:0592  1424: #L1:146 = #L0:145 F> #F0:1
 33F4:45B0 37F5:05A0  1438: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:45BE 37F5:05AE  1452: #L3:157 = trl_type@20:2319 == go_trl@20:1194
 33F4:45CC 37F5:05BC  1466: #L4:158 = trl_type@20:2319 == ignore_trl@20:1256
 33F4:45DA 37F5:05CA  1480: #L5:159 = #L3:157 || #L4:158
 33F4:45E8 37F5:05D8  1494: #L6:160 = #L2:156 && #L5:159
 33F4:45F6 37F5:05E6  1508: IFnot (#L6:160) GOTO .+86 (goto 1594)
 33F4:45FE 37F5:05EE  1516: Trl_Outcome:2306 = go_wrong@20:1205
 33F4:4608 37F5:05F8  1526: LastStopOutcome:1308 = no_change@20:1422
 33F4:4612 37F5:0602  1536: #L0 = CALL2 dSendf(#S65:675,blank@20:777)
 33F4:461C 37F5:060C  1546: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4626 37F5:0616  1556: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aINVISIBLE:726)
 33F4:4630 37F5:0620  1566: #L0 = CALL1 printf(#S66:676)
 33F4:4638 37F5:0628  1574: SPAWN SVR_BELL:2194(with 0 args)
 33F4:463E 37F5:062E  1580: trl_running@20:2308 = #I0:16
 33F4:4648 37F5:0638  1590: GOTO .+234 (goto 1824)
 33F4:464C 37F5:063C  1594: #L0 = CALL0 time()
 33F4:4652 37F5:0642  1600: #F0:1 = targ_time@20:2209 F+ curr_ssd@20:891
 33F4:4660 37F5:0650  1614: #F1:2 = #F0:1 F+ cancl_time@20:816
 33F4:466E 37F5:065E  1628: #L1:146 = #L0:145 F> #F1:2
 33F4:467C 37F5:066C  1642: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:468A 37F5:067A  1656: #L3:157 = trl_type@20:2319 == stop_trl@20:2164
 33F4:4698 37F5:0688  1670: #L4:158 = #L2:156 && #L3:157
 33F4:46A6 37F5:0696  1684: IFnot (#L4:158) GOTO .+140 (goto 1824)
 33F4:46AE 37F5:069E  1692: Trl_Outcome:2306 = nogo_correct@20:1437
 33F4:46B8 37F5:06A8  1702: LastStopOutcome:1308 = success@20:2180
 33F4:46C2 37F5:06B2  1712: Correct_trls:869 = Correct_trls:869 + #I1:17
 33F4:46D0 37F5:06C0  1726: #L0 = CALL2 dSendf(#S67:677,blank@20:777)
 33F4:46DA 37F5:06CA  1736: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:46E4 37F5:06D4  1746: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aINVISIBLE:726)
 33F4:46EE 37F5:06DE  1756: Event_fifo:1019[Set_event:2041] = Correct_:864
 33F4:46F6 37F5:06E6  1764: #L0:145 = Set_event:2041 + #I1:17
 33F4:4704 37F5:06F4  1778: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4712 37F5:0702  1792: #L0 = CALL1 printf(#S68:678)
 33F4:471A 37F5:070A  1800: IFnot (Canc_alert:814) GOTO .+14 (goto 1814)
 33F4:4722 37F5:0712  1808: SPAWN SVR_BEL2:2193(with 0 args)
 33F4:4728 37F5:0718  1814: trl_running@20:2308 = #I0:16
 33F4:4732 37F5:0722  1824: GOTO .+778 (goto 2602)
 33F4:4736 37F5:0726  1828: #L0:145 = stage@20:2102 == in_flight@20:1271
 33F4:4744 37F5:0734  1842: IFnot (#L0:145) GOTO .+330 (goto 2172)
 33F4:474C 37F5:073C  1850: IFnot (In_TargWin:1276) GOTO .+172 (goto 2022)
 33F4:4754 37F5:0744  1858: #L1 = CALL0 time()
 33F4:475A 37F5:074A  1864: aquire_targ_time@20:751 = F= aquire_targ_time@20:751
 33F4:4764 37F5:0754  1874: Event_fifo:1019[Set_event:2041] = Decide_:939
 33F4:476C 37F5:075C  1882: #L0:145 = Set_event:2041 + #I1:17
 33F4:477A 37F5:076A  1896: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4788 37F5:0778  1910: stage@20:2102 = on_target@20:1537
 33F4:4792 37F5:0782  1920: #L0:145 = trl_type@20:2319 == stop_trl@20:2164
 33F4:47A0 37F5:0790  1934: IFnot (#L0:145) GOTO .+48 (goto 1982)
 33F4:47A8 37F5:0798  1942: Event_fifo:1019[Set_event:2041] = Error_sacc:1017
 33F4:47B0 37F5:07A0  1950: #L0:145 = Set_event:2041 + #I1:17
 33F4:47BE 37F5:07AE  1964: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:47CC 37F5:07BC  1978: GOTO .+40 (goto 2018)
 33F4:47D0 37F5:07C0  1982: Event_fifo:1019[Set_event:2041] = Correct_sacc:865
 33F4:47D8 37F5:07C8  1990: #L0:145 = Set_event:2041 + #I1:17
 33F4:47E6 37F5:07D6  2004: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:47F4 37F5:07E4  2018: GOTO .+150 (goto 2168)
 33F4:47F8 37F5:07E8  2022: #L0 = CALL0 time()
 33F4:47FE 37F5:07EE  2028: #F0:1 = saccade_time@20:1997 F+ max_sacc_duration@20:1347
 33F4:480C 37F5:07FC  2042: #L1:146 = #L0:145 F> #F0:1
 33F4:481A 37F5:080A  2056: IFnot (#L1:146) GOTO .+112 (goto 2168)
 33F4:4822 37F5:0812  2064: Trl_Outcome:2306 = sacc_out@20:1990
 33F4:482C 37F5:081C  2074: #L0:145 = trl_type@20:2319 == stop_trl@20:2164
 33F4:483A 37F5:082A  2088: IFnot (#L0:145) GOTO .+22 (goto 2110)
 33F4:4842 37F5:0832  2096: LastStopOutcome:1308 = failure@20:1043
 33F4:484C 37F5:083C  2106: GOTO .+14 (goto 2120)
 33F4:4850 37F5:0840  2110: LastStopOutcome:1308 = no_change@20:1422
 33F4:485A 37F5:084A  2120: #L0 = CALL2 dSendf(#S69:679,blank@20:777)
 33F4:4864 37F5:0854  2130: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:486E 37F5:085E  2140: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aINVISIBLE:726)
 33F4:4878 37F5:0868  2150: #L0 = CALL1 printf(#S70:681)
 33F4:4880 37F5:0870  2158: trl_running@20:2308 = #I0:16
 33F4:488A 37F5:087A  2168: GOTO .+434 (goto 2602)
 33F4:488E 37F5:087E  2172: #L0:145 = stage@20:2102 == on_target@20:1537
 33F4:489C 37F5:088C  2186: IFnot (#L0:145) GOTO .+416 (goto 2602)
 33F4:48A4 37F5:0894  2194: #L1:146 = ! In_TargWin:1276
 33F4:48B2 37F5:08A2  2208: IFnot (#L1:146) GOTO .+116 (goto 2324)
 33F4:48BA 37F5:08AA  2216: Trl_Outcome:2306 = broke_targ@20:808
 33F4:48C4 37F5:08B4  2226: #L0:145 = trl_type@20:2319 == stop_trl@20:2164
 33F4:48D2 37F5:08C2  2240: IFnot (#L0:145) GOTO .+22 (goto 2262)
 33F4:48DA 37F5:08CA  2248: LastStopOutcome:1308 = failure@20:1043
 33F4:48E4 37F5:08D4  2258: GOTO .+14 (goto 2272)
 33F4:48E8 37F5:08D8  2262: LastStopOutcome:1308 = no_change@20:1422
 33F4:48F2 37F5:08E2  2272: #L0 = CALL2 dSendf(#S71:682,blank@20:777)
 33F4:48FC 37F5:08EC  2282: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4906 37F5:08F6  2292: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aINVISIBLE:726)
 33F4:4910 37F5:0900  2302: #L0 = CALL1 printf(#S72:683)
 33F4:4918 37F5:0908  2310: trl_running@20:2308 = #I0:16
 33F4:4922 37F5:0912  2320: GOTO .+282 (goto 2602)
 33F4:4926 37F5:0916  2324: #L0 = CALL0 time()
 33F4:492C 37F5:091C  2330: #F0:1 = aquire_targ_time@20:751 F+ targ_hold_time@20:2198
 33F4:493A 37F5:092A  2344: #L1:146 = #L0:145 F> #F0:1
 33F4:4948 37F5:0938  2358: #L2:156 = In_TargWin:1276 && #L1:146
 33F4:4956 37F5:0946  2372: IFnot (#L2:156) GOTO .+230 (goto 2602)
 33F4:495E 37F5:094E  2380: #L3:157 = trl_type@20:2319 == go_trl@20:1194
 33F4:496C 37F5:095C  2394: #L4:158 = trl_type@20:2319 == ignore_trl@20:1256
 33F4:497A 37F5:096A  2408: #L5:159 = #L3:157 || #L4:158
 33F4:4988 37F5:0978  2422: IFnot (#L5:159) GOTO .+90 (goto 2512)
 33F4:4990 37F5:0980  2430: Trl_Outcome:2306 = go_correct@20:1185
 33F4:499A 37F5:098A  2440: LastStopOutcome:1308 = no_change@20:1422
 33F4:49A4 37F5:0994  2450: Correct_trls:869 = Correct_trls:869 + #I1:17
 33F4:49B2 37F5:09A2  2464: Event_fifo:1019[Set_event:2041] = Correct_:864
 33F4:49BA 37F5:09AA  2472: #L0:145 = Set_event:2041 + #I1:17
 33F4:49C8 37F5:09B8  2486: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:49D6 37F5:09C6  2500: #L0 = CALL1 printf(#S73:684)
 33F4:49DE 37F5:09CE  2508: GOTO .+54 (goto 2562)
 33F4:49E2 37F5:09D2  2512: #L0:145 = trl_type@20:2319 == stop_trl@20:2164
 33F4:49F0 37F5:09E0  2526: IFnot (#L0:145) GOTO .+36 (goto 2562)
 33F4:49F8 37F5:09E8  2534: Trl_Outcome:2306 = nogo_wrong@20:1447
 33F4:4A02 37F5:09F2  2544: LastStopOutcome:1308 = failure@20:1043
 33F4:4A0C 37F5:09FC  2554: #L0 = CALL1 printf(#S74:685)
 33F4:4A14 37F5:0A04  2562: #L0 = CALL2 dSendf(#S75:686,blank@20:777)
 33F4:4A1E 37F5:0A0E  2572: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4A28 37F5:0A18  2582: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aINVISIBLE:726)
 33F4:4A32 37F5:0A22  2592: trl_running@20:2308 = #I0:16
 33F4:4A3C 37F5:0A2C  2602: #L0:145 = Move_ct:1396 > #I0:16
 33F4:4A4A 37F5:0A3A  2616: IFnot (#L0:145) GOTO .+76 (goto 2692)
 33F4:4A52 37F5:0A42  2624: Trl_Outcome:2306 = body_move@20:795
 33F4:4A5C 37F5:0A4C  2634: LastStopOutcome:1308 = no_change@20:1422
 33F4:4A66 37F5:0A56  2644: #L0 = CALL2 dSendf(#S76:687,blank@20:777)
 33F4:4A70 37F5:0A60  2654: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4A7A 37F5:0A6A  2664: #L0 = CALL2 oSetAttribute(object_fix@20:1464,aINVISIBLE:726)
 33F4:4A84 37F5:0A74  2674: #L0 = CALL1 printf(#S77:688)
 33F4:4A8C 37F5:0A7C  2682: trl_running@20:2308 = #I0:16
 33F4:4A96 37F5:0A86  2692: NEXTTICK1
 33F4:4A98 37F5:0A88  2694: GOTO .-2238 (goto 456)

PROCESS  21: MGTRIAL (Args=9 CtrlBlk=33F4:2000 Size=3692  iOp=2-3693 iCache=22686-26377) DISABLED
 33F4:4012 37F5:0002     0: allowed_fix_time@21:729 = #P1:241
 33F4:401C 37F5:000C    10: curr_holdtime@21:881 = #P2:246
 33F4:4026 37F5:0016    20: trl_type@21:2320 = #P3:247
 33F4:4030 37F5:0020    30: max_saccade_time@21:1354 = #P4:248
 33F4:403A 37F5:002A    40: curr_soa@21:886 = #P5:249
 33F4:4044 37F5:0034    50: cancl_time@21:817 = #P6:250
 33F4:404E 37F5:003E    60: max_sacc_duration@21:1348 = #P7:251
 33F4:4058 37F5:0048    70: targ_hold_time@21:2199 = #P8:252
 33F4:4062 37F5:0052    80: object_fix@21:1465 = #P9:253
 33F4:406C 37F5:005C    90: StimDone@21:2147 = #I0:16
 33F4:4076 37F5:0066   100: trl_running@21:2309 = #I1:17
 33F4:4080 37F5:0070   110: stage@21:2103 = need_fix@21:1415
 33F4:408A 37F5:007A   120: #L0 = CALL1 printf(#S78:689)
 33F4:4092 37F5:0082   128: #L0 = CALL2 printf(#S79:690,Trl_number:2305)
 33F4:409C 37F5:008C   138: #L0 = CALL2 printf(#S80:692,Comp_Trl_number:853)
 33F4:40A6 37F5:0096   148: #L0 = CALL1 printf(#S81:693)
 33F4:40AE 37F5:009E   156: #L0 = CALL2 printf(#S82:694,curr_holdtime@21:881)
 33F4:40B8 37F5:00A8   166: #L0 = CALL2 printf(#S83:695,curr_soa@21:886)
 33F4:40C2 37F5:00B2   176: Event_fifo:1019[Set_event:2041] = MemHeader_:1369
 33F4:40CA 37F5:00BA   184: #L0:145 = Set_event:2041 + #I1:17
 33F4:40D8 37F5:00C8   198: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:40E6 37F5:00D6   212: Event_fifo:1019[Set_event:2041] = TrialStart_:2299
 33F4:40EE 37F5:00DE   220: #L0:145 = Set_event:2041 + #I1:17
 33F4:40FC 37F5:00EC   234: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:410A 37F5:00FA   248: #L0 = CALL2 dSendf(#S84:696,fixation_pd@21:1134)
 33F4:4114 37F5:0104   258: #L0 = CALL0 time()
 33F4:411A 37F5:010A   264: fix_spot_time@21:1084 = F= fix_spot_time@21:1084
 33F4:4124 37F5:0114   274: Event_fifo:1019[Set_event:2041] = FixSpotOn_:1164
 33F4:412C 37F5:011C   282: #L0:145 = Set_event:2041 + #I1:17
 33F4:413A 37F5:012A   296: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4148 37F5:0138   310: #L0 = CALL1 dSendf(#S85:697)
 33F4:4150 37F5:0140   318: #L0 = CALL2 dSendf(#S86:698,fixation@21:1107)
 33F4:415A 37F5:014A   328: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aVISIBLE:769)
 33F4:4164 37F5:0154   338: IFnot (trl_running@21:2309) GOTO .+3252 (goto 3590)
 33F4:416C 37F5:015C   346: #L0:145 = stage@21:2103 == need_fix@21:1415
 33F4:417A 37F5:016A   360: IFnot (#L0:145) GOTO .+206 (goto 566)
 33F4:4182 37F5:0172   368: IFnot (In_FixWin:1270) GOTO .+84 (goto 452)
 33F4:418A 37F5:017A   376: #L1 = CALL0 time()
 33F4:4190 37F5:0180   382: aquire_fix_time@21:747 = F= aquire_fix_time@21:747
 33F4:419A 37F5:018A   392: Trl_Start_Time:2315 = F= Trl_Start_Time:2315
 33F4:41A4 37F5:0194   402: Event_fifo:1019[Set_event:2041] = Fixate_:1096
 33F4:41AC 37F5:019C   410: #L0:145 = Set_event:2041 + #I1:17
 33F4:41BA 37F5:01AA   424: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41C8 37F5:01B8   438: stage@21:2103 = fixating@21:1098
 33F4:41D2 37F5:01C2   448: GOTO .+114 (goto 562)
 33F4:41D6 37F5:01C6   452: #L0 = CALL0 time()
 33F4:41DC 37F5:01CC   458: #F0:1 = fix_spot_time@21:1084 F+ allowed_fix_time@21:729
 33F4:41EA 37F5:01DA   472: #L1:146 = #L0:145 F> #F0:1
 33F4:41F8 37F5:01E8   486: IFnot (#L1:146) GOTO .+76 (goto 562)
 33F4:4200 37F5:01F0   494: Trl_Outcome:2306 = no_fix@21:1427
 33F4:420A 37F5:01FA   504: LastStopOutcome:1308 = no_change@21:1423
 33F4:4214 37F5:0204   514: #L0 = CALL2 dSendf(#S87:699,blank@21:778)
 33F4:421E 37F5:020E   524: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4228 37F5:0218   534: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:4232 37F5:0222   544: #L0 = CALL1 printf(#S88:700)
 33F4:423A 37F5:022A   552: trl_running@21:2309 = #I0:16
 33F4:4244 37F5:0234   562: GOTO .+3022 (goto 3584)
 33F4:4248 37F5:0238   566: #L0:145 = stage@21:2103 == fixating@21:1098
 33F4:4256 37F5:0246   580: IFnot (#L0:145) GOTO .+594 (goto 1174)
 33F4:425E 37F5:024E   588: #L1:146 = ! In_FixWin:1270
 33F4:426C 37F5:025C   602: IFnot (#L1:146) GOTO .+80 (goto 682)
 33F4:4274 37F5:0264   610: Trl_Outcome:2306 = broke_fix@21:803
 33F4:427E 37F5:026E   620: LastStopOutcome:1308 = no_change@21:1423
 33F4:4288 37F5:0278   630: #L0 = CALL2 dSendf(#S89:701,blank@21:778)
 33F4:4292 37F5:0282   640: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:429C 37F5:028C   650: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:42A6 37F5:0296   660: #L0 = CALL1 printf(#S90:703)
 33F4:42AE 37F5:029E   668: trl_running@21:2309 = #I0:16
 33F4:42B8 37F5:02A8   678: GOTO .+492 (goto 1170)
 33F4:42BC 37F5:02AC   682: #L0:145 = StimTm:2151 == #I1:17
 33F4:42CA 37F5:02BA   696: #L1:146 = #L0:145 && In_FixWin:1270
 33F4:42D8 37F5:02C8   710: #L2:156 = StimDone@21:2147 == #I0:16
 33F4:42E6 37F5:02D6   724: #L3:157 = #L1:146 && #L2:156
 33F4:42F4 37F5:02E4   738: #L4 = CALL0 time()
 33F4:42FA 37F5:02EA   744: #L5:159 = curr_holdtime@21:881 - #I140:39
 33F4:4308 37F5:02F8   758: #F0:1 = aquire_fix_time@21:747 F+ #L5:159
 33F4:4316 37F5:0306   772: #L6:160 = #L4:158 F> #F0:1
 33F4:4324 37F5:0314   786: #L7:161 = #L3:157 && #L6:160
 33F4:4332 37F5:0322   800: IFnot (#L7:161) GOTO .+38 (goto 838)
 33F4:433A 37F5:032A   808: #P1:241 = Stim_channel:2121
 33F4:4344 37F5:0334   818: SPAWN STIM:2120(with 1 args)
 33F4:434A 37F5:033A   824: StimDone@21:2147 = #I1:17
 33F4:4354 37F5:0344   834: GOTO .+336 (goto 1170)
 33F4:4358 37F5:0348   838: #L0:145 = StimTm:2151 == #I2:53
 33F4:4366 37F5:0356   852: #L1:146 = #L0:145 && In_FixWin:1270
 33F4:4374 37F5:0364   866: #L2:156 = StimDone@21:2147 == #I0:16
 33F4:4382 37F5:0372   880: #L3:157 = #L1:146 && #L2:156
 33F4:4390 37F5:0380   894: #L4 = CALL0 time()
 33F4:4396 37F5:0386   900: #L5:159 = curr_holdtime@21:881 - #I40:88
 33F4:43A4 37F5:0394   914: #F0:1 = aquire_fix_time@21:747 F+ #L5:159
 33F4:43B2 37F5:03A2   928: #L6:160 = #L4:158 F> #F0:1
 33F4:43C0 37F5:03B0   942: #L7:161 = #L3:157 && #L6:160
 33F4:43CE 37F5:03BE   956: IFnot (#L7:161) GOTO .+38 (goto 994)
 33F4:43D6 37F5:03C6   964: #P1:241 = Stim_channel:2121
 33F4:43E0 37F5:03D0   974: SPAWN STIM:2120(with 1 args)
 33F4:43E6 37F5:03D6   980: StimDone@21:2147 = #I1:17
 33F4:43F0 37F5:03E0   990: GOTO .+180 (goto 1170)
 33F4:43F4 37F5:03E4   994: #L0 = CALL0 time()
 33F4:43FA 37F5:03EA  1000: #F0:1 = aquire_fix_time@21:747 F+ curr_holdtime@21:881
 33F4:4408 37F5:03F8  1014: #L1:146 = #L0:145 F> #F0:1
 33F4:4416 37F5:0406  1028: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:4424 37F5:0414  1042: IFnot (#L2:156) GOTO .+128 (goto 1170)
 33F4:442C 37F5:041C  1050: #L3 = CALL2 dSendf(#S91:704,target_pd@21:2249)
 33F4:4436 37F5:0426  1060: #L0 = CALL0 time()
 33F4:443C 37F5:042C  1066: targ_time@21:2210 = F= targ_time@21:2210
 33F4:4446 37F5:0436  1076: Event_fifo:1019[Set_event:2041] = Target_:2238
 33F4:444E 37F5:043E  1084: #L0:145 = Set_event:2041 + #I1:17
 33F4:445C 37F5:044C  1098: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:446A 37F5:045A  1112: #L0 = CALL1 dSendf(#S92:705)
 33F4:4472 37F5:0462  1120: #L0 = CALL2 dSendf(#S93:706,target@21:2226)
 33F4:447C 37F5:046C  1130: #L0 = CALL2 dSendf(#S94:707,fixation@21:1107)
 33F4:4486 37F5:0476  1140: sacctarg:2002 = #I1:17
 33F4:4490 37F5:0480  1150: #L0 = CALL2 oSetAttribute(object_targ:1513,aVISIBLE:769)
 33F4:449A 37F5:048A  1160: stage@21:2103 = targ_on@21:2205
 33F4:44A4 37F5:0494  1170: GOTO .+2414 (goto 3584)
 33F4:44A8 37F5:0498  1174: #L0:145 = stage@21:2103 == targ_on@21:2205
 33F4:44B6 37F5:04A6  1188: IFnot (#L0:145) GOTO .+844 (goto 2032)
 33F4:44BE 37F5:04AE  1196: #L1:146 = ! In_FixWin:1270
 33F4:44CC 37F5:04BC  1210: IFnot (#L1:146) GOTO .+174 (goto 1384)
 33F4:44D4 37F5:04C4  1218: #L2 = CALL0 time()
 33F4:44DA 37F5:04CA  1224: #F0:1 = #L2:156 F- targ_time@21:2210
 33F4:44E8 37F5:04D8  1238: #L3 = CALL2 printf(#S95:708,#F0:1)
 33F4:44F2 37F5:04E2  1248: Trl_Outcome:2306 = early_sacc@21:1000
 33F4:44FC 37F5:04EC  1258: LastStopOutcome:1308 = no_change@21:1423
 33F4:4506 37F5:04F6  1268: #L0 = CALL2 dSendf(#S96:709,blank@21:778)
 33F4:4510 37F5:0500  1278: #L0 = CALL2 dSendf(#S97:710,blank@21:778)
 33F4:451A 37F5:050A  1288: Event_fifo:1019[Set_event:2041] = EarlySaccade_:1004
 33F4:4522 37F5:0512  1296: Event_fifo:1019[Set_event:2041] = EarlySaccade_:1004
 33F4:452A 37F5:051A  1304: #L0:145 = Set_event:2041 + #I1:17
 33F4:4538 37F5:0528  1318: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4546 37F5:0536  1332: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4550 37F5:0540  1342: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:455A 37F5:054A  1352: #L0 = CALL1 printf(#S98:711)
 33F4:4562 37F5:0552  1360: sacctarg:2002 = #I0:16
 33F4:456C 37F5:055C  1370: trl_running@21:2309 = #I0:16
 33F4:4576 37F5:0566  1380: GOTO .+648 (goto 2028)
 33F4:457A 37F5:056A  1384: #L0:145 = StimTm:2151 == #I3:74
 33F4:4588 37F5:0578  1398: #L1:146 = #L0:145 && In_FixWin:1270
 33F4:4596 37F5:0586  1412: #L2:156 = StimDone@21:2147 == #I0:16
 33F4:45A4 37F5:0594  1426: #L3:157 = #L1:146 && #L2:156
 33F4:45B2 37F5:05A2  1440: #L4 = CALL0 time()
 33F4:45B8 37F5:05A8  1446: #L5:159 = curr_soa@21:886 - #I140:39
 33F4:45C6 37F5:05B6  1460: #F0:1 = targ_time@21:2210 F+ #L5:159
 33F4:45D4 37F5:05C4  1474: #L6:160 = #L4:158 F> #F0:1
 33F4:45E2 37F5:05D2  1488: #L7:161 = #L3:157 && #L6:160
 33F4:45F0 37F5:05E0  1502: IFnot (#L7:161) GOTO .+38 (goto 1540)
 33F4:45F8 37F5:05E8  1510: #P1:241 = Stim_channel:2121
 33F4:4602 37F5:05F2  1520: SPAWN STIM:2120(with 1 args)
 33F4:4608 37F5:05F8  1526: StimDone@21:2147 = #I1:17
 33F4:4612 37F5:0602  1536: GOTO .+492 (goto 2028)
 33F4:4616 37F5:0606  1540: #L0:145 = StimTm:2151 == #I4:87
 33F4:4624 37F5:0614  1554: #L1:146 = #L0:145 && In_FixWin:1270
 33F4:4632 37F5:0622  1568: #L2:156 = StimDone@21:2147 == #I0:16
 33F4:4640 37F5:0630  1582: #L3:157 = #L1:146 && #L2:156
 33F4:464E 37F5:063E  1596: #L4 = CALL0 time()
 33F4:4654 37F5:0644  1602: #L5:159 = curr_soa@21:886 - #I40:88
 33F4:4662 37F5:0652  1616: #F0:1 = targ_time@21:2210 F+ #L5:159
 33F4:4670 37F5:0660  1630: #L6:160 = #L4:158 F> #F0:1
 33F4:467E 37F5:066E  1644: #L7:161 = #L3:157 && #L6:160
 33F4:468C 37F5:067C  1658: IFnot (#L7:161) GOTO .+38 (goto 1696)
 33F4:4694 37F5:0684  1666: #P1:241 = Stim_channel:2121
 33F4:469E 37F5:068E  1676: SPAWN STIM:2120(with 1 args)
 33F4:46A4 37F5:0694  1682: StimDone@21:2147 = #I1:17
 33F4:46AE 37F5:069E  1692: GOTO .+336 (goto 2028)
 33F4:46B2 37F5:06A2  1696: #L0 = CALL0 time()
 33F4:46B8 37F5:06A8  1702: #F0:1 = targ_time@21:2210 F+ curr_soa@21:886
 33F4:46C6 37F5:06B6  1716: #L1:146 = #L0:145 F> #F0:1
 33F4:46D4 37F5:06C4  1730: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:46E2 37F5:06D2  1744: IFnot (#L2:156) GOTO .+284 (goto 2028)
 33F4:46EA 37F5:06DA  1752: #L3:157 = trl_type@21:2320 == stop_trl@21:2165
 33F4:46F8 37F5:06E8  1766: #L4:158 = trl_type@21:2320 == ignore_trl@21:1257
 33F4:4706 37F5:06F6  1780: #L5:159 = #L3:157 || #L4:158
 33F4:4714 37F5:0704  1794: IFnot (#L5:159) GOTO .+112 (goto 1906)
 33F4:471C 37F5:070C  1802: #L6 = CALL2 dSendf(#S99:712,signal_pd@21:2067)
 33F4:4726 37F5:0716  1812: #L0 = CALL0 time()
 33F4:472C 37F5:071C  1818: fix_off_time@21:1076 = F= fix_off_time@21:1076
 33F4:4736 37F5:0726  1828: Event_fifo:1019[Set_event:2041] = FixSpotOff_:1163
 33F4:473E 37F5:072E  1836: #L0:145 = Set_event:2041 + #I1:17
 33F4:474C 37F5:073C  1850: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:475A 37F5:074A  1864: #L0 = CALL1 dSendf(#S100:271)
 33F4:4762 37F5:0752  1872: #L0 = CALL2 dSendf(#S101:272,signal@21:2063)
 33F4:476C 37F5:075C  1882: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:4776 37F5:0766  1892: stage@21:2103 = fix_off@21:1073
 33F4:4780 37F5:0770  1902: GOTO .+126 (goto 2028)
 33F4:4784 37F5:0774  1906: #L0:145 = trl_type@21:2320 == go_trl@21:1195
 33F4:4792 37F5:0782  1920: IFnot (#L0:145) GOTO .+108 (goto 2028)
 33F4:479A 37F5:078A  1928: #L1 = CALL2 dSendf(#S102:273,signal_pd@21:2067)
 33F4:47A4 37F5:0794  1938: #L0 = CALL0 time()
 33F4:47AA 37F5:079A  1944: fix_off_time@21:1076 = F= fix_off_time@21:1076
 33F4:47B4 37F5:07A4  1954: Event_fifo:1019[Set_event:2041] = FixSpotOff_:1163
 33F4:47BC 37F5:07AC  1962: #L0:145 = Set_event:2041 + #I1:17
 33F4:47CA 37F5:07BA  1976: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:47D8 37F5:07C8  1990: #L0 = CALL1 dSendf(#S103:274)
 33F4:47E0 37F5:07D0  1998: #L0 = CALL2 dSendf(#S104:275,signal@21:2063)
 33F4:47EA 37F5:07DA  2008: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:47F4 37F5:07E4  2018: stage@21:2103 = fix_off@21:1073
 33F4:47FE 37F5:07EE  2028: GOTO .+1556 (goto 3584)
 33F4:4802 37F5:07F2  2032: #L0:145 = stage@21:2103 == fix_off@21:1073
 33F4:4810 37F5:0800  2046: IFnot (#L0:145) GOTO .+912 (goto 2958)
 33F4:4818 37F5:0808  2054: #L1:146 = ! In_FixWin:1270
 33F4:4826 37F5:0816  2068: #L2:156 = trl_type@21:2320 == go_trl@21:1195
 33F4:4834 37F5:0824  2082: #L3:157 = #L1:146 && #L2:156
 33F4:4842 37F5:0832  2096: IFnot (#L3:157) GOTO .+300 (goto 2396)
 33F4:484A 37F5:083A  2104: #L4 = CALL0 time()
 33F4:4850 37F5:0840  2110: saccade_time@21:1998 = F= saccade_time@21:1998
 33F4:485A 37F5:084A  2120: #F0:1 = saccade_time@21:1998 F- fix_off_time@21:1076
 33F4:4868 37F5:0858  2134: #L0:145 = #I70:130 F> #F0:1
 33F4:4876 37F5:0866  2148: IFnot (#L0:145) GOTO .+138 (goto 2286)
 33F4:487E 37F5:086E  2156: #L1 = CALL0 time()
 33F4:4884 37F5:0874  2162: #F1:2 = #L1:146 F- targ_time@21:2210
 33F4:4892 37F5:0882  2176: #L2 = CALL2 printf(#S105:276,#F1:2)
 33F4:489C 37F5:088C  2186: Trl_Outcome:2306 = early_sacc@21:1000
 33F4:48A6 37F5:0896  2196: LastStopOutcome:1308 = no_change@21:1423
 33F4:48B0 37F5:08A0  2206: #L0 = CALL2 dSendf(#S106:277,blank@21:778)
 33F4:48BA 37F5:08AA  2216: #L0 = CALL2 dSendf(#S107:278,blank@21:778)
 33F4:48C4 37F5:08B4  2226: Event_fifo:1019[Set_event:2041] = EarlySaccade_:1004
 33F4:48CC 37F5:08BC  2234: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:48D6 37F5:08C6  2244: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:48E0 37F5:08D0  2254: #L0 = CALL1 printf(#S108:279)
 33F4:48E8 37F5:08D8  2262: sacctarg:2002 = #I0:16
 33F4:48F2 37F5:08E2  2272: trl_running@21:2309 = #I0:16
 33F4:48FC 37F5:08EC  2282: GOTO .+110 (goto 2392)
 33F4:4900 37F5:08F0  2286: #F0:1 = saccade_time@21:1998 F- fix_off_time@21:1076
 33F4:490E 37F5:08FE  2300: #L0:145 = #I150:42 F< #F0:1
 33F4:491C 37F5:090C  2314: IFnot (#L0:145) GOTO .+78 (goto 2392)
 33F4:4924 37F5:0914  2322: Event_fifo:1019[Set_event:2041] = Saccade_:1996
 33F4:492C 37F5:091C  2330: #L0:145 = Set_event:2041 + #I1:17
 33F4:493A 37F5:092A  2344: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4948 37F5:0938  2358: ReactionTime:1912 = saccade_time@21:1998 F- fix_off_time@21:1076
 33F4:4956 37F5:0946  2372: #L0 = CALL2 printf(#S109:280,ReactionTime:1912)
 33F4:4960 37F5:0950  2382: stage@21:2103 = in_flight@21:1272
 33F4:496A 37F5:095A  2392: GOTO .+562 (goto 2954)
 33F4:496E 37F5:095E  2396: #L0 = CALL0 time()
 33F4:4974 37F5:0964  2402: #F0:1 = fix_off_time@21:1076 F+ max_saccade_time@21:1354
 33F4:4982 37F5:0972  2416: #L1:146 = #L0:145 F> #F0:1
 33F4:4990 37F5:0980  2430: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:499E 37F5:098E  2444: #L3:157 = trl_type@21:2320 == go_trl@21:1195
 33F4:49AC 37F5:099C  2458: #L4:158 = #L2:156 && #L3:157
 33F4:49BA 37F5:09AA  2472: IFnot (#L4:158) GOTO .+90 (goto 2562)
 33F4:49C2 37F5:09B2  2480: Trl_Outcome:2306 = no_sacc@21:1432
 33F4:49CC 37F5:09BC  2490: LastStopOutcome:1308 = no_change@21:1423
 33F4:49D6 37F5:09C6  2500: #L0 = CALL2 dSendf(#S110:282,blank@21:778)
 33F4:49E0 37F5:09D0  2510: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:49EA 37F5:09DA  2520: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:49F4 37F5:09E4  2530: #L0 = CALL1 printf(#S111:283)
 33F4:49FC 37F5:09EC  2538: sacctarg:2002 = #I0:16
 33F4:4A06 37F5:09F6  2548: trl_running@21:2309 = #I0:16
 33F4:4A10 37F5:0A00  2558: GOTO .+396 (goto 2954)
 33F4:4A14 37F5:0A04  2562: #L0 = CALL0 time()
 33F4:4A1A 37F5:0A0A  2568: #F0:1 = fix_off_time@21:1076 F+ cancl_time@21:817
 33F4:4A28 37F5:0A18  2582: #L1:146 = #L0:145 F> #F0:1
 33F4:4A36 37F5:0A26  2596: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:4A44 37F5:0A34  2610: #L3:157 = trl_type@21:2320 == stop_trl@21:2165
 33F4:4A52 37F5:0A42  2624: #L4:158 = #L2:156 && #L3:157
 33F4:4A60 37F5:0A50  2638: IFnot (#L4:158) GOTO .+140 (goto 2778)
 33F4:4A68 37F5:0A58  2646: Trl_Outcome:2306 = nogo_correct@21:1438
 33F4:4A72 37F5:0A62  2656: LastStopOutcome:1308 = no_change@21:1423
 33F4:4A7C 37F5:0A6C  2666: #L0 = CALL2 dSendf(#S112:284,blank@21:778)
 33F4:4A86 37F5:0A76  2676: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4A90 37F5:0A80  2686: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:4A9A 37F5:0A8A  2696: Event_fifo:1019[Set_event:2041] = Correct_:864
 33F4:4AA2 37F5:0A92  2704: #L0:145 = Set_event:2041 + #I1:17
 33F4:4AB0 37F5:0AA0  2718: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4ABE 37F5:0AAE  2732: #L0 = CALL1 printf(#S113:285)
 33F4:4AC6 37F5:0AB6  2740: IFnot (Canc_alert:814) GOTO .+14 (goto 2754)
 33F4:4ACE 37F5:0ABE  2748: SPAWN SVR_BEL2:2193(with 0 args)
 33F4:4AD4 37F5:0AC4  2754: sacctarg:2002 = #I0:16
 33F4:4ADE 37F5:0ACE  2764: trl_running@21:2309 = #I0:16
 33F4:4AE8 37F5:0AD8  2774: GOTO .+180 (goto 2954)
 33F4:4AEC 37F5:0ADC  2778: #L0:145 = ! In_FixWin:1270
 33F4:4AFA 37F5:0AEA  2792: #L1 = CALL0 time()
 33F4:4B00 37F5:0AF0  2798: #F0:1 = fix_off_time@21:1076 F+ cancl_time@21:817
 33F4:4B0E 37F5:0AFE  2812: #L2:156 = #L1:146 F< #F0:1
 33F4:4B1C 37F5:0B0C  2826: #L3:157 = #L0:145 && #L2:156
 33F4:4B2A 37F5:0B1A  2840: #L4:158 = trl_type@21:2320 == stop_trl@21:2165
 33F4:4B38 37F5:0B28  2854: #L5:159 = #L3:157 && #L4:158
 33F4:4B46 37F5:0B36  2868: IFnot (#L5:159) GOTO .+86 (goto 2954)
 33F4:4B4E 37F5:0B3E  2876: Trl_Outcome:2306 = nogo_wrong@21:1448
 33F4:4B58 37F5:0B48  2886: LastStopOutcome:1308 = no_change@21:1423
 33F4:4B62 37F5:0B52  2896: #L0 = CALL1 printf(#S114:286)
 33F4:4B6A 37F5:0B5A  2904: #L0 = CALL2 dSendf(#S115:287,blank@21:778)
 33F4:4B74 37F5:0B64  2914: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4B7E 37F5:0B6E  2924: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:4B88 37F5:0B78  2934: sacctarg:2002 = #I0:16
 33F4:4B92 37F5:0B82  2944: trl_running@21:2309 = #I0:16
 33F4:4B9C 37F5:0B8C  2954: GOTO .+630 (goto 3584)
 33F4:4BA0 37F5:0B90  2958: #L0:145 = stage@21:2103 == in_flight@21:1272
 33F4:4BAE 37F5:0B9E  2972: IFnot (#L0:145) GOTO .+280 (goto 3252)
 33F4:4BB6 37F5:0BA6  2980: IFnot (In_TargWin:1276) GOTO .+112 (goto 3092)
 33F4:4BBE 37F5:0BAE  2988: #L1 = CALL2 dSendf(#S116:288,target_pd@21:2249)
 33F4:4BC8 37F5:0BB8  2998: #L0 = CALL0 time()
 33F4:4BCE 37F5:0BBE  3004: aquire_targ_time@21:752 = F= aquire_targ_time@21:752
 33F4:4BD8 37F5:0BC8  3014: sacctarg:2002 = #I0:16
 33F4:4BE2 37F5:0BD2  3024: #L0 = CALL1 dSendf(#S117:289)
 33F4:4BEA 37F5:0BDA  3032: #L0 = CALL2 dSendf(#S118:290,target@21:2226)
 33F4:4BF4 37F5:0BE4  3042: Event_fifo:1019[Set_event:2041] = Decide_:939
 33F4:4BFC 37F5:0BEC  3050: #L0:145 = Set_event:2041 + #I1:17
 33F4:4C0A 37F5:0BFA  3064: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4C18 37F5:0C08  3078: stage@21:2103 = on_target@21:1538
 33F4:4C22 37F5:0C12  3088: GOTO .+160 (goto 3248)
 33F4:4C26 37F5:0C16  3092: #L0 = CALL0 time()
 33F4:4C2C 37F5:0C1C  3098: #F0:1 = saccade_time@21:1998 F+ max_sacc_duration@21:1348
 33F4:4C3A 37F5:0C2A  3112: #L1:146 = #L0:145 F> #F0:1
 33F4:4C48 37F5:0C38  3126: IFnot (#L1:146) GOTO .+122 (goto 3248)
 33F4:4C50 37F5:0C40  3134: Trl_Outcome:2306 = sacc_out@21:1991
 33F4:4C5A 37F5:0C4A  3144: LastStopOutcome:1308 = no_change@21:1423
 33F4:4C64 37F5:0C54  3154: #L0 = CALL2 dSendf(#S119:291,blank@21:778)
 33F4:4C6E 37F5:0C5E  3164: Event_fifo:1019[Set_event:2041] = Error_sacc:1017
 33F4:4C76 37F5:0C66  3172: #L0:145 = Set_event:2041 + #I1:17
 33F4:4C84 37F5:0C74  3186: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4C92 37F5:0C82  3200: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4C9C 37F5:0C8C  3210: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:4CA6 37F5:0C96  3220: #L0 = CALL1 printf(#S120:293)
 33F4:4CAE 37F5:0C9E  3228: sacctarg:2002 = #I0:16
 33F4:4CB8 37F5:0CA8  3238: trl_running@21:2309 = #I0:16
 33F4:4CC2 37F5:0CB2  3248: GOTO .+336 (goto 3584)
 33F4:4CC6 37F5:0CB6  3252: #L0:145 = stage@21:2103 == on_target@21:1538
 33F4:4CD4 37F5:0CC4  3266: IFnot (#L0:145) GOTO .+318 (goto 3584)
 33F4:4CDC 37F5:0CCC  3274: #L1:146 = ! In_TargWin:1276
 33F4:4CEA 37F5:0CDA  3288: IFnot (#L1:146) GOTO .+126 (goto 3414)
 33F4:4CF2 37F5:0CE2  3296: Trl_Outcome:2306 = broke_targ@21:809
 33F4:4CFC 37F5:0CEC  3306: LastStopOutcome:1308 = no_change@21:1423
 33F4:4D06 37F5:0CF6  3316: #L0 = CALL2 dSendf(#S121:294,blank@21:778)
 33F4:4D10 37F5:0D00  3326: Event_fifo:1019[Set_event:2041] = BreakTFix_:800
 33F4:4D18 37F5:0D08  3334: #L0:145 = Set_event:2041 + #I1:17
 33F4:4D26 37F5:0D16  3348: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4D34 37F5:0D24  3362: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4D3E 37F5:0D2E  3372: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:4D48 37F5:0D38  3382: #L0 = CALL1 printf(#S122:295)
 33F4:4D50 37F5:0D40  3390: sacctarg:2002 = #I0:16
 33F4:4D5A 37F5:0D4A  3400: trl_running@21:2309 = #I0:16
 33F4:4D64 37F5:0D54  3410: GOTO .+174 (goto 3584)
 33F4:4D68 37F5:0D58  3414: #L0 = CALL0 time()
 33F4:4D6E 37F5:0D5E  3420: #F0:1 = aquire_targ_time@21:752 F+ targ_hold_time@21:2199
 33F4:4D7C 37F5:0D6C  3434: #L1:146 = #L0:145 F> #F0:1
 33F4:4D8A 37F5:0D7A  3448: #L2:156 = In_TargWin:1276 && #L1:146
 33F4:4D98 37F5:0D88  3462: IFnot (#L2:156) GOTO .+122 (goto 3584)
 33F4:4DA0 37F5:0D90  3470: Trl_Outcome:2306 = correct_sacc@21:866
 33F4:4DAA 37F5:0D9A  3480: LastStopOutcome:1308 = success@21:2181
 33F4:4DB4 37F5:0DA4  3490: Event_fifo:1019[Set_event:2041] = Correct_:864
 33F4:4DBC 37F5:0DAC  3498: #L0:145 = Set_event:2041 + #I1:17
 33F4:4DCA 37F5:0DBA  3512: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4DD8 37F5:0DC8  3526: #L0 = CALL1 printf(#S123:296)
 33F4:4DE0 37F5:0DD0  3534: #L0 = CALL2 dSendf(#S124:297,blank@21:778)
 33F4:4DEA 37F5:0DDA  3544: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4DF4 37F5:0DE4  3554: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:4DFE 37F5:0DEE  3564: sacctarg:2002 = #I0:16
 33F4:4E08 37F5:0DF8  3574: trl_running@21:2309 = #I0:16
 33F4:4E12 37F5:0E02  3584: NEXTTICK1
 33F4:4E14 37F5:0E04  3586: GOTO .-3248 (goto 338)
 33F4:4E18 37F5:0E08  3590: #L0:145 = Move_ct:1396 > #I0:16
 33F4:4E26 37F5:0E16  3604: IFnot (#L0:145) GOTO .+86 (goto 3690)
 33F4:4E2E 37F5:0E1E  3612: Trl_Outcome:2306 = body_move@21:796
 33F4:4E38 37F5:0E28  3622: LastStopOutcome:1308 = no_change@21:1423
 33F4:4E42 37F5:0E32  3632: #L0 = CALL2 dSendf(#S125:298,blank@21:778)
 33F4:4E4C 37F5:0E3C  3642: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4E56 37F5:0E46  3652: #L0 = CALL2 oSetAttribute(object_fix@21:1465,aINVISIBLE:726)
 33F4:4E60 37F5:0E50  3662: #L0 = CALL1 printf(#S126:299)
 33F4:4E68 37F5:0E58  3670: sacctarg:2002 = #I0:16
 33F4:4E72 37F5:0E62  3680: trl_running@21:2309 = #I0:16
 33F4:4E7C 37F5:0E6C  3690: NEXTTICK1

PROCESS  22: SCHTRIAL (Args=9 CtrlBlk=33F4:202C Size=3844  iOp=2-3845 iCache=26378-30221) DISABLED
 33F4:4012 37F5:0002     0: allowed_fix_time@22:730 = #P1:241
 33F4:401C 37F5:000C    10: curr_holdtime@22:882 = #P2:246
 33F4:4026 37F5:0016    20: trl_type@22:2321 = #P3:247
 33F4:4030 37F5:0020    30: max_saccade_time@22:1355 = #P4:248
 33F4:403A 37F5:002A    40: curr_ssd@22:892 = #P5:249
 33F4:4044 37F5:0034    50: cancl_time@22:818 = #P6:250
 33F4:404E 37F5:003E    60: max_sacc_duration@22:1349 = #P7:251
 33F4:4058 37F5:0048    70: targ_hold_time@22:2200 = #P8:252
 33F4:4062 37F5:0052    80: object_fix@22:1466 = #P9:253
 33F4:406C 37F5:005C    90: StimDone@22:2148 = #I0:16
 33F4:4076 37F5:0066   100: trl_running@22:2310 = #I1:17
 33F4:4080 37F5:0070   110: stage@22:2104 = need_fix@22:1416
 33F4:408A 37F5:007A   120: #L0 = CALL1 printf(#S127:300)
 33F4:4092 37F5:0082   128: #L0 = CALL2 printf(#S128:301,Block_number:792)
 33F4:409C 37F5:008C   138: #L0 = CALL1 printf(#S129:302)
 33F4:40A4 37F5:0094   146: #L0 = CALL2 printf(#S130:304,Trl_number:2305)
 33F4:40AE 37F5:009E   156: #L0 = CALL1 printf(#S131:305)
 33F4:40B6 37F5:00A6   164: #L0 = CALL2 printf(#S132:306,TrialTp:2300)
 33F4:40C0 37F5:00B0   174: #L0 = CALL1 printf(#S133:307)
 33F4:40C8 37F5:00B8   182: #L0 = CALL2 printf(#S134:308,curr_holdtime@22:882)
 33F4:40D2 37F5:00C2   192: #L0 = CALL1 printf(#S135:309)
 33F4:40DA 37F5:00CA   200: #L0:145 = SingMode:2077 == #I0:16
 33F4:40E8 37F5:00D8   214: IFnot (#L0:145) GOTO .+114 (goto 328)
 33F4:40F0 37F5:00E0   222: #L1 = CALL2 printf(#S136:310,Rand_Comp_Trl_number:1860)
 33F4:40FA 37F5:00EA   232: #L0 = CALL2 printf(#S137:311,RandPerAcc:1908)
 33F4:4104 37F5:00F4   242: #L0 = CALL1 printf(#S138:312)
 33F4:410C 37F5:00FC   250: #L0 = CALL2 printf(#S139:313,Rep_Comp_Trl_number:1921)
 33F4:4116 37F5:0106   260: #L0 = CALL2 printf(#S140:315,RepPerAcc:1927)
 33F4:4120 37F5:0110   270: #L0 = CALL1 printf(#S141:316)
 33F4:4128 37F5:0118   278: #L0 = CALL2 printf(#S142:317,avg_rand_rt:765)
 33F4:4132 37F5:0122   288: #L0 = CALL1 printf(#S143:318)
 33F4:413A 37F5:012A   296: #L0 = CALL2 printf(#S144:319,avg_rep_rt:768)
 33F4:4144 37F5:0134   306: #L0 = CALL1 printf(#S145:320)
 33F4:414C 37F5:013C   314: #L0 = CALL2 printf(#S146:321,search_fix_time:2030)
 33F4:4156 37F5:0146   324: GOTO .+128 (goto 452)
 33F4:415A 37F5:014A   328: #L0:145 = SingMode:2077 == #I1:17
 33F4:4168 37F5:0158   342: IFnot (#L0:145) GOTO .+110 (goto 452)
 33F4:4170 37F5:0160   350: #L1 = CALL2 printf(#S147:322,Rand_Comp_Trl_DA:1858)
 33F4:417A 37F5:016A   360: #L0 = CALL2 printf(#S148:323,RandPerAcc_DA:1909)
 33F4:4184 37F5:0174   370: #L0 = CALL1 printf(#S149:324)
 33F4:418C 37F5:017C   378: #L0 = CALL2 printf(#S150:326,Rand_Comp_Trl_DP:1859)
 33F4:4196 37F5:0186   388: #L0 = CALL2 printf(#S151:327,RandPerAcc_DP:1910)
 33F4:41A0 37F5:0190   398: #L0 = CALL1 printf(#S152:328)
 33F4:41A8 37F5:0198   406: #L0 = CALL2 printf(#S153:329,avg_rand_rt_DA:766)
 33F4:41B2 37F5:01A2   416: #L0 = CALL1 printf(#S154:330)
 33F4:41BA 37F5:01AA   424: #L0 = CALL2 printf(#S155:331,avg_rand_rt_DP:767)
 33F4:41C4 37F5:01B4   434: #L0 = CALL1 printf(#S156:332)
 33F4:41CC 37F5:01BC   442: #L0 = CALL2 printf(#S157:333,search_fix_time:2030)
 33F4:41D6 37F5:01C6   452: #L0:145 = SingMode:2077 == #I0:16
 33F4:41E4 37F5:01D4   466: IFnot (#L0:145) GOTO .+48 (goto 514)
 33F4:41EC 37F5:01DC   474: Event_fifo:1019[Set_event:2041] = SearchHeader_:2032
 33F4:41F4 37F5:01E4   482: #L0:145 = Set_event:2041 + #I1:17
 33F4:4202 37F5:01F2   496: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4210 37F5:0200   510: GOTO .+62 (goto 572)
 33F4:4214 37F5:0204   514: #L0:145 = SingMode:2077 == #I1:17
 33F4:4222 37F5:0212   528: IFnot (#L0:145) GOTO .+44 (goto 572)
 33F4:422A 37F5:021A   536: Event_fifo:1019[Set_event:2041] = CaptureHeader_:820
 33F4:4232 37F5:0222   544: #L0:145 = Set_event:2041 + #I1:17
 33F4:4240 37F5:0230   558: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:424E 37F5:023E   572: Event_fifo:1019[Set_event:2041] = TrialStart_:2299
 33F4:4256 37F5:0246   580: #L0:145 = Set_event:2041 + #I1:17
 33F4:4264 37F5:0254   594: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4272 37F5:0262   608: #L0 = CALL2 dSendf(#S158:334,fixation_pd@22:1135)
 33F4:427C 37F5:026C   618: #L0 = CALL0 time()
 33F4:4282 37F5:0272   624: fix_spot_time@22:1085 = F= fix_spot_time@22:1085
 33F4:428C 37F5:027C   634: Event_fifo:1019[Set_event:2041] = FixSpotOn_:1164
 33F4:4294 37F5:0284   642: #L0:145 = Set_event:2041 + #I1:17
 33F4:42A2 37F5:0292   656: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:42B0 37F5:02A0   670: #L0 = CALL1 dSendf(#S159:335)
 33F4:42B8 37F5:02A8   678: #L0 = CALL2 dSendf(#S160:337,fixation@22:1108)
 33F4:42C2 37F5:02B2   688: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aVISIBLE:769)
 33F4:42CC 37F5:02BC   698: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:42D6 37F5:02C6   708: IFnot (trl_running@22:2310) GOTO .+3136 (goto 3844)
 33F4:42DE 37F5:02CE   716: #L0:145 = stage@22:2104 == need_fix@22:1416
 33F4:42EC 37F5:02DC   730: IFnot (#L0:145) GOTO .+206 (goto 936)
 33F4:42F4 37F5:02E4   738: IFnot (In_FixWin:1270) GOTO .+84 (goto 822)
 33F4:42FC 37F5:02EC   746: #L1 = CALL0 time()
 33F4:4302 37F5:02F2   752: aquire_fix_time@22:748 = F= aquire_fix_time@22:748
 33F4:430C 37F5:02FC   762: Trl_Start_Time:2315 = F= Trl_Start_Time:2315
 33F4:4316 37F5:0306   772: Event_fifo:1019[Set_event:2041] = Fixate_:1096
 33F4:431E 37F5:030E   780: #L0:145 = Set_event:2041 + #I1:17
 33F4:432C 37F5:031C   794: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:433A 37F5:032A   808: stage@22:2104 = fixating_ph@22:1103
 33F4:4344 37F5:0334   818: GOTO .+114 (goto 932)
 33F4:4348 37F5:0338   822: #L0 = CALL0 time()
 33F4:434E 37F5:033E   828: #F0:1 = fix_spot_time@22:1085 F+ allowed_fix_time@22:730
 33F4:435C 37F5:034C   842: #L1:146 = #L0:145 F> #F0:1
 33F4:436A 37F5:035A   856: IFnot (#L1:146) GOTO .+76 (goto 932)
 33F4:4372 37F5:0362   864: Trl_Outcome:2306 = no_fix@22:1428
 33F4:437C 37F5:036C   874: #L0 = CALL2 dSendf(#S161:338,blank@22:779)
 33F4:4386 37F5:0376   884: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4390 37F5:0380   894: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:439A 37F5:038A   904: LastSearchOutcome:1306 = failure@22:1045
 33F4:43A4 37F5:0394   914: #L0 = CALL1 printf(#S162:339)
 33F4:43AC 37F5:039C   922: trl_running@22:2310 = #I0:16
 33F4:43B6 37F5:03A6   932: GOTO .+2826 (goto 3758)
 33F4:43BA 37F5:03AA   936: #L0:145 = stage@22:2104 == fixating_ph@22:1103
 33F4:43C8 37F5:03B8   950: IFnot (#L0:145) GOTO .+448 (goto 1398)
 33F4:43D0 37F5:03C0   958: #L1:146 = ! In_FixWin:1270
 33F4:43DE 37F5:03CE   972: IFnot (#L1:146) GOTO .+80 (goto 1052)
 33F4:43E6 37F5:03D6   980: Trl_Outcome:2306 = broke_fix@22:804
 33F4:43F0 37F5:03E0   990: #L0 = CALL2 dSendf(#S163:340,blank@22:779)
 33F4:43FA 37F5:03EA  1000: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4404 37F5:03F4  1010: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:440E 37F5:03FE  1020: LastSearchOutcome:1306 = failure@22:1045
 33F4:4418 37F5:0408  1030: #L0 = CALL1 printf(#S164:341)
 33F4:4420 37F5:0410  1038: trl_running@22:2310 = #I0:16
 33F4:442A 37F5:041A  1048: GOTO .+346 (goto 1394)
 33F4:442E 37F5:041E  1052: #L0 = CALL0 time()
 33F4:4434 37F5:0424  1058: #F0:1 = aquire_fix_time@22:748 F+ curr_holdtime@22:882
 33F4:4442 37F5:0432  1072: #L1:146 = #L0:145 F> #F0:1
 33F4:4450 37F5:0440  1086: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:445E 37F5:044E  1100: IFnot (#L2:156) GOTO .+142 (goto 1242)
 33F4:4466 37F5:0456  1108: #L3:157 = PlacPres:1621 == #I2:53
 33F4:4474 37F5:0464  1122: IFnot (#L3:157) GOTO .+96 (goto 1218)
 33F4:447C 37F5:046C  1130: Event_fifo:1019[Set_event:2041] = PlacOn_:1620
 33F4:4484 37F5:0474  1138: #L0:145 = Set_event:2041 + #I1:17
 33F4:4492 37F5:0482  1152: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:44A0 37F5:0490  1166: #L0 = CALL2 dSendf(#S165:342,plac_pd@22:1617)
 33F4:44AA 37F5:049A  1176: #L0 = CALL1 dSendf(#S166:343)
 33F4:44B2 37F5:04A2  1184: #L0 = CALL2 dSendf(#S167:344,plac@22:1611)
 33F4:44BC 37F5:04AC  1194: #L0 = CALL2 dSendf(#S168:345,plac_duration:1615)
 33F4:44C6 37F5:04B6  1204: stage@22:2104 = fixating_targ@22:1104
 33F4:44D0 37F5:04C0  1214: GOTO .+24 (goto 1238)
 33F4:44D4 37F5:04C4  1218: plac_duration:1615 = F= plac_duration:1615
 33F4:44DE 37F5:04CE  1228: stage@22:2104 = fixating_targ@22:1104
 33F4:44E8 37F5:04D8  1238: GOTO .+156 (goto 1394)
 33F4:44EC 37F5:04DC  1242: #L0:145 = StimDone@22:2148 == #I0:16
 33F4:44FA 37F5:04EA  1256: #L1:146 = StimTm:2151 == #I1:17
 33F4:4508 37F5:04F8  1270: #L2:156 = #L0:145 && #L1:146
 33F4:4516 37F5:0506  1284: #L3:157 = #L2:156 && In_FixWin:1270
 33F4:4524 37F5:0514  1298: #L4 = CALL0 time()
 33F4:452A 37F5:051A  1304: #L5:159 = curr_holdtime@22:882 - #I150:42
 33F4:4538 37F5:0528  1318: #F0:1 = aquire_fix_time@22:748 F+ #L5:159
 33F4:4546 37F5:0536  1332: #L6:160 = #L4:158 F> #F0:1
 33F4:4554 37F5:0544  1346: #L7:161 = #L3:157 && #L6:160
 33F4:4562 37F5:0552  1360: IFnot (#L7:161) GOTO .+34 (goto 1394)
 33F4:456A 37F5:055A  1368: #P1:241 = Stim_channel:2121
 33F4:4574 37F5:0564  1378: SPAWN STIM:2120(with 1 args)
 33F4:457A 37F5:056A  1384: StimDone@22:2148 = #I1:17
 33F4:4584 37F5:0574  1394: GOTO .+2364 (goto 3758)
 33F4:4588 37F5:0578  1398: #L0:145 = stage@22:2104 == fixating_targ@22:1104
 33F4:4596 37F5:0586  1412: IFnot (#L0:145) GOTO .+214 (goto 1626)
 33F4:459E 37F5:058E  1420: #L1:146 = ! In_FixWin:1270
 33F4:45AC 37F5:059C  1434: IFnot (#L1:146) GOTO .+80 (goto 1514)
 33F4:45B4 37F5:05A4  1442: Trl_Outcome:2306 = broke_fix@22:804
 33F4:45BE 37F5:05AE  1452: #L0 = CALL2 dSendf(#S169:346,blank@22:779)
 33F4:45C8 37F5:05B8  1462: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:45D2 37F5:05C2  1472: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:45DC 37F5:05CC  1482: LastSearchOutcome:1306 = failure@22:1045
 33F4:45E6 37F5:05D6  1492: #L0 = CALL1 printf(#S170:348)
 33F4:45EE 37F5:05DE  1500: trl_running@22:2310 = #I0:16
 33F4:45F8 37F5:05E8  1510: GOTO .+112 (goto 1622)
 33F4:45FC 37F5:05EC  1514: IFnot (In_FixWin:1270) GOTO .+108 (goto 1622)
 33F4:4604 37F5:05F4  1522: Event_fifo:1019[Set_event:2041] = Target_:2238
 33F4:460C 37F5:05FC  1530: #L0:145 = Set_event:2041 + #I1:17
 33F4:461A 37F5:060A  1544: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4628 37F5:0618  1558: #L0 = CALL2 dSendf(#S171:349,target_f_pd@22:2245)
 33F4:4632 37F5:0622  1568: #L0 = CALL0 time()
 33F4:4638 37F5:0628  1574: targ_time@22:2211 = F= targ_time@22:2211
 33F4:4642 37F5:0632  1584: #L0 = CALL1 dSendf(#S172:350)
 33F4:464A 37F5:063A  1592: #L0 = CALL2 dSendf(#S173:351,target_f@22:2242)
 33F4:4654 37F5:0644  1602: #L0 = CALL2 dSendf(#S174:352,search_fix_time:2030)
 33F4:465E 37F5:064E  1612: stage@22:2104 = fixating_off@22:1102
 33F4:4668 37F5:0658  1622: GOTO .+2136 (goto 3758)
 33F4:466C 37F5:065C  1626: #L0:145 = stage@22:2104 == fixating_off@22:1102
 33F4:467A 37F5:066A  1640: IFnot (#L0:145) GOTO .+552 (goto 2192)
 33F4:4682 37F5:0672  1648: #L1:146 = ! In_FixWin:1270
 33F4:4690 37F5:0680  1662: IFnot (#L1:146) GOTO .+116 (goto 1778)
 33F4:4698 37F5:0688  1670: Trl_Outcome:2306 = too_fast@22:2290
 33F4:46A2 37F5:0692  1680: #L0 = CALL2 dSendf(#S175:353,blank@22:779)
 33F4:46AC 37F5:069C  1690: Event_fifo:1019[Set_event:2041] = EarlySaccade_:1004
 33F4:46B4 37F5:06A4  1698: #L0:145 = Set_event:2041 + #I1:17
 33F4:46C2 37F5:06B2  1712: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:46D0 37F5:06C0  1726: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:46DA 37F5:06CA  1736: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:46E4 37F5:06D4  1746: LastSearchOutcome:1306 = failure@22:1045
 33F4:46EE 37F5:06DE  1756: #L0 = CALL1 printf(#S176:354)
 33F4:46F6 37F5:06E6  1764: trl_running@22:2310 = #I0:16
 33F4:4700 37F5:06F0  1774: GOTO .+414 (goto 2188)
 33F4:4704 37F5:06F4  1778: #L0:145 = ! In_FixWin:1270
 33F4:4712 37F5:0702  1792: #L1 = CALL0 time()
 33F4:4718 37F5:0708  1798: #F0:1 = targ_time@22:2211 F+ Min_saccade_time:1380
 33F4:4726 37F5:0716  1812: #L2:156 = #L1:146 F< #F0:1
 33F4:4734 37F5:0724  1826: #L3:157 = #L0:145 && #L2:156
 33F4:4742 37F5:0732  1840: IFnot (#L3:157) GOTO .+116 (goto 1956)
 33F4:474A 37F5:073A  1848: Trl_Outcome:2306 = too_fast@22:2290
 33F4:4754 37F5:0744  1858: #L0 = CALL2 dSendf(#S177:355,blank@22:779)
 33F4:475E 37F5:074E  1868: Event_fifo:1019[Set_event:2041] = EarlySaccade_:1004
 33F4:4766 37F5:0756  1876: #L0:145 = Set_event:2041 + #I1:17
 33F4:4774 37F5:0764  1890: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4782 37F5:0772  1904: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:478C 37F5:077C  1914: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:4796 37F5:0786  1924: LastSearchOutcome:1306 = failure@22:1045
 33F4:47A0 37F5:0790  1934: #L0 = CALL1 printf(#S178:356)
 33F4:47A8 37F5:0798  1942: trl_running@22:2310 = #I0:16
 33F4:47B2 37F5:07A2  1952: GOTO .+236 (goto 2188)
 33F4:47B6 37F5:07A6  1956: #L0 = CALL0 time()
 33F4:47BC 37F5:07AC  1962: #L1:146 = #L0:145 F> targ_time@22:2211
 33F4:47CA 37F5:07BA  1976: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:47D8 37F5:07C8  1990: IFnot (#L2:156) GOTO .+198 (goto 2188)
 33F4:47E0 37F5:07D0  1998: #L3 = CALL2 dSendf(#S179:357,target@22:2227)
 33F4:47EA 37F5:07DA  2008: #L0:145 = Catch:821 == #I0:16
 33F4:47F8 37F5:07E8  2022: IFnot (#L0:145) GOTO .+18 (goto 2040)
 33F4:4800 37F5:07F0  2030: #L1 = CALL2 oSetAttribute(object_targ:1513,aVISIBLE:769)
 33F4:480A 37F5:07FA  2040: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:4814 37F5:0804  2050: stage@22:2104 = fixation_offset@22:1132
 33F4:481E 37F5:080E  2060: #L0 = CALL0 time()
 33F4:4824 37F5:0814  2066: fix_off_Time@22:1077 = F= fix_off_Time@22:1077
 33F4:482E 37F5:081E  2076: Event_fifo:1019[Set_event:2041] = FixSpotOff_:1163
 33F4:4836 37F5:0826  2084: #L0:145 = Set_event:2041 + #I1:17
 33F4:4844 37F5:0834  2098: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4852 37F5:0842  2112: #L0:145 = StimDone@22:2148 == #I0:16
 33F4:4860 37F5:0850  2126: #L1:146 = StimTm:2151 == #I2:53
 33F4:486E 37F5:085E  2140: #L2:156 = #L0:145 && #L1:146
 33F4:487C 37F5:086C  2154: IFnot (#L2:156) GOTO .+34 (goto 2188)
 33F4:4884 37F5:0874  2162: #P1:241 = Stim_channel:2121
 33F4:488E 37F5:087E  2172: SPAWN STIM:2120(with 1 args)
 33F4:4894 37F5:0884  2178: StimDone@22:2148 = #I1:17
 33F4:489E 37F5:088E  2188: GOTO .+1570 (goto 3758)
 33F4:48A2 37F5:0892  2192: #L0:145 = stage@22:2104 == fixation_offset@22:1132
 33F4:48B0 37F5:08A0  2206: IFnot (#L0:145) GOTO .+942 (goto 3148)
 33F4:48B8 37F5:08A8  2214: #L1:146 = ! In_FixWin:1270
 33F4:48C6 37F5:08B6  2228: IFnot (#L1:146) GOTO .+474 (goto 2702)
 33F4:48CE 37F5:08BE  2236: #L2:156 = Catch:821 == #I1:17
 33F4:48DC 37F5:08CC  2250: IFnot (#L2:156) GOTO .+116 (goto 2366)
 33F4:48E4 37F5:08D4  2258: Trl_Outcome:2306 = nogo_wrong@22:1449
 33F4:48EE 37F5:08DE  2268: #L0 = CALL2 dSendf(#S180:359,blank@22:779)
 33F4:48F8 37F5:08E8  2278: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4902 37F5:08F2  2288: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:490C 37F5:08FC  2298: Event_fifo:1019[Set_event:2041] = CatchIncorrectG_:826
 33F4:4914 37F5:0904  2306: #L0:145 = Set_event:2041 + #I1:17
 33F4:4922 37F5:0912  2320: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4930 37F5:0920  2334: LastSearchOutcome:1306 = failure@22:1045
 33F4:493A 37F5:092A  2344: #L0 = CALL1 printf(#S181:360)
 33F4:4942 37F5:0932  2352: trl_running@22:2310 = #I0:16
 33F4:494C 37F5:093C  2362: GOTO .+336 (goto 2698)
 33F4:4950 37F5:0940  2366: #L0:145 = Catch:821 == #I0:16
 33F4:495E 37F5:094E  2380: IFnot (#L0:145) GOTO .+318 (goto 2698)
 33F4:4966 37F5:0956  2388: #L1 = CALL0 time()
 33F4:496C 37F5:095C  2394: saccade_time@22:1999 = F= saccade_time@22:1999
 33F4:4976 37F5:0966  2404: Event_fifo:1019[Set_event:2041] = Saccade_:1996
 33F4:497E 37F5:096E  2412: #L0:145 = Set_event:2041 + #I1:17
 33F4:498C 37F5:097C  2426: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:499A 37F5:098A  2440: #F0:1 = saccade_time@22:1999 F- targ_time@22:2211
 33F4:49A8 37F5:0998  2454: #F1:2 = #F0:1 F- search_fix_time:2030
 33F4:49B6 37F5:09A6  2468: #F2:3 = #F1:2 F- plac_duration:1615
 33F4:49C4 37F5:09B4  2482: #L0 = CALL2 printf(#S182:361,#F2:3)
 33F4:49CE 37F5:09BE  2492: #F0:1 = saccade_time@22:1999 F- targ_time@22:2211
 33F4:49DC 37F5:09CC  2506: #F1:2 = #F0:1 F- search_fix_time:2030
 33F4:49EA 37F5:09DA  2520: current_rt:903 = #F1:2 F- plac_duration:1615
 33F4:49F8 37F5:09E8  2534: stage@22:2104 = in_flight@22:1273
 33F4:4A02 37F5:09F2  2544: #F0:1 = saccade_time@22:1999 F- fix_off_Time@22:1077
 33F4:4A10 37F5:0A00  2558: #F1:2 = search_fix_time:2030 F+ plac_duration:1615
 33F4:4A1E 37F5:0A0E  2572: #L0:145 = #F0:1 F< #F1:2
 33F4:4A2C 37F5:0A1C  2586: IFnot (#L0:145) GOTO .+112 (goto 2698)
 33F4:4A34 37F5:0A24  2594: Trl_Outcome:2306 = too_fast@22:2290
 33F4:4A3E 37F5:0A2E  2604: #L0 = CALL2 dSendf(#S183:362,blank@22:779)
 33F4:4A48 37F5:0A38  2614: Event_fifo:1019[Set_event:2041] = EarlySaccade_:1004
 33F4:4A50 37F5:0A40  2622: #L0:145 = Set_event:2041 + #I1:17
 33F4:4A5E 37F5:0A4E  2636: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4A6C 37F5:0A5C  2650: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4A76 37F5:0A66  2660: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:4A80 37F5:0A70  2670: LastSearchOutcome:1306 = failure@22:1045
 33F4:4A8A 37F5:0A7A  2680: #L0 = CALL1 printf(#S184:363)
 33F4:4A92 37F5:0A82  2688: trl_running@22:2310 = #I0:16
 33F4:4A9C 37F5:0A8C  2698: GOTO .+446 (goto 3144)
 33F4:4AA0 37F5:0A90  2702: #L0:145 = Catch:821 == #I0:16
 33F4:4AAE 37F5:0A9E  2716: #L1:146 = #L0:145 && In_FixWin:1270
 33F4:4ABC 37F5:0AAC  2730: #L2 = CALL0 time()
 33F4:4AC2 37F5:0AB2  2736: #F0:1 = fix_off_Time@22:1077 F+ search_fix_time:2030
 33F4:4AD0 37F5:0AC0  2750: #F1:2 = #F0:1 F+ plac_duration:1615
 33F4:4ADE 37F5:0ACE  2764: #F2:3 = #F1:2 F+ max_saccade_time@22:1355
 33F4:4AEC 37F5:0ADC  2778: #L3:157 = #L2:156 F> #F2:3
 33F4:4AFA 37F5:0AEA  2792: #L4:158 = #L1:146 && #L3:157
 33F4:4B08 37F5:0AF8  2806: IFnot (#L4:158) GOTO .+122 (goto 2928)
 33F4:4B10 37F5:0B00  2814: Trl_Outcome:2306 = no_saccade@22:1436
 33F4:4B1A 37F5:0B0A  2824: #L0 = CALL2 dSendf(#S185:364,blank@22:779)
 33F4:4B24 37F5:0B14  2834: Event_fifo:1019[Set_event:2041] = CatchIncorrectNG_:827
 33F4:4B2C 37F5:0B1C  2842: #L0:145 = Set_event:2041 + #I1:17
 33F4:4B3A 37F5:0B2A  2856: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4B48 37F5:0B38  2870: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4B52 37F5:0B42  2880: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:4B5C 37F5:0B4C  2890: LastSearchOutcome:1306 = failure@22:1045
 33F4:4B66 37F5:0B56  2900: #L0 = CALL1 printf(#S186:365)
 33F4:4B6E 37F5:0B5E  2908: SPAWN SVR_BELL:2194(with 0 args)
 33F4:4B74 37F5:0B64  2914: trl_running@22:2310 = #I0:16
 33F4:4B7E 37F5:0B6E  2924: GOTO .+220 (goto 3144)
 33F4:4B82 37F5:0B72  2928: #L0:145 = Catch:821 == #I1:17
 33F4:4B90 37F5:0B80  2942: #L1:146 = #L0:145 && In_FixWin:1270
 33F4:4B9E 37F5:0B8E  2956: #L2 = CALL0 time()
 33F4:4BA4 37F5:0B94  2962: #F0:1 = fix_off_Time@22:1077 F+ search_fix_time:2030
 33F4:4BB2 37F5:0BA2  2976: #F1:2 = #F0:1 F+ plac_duration:1615
 33F4:4BC0 37F5:0BB0  2990: #F2:3 = #F1:2 F+ catch_hold_time:822
 33F4:4BCE 37F5:0BBE  3004: #L3:157 = #L2:156 F> #F2:3
 33F4:4BDC 37F5:0BCC  3018: #L4:158 = #L1:146 && #L3:157
 33F4:4BEA 37F5:0BDA  3032: IFnot (#L4:158) GOTO .+112 (goto 3144)
 33F4:4BF2 37F5:0BE2  3040: Trl_Outcome:2306 = nogo_correct@22:1439
 33F4:4BFC 37F5:0BEC  3050: #L0 = CALL2 dSendf(#S187:366,blank@22:779)
 33F4:4C06 37F5:0BF6  3060: Event_fifo:1019[Set_event:2041] = CatchCorrect_:825
 33F4:4C0E 37F5:0BFE  3068: #L0:145 = Set_event:2041 + #I1:17
 33F4:4C1C 37F5:0C0C  3082: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4C2A 37F5:0C1A  3096: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4C34 37F5:0C24  3106: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:4C3E 37F5:0C2E  3116: LastSearchOutcome:1306 = nogo_success@22:1445
 33F4:4C48 37F5:0C38  3126: #L0 = CALL1 printf(#S188:367)
 33F4:4C50 37F5:0C40  3134: trl_running@22:2310 = #I0:16
 33F4:4C5A 37F5:0C4A  3144: GOTO .+614 (goto 3758)
 33F4:4C5E 37F5:0C4E  3148: #L0:145 = stage@22:2104 == in_flight@22:1273
 33F4:4C6C 37F5:0C5C  3162: IFnot (#L0:145) GOTO .+222 (goto 3384)
 33F4:4C74 37F5:0C64  3170: IFnot (In_TargWin:1276) GOTO .+74 (goto 3244)
 33F4:4C7C 37F5:0C6C  3178: #L1 = CALL0 time()
 33F4:4C82 37F5:0C72  3184: aquire_targ_time@22:753 = F= aquire_targ_time@22:753
 33F4:4C8C 37F5:0C7C  3194: stage@22:2104 = on_target@22:1539
 33F4:4C96 37F5:0C86  3204: Event_fifo:1019[Set_event:2041] = Correct_sacc:865
 33F4:4C9E 37F5:0C8E  3212: #L0:145 = Set_event:2041 + #I1:17
 33F4:4CAC 37F5:0C9C  3226: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4CBA 37F5:0CAA  3240: GOTO .+140 (goto 3380)
 33F4:4CBE 37F5:0CAE  3244: #L0 = CALL0 time()
 33F4:4CC4 37F5:0CB4  3250: #F0:1 = saccade_time@22:1999 F+ max_sacc_duration@22:1349
 33F4:4CD2 37F5:0CC2  3264: #L1:146 = #L0:145 F> #F0:1
 33F4:4CE0 37F5:0CD0  3278: IFnot (#L1:146) GOTO .+102 (goto 3380)
 33F4:4CE8 37F5:0CD8  3286: Trl_Outcome:2306 = sacc_out@22:1992
 33F4:4CF2 37F5:0CE2  3296: #L0 = CALL2 dSendf(#S189:368,blank@22:779)
 33F4:4CFC 37F5:0CEC  3306: Event_fifo:1019[Set_event:2041] = Error_sacc:1017
 33F4:4D04 37F5:0CF4  3314: #L0:145 = Set_event:2041 + #I1:17
 33F4:4D12 37F5:0D02  3328: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4D20 37F5:0D10  3342: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4D2A 37F5:0D1A  3352: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:4D34 37F5:0D24  3362: #L0 = CALL1 printf(#S190:370)
 33F4:4D3C 37F5:0D2C  3370: trl_running@22:2310 = #I0:16
 33F4:4D46 37F5:0D36  3380: GOTO .+378 (goto 3758)
 33F4:4D4A 37F5:0D3A  3384: #L0:145 = stage@22:2104 == on_target@22:1539
 33F4:4D58 37F5:0D48  3398: IFnot (#L0:145) GOTO .+360 (goto 3758)
 33F4:4D60 37F5:0D50  3406: #L1:146 = ! In_TargWin:1276
 33F4:4D6E 37F5:0D5E  3420: IFnot (#L1:146) GOTO .+106 (goto 3526)
 33F4:4D76 37F5:0D66  3428: Trl_Outcome:2306 = broke_targ@22:810
 33F4:4D80 37F5:0D70  3438: #L0 = CALL2 dSendf(#S191:371,blank@22:779)
 33F4:4D8A 37F5:0D7A  3448: Event_fifo:1019[Set_event:2041] = BreakTFix_:800
 33F4:4D92 37F5:0D82  3456: #L0:145 = Set_event:2041 + #I1:17
 33F4:4DA0 37F5:0D90  3470: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4DAE 37F5:0D9E  3484: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4DB8 37F5:0DA8  3494: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:4DC2 37F5:0DB2  3504: #L0 = CALL1 printf(#S192:372)
 33F4:4DCA 37F5:0DBA  3512: trl_running@22:2310 = #I0:16
 33F4:4DD4 37F5:0DC4  3522: GOTO .+236 (goto 3758)
 33F4:4DD8 37F5:0DC8  3526: #L0 = CALL0 time()
 33F4:4DDE 37F5:0DCE  3532: #F0:1 = aquire_targ_time@22:753 F+ targ_hold_time@22:2200
 33F4:4DEC 37F5:0DDC  3546: #L1:146 = #L0:145 F> #F0:1
 33F4:4DFA 37F5:0DEA  3560: #L2:156 = In_TargWin:1276 && #L1:146
 33F4:4E08 37F5:0DF8  3574: IFnot (#L2:156) GOTO .+184 (goto 3758)
 33F4:4E10 37F5:0E00  3582: Trl_Outcome:2306 = go_correct@22:1187
 33F4:4E1A 37F5:0E0A  3592: Correct_trls:869 = Correct_trls:869 + #I1:17
 33F4:4E28 37F5:0E18  3606: Event_fifo:1019[Set_event:2041] = Correct_:864
 33F4:4E30 37F5:0E20  3614: #L0:145 = Set_event:2041 + #I1:17
 33F4:4E3E 37F5:0E2E  3628: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4E4C 37F5:0E3C  3642: LastSearchOutcome:1306 = success@22:2182
 33F4:4E56 37F5:0E46  3652: #L0 = CALL1 printf(#S193:373)
 33F4:4E5E 37F5:0E4E  3660: #L0 = CALL2 dSendf(#S194:374,blank@22:779)
 33F4:4E68 37F5:0E58  3670: #L0 = CALL2 dSendf(#S195:375,#I200:55)
 33F4:4E72 37F5:0E62  3680: #L0:145 = StimTm:2151 == #I3:74
 33F4:4E80 37F5:0E70  3694: IFnot (#L0:145) GOTO .+34 (goto 3728)
 33F4:4E88 37F5:0E78  3702: #P1:241 = Stim_channel:2121
 33F4:4E92 37F5:0E82  3712: SPAWN STIM:2120(with 1 args)
 33F4:4E98 37F5:0E88  3718: StimDone@22:2148 = #I1:17
 33F4:4EA2 37F5:0E92  3728: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4EAC 37F5:0E9C  3738: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:4EB6 37F5:0EA6  3748: trl_running@22:2310 = #I0:16
 33F4:4EC0 37F5:0EB0  3758: #L0:145 = Move_ct:1396 > #I0:16
 33F4:4ECE 37F5:0EBE  3772: IFnot (#L0:145) GOTO .+66 (goto 3838)
 33F4:4ED6 37F5:0EC6  3780: Trl_Outcome:2306 = body_move@22:797
 33F4:4EE0 37F5:0ED0  3790: #L0 = CALL2 dSendf(#S196:376,blank@22:779)
 33F4:4EEA 37F5:0EDA  3800: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4EF4 37F5:0EE4  3810: #L0 = CALL2 oSetAttribute(object_fix@22:1466,aINVISIBLE:726)
 33F4:4EFE 37F5:0EEE  3820: #L0 = CALL1 printf(#S197:377)
 33F4:4F06 37F5:0EF6  3828: trl_running@22:2310 = #I0:16
 33F4:4F10 37F5:0F00  3838: NEXTTICK1
 33F4:4F12 37F5:0F02  3840: GOTO .-3132 (goto 708)

PROCESS  23: REP_ORT (Args=0 CtrlBlk=33F4:2058 Size=3364  iOp=2-3365 iCache=30222-33585) DISABLED
 33F4:4012 37F5:0002     0: i:1236 = #I0:16
 33F4:401C 37F5:000C    10: #L0:145 = i:1236 < #I4:87
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+118 (goto 142)
 33F4:4032 37F5:0022    32: j = CALL1 random(#I4:87)
 33F4:403A 37F5:002A    40: #L0:145 = RepDistOrients:1924[i:1236]
 33F4:4042 37F5:0032    48: temp:2267 = #L0:145
 33F4:404C 37F5:003C    58: #L0:145 = RepDistOrients:1924[j:1285]
 33F4:4054 37F5:0044    66: RepDistOrients:1924[i:1236] = #L0:145
 33F4:405C 37F5:004C    74: RepDistOrients:1924[j:1285] = temp:2267
 33F4:4064 37F5:0054    82: #L0:145 = RepTargOrients:1929[i:1236]
 33F4:406C 37F5:005C    90: temp:2267 = #L0:145
 33F4:4076 37F5:0066   100: #L0:145 = RepTargOrients:1929[j:1285]
 33F4:407E 37F5:006E   108: RepTargOrients:1929[i:1236] = #L0:145
 33F4:4086 37F5:0076   116: RepTargOrients:1929[j:1285] = temp:2267
 33F4:408E 37F5:007E   124: i:1236 = i:1236 + #I1:17
 33F4:409C 37F5:008C   138: GOTO .-128 (goto 10)
 33F4:40A0 37F5:0090   142: #L0:145 = SearchType:2033 == #I1:17
 33F4:40AE 37F5:009E   156: IFnot (#L0:145) GOTO .+1260 (goto 1416)
 33F4:40B6 37F5:00A6   164: R1_targ_orient:1674 = TargOrt:2258
 33F4:40C0 37F5:00B0   174: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:40C8 37F5:00B8   182: R1_d1_orient:1647 = #L0:145
 33F4:40D2 37F5:00C2   192: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:40DA 37F5:00CA   200: R1_d2_orient:1650 = #L0:145
 33F4:40E4 37F5:00D4   210: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:40EC 37F5:00DC   218: R1_d3_orient:1653 = #L0:145
 33F4:40F6 37F5:00E6   228: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:40FE 37F5:00EE   236: R1_d4_orient:1656 = #L0:145
 33F4:4108 37F5:00F8   246: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:4110 37F5:0100   254: R1_d5_orient:1659 = #L0:145
 33F4:411A 37F5:010A   264: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:4122 37F5:0112   272: R1_d6_orient:1662 = #L0:145
 33F4:412C 37F5:011C   282: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:4134 37F5:0124   290: R1_d7_orient:1665 = #L0:145
 33F4:413E 37F5:012E   300: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:4146 37F5:0136   308: R1_d8_orient:1668 = #L0:145
 33F4:4150 37F5:0140   318: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:4158 37F5:0148   326: R1_d9_orient:1671 = #L0:145
 33F4:4162 37F5:0152   336: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:416A 37F5:015A   344: R1_d10_orient:1641 = #L0:145
 33F4:4174 37F5:0164   354: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:417C 37F5:016C   362: R1_d11_orient:1644 = #L0:145
 33F4:4186 37F5:0176   372: R2_targ_orient:1710 = TargOrt:2258
 33F4:4190 37F5:0180   382: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:4198 37F5:0188   390: R2_d1_orient:1683 = #L0:145
 33F4:41A2 37F5:0192   400: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:41AA 37F5:019A   408: R2_d2_orient:1686 = #L0:145
 33F4:41B4 37F5:01A4   418: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:41BC 37F5:01AC   426: R2_d3_orient:1689 = #L0:145
 33F4:41C6 37F5:01B6   436: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:41CE 37F5:01BE   444: R2_d4_orient:1692 = #L0:145
 33F4:41D8 37F5:01C8   454: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:41E0 37F5:01D0   462: R2_d5_orient:1695 = #L0:145
 33F4:41EA 37F5:01DA   472: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:41F2 37F5:01E2   480: R2_d6_orient:1698 = #L0:145
 33F4:41FC 37F5:01EC   490: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:4204 37F5:01F4   498: R2_d7_orient:1701 = #L0:145
 33F4:420E 37F5:01FE   508: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:4216 37F5:0206   516: R2_d8_orient:1704 = #L0:145
 33F4:4220 37F5:0210   526: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:4228 37F5:0218   534: R2_d9_orient:1707 = #L0:145
 33F4:4232 37F5:0222   544: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:423A 37F5:022A   552: R2_d10_orient:1677 = #L0:145
 33F4:4244 37F5:0234   562: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:424C 37F5:023C   570: R2_d11_orient:1680 = #L0:145
 33F4:4256 37F5:0246   580: R3_targ_orient:1746 = TargOrt:2258
 33F4:4260 37F5:0250   590: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:4268 37F5:0258   598: R3_d1_orient:1719 = #L0:145
 33F4:4272 37F5:0262   608: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:427A 37F5:026A   616: R3_d2_orient:1722 = #L0:145
 33F4:4284 37F5:0274   626: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:428C 37F5:027C   634: R3_d3_orient:1725 = #L0:145
 33F4:4296 37F5:0286   644: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:429E 37F5:028E   652: R3_d4_orient:1728 = #L0:145
 33F4:42A8 37F5:0298   662: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:42B0 37F5:02A0   670: R3_d5_orient:1731 = #L0:145
 33F4:42BA 37F5:02AA   680: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:42C2 37F5:02B2   688: R3_d6_orient:1734 = #L0:145
 33F4:42CC 37F5:02BC   698: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:42D4 37F5:02C4   706: R3_d7_orient:1737 = #L0:145
 33F4:42DE 37F5:02CE   716: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:42E6 37F5:02D6   724: R3_d8_orient:1740 = #L0:145
 33F4:42F0 37F5:02E0   734: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:42F8 37F5:02E8   742: R3_d9_orient:1743 = #L0:145
 33F4:4302 37F5:02F2   752: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:430A 37F5:02FA   760: R3_d10_orient:1713 = #L0:145
 33F4:4314 37F5:0304   770: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:431C 37F5:030C   778: R3_d11_orient:1716 = #L0:145
 33F4:4326 37F5:0316   788: R4_targ_orient:1782 = TargOrt:2258
 33F4:4330 37F5:0320   798: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:4338 37F5:0328   806: R4_d1_orient:1755 = #L0:145
 33F4:4342 37F5:0332   816: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:434A 37F5:033A   824: R4_d2_orient:1758 = #L0:145
 33F4:4354 37F5:0344   834: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:435C 37F5:034C   842: R4_d3_orient:1761 = #L0:145
 33F4:4366 37F5:0356   852: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:436E 37F5:035E   860: R4_d4_orient:1764 = #L0:145
 33F4:4378 37F5:0368   870: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:4380 37F5:0370   878: R4_d5_orient:1767 = #L0:145
 33F4:438A 37F5:037A   888: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:4392 37F5:0382   896: R4_d6_orient:1770 = #L0:145
 33F4:439C 37F5:038C   906: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:43A4 37F5:0394   914: R4_d7_orient:1773 = #L0:145
 33F4:43AE 37F5:039E   924: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:43B6 37F5:03A6   932: R4_d8_orient:1776 = #L0:145
 33F4:43C0 37F5:03B0   942: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:43C8 37F5:03B8   950: R4_d9_orient:1779 = #L0:145
 33F4:43D2 37F5:03C2   960: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:43DA 37F5:03CA   968: R4_d10_orient:1749 = #L0:145
 33F4:43E4 37F5:03D4   978: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:43EC 37F5:03DC   986: R4_d11_orient:1752 = #L0:145
 33F4:43F6 37F5:03E6   996: R5_targ_orient:1818 = TargOrt:2258
 33F4:4400 37F5:03F0  1006: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:4408 37F5:03F8  1014: R5_d1_orient:1791 = #L0:145
 33F4:4412 37F5:0402  1024: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:441A 37F5:040A  1032: R5_d2_orient:1794 = #L0:145
 33F4:4424 37F5:0414  1042: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:442C 37F5:041C  1050: R5_d3_orient:1797 = #L0:145
 33F4:4436 37F5:0426  1060: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:443E 37F5:042E  1068: R5_d4_orient:1800 = #L0:145
 33F4:4448 37F5:0438  1078: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:4450 37F5:0440  1086: R5_d5_orient:1803 = #L0:145
 33F4:445A 37F5:044A  1096: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:4462 37F5:0452  1104: R5_d6_orient:1806 = #L0:145
 33F4:446C 37F5:045C  1114: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:4474 37F5:0464  1122: R5_d7_orient:1809 = #L0:145
 33F4:447E 37F5:046E  1132: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:4486 37F5:0476  1140: R5_d8_orient:1812 = #L0:145
 33F4:4490 37F5:0480  1150: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:4498 37F5:0488  1158: R5_d9_orient:1815 = #L0:145
 33F4:44A2 37F5:0492  1168: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:44AA 37F5:049A  1176: R5_d10_orient:1785 = #L0:145
 33F4:44B4 37F5:04A4  1186: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:44BC 37F5:04AC  1194: R5_d11_orient:1788 = #L0:145
 33F4:44C6 37F5:04B6  1204: R6_targ_orient:1854 = TargOrt:2258
 33F4:44D0 37F5:04C0  1214: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:44D8 37F5:04C8  1222: R6_d1_orient:1827 = #L0:145
 33F4:44E2 37F5:04D2  1232: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:44EA 37F5:04DA  1240: R6_d2_orient:1830 = #L0:145
 33F4:44F4 37F5:04E4  1250: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:44FC 37F5:04EC  1258: R6_d3_orient:1833 = #L0:145
 33F4:4506 37F5:04F6  1268: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:450E 37F5:04FE  1276: R6_d4_orient:1836 = #L0:145
 33F4:4518 37F5:0508  1286: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:4520 37F5:0510  1294: R6_d5_orient:1839 = #L0:145
 33F4:452A 37F5:051A  1304: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:4532 37F5:0522  1312: R6_d6_orient:1842 = #L0:145
 33F4:453C 37F5:052C  1322: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:4544 37F5:0534  1330: R6_d7_orient:1845 = #L0:145
 33F4:454E 37F5:053E  1340: #L0:145 = RepDistOrients:1924[#I0:16]
 33F4:4556 37F5:0546  1348: R6_d8_orient:1848 = #L0:145
 33F4:4560 37F5:0550  1358: #L0:145 = RepDistOrients:1924[#I2:53]
 33F4:4568 37F5:0558  1366: R6_d9_orient:1851 = #L0:145
 33F4:4572 37F5:0562  1376: #L0:145 = RepDistOrients:1924[#I3:74]
 33F4:457A 37F5:056A  1384: R6_d10_orient:1821 = #L0:145
 33F4:4584 37F5:0574  1394: #L0:145 = RepDistOrients:1924[#I1:17]
 33F4:458C 37F5:057C  1402: R6_d11_orient:1824 = #L0:145
 33F4:4596 37F5:0586  1412: GOTO .+1952 (goto 3364)
 33F4:459A 37F5:058A  1416: #L0:145 = SearchType:2033 == #I2:53
 33F4:45A8 37F5:0598  1430: IFnot (#L0:145) GOTO .+1934 (goto 3364)
 33F4:45B0 37F5:05A0  1438: #L1 = CALL1 random(#I4:87)
 33F4:45B8 37F5:05A8  1446: Homo_orient:1235 = F= Homo_orient:1235
 33F4:45C2 37F5:05B2  1456: R1_targ_orient:1674 = TargOrt:2258
 33F4:45CC 37F5:05BC  1466: #L0:145 = F= #L0:145
 33F4:45D6 37F5:05C6  1476: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:45DE 37F5:05CE  1484: R1_d1_orient:1647 = #L1:146
 33F4:45E8 37F5:05D8  1494: #L0:145 = F= #L0:145
 33F4:45F2 37F5:05E2  1504: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:45FA 37F5:05EA  1512: R1_d2_orient:1650 = #L1:146
 33F4:4604 37F5:05F4  1522: #L0:145 = F= #L0:145
 33F4:460E 37F5:05FE  1532: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4616 37F5:0606  1540: R1_d3_orient:1653 = #L1:146
 33F4:4620 37F5:0610  1550: #L0:145 = F= #L0:145
 33F4:462A 37F5:061A  1560: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4632 37F5:0622  1568: R1_d4_orient:1656 = #L1:146
 33F4:463C 37F5:062C  1578: #L0:145 = F= #L0:145
 33F4:4646 37F5:0636  1588: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:464E 37F5:063E  1596: R1_d5_orient:1659 = #L1:146
 33F4:4658 37F5:0648  1606: #L0:145 = F= #L0:145
 33F4:4662 37F5:0652  1616: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:466A 37F5:065A  1624: R1_d6_orient:1662 = #L1:146
 33F4:4674 37F5:0664  1634: #L0:145 = F= #L0:145
 33F4:467E 37F5:066E  1644: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4686 37F5:0676  1652: R1_d7_orient:1665 = #L1:146
 33F4:4690 37F5:0680  1662: #L0:145 = F= #L0:145
 33F4:469A 37F5:068A  1672: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:46A2 37F5:0692  1680: R1_d8_orient:1668 = #L1:146
 33F4:46AC 37F5:069C  1690: #L0:145 = F= #L0:145
 33F4:46B6 37F5:06A6  1700: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:46BE 37F5:06AE  1708: R1_d9_orient:1671 = #L1:146
 33F4:46C8 37F5:06B8  1718: #L0:145 = F= #L0:145
 33F4:46D2 37F5:06C2  1728: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:46DA 37F5:06CA  1736: R1_d10_orient:1641 = #L1:146
 33F4:46E4 37F5:06D4  1746: #L0:145 = F= #L0:145
 33F4:46EE 37F5:06DE  1756: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:46F6 37F5:06E6  1764: R1_d11_orient:1644 = #L1:146
 33F4:4700 37F5:06F0  1774: R2_targ_orient:1710 = TargOrt:2258
 33F4:470A 37F5:06FA  1784: #L0:145 = F= #L0:145
 33F4:4714 37F5:0704  1794: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:471C 37F5:070C  1802: R2_d1_orient:1683 = #L1:146
 33F4:4726 37F5:0716  1812: #L0:145 = F= #L0:145
 33F4:4730 37F5:0720  1822: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4738 37F5:0728  1830: R2_d2_orient:1686 = #L1:146
 33F4:4742 37F5:0732  1840: #L0:145 = F= #L0:145
 33F4:474C 37F5:073C  1850: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4754 37F5:0744  1858: R2_d3_orient:1689 = #L1:146
 33F4:475E 37F5:074E  1868: #L0:145 = F= #L0:145
 33F4:4768 37F5:0758  1878: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4770 37F5:0760  1886: R2_d4_orient:1692 = #L1:146
 33F4:477A 37F5:076A  1896: #L0:145 = F= #L0:145
 33F4:4784 37F5:0774  1906: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:478C 37F5:077C  1914: R2_d5_orient:1695 = #L1:146
 33F4:4796 37F5:0786  1924: #L0:145 = F= #L0:145
 33F4:47A0 37F5:0790  1934: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:47A8 37F5:0798  1942: R2_d6_orient:1698 = #L1:146
 33F4:47B2 37F5:07A2  1952: #L0:145 = F= #L0:145
 33F4:47BC 37F5:07AC  1962: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:47C4 37F5:07B4  1970: R2_d7_orient:1701 = #L1:146
 33F4:47CE 37F5:07BE  1980: #L0:145 = F= #L0:145
 33F4:47D8 37F5:07C8  1990: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:47E0 37F5:07D0  1998: R2_d8_orient:1704 = #L1:146
 33F4:47EA 37F5:07DA  2008: #L0:145 = F= #L0:145
 33F4:47F4 37F5:07E4  2018: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:47FC 37F5:07EC  2026: R2_d9_orient:1707 = #L1:146
 33F4:4806 37F5:07F6  2036: #L0:145 = F= #L0:145
 33F4:4810 37F5:0800  2046: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4818 37F5:0808  2054: R2_d10_orient:1677 = #L1:146
 33F4:4822 37F5:0812  2064: #L0:145 = F= #L0:145
 33F4:482C 37F5:081C  2074: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4834 37F5:0824  2082: R2_d11_orient:1680 = #L1:146
 33F4:483E 37F5:082E  2092: R3_targ_orient:1746 = TargOrt:2258
 33F4:4848 37F5:0838  2102: #L0:145 = F= #L0:145
 33F4:4852 37F5:0842  2112: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:485A 37F5:084A  2120: R3_d1_orient:1719 = #L1:146
 33F4:4864 37F5:0854  2130: #L0:145 = F= #L0:145
 33F4:486E 37F5:085E  2140: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4876 37F5:0866  2148: R3_d2_orient:1722 = #L1:146
 33F4:4880 37F5:0870  2158: #L0:145 = F= #L0:145
 33F4:488A 37F5:087A  2168: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4892 37F5:0882  2176: R3_d3_orient:1725 = #L1:146
 33F4:489C 37F5:088C  2186: #L0:145 = F= #L0:145
 33F4:48A6 37F5:0896  2196: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:48AE 37F5:089E  2204: R3_d4_orient:1728 = #L1:146
 33F4:48B8 37F5:08A8  2214: #L0:145 = F= #L0:145
 33F4:48C2 37F5:08B2  2224: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:48CA 37F5:08BA  2232: R3_d5_orient:1731 = #L1:146
 33F4:48D4 37F5:08C4  2242: #L0:145 = F= #L0:145
 33F4:48DE 37F5:08CE  2252: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:48E6 37F5:08D6  2260: R3_d6_orient:1734 = #L1:146
 33F4:48F0 37F5:08E0  2270: #L0:145 = F= #L0:145
 33F4:48FA 37F5:08EA  2280: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4902 37F5:08F2  2288: R3_d7_orient:1737 = #L1:146
 33F4:490C 37F5:08FC  2298: #L0:145 = F= #L0:145
 33F4:4916 37F5:0906  2308: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:491E 37F5:090E  2316: R3_d8_orient:1740 = #L1:146
 33F4:4928 37F5:0918  2326: #L0:145 = F= #L0:145
 33F4:4932 37F5:0922  2336: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:493A 37F5:092A  2344: R3_d9_orient:1743 = #L1:146
 33F4:4944 37F5:0934  2354: #L0:145 = F= #L0:145
 33F4:494E 37F5:093E  2364: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4956 37F5:0946  2372: R3_d10_orient:1713 = #L1:146
 33F4:4960 37F5:0950  2382: #L0:145 = F= #L0:145
 33F4:496A 37F5:095A  2392: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4972 37F5:0962  2400: R3_d11_orient:1716 = #L1:146
 33F4:497C 37F5:096C  2410: R4_targ_orient:1782 = TargOrt:2258
 33F4:4986 37F5:0976  2420: #L0:145 = F= #L0:145
 33F4:4990 37F5:0980  2430: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4998 37F5:0988  2438: R4_d1_orient:1755 = #L1:146
 33F4:49A2 37F5:0992  2448: #L0:145 = F= #L0:145
 33F4:49AC 37F5:099C  2458: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:49B4 37F5:09A4  2466: R4_d2_orient:1758 = #L1:146
 33F4:49BE 37F5:09AE  2476: #L0:145 = F= #L0:145
 33F4:49C8 37F5:09B8  2486: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:49D0 37F5:09C0  2494: R4_d3_orient:1761 = #L1:146
 33F4:49DA 37F5:09CA  2504: #L0:145 = F= #L0:145
 33F4:49E4 37F5:09D4  2514: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:49EC 37F5:09DC  2522: R4_d4_orient:1764 = #L1:146
 33F4:49F6 37F5:09E6  2532: #L0:145 = F= #L0:145
 33F4:4A00 37F5:09F0  2542: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4A08 37F5:09F8  2550: R4_d5_orient:1767 = #L1:146
 33F4:4A12 37F5:0A02  2560: #L0:145 = F= #L0:145
 33F4:4A1C 37F5:0A0C  2570: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4A24 37F5:0A14  2578: R4_d6_orient:1770 = #L1:146
 33F4:4A2E 37F5:0A1E  2588: #L0:145 = F= #L0:145
 33F4:4A38 37F5:0A28  2598: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4A40 37F5:0A30  2606: R4_d7_orient:1773 = #L1:146
 33F4:4A4A 37F5:0A3A  2616: #L0:145 = F= #L0:145
 33F4:4A54 37F5:0A44  2626: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4A5C 37F5:0A4C  2634: R4_d8_orient:1776 = #L1:146
 33F4:4A66 37F5:0A56  2644: #L0:145 = F= #L0:145
 33F4:4A70 37F5:0A60  2654: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4A78 37F5:0A68  2662: R4_d9_orient:1779 = #L1:146
 33F4:4A82 37F5:0A72  2672: #L0:145 = F= #L0:145
 33F4:4A8C 37F5:0A7C  2682: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4A94 37F5:0A84  2690: R4_d10_orient:1749 = #L1:146
 33F4:4A9E 37F5:0A8E  2700: #L0:145 = F= #L0:145
 33F4:4AA8 37F5:0A98  2710: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4AB0 37F5:0AA0  2718: R4_d11_orient:1752 = #L1:146
 33F4:4ABA 37F5:0AAA  2728: R5_targ_orient:1818 = TargOrt:2258
 33F4:4AC4 37F5:0AB4  2738: #L0:145 = F= #L0:145
 33F4:4ACE 37F5:0ABE  2748: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4AD6 37F5:0AC6  2756: R5_d1_orient:1791 = #L1:146
 33F4:4AE0 37F5:0AD0  2766: #L0:145 = F= #L0:145
 33F4:4AEA 37F5:0ADA  2776: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4AF2 37F5:0AE2  2784: R5_d2_orient:1794 = #L1:146
 33F4:4AFC 37F5:0AEC  2794: #L0:145 = F= #L0:145
 33F4:4B06 37F5:0AF6  2804: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4B0E 37F5:0AFE  2812: R5_d3_orient:1797 = #L1:146
 33F4:4B18 37F5:0B08  2822: #L0:145 = F= #L0:145
 33F4:4B22 37F5:0B12  2832: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4B2A 37F5:0B1A  2840: R5_d4_orient:1800 = #L1:146
 33F4:4B34 37F5:0B24  2850: #L0:145 = F= #L0:145
 33F4:4B3E 37F5:0B2E  2860: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4B46 37F5:0B36  2868: R5_d5_orient:1803 = #L1:146
 33F4:4B50 37F5:0B40  2878: #L0:145 = F= #L0:145
 33F4:4B5A 37F5:0B4A  2888: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4B62 37F5:0B52  2896: R5_d6_orient:1806 = #L1:146
 33F4:4B6C 37F5:0B5C  2906: #L0:145 = F= #L0:145
 33F4:4B76 37F5:0B66  2916: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4B7E 37F5:0B6E  2924: R5_d7_orient:1809 = #L1:146
 33F4:4B88 37F5:0B78  2934: #L0:145 = F= #L0:145
 33F4:4B92 37F5:0B82  2944: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4B9A 37F5:0B8A  2952: R5_d8_orient:1812 = #L1:146
 33F4:4BA4 37F5:0B94  2962: #L0:145 = F= #L0:145
 33F4:4BAE 37F5:0B9E  2972: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4BB6 37F5:0BA6  2980: R5_d9_orient:1815 = #L1:146
 33F4:4BC0 37F5:0BB0  2990: #L0:145 = F= #L0:145
 33F4:4BCA 37F5:0BBA  3000: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4BD2 37F5:0BC2  3008: R5_d10_orient:1785 = #L1:146
 33F4:4BDC 37F5:0BCC  3018: #L0:145 = F= #L0:145
 33F4:4BE6 37F5:0BD6  3028: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4BEE 37F5:0BDE  3036: R5_d11_orient:1788 = #L1:146
 33F4:4BF8 37F5:0BE8  3046: R6_targ_orient:1854 = TargOrt:2258
 33F4:4C02 37F5:0BF2  3056: #L0:145 = F= #L0:145
 33F4:4C0C 37F5:0BFC  3066: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4C14 37F5:0C04  3074: R6_d1_orient:1827 = #L1:146
 33F4:4C1E 37F5:0C0E  3084: #L0:145 = F= #L0:145
 33F4:4C28 37F5:0C18  3094: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4C30 37F5:0C20  3102: R6_d2_orient:1830 = #L1:146
 33F4:4C3A 37F5:0C2A  3112: #L0:145 = F= #L0:145
 33F4:4C44 37F5:0C34  3122: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4C4C 37F5:0C3C  3130: R6_d3_orient:1833 = #L1:146
 33F4:4C56 37F5:0C46  3140: #L0:145 = F= #L0:145
 33F4:4C60 37F5:0C50  3150: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4C68 37F5:0C58  3158: R6_d4_orient:1836 = #L1:146
 33F4:4C72 37F5:0C62  3168: #L0:145 = F= #L0:145
 33F4:4C7C 37F5:0C6C  3178: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4C84 37F5:0C74  3186: R6_d5_orient:1839 = #L1:146
 33F4:4C8E 37F5:0C7E  3196: #L0:145 = F= #L0:145
 33F4:4C98 37F5:0C88  3206: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4CA0 37F5:0C90  3214: R6_d6_orient:1842 = #L1:146
 33F4:4CAA 37F5:0C9A  3224: #L0:145 = F= #L0:145
 33F4:4CB4 37F5:0CA4  3234: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4CBC 37F5:0CAC  3242: R6_d7_orient:1845 = #L1:146
 33F4:4CC6 37F5:0CB6  3252: #L0:145 = F= #L0:145
 33F4:4CD0 37F5:0CC0  3262: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4CD8 37F5:0CC8  3270: R6_d8_orient:1848 = #L1:146
 33F4:4CE2 37F5:0CD2  3280: #L0:145 = F= #L0:145
 33F4:4CEC 37F5:0CDC  3290: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4CF4 37F5:0CE4  3298: R6_d9_orient:1851 = #L1:146
 33F4:4CFE 37F5:0CEE  3308: #L0:145 = F= #L0:145
 33F4:4D08 37F5:0CF8  3318: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4D10 37F5:0D00  3326: R6_d10_orient:1821 = #L1:146
 33F4:4D1A 37F5:0D0A  3336: #L0:145 = F= #L0:145
 33F4:4D24 37F5:0D14  3346: #L1:146 = RepDistOrients:1924[#L0:145]
 33F4:4D2C 37F5:0D1C  3354: R6_d11_orient:1824 = #L1:146

PROCESS  24: RAND_ORT (Args=0 CtrlBlk=33F4:2084 Size=1292  iOp=2-1293 iCache=33586-34877) DISABLED
 33F4:4012 37F5:0002     0: i:1236 = #I0:16
 33F4:401C 37F5:000C    10: #L0:145 = i:1236 < #I4:87
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+118 (goto 142)
 33F4:4032 37F5:0022    32: j = CALL1 random(#I4:87)
 33F4:403A 37F5:002A    40: #L0:145 = DistOrients:988[i:1236]
 33F4:4042 37F5:0032    48: temp:2267 = #L0:145
 33F4:404C 37F5:003C    58: #L0:145 = DistOrients:988[j:1285]
 33F4:4054 37F5:0044    66: DistOrients:988[i:1236] = #L0:145
 33F4:405C 37F5:004C    74: DistOrients:988[j:1285] = temp:2267
 33F4:4064 37F5:0054    82: #L0:145 = TargOrients:2257[i:1236]
 33F4:406C 37F5:005C    90: temp:2267 = #L0:145
 33F4:4076 37F5:0066   100: #L0:145 = TargOrients:2257[j:1285]
 33F4:407E 37F5:006E   108: TargOrients:2257[i:1236] = #L0:145
 33F4:4086 37F5:0076   116: TargOrients:2257[j:1285] = temp:2267
 33F4:408E 37F5:007E   124: i:1236 = i:1236 + #I1:17
 33F4:409C 37F5:008C   138: GOTO .-128 (goto 10)
 33F4:40A0 37F5:0090   142: #L0:145 = SearchType:2033 == #I1:17
 33F4:40AE 37F5:009E   156: IFnot (#L0:145) GOTO .+216 (goto 372)
 33F4:40B6 37F5:00A6   164: Rand_targ_orient:1898 = TargOrt:2258
 33F4:40C0 37F5:00B0   174: #L0:145 = DistOrients:988[#I0:16]
 33F4:40C8 37F5:00B8   182: Rand_d1_orient:1869 = #L0:145
 33F4:40D2 37F5:00C2   192: #L0:145 = DistOrients:988[#I1:17]
 33F4:40DA 37F5:00CA   200: Rand_d2_orient:1872 = #L0:145
 33F4:40E4 37F5:00D4   210: #L0:145 = DistOrients:988[#I2:53]
 33F4:40EC 37F5:00DC   218: Rand_d3_orient:1875 = #L0:145
 33F4:40F6 37F5:00E6   228: #L0:145 = DistOrients:988[#I3:74]
 33F4:40FE 37F5:00EE   236: Rand_d4_orient:1878 = #L0:145
 33F4:4108 37F5:00F8   246: #L0:145 = DistOrients:988[#I0:16]
 33F4:4110 37F5:0100   254: Rand_d5_orient:1881 = #L0:145
 33F4:411A 37F5:010A   264: #L0:145 = DistOrients:988[#I1:17]
 33F4:4122 37F5:0112   272: Rand_d6_orient:1884 = #L0:145
 33F4:412C 37F5:011C   282: #L0:145 = DistOrients:988[#I2:53]
 33F4:4134 37F5:0124   290: Rand_d7_orient:1887 = #L0:145
 33F4:413E 37F5:012E   300: #L0:145 = DistOrients:988[#I3:74]
 33F4:4146 37F5:0136   308: Rand_d8_orient:1889 = #L0:145
 33F4:4150 37F5:0140   318: #L0:145 = DistOrients:988[#I0:16]
 33F4:4158 37F5:0148   326: Rand_d9_orient:1891 = #L0:145
 33F4:4162 37F5:0152   336: #L0:145 = DistOrients:988[#I1:17]
 33F4:416A 37F5:015A   344: Rand_d10_orient:1864 = #L0:145
 33F4:4174 37F5:0164   354: #L0:145 = DistOrients:988[#I2:53]
 33F4:417C 37F5:016C   362: Rand_d11_orient:1866 = #L0:145
 33F4:4186 37F5:0176   372: #L0:145 = SearchType:2033 == #I2:53
 33F4:4194 37F5:0184   386: IFnot (#L0:145) GOTO .+128 (goto 514)
 33F4:419C 37F5:018C   394: Rand_targ_orient:1898 = TargOrt:2258
 33F4:41A6 37F5:0196   404: Rand_d1_orient:1869 = DistOrt:989
 33F4:41B0 37F5:01A0   414: Rand_d2_orient:1872 = DistOrt:989
 33F4:41BA 37F5:01AA   424: Rand_d3_orient:1875 = DistOrt:989
 33F4:41C4 37F5:01B4   434: Rand_d4_orient:1878 = DistOrt:989
 33F4:41CE 37F5:01BE   444: Rand_d5_orient:1881 = DistOrt:989
 33F4:41D8 37F5:01C8   454: Rand_d6_orient:1884 = DistOrt:989
 33F4:41E2 37F5:01D2   464: Rand_d7_orient:1887 = DistOrt:989
 33F4:41EC 37F5:01DC   474: Rand_d8_orient:1889 = DistOrt:989
 33F4:41F6 37F5:01E6   484: Rand_d9_orient:1891 = DistOrt:989
 33F4:4200 37F5:01F0   494: Rand_d10_orient:1864 = DistOrt:989
 33F4:420A 37F5:01FA   504: Rand_d11_orient:1866 = DistOrt:989
 33F4:4214 37F5:0204   514: #L0:145 = SearchType:2033 == #I3:74
 33F4:4222 37F5:0212   528: IFnot (#L0:145) GOTO .+344 (goto 872)
 33F4:422A 37F5:021A   536: #L1 = CALL1 random(#I4:87)
 33F4:4232 37F5:0222   544: RandHomo_orient:1899 = F= RandHomo_orient:1899
 33F4:423C 37F5:022C   554: Rand_targ_orient:1898 = TargOrt:2258
 33F4:4246 37F5:0236   564: #L0:145 = F= #L0:145
 33F4:4250 37F5:0240   574: #L1:146 = DistOrients:988[#L0:145]
 33F4:4258 37F5:0248   582: Rand_d1_orient:1869 = #L1:146
 33F4:4262 37F5:0252   592: #L0:145 = F= #L0:145
 33F4:426C 37F5:025C   602: #L1:146 = DistOrients:988[#L0:145]
 33F4:4274 37F5:0264   610: Rand_d2_orient:1872 = #L1:146
 33F4:427E 37F5:026E   620: #L0:145 = F= #L0:145
 33F4:4288 37F5:0278   630: #L1:146 = DistOrients:988[#L0:145]
 33F4:4290 37F5:0280   638: Rand_d3_orient:1875 = #L1:146
 33F4:429A 37F5:028A   648: #L0:145 = F= #L0:145
 33F4:42A4 37F5:0294   658: #L1:146 = DistOrients:988[#L0:145]
 33F4:42AC 37F5:029C   666: Rand_d4_orient:1878 = #L1:146
 33F4:42B6 37F5:02A6   676: #L0:145 = F= #L0:145
 33F4:42C0 37F5:02B0   686: #L1:146 = DistOrients:988[#L0:145]
 33F4:42C8 37F5:02B8   694: Rand_d5_orient:1881 = #L1:146
 33F4:42D2 37F5:02C2   704: #L0:145 = F= #L0:145
 33F4:42DC 37F5:02CC   714: #L1:146 = DistOrients:988[#L0:145]
 33F4:42E4 37F5:02D4   722: Rand_d6_orient:1884 = #L1:146
 33F4:42EE 37F5:02DE   732: #L0:145 = F= #L0:145
 33F4:42F8 37F5:02E8   742: #L1:146 = DistOrients:988[#L0:145]
 33F4:4300 37F5:02F0   750: Rand_d7_orient:1887 = #L1:146
 33F4:430A 37F5:02FA   760: #L0:145 = F= #L0:145
 33F4:4314 37F5:0304   770: #L1:146 = DistOrients:988[#L0:145]
 33F4:431C 37F5:030C   778: Rand_d8_orient:1889 = #L1:146
 33F4:4326 37F5:0316   788: #L0:145 = F= #L0:145
 33F4:4330 37F5:0320   798: #L1:146 = DistOrients:988[#L0:145]
 33F4:4338 37F5:0328   806: Rand_d9_orient:1891 = #L1:146
 33F4:4342 37F5:0332   816: #L0:145 = F= #L0:145
 33F4:434C 37F5:033C   826: #L1:146 = DistOrients:988[#L0:145]
 33F4:4354 37F5:0344   834: Rand_d10_orient:1864 = #L1:146
 33F4:435E 37F5:034E   844: #L0:145 = F= #L0:145
 33F4:4368 37F5:0358   854: #L1:146 = DistOrients:988[#L0:145]
 33F4:4370 37F5:0360   862: Rand_d11_orient:1866 = #L1:146
 33F4:437A 37F5:036A   872: #L0:145 = SearchType:2033 == #I4:87
 33F4:4388 37F5:0378   886: IFnot (#L0:145) GOTO .+302 (goto 1188)
 33F4:4390 37F5:0380   894: TD_Select = CALL1 random(#I2:53)
 33F4:4398 37F5:0388   902: #L0:145 = TD_Select:2265 == #I1:17
 33F4:43A6 37F5:0396   916: IFnot (#L0:145) GOTO .+142 (goto 1058)
 33F4:43AE 37F5:039E   924: TargetType:2255 = #I1:17
 33F4:43B8 37F5:03A8   934: Rand_targ_orient:1898 = TargOrt1:2259
 33F4:43C2 37F5:03B2   944: Rand_d1_orient:1869 = TargOrt2:2260
 33F4:43CC 37F5:03BC   954: Rand_d2_orient:1872 = TargOrt2:2260
 33F4:43D6 37F5:03C6   964: Rand_d3_orient:1875 = TargOrt2:2260
 33F4:43E0 37F5:03D0   974: Rand_d4_orient:1878 = TargOrt2:2260
 33F4:43EA 37F5:03DA   984: Rand_d5_orient:1881 = TargOrt2:2260
 33F4:43F4 37F5:03E4   994: Rand_d6_orient:1884 = TargOrt2:2260
 33F4:43FE 37F5:03EE  1004: Rand_d7_orient:1887 = TargOrt2:2260
 33F4:4408 37F5:03F8  1014: Rand_d8_orient:1889 = TargOrt2:2260
 33F4:4412 37F5:0402  1024: Rand_d9_orient:1891 = TargOrt2:2260
 33F4:441C 37F5:040C  1034: Rand_d10_orient:1864 = TargOrt2:2260
 33F4:4426 37F5:0416  1044: Rand_d11_orient:1866 = TargOrt2:2260
 33F4:4430 37F5:0420  1054: GOTO .+134 (goto 1188)
 33F4:4434 37F5:0424  1058: TargetType:2255 = #I2:53
 33F4:443E 37F5:042E  1068: Rand_targ_orient:1898 = TargOrt2:2260
 33F4:4448 37F5:0438  1078: Rand_d1_orient:1869 = TargOrt1:2259
 33F4:4452 37F5:0442  1088: Rand_d2_orient:1872 = TargOrt1:2259
 33F4:445C 37F5:044C  1098: Rand_d3_orient:1875 = TargOrt1:2259
 33F4:4466 37F5:0456  1108: Rand_d4_orient:1878 = TargOrt1:2259
 33F4:4470 37F5:0460  1118: Rand_d5_orient:1881 = TargOrt1:2259
 33F4:447A 37F5:046A  1128: Rand_d6_orient:1884 = TargOrt1:2259
 33F4:4484 37F5:0474  1138: Rand_d7_orient:1887 = TargOrt1:2259
 33F4:448E 37F5:047E  1148: Rand_d8_orient:1889 = TargOrt1:2259
 33F4:4498 37F5:0488  1158: Rand_d9_orient:1891 = TargOrt1:2259
 33F4:44A2 37F5:0492  1168: Rand_d10_orient:1864 = TargOrt1:2259
 33F4:44AC 37F5:049C  1178: Rand_d11_orient:1866 = TargOrt1:2259
 33F4:44B6 37F5:04A6  1188: #L0:145 = SearchType:2033 == #I5:111
 33F4:44C4 37F5:04B4  1202: IFnot (#L0:145) GOTO .+90 (goto 1292)
 33F4:44CC 37F5:04BC  1210: TD_Select = CALL1 random(#I2:53)
 33F4:44D4 37F5:04C4  1218: TargOrt = CALL1 random(#I4:87)
 33F4:44DC 37F5:04CC  1226: #L0:145 = TD_Select:2265 == #I1:17
 33F4:44EA 37F5:04DA  1240: IFnot (#L0:145) GOTO .+32 (goto 1272)
 33F4:44F2 37F5:04E2  1248: TargetType:2255 = #I1:17
 33F4:44FC 37F5:04EC  1258: Rand_targ_orient:1898 = TargOrt:2258
 33F4:4506 37F5:04F6  1268: GOTO .+24 (goto 1292)
 33F4:450A 37F5:04FA  1272: TargetType:2255 = #I2:53
 33F4:4514 37F5:0504  1282: Rand_targ_orient:1898 = TargOrt:2258

PROCESS  25: LOC_REP (Args=0 CtrlBlk=33F4:20B0 Size= 36  iOp=2-37 iCache=34878-34913) DISABLED
 33F4:4012 37F5:0002     0: SPAWN REP1_LOC:1914(with 0 args)
 33F4:4018 37F5:0008     6: SPAWN REP2_LOC:1915(with 0 args)
 33F4:401E 37F5:000E    12: SPAWN REP3_LOC:1916(with 0 args)
 33F4:4024 37F5:0014    18: SPAWN REP4_LOC:1917(with 0 args)
 33F4:402A 37F5:001A    24: SPAWN REP5_LOC:1918(with 0 args)
 33F4:4030 37F5:0020    30: SPAWN REP6_LOC:1919(with 0 args)

PROCESS  26: RandomizeRepDistAngles (Args=0 CtrlBlk=33F4:20DC Size=110  iOp=2-111 iCache=34914-35023) DISABLED
 33F4:4012 37F5:0002     0: i@26:1238 = #I0:16
 33F4:401C 37F5:000C    10: #L0:145 = i@26:1238 < numDistAngles:1458
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+86 (goto 110)
 33F4:4032 37F5:0022    32: j = CALL1 random(numDistAngles:1458)
 33F4:403A 37F5:002A    40: #F0:1 = Dist_Ang_list:985[i@26:1238]
 33F4:4042 37F5:0032    48: temp@26:2268 = F= temp@26:2268
 33F4:404C 37F5:003C    58: #F0:1 = Dist_Ang_list:985[j@26:1286]
 33F4:4054 37F5:0044    66: Dist_Ang_list:985[i@26:1238] = #F0:1
 33F4:405C 37F5:004C    74: #F0:1 = F= #F0:1
 33F4:4066 37F5:0056    84: Dist_Ang_list:985[j@26:1286] = #F0:1
 33F4:406E 37F5:005E    92: i@26:1238 = i@26:1238 + #I1:17
 33F4:407C 37F5:006C   106: GOTO .-96 (goto 10)

PROCESS  27: RandomizeRepDistEccentricities (Args=0 CtrlBlk=33F4:2108 Size=110  iOp=2-111 iCache=35024-35133) DISABLED
 33F4:4012 37F5:0002     0: i@27:1239 = #I0:16
 33F4:401C 37F5:000C    10: #L0:145 = i@27:1239 < numDistEcc:1459
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+86 (goto 110)
 33F4:4032 37F5:0022    32: j = CALL1 random(numDistEcc:1459)
 33F4:403A 37F5:002A    40: #F0:1 = Dist_Ecc_list:986[i@27:1239]
 33F4:4042 37F5:0032    48: temp@27:2269 = F= temp@27:2269
 33F4:404C 37F5:003C    58: #F0:1 = Dist_Ecc_list:986[j@27:1287]
 33F4:4054 37F5:0044    66: Dist_Ecc_list:986[i@27:1239] = #F0:1
 33F4:405C 37F5:004C    74: #F0:1 = F= #F0:1
 33F4:4066 37F5:0056    84: Dist_Ecc_list:986[j@27:1287] = #F0:1
 33F4:406E 37F5:005E    92: i@27:1239 = i@27:1239 + #I1:17
 33F4:407C 37F5:006C   106: GOTO .-96 (goto 10)

PROCESS  28: RandomizeRepTargAngles (Args=0 CtrlBlk=33F4:2134 Size=110  iOp=2-111 iCache=35134-35243) DISABLED
 33F4:4012 37F5:0002     0: i@28:1240 = #I0:16
 33F4:401C 37F5:000C    10: #L0:145 = i@28:1240 < numTargAngles:1460
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+86 (goto 110)
 33F4:4032 37F5:0022    32: j = CALL1 random(numTargAngles:1460)
 33F4:403A 37F5:002A    40: #F0:1 = RepTarg_Ang_list:1928[i@28:1240]
 33F4:4042 37F5:0032    48: temp@28:2270 = F= temp@28:2270
 33F4:404C 37F5:003C    58: #F0:1 = RepTarg_Ang_list:1928[j@28:1288]
 33F4:4054 37F5:0044    66: RepTarg_Ang_list:1928[i@28:1240] = #F0:1
 33F4:405C 37F5:004C    74: #F0:1 = F= #F0:1
 33F4:4066 37F5:0056    84: RepTarg_Ang_list:1928[j@28:1288] = #F0:1
 33F4:406E 37F5:005E    92: i@28:1240 = i@28:1240 + #I1:17
 33F4:407C 37F5:006C   106: GOTO .-96 (goto 10)

PROCESS  29: REP1_LOC (Args=0 CtrlBlk=33F4:2160 Size=270  iOp=2-271 iCache=35244-35513) DISABLED
 33F4:4012 37F5:0002     0: SPAWN RandomizeRepDistAngles:1905(with 0 args)
 33F4:4018 37F5:0008     6: WAITFORPROCESS RandomizeRepDistAngles:1905
 33F4:401E 37F5:000E    12: SPAWN RandomizeRepDistEccentricities:1906(with 0 args)
 33F4:4024 37F5:0014    18: WAITFORPROCESS RandomizeRepDistEccentricities:1906
 33F4:402A 37F5:001A    24: SPAWN RandomizeRepTargAngles:1907(with 0 args)
 33F4:4030 37F5:0020    30: WAITFORPROCESS RandomizeRepTargAngles:1907
 33F4:4036 37F5:0026    36: #F0:1 = RepTarg_Ang_list:1928[#I0:16]
 33F4:403E 37F5:002E    44: R1_targ_angle:1672 = F= R1_targ_angle:1672
 33F4:4048 37F5:0038    54: #F0:1 = Dist_Ang_list:985[#I1:17]
 33F4:4050 37F5:0040    62: R1_d1_angle:1645 = F= R1_d1_angle:1645
 33F4:405A 37F5:004A    72: #F0:1 = Dist_Ang_list:985[#I2:53]
 33F4:4062 37F5:0052    80: R1_d2_angle:1648 = F= R1_d2_angle:1648
 33F4:406C 37F5:005C    90: #F0:1 = Dist_Ang_list:985[#I3:74]
 33F4:4074 37F5:0064    98: R1_d3_angle:1651 = F= R1_d3_angle:1651
 33F4:407E 37F5:006E   108: #F0:1 = Dist_Ang_list:985[#I4:87]
 33F4:4086 37F5:0076   116: R1_d4_angle:1654 = F= R1_d4_angle:1654
 33F4:4090 37F5:0080   126: #F0:1 = Dist_Ang_list:985[#I5:111]
 33F4:4098 37F5:0088   134: R1_d5_angle:1657 = F= R1_d5_angle:1657
 33F4:40A2 37F5:0092   144: #F0:1 = Dist_Ang_list:985[#I6:120]
 33F4:40AA 37F5:009A   152: R1_d6_angle:1660 = F= R1_d6_angle:1660
 33F4:40B4 37F5:00A4   162: #F0:1 = Dist_Ang_list:985[#I7:129]
 33F4:40BC 37F5:00AC   170: R1_d7_angle:1663 = F= R1_d7_angle:1663
 33F4:40C6 37F5:00B6   180: R1_targ_ecc:1673 = SearchEcc:2031
 33F4:40D0 37F5:00C0   190: R1_d1_ecc:1646 = SearchEcc:2031
 33F4:40DA 37F5:00CA   200: R1_d2_ecc:1649 = SearchEcc:2031
 33F4:40E4 37F5:00D4   210: R1_d3_ecc:1652 = SearchEcc:2031
 33F4:40EE 37F5:00DE   220: R1_d4_ecc:1655 = SearchEcc:2031
 33F4:40F8 37F5:00E8   230: R1_d5_ecc:1658 = SearchEcc:2031
 33F4:4102 37F5:00F2   240: R1_d6_ecc:1661 = SearchEcc:2031
 33F4:410C 37F5:00FC   250: R1_d7_ecc:1664 = SearchEcc:2031
 33F4:4116 37F5:0106   260: R1_d8_ecc:1667 = SearchEcc:2031

PROCESS  30: REP2_LOC (Args=0 CtrlBlk=33F4:218C Size=270  iOp=2-271 iCache=35514-35783) DISABLED
 33F4:4012 37F5:0002     0: SPAWN RandomizeRepDistAngles:1905(with 0 args)
 33F4:4018 37F5:0008     6: WAITFORPROCESS RandomizeRepDistAngles:1905
 33F4:401E 37F5:000E    12: SPAWN RandomizeRepDistEccentricities:1906(with 0 args)
 33F4:4024 37F5:0014    18: WAITFORPROCESS RandomizeRepDistEccentricities:1906
 33F4:402A 37F5:001A    24: SPAWN RandomizeRepTargAngles:1907(with 0 args)
 33F4:4030 37F5:0020    30: WAITFORPROCESS RandomizeRepTargAngles:1907
 33F4:4036 37F5:0026    36: #F0:1 = RepTarg_Ang_list:1928[#I0:16]
 33F4:403E 37F5:002E    44: R2_targ_angle:1708 = F= R2_targ_angle:1708
 33F4:4048 37F5:0038    54: #F0:1 = Dist_Ang_list:985[#I1:17]
 33F4:4050 37F5:0040    62: R2_d1_angle:1681 = F= R2_d1_angle:1681
 33F4:405A 37F5:004A    72: #F0:1 = Dist_Ang_list:985[#I2:53]
 33F4:4062 37F5:0052    80: R2_d2_angle:1684 = F= R2_d2_angle:1684
 33F4:406C 37F5:005C    90: #F0:1 = Dist_Ang_list:985[#I3:74]
 33F4:4074 37F5:0064    98: R2_d3_angle:1687 = F= R2_d3_angle:1687
 33F4:407E 37F5:006E   108: #F0:1 = Dist_Ang_list:985[#I4:87]
 33F4:4086 37F5:0076   116: R2_d4_angle:1690 = F= R2_d4_angle:1690
 33F4:4090 37F5:0080   126: #F0:1 = Dist_Ang_list:985[#I5:111]
 33F4:4098 37F5:0088   134: R2_d5_angle:1693 = F= R2_d5_angle:1693
 33F4:40A2 37F5:0092   144: #F0:1 = Dist_Ang_list:985[#I6:120]
 33F4:40AA 37F5:009A   152: R2_d6_angle:1696 = F= R2_d6_angle:1696
 33F4:40B4 37F5:00A4   162: #F0:1 = Dist_Ang_list:985[#I7:129]
 33F4:40BC 37F5:00AC   170: R2_d7_angle:1699 = F= R2_d7_angle:1699
 33F4:40C6 37F5:00B6   180: R2_targ_ecc:1709 = SearchEcc:2031
 33F4:40D0 37F5:00C0   190: R2_d1_ecc:1682 = SearchEcc:2031
 33F4:40DA 37F5:00CA   200: R2_d2_ecc:1685 = SearchEcc:2031
 33F4:40E4 37F5:00D4   210: R2_d3_ecc:1688 = SearchEcc:2031
 33F4:40EE 37F5:00DE   220: R2_d4_ecc:1691 = SearchEcc:2031
 33F4:40F8 37F5:00E8   230: R2_d5_ecc:1694 = SearchEcc:2031
 33F4:4102 37F5:00F2   240: R2_d6_ecc:1697 = SearchEcc:2031
 33F4:410C 37F5:00FC   250: R2_d7_ecc:1700 = SearchEcc:2031
 33F4:4116 37F5:0106   260: R2_d8_ecc:1703 = SearchEcc:2031

PROCESS  31: REP3_LOC (Args=0 CtrlBlk=33F4:21B8 Size=270  iOp=2-271 iCache=35784-36053) DISABLED
 33F4:4012 37F5:0002     0: SPAWN RandomizeRepDistAngles:1905(with 0 args)
 33F4:4018 37F5:0008     6: WAITFORPROCESS RandomizeRepDistAngles:1905
 33F4:401E 37F5:000E    12: SPAWN RandomizeRepDistEccentricities:1906(with 0 args)
 33F4:4024 37F5:0014    18: WAITFORPROCESS RandomizeRepDistEccentricities:1906
 33F4:402A 37F5:001A    24: SPAWN RandomizeRepTargAngles:1907(with 0 args)
 33F4:4030 37F5:0020    30: WAITFORPROCESS RandomizeRepTargAngles:1907
 33F4:4036 37F5:0026    36: #F0:1 = RepTarg_Ang_list:1928[#I0:16]
 33F4:403E 37F5:002E    44: R3_targ_angle:1744 = F= R3_targ_angle:1744
 33F4:4048 37F5:0038    54: #F0:1 = Dist_Ang_list:985[#I1:17]
 33F4:4050 37F5:0040    62: R3_d1_angle:1717 = F= R3_d1_angle:1717
 33F4:405A 37F5:004A    72: #F0:1 = Dist_Ang_list:985[#I2:53]
 33F4:4062 37F5:0052    80: R3_d2_angle:1720 = F= R3_d2_angle:1720
 33F4:406C 37F5:005C    90: #F0:1 = Dist_Ang_list:985[#I3:74]
 33F4:4074 37F5:0064    98: R3_d3_angle:1723 = F= R3_d3_angle:1723
 33F4:407E 37F5:006E   108: #F0:1 = Dist_Ang_list:985[#I4:87]
 33F4:4086 37F5:0076   116: R3_d4_angle:1726 = F= R3_d4_angle:1726
 33F4:4090 37F5:0080   126: #F0:1 = Dist_Ang_list:985[#I5:111]
 33F4:4098 37F5:0088   134: R3_d5_angle:1729 = F= R3_d5_angle:1729
 33F4:40A2 37F5:0092   144: #F0:1 = Dist_Ang_list:985[#I6:120]
 33F4:40AA 37F5:009A   152: R3_d6_angle:1732 = F= R3_d6_angle:1732
 33F4:40B4 37F5:00A4   162: #F0:1 = Dist_Ang_list:985[#I7:129]
 33F4:40BC 37F5:00AC   170: R3_d7_angle:1735 = F= R3_d7_angle:1735
 33F4:40C6 37F5:00B6   180: R3_targ_ecc:1745 = SearchEcc:2031
 33F4:40D0 37F5:00C0   190: R3_d1_ecc:1718 = SearchEcc:2031
 33F4:40DA 37F5:00CA   200: R3_d2_ecc:1721 = SearchEcc:2031
 33F4:40E4 37F5:00D4   210: R3_d3_ecc:1724 = SearchEcc:2031
 33F4:40EE 37F5:00DE   220: R3_d4_ecc:1727 = SearchEcc:2031
 33F4:40F8 37F5:00E8   230: R3_d5_ecc:1730 = SearchEcc:2031
 33F4:4102 37F5:00F2   240: R3_d6_ecc:1733 = SearchEcc:2031
 33F4:410C 37F5:00FC   250: R3_d7_ecc:1736 = SearchEcc:2031
 33F4:4116 37F5:0106   260: R3_d8_ecc:1739 = SearchEcc:2031

PROCESS  32: REP4_LOC (Args=0 CtrlBlk=33F4:21E4 Size=270  iOp=2-271 iCache=36054-36323) DISABLED
 33F4:4012 37F5:0002     0: SPAWN RandomizeRepDistAngles:1905(with 0 args)
 33F4:4018 37F5:0008     6: WAITFORPROCESS RandomizeRepDistAngles:1905
 33F4:401E 37F5:000E    12: SPAWN RandomizeRepDistEccentricities:1906(with 0 args)
 33F4:4024 37F5:0014    18: WAITFORPROCESS RandomizeRepDistEccentricities:1906
 33F4:402A 37F5:001A    24: SPAWN RandomizeRepTargAngles:1907(with 0 args)
 33F4:4030 37F5:0020    30: WAITFORPROCESS RandomizeRepTargAngles:1907
 33F4:4036 37F5:0026    36: #F0:1 = RepTarg_Ang_list:1928[#I0:16]
 33F4:403E 37F5:002E    44: R4_targ_angle:1780 = F= R4_targ_angle:1780
 33F4:4048 37F5:0038    54: #F0:1 = Dist_Ang_list:985[#I1:17]
 33F4:4050 37F5:0040    62: R4_d1_angle:1753 = F= R4_d1_angle:1753
 33F4:405A 37F5:004A    72: #F0:1 = Dist_Ang_list:985[#I2:53]
 33F4:4062 37F5:0052    80: R4_d2_angle:1756 = F= R4_d2_angle:1756
 33F4:406C 37F5:005C    90: #F0:1 = Dist_Ang_list:985[#I3:74]
 33F4:4074 37F5:0064    98: R4_d3_angle:1759 = F= R4_d3_angle:1759
 33F4:407E 37F5:006E   108: #F0:1 = Dist_Ang_list:985[#I4:87]
 33F4:4086 37F5:0076   116: R4_d4_angle:1762 = F= R4_d4_angle:1762
 33F4:4090 37F5:0080   126: #F0:1 = Dist_Ang_list:985[#I5:111]
 33F4:4098 37F5:0088   134: R4_d5_angle:1765 = F= R4_d5_angle:1765
 33F4:40A2 37F5:0092   144: #F0:1 = Dist_Ang_list:985[#I6:120]
 33F4:40AA 37F5:009A   152: R4_d6_angle:1768 = F= R4_d6_angle:1768
 33F4:40B4 37F5:00A4   162: #F0:1 = Dist_Ang_list:985[#I7:129]
 33F4:40BC 37F5:00AC   170: R4_d7_angle:1771 = F= R4_d7_angle:1771
 33F4:40C6 37F5:00B6   180: R4_targ_ecc:1781 = SearchEcc:2031
 33F4:40D0 37F5:00C0   190: R4_d1_ecc:1754 = SearchEcc:2031
 33F4:40DA 37F5:00CA   200: R4_d2_ecc:1757 = SearchEcc:2031
 33F4:40E4 37F5:00D4   210: R4_d3_ecc:1760 = SearchEcc:2031
 33F4:40EE 37F5:00DE   220: R4_d4_ecc:1763 = SearchEcc:2031
 33F4:40F8 37F5:00E8   230: R4_d5_ecc:1766 = SearchEcc:2031
 33F4:4102 37F5:00F2   240: R4_d6_ecc:1769 = SearchEcc:2031
 33F4:410C 37F5:00FC   250: R4_d7_ecc:1772 = SearchEcc:2031
 33F4:4116 37F5:0106   260: R4_d8_ecc:1775 = SearchEcc:2031

PROCESS  33: REP5_LOC (Args=0 CtrlBlk=33F4:2210 Size=270  iOp=2-271 iCache=36324-36593) DISABLED
 33F4:4012 37F5:0002     0: SPAWN RandomizeRepDistAngles:1905(with 0 args)
 33F4:4018 37F5:0008     6: WAITFORPROCESS RandomizeRepDistAngles:1905
 33F4:401E 37F5:000E    12: SPAWN RandomizeRepDistEccentricities:1906(with 0 args)
 33F4:4024 37F5:0014    18: WAITFORPROCESS RandomizeRepDistEccentricities:1906
 33F4:402A 37F5:001A    24: SPAWN RandomizeRepTargAngles:1907(with 0 args)
 33F4:4030 37F5:0020    30: WAITFORPROCESS RandomizeRepTargAngles:1907
 33F4:4036 37F5:0026    36: #F0:1 = RepTarg_Ang_list:1928[#I0:16]
 33F4:403E 37F5:002E    44: R5_targ_angle:1816 = F= R5_targ_angle:1816
 33F4:4048 37F5:0038    54: #F0:1 = Dist_Ang_list:985[#I1:17]
 33F4:4050 37F5:0040    62: R5_d1_angle:1789 = F= R5_d1_angle:1789
 33F4:405A 37F5:004A    72: #F0:1 = Dist_Ang_list:985[#I2:53]
 33F4:4062 37F5:0052    80: R5_d2_angle:1792 = F= R5_d2_angle:1792
 33F4:406C 37F5:005C    90: #F0:1 = Dist_Ang_list:985[#I3:74]
 33F4:4074 37F5:0064    98: R5_d3_angle:1795 = F= R5_d3_angle:1795
 33F4:407E 37F5:006E   108: #F0:1 = Dist_Ang_list:985[#I4:87]
 33F4:4086 37F5:0076   116: R5_d4_angle:1798 = F= R5_d4_angle:1798
 33F4:4090 37F5:0080   126: #F0:1 = Dist_Ang_list:985[#I5:111]
 33F4:4098 37F5:0088   134: R5_d5_angle:1801 = F= R5_d5_angle:1801
 33F4:40A2 37F5:0092   144: #F0:1 = Dist_Ang_list:985[#I6:120]
 33F4:40AA 37F5:009A   152: R5_d6_angle:1804 = F= R5_d6_angle:1804
 33F4:40B4 37F5:00A4   162: #F0:1 = Dist_Ang_list:985[#I7:129]
 33F4:40BC 37F5:00AC   170: R5_d7_angle:1807 = F= R5_d7_angle:1807
 33F4:40C6 37F5:00B6   180: R5_targ_ecc:1817 = SearchEcc:2031
 33F4:40D0 37F5:00C0   190: R5_d1_ecc:1790 = SearchEcc:2031
 33F4:40DA 37F5:00CA   200: R5_d2_ecc:1793 = SearchEcc:2031
 33F4:40E4 37F5:00D4   210: R5_d3_ecc:1796 = SearchEcc:2031
 33F4:40EE 37F5:00DE   220: R5_d4_ecc:1799 = SearchEcc:2031
 33F4:40F8 37F5:00E8   230: R5_d5_ecc:1802 = SearchEcc:2031
 33F4:4102 37F5:00F2   240: R5_d6_ecc:1805 = SearchEcc:2031
 33F4:410C 37F5:00FC   250: R5_d7_ecc:1808 = SearchEcc:2031
 33F4:4116 37F5:0106   260: R5_d8_ecc:1811 = SearchEcc:2031

PROCESS  34: REP6_LOC (Args=0 CtrlBlk=33F4:223C Size=270  iOp=2-271 iCache=36594-36863) DISABLED
 33F4:4012 37F5:0002     0: SPAWN RandomizeRepDistAngles:1905(with 0 args)
 33F4:4018 37F5:0008     6: WAITFORPROCESS RandomizeRepDistAngles:1905
 33F4:401E 37F5:000E    12: SPAWN RandomizeRepDistEccentricities:1906(with 0 args)
 33F4:4024 37F5:0014    18: WAITFORPROCESS RandomizeRepDistEccentricities:1906
 33F4:402A 37F5:001A    24: SPAWN RandomizeRepTargAngles:1907(with 0 args)
 33F4:4030 37F5:0020    30: WAITFORPROCESS RandomizeRepTargAngles:1907
 33F4:4036 37F5:0026    36: #F0:1 = RepTarg_Ang_list:1928[#I0:16]
 33F4:403E 37F5:002E    44: R6_targ_angle:1852 = F= R6_targ_angle:1852
 33F4:4048 37F5:0038    54: #F0:1 = Dist_Ang_list:985[#I1:17]
 33F4:4050 37F5:0040    62: R6_d1_angle:1825 = F= R6_d1_angle:1825
 33F4:405A 37F5:004A    72: #F0:1 = Dist_Ang_list:985[#I2:53]
 33F4:4062 37F5:0052    80: R6_d2_angle:1828 = F= R6_d2_angle:1828
 33F4:406C 37F5:005C    90: #F0:1 = Dist_Ang_list:985[#I3:74]
 33F4:4074 37F5:0064    98: R6_d3_angle:1831 = F= R6_d3_angle:1831
 33F4:407E 37F5:006E   108: #F0:1 = Dist_Ang_list:985[#I4:87]
 33F4:4086 37F5:0076   116: R6_d4_angle:1834 = F= R6_d4_angle:1834
 33F4:4090 37F5:0080   126: #F0:1 = Dist_Ang_list:985[#I5:111]
 33F4:4098 37F5:0088   134: R6_d5_angle:1837 = F= R6_d5_angle:1837
 33F4:40A2 37F5:0092   144: #F0:1 = Dist_Ang_list:985[#I6:120]
 33F4:40AA 37F5:009A   152: R6_d6_angle:1840 = F= R6_d6_angle:1840
 33F4:40B4 37F5:00A4   162: #F0:1 = Dist_Ang_list:985[#I7:129]
 33F4:40BC 37F5:00AC   170: R6_d7_angle:1843 = F= R6_d7_angle:1843
 33F4:40C6 37F5:00B6   180: R6_targ_ecc:1853 = SearchEcc:2031
 33F4:40D0 37F5:00C0   190: R6_d1_ecc:1826 = SearchEcc:2031
 33F4:40DA 37F5:00CA   200: R6_d2_ecc:1829 = SearchEcc:2031
 33F4:40E4 37F5:00D4   210: R6_d3_ecc:1832 = SearchEcc:2031
 33F4:40EE 37F5:00DE   220: R6_d4_ecc:1835 = SearchEcc:2031
 33F4:40F8 37F5:00E8   230: R6_d5_ecc:1838 = SearchEcc:2031
 33F4:4102 37F5:00F2   240: R6_d6_ecc:1841 = SearchEcc:2031
 33F4:410C 37F5:00FC   250: R6_d7_ecc:1844 = SearchEcc:2031
 33F4:4116 37F5:0106   260: R6_d8_ecc:1847 = SearchEcc:2031

PROCESS  35: RandomizeRanDistAngles (Args=0 CtrlBlk=33F4:2268 Size=110  iOp=2-111 iCache=36864-36973) DISABLED
 33F4:4012 37F5:0002     0: i@35:1241 = #I0:16
 33F4:401C 37F5:000C    10: #L0:145 = i@35:1241 < numDistAngles:1458
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+86 (goto 110)
 33F4:4032 37F5:0022    32: j = CALL1 random(numDistAngles:1458)
 33F4:403A 37F5:002A    40: #F0:1 = Dist_Ang_list:985[i@35:1241]
 33F4:4042 37F5:0032    48: temp@35:2271 = F= temp@35:2271
 33F4:404C 37F5:003C    58: #F0:1 = Dist_Ang_list:985[j@35:1289]
 33F4:4054 37F5:0044    66: Dist_Ang_list:985[i@35:1241] = #F0:1
 33F4:405C 37F5:004C    74: #F0:1 = F= #F0:1
 33F4:4066 37F5:0056    84: Dist_Ang_list:985[j@35:1289] = #F0:1
 33F4:406E 37F5:005E    92: i@35:1241 = i@35:1241 + #I1:17
 33F4:407C 37F5:006C   106: GOTO .-96 (goto 10)

PROCESS  36: RandomizeRanDistEccentricities (Args=0 CtrlBlk=33F4:2294 Size=110  iOp=2-111 iCache=36974-37083) DISABLED
 33F4:4012 37F5:0002     0: i@36:1242 = #I0:16
 33F4:401C 37F5:000C    10: #L0:145 = i@36:1242 < numDistEcc:1459
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+86 (goto 110)
 33F4:4032 37F5:0022    32: j = CALL1 random(numDistEcc:1459)
 33F4:403A 37F5:002A    40: #F0:1 = Dist_Ecc_list:986[i@36:1242]
 33F4:4042 37F5:0032    48: temp@36:2272 = F= temp@36:2272
 33F4:404C 37F5:003C    58: #F0:1 = Dist_Ecc_list:986[j@36:1290]
 33F4:4054 37F5:0044    66: Dist_Ecc_list:986[i@36:1242] = #F0:1
 33F4:405C 37F5:004C    74: #F0:1 = F= #F0:1
 33F4:4066 37F5:0056    84: Dist_Ecc_list:986[j@36:1290] = #F0:1
 33F4:406E 37F5:005E    92: i@36:1242 = i@36:1242 + #I1:17
 33F4:407C 37F5:006C   106: GOTO .-96 (goto 10)

PROCESS  37: RandomizeRanTargAngles (Args=0 CtrlBlk=33F4:22C0 Size=110  iOp=2-111 iCache=37084-37193) DISABLED
 33F4:4012 37F5:0002     0: i@37:1243 = #I0:16
 33F4:401C 37F5:000C    10: #L0:145 = i@37:1243 < numTargAngles:1460
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+86 (goto 110)
 33F4:4032 37F5:0022    32: j = CALL1 random(numTargAngles:1460)
 33F4:403A 37F5:002A    40: #F0:1 = RanTarg_Ang_list:1911[i@37:1243]
 33F4:4042 37F5:0032    48: temp@37:2273 = F= temp@37:2273
 33F4:404C 37F5:003C    58: #F0:1 = RanTarg_Ang_list:1911[j@37:1291]
 33F4:4054 37F5:0044    66: RanTarg_Ang_list:1911[i@37:1243] = #F0:1
 33F4:405C 37F5:004C    74: #F0:1 = F= #F0:1
 33F4:4066 37F5:0056    84: RanTarg_Ang_list:1911[j@37:1291] = #F0:1
 33F4:406E 37F5:005E    92: i@37:1243 = i@37:1243 + #I1:17
 33F4:407C 37F5:006C   106: GOTO .-96 (goto 10)

PROCESS  38: LOC_RAND (Args=0 CtrlBlk=33F4:22EC Size=8296  iOp=2-8297 iCache=37194-45489) DISABLED
 33F4:4012 37F5:0002     0: #L0:145 = VarEcc:2356 == #I1:17
 33F4:4020 37F5:0010    14: IFnot (#L0:145) GOTO .+112 (goto 126)
 33F4:4028 37F5:0018    22: #L1:146 = SelEcc:2035 == #I0:16
 33F4:4036 37F5:0026    36: IFnot (#L1:146) GOTO .+22 (goto 58)
 33F4:403E 37F5:002E    44: SearchEcc:2031 = #I6:120
 33F4:4048 37F5:0038    54: GOTO .+72 (goto 126)
 33F4:404C 37F5:003C    58: #L0:145 = SelEcc:2035 == #I1:17
 33F4:405A 37F5:004A    72: IFnot (#L0:145) GOTO .+22 (goto 94)
 33F4:4062 37F5:0052    80: SearchEcc:2031 = #I8:133
 33F4:406C 37F5:005C    90: GOTO .+36 (goto 126)
 33F4:4070 37F5:0060    94: #L0:145 = SelEcc:2035 == #I2:53
 33F4:407E 37F5:006E   108: IFnot (#L0:145) GOTO .+18 (goto 126)
 33F4:4086 37F5:0076   116: SearchEcc:2031 = #I12:30
 33F4:4090 37F5:0080   126: #L0:145 = SingMode:2077 == #I0:16
 33F4:409E 37F5:008E   140: IFnot (#L0:145) GOTO .+4504 (goto 4644)
 33F4:40A6 37F5:0096   148: d1color:913 = #I250:66
 33F4:40B0 37F5:00A0   158: #L0:145 = ArrStruct:759 == #I1:17
 33F4:40BE 37F5:00AE   172: IFnot (#L0:145) GOTO .+4112 (goto 4284)
 33F4:40C6 37F5:00B6   180: #L1:146 = TargTrainSet:2261 == #I1:17
 33F4:40D4 37F5:00C4   194: IFnot (#L1:146) GOTO .+2584 (goto 2778)
 33F4:40DC 37F5:00CC   202: #L2:156 = LatStruct:1313 == #I0:16
 33F4:40EA 37F5:00DA   216: IFnot (#L2:156) GOTO .+1092 (goto 1308)
 33F4:40F2 37F5:00E2   224: TgAng = CALL1 random(#I6:120)
 33F4:40FA 37F5:00EA   232: #L0:145 = TgAng:2274 == #I0:16
 33F4:4108 37F5:00F8   246: IFnot (#L0:145) GOTO .+166 (goto 412)
 33F4:4110 37F5:0100   254: THemi:2275 = #I1:17
 33F4:411A 37F5:010A   264: #F0:1 = Angle_list:743[#I1:17]
 33F4:4122 37F5:0112   272: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:412C 37F5:011C   282: #F0:1 = Angle_list:743[#I4:87]
 33F4:4134 37F5:0124   290: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:413E 37F5:012E   300: #F0:1 = Angle_list:743[#I2:53]
 33F4:4146 37F5:0136   308: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4150 37F5:0140   318: #F0:1 = Angle_list:743[#I6:120]
 33F4:4158 37F5:0148   326: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4162 37F5:0152   336: #F0:1 = Angle_list:743[#I0:16]
 33F4:416A 37F5:015A   344: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4174 37F5:0164   354: #F0:1 = Angle_list:743[#I3:74]
 33F4:417C 37F5:016C   362: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4186 37F5:0176   372: #F0:1 = Angle_list:743[#I5:111]
 33F4:418E 37F5:017E   380: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4198 37F5:0188   390: #F0:1 = Angle_list:743[#I7:129]
 33F4:41A0 37F5:0190   398: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:41AA 37F5:019A   408: GOTO .+900 (goto 1308)
 33F4:41AE 37F5:019E   412: #L0:145 = TgAng:2274 == #I1:17
 33F4:41BC 37F5:01AC   426: IFnot (#L0:145) GOTO .+166 (goto 592)
 33F4:41C4 37F5:01B4   434: THemi:2275 = #I1:17
 33F4:41CE 37F5:01BE   444: #F0:1 = Angle_list:743[#I2:53]
 33F4:41D6 37F5:01C6   452: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:41E0 37F5:01D0   462: #F0:1 = Angle_list:743[#I5:111]
 33F4:41E8 37F5:01D8   470: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:41F2 37F5:01E2   480: #F0:1 = Angle_list:743[#I1:17]
 33F4:41FA 37F5:01EA   488: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4204 37F5:01F4   498: #F0:1 = Angle_list:743[#I7:129]
 33F4:420C 37F5:01FC   506: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4216 37F5:0206   516: #F0:1 = Angle_list:743[#I3:74]
 33F4:421E 37F5:020E   524: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4228 37F5:0218   534: #F0:1 = Angle_list:743[#I4:87]
 33F4:4230 37F5:0220   542: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:423A 37F5:022A   552: #F0:1 = Angle_list:743[#I6:120]
 33F4:4242 37F5:0232   560: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:424C 37F5:023C   570: #F0:1 = Angle_list:743[#I0:16]
 33F4:4254 37F5:0244   578: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:425E 37F5:024E   588: GOTO .+720 (goto 1308)
 33F4:4262 37F5:0252   592: #L0:145 = TgAng:2274 == #I2:53
 33F4:4270 37F5:0260   606: IFnot (#L0:145) GOTO .+166 (goto 772)
 33F4:4278 37F5:0268   614: THemi:2275 = #I1:17
 33F4:4282 37F5:0272   624: #F0:1 = Angle_list:743[#I3:74]
 33F4:428A 37F5:027A   632: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4294 37F5:0284   642: #F0:1 = Angle_list:743[#I6:120]
 33F4:429C 37F5:028C   650: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:42A6 37F5:0296   660: #F0:1 = Angle_list:743[#I4:87]
 33F4:42AE 37F5:029E   668: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:42B8 37F5:02A8   678: #F0:1 = Angle_list:743[#I0:16]
 33F4:42C0 37F5:02B0   686: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:42CA 37F5:02BA   696: #F0:1 = Angle_list:743[#I1:17]
 33F4:42D2 37F5:02C2   704: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:42DC 37F5:02CC   714: #F0:1 = Angle_list:743[#I5:111]
 33F4:42E4 37F5:02D4   722: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:42EE 37F5:02DE   732: #F0:1 = Angle_list:743[#I2:53]
 33F4:42F6 37F5:02E6   740: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4300 37F5:02F0   750: #F0:1 = Angle_list:743[#I7:129]
 33F4:4308 37F5:02F8   758: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4312 37F5:0302   768: GOTO .+540 (goto 1308)
 33F4:4316 37F5:0306   772: #L0:145 = TgAng:2274 == #I3:74
 33F4:4324 37F5:0314   786: IFnot (#L0:145) GOTO .+166 (goto 952)
 33F4:432C 37F5:031C   794: THemi:2275 = #I2:53
 33F4:4336 37F5:0326   804: #F0:1 = Angle_list:743[#I5:111]
 33F4:433E 37F5:032E   812: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4348 37F5:0338   822: #F0:1 = Angle_list:743[#I3:74]
 33F4:4350 37F5:0340   830: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:435A 37F5:034A   840: #F0:1 = Angle_list:743[#I7:129]
 33F4:4362 37F5:0352   848: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:436C 37F5:035C   858: #F0:1 = Angle_list:743[#I1:17]
 33F4:4374 37F5:0364   866: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:437E 37F5:036E   876: #F0:1 = Angle_list:743[#I2:53]
 33F4:4386 37F5:0376   884: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4390 37F5:0380   894: #F0:1 = Angle_list:743[#I4:87]
 33F4:4398 37F5:0388   902: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:43A2 37F5:0392   912: #F0:1 = Angle_list:743[#I6:120]
 33F4:43AA 37F5:039A   920: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:43B4 37F5:03A4   930: #F0:1 = Angle_list:743[#I0:16]
 33F4:43BC 37F5:03AC   938: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:43C6 37F5:03B6   948: GOTO .+360 (goto 1308)
 33F4:43CA 37F5:03BA   952: #L0:145 = TgAng:2274 == #I4:87
 33F4:43D8 37F5:03C8   966: IFnot (#L0:145) GOTO .+166 (goto 1132)
 33F4:43E0 37F5:03D0   974: THemi:2275 = #I2:53
 33F4:43EA 37F5:03DA   984: #F0:1 = Angle_list:743[#I6:120]
 33F4:43F2 37F5:03E2   992: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:43FC 37F5:03EC  1002: #F0:1 = Angle_list:743[#I5:111]
 33F4:4404 37F5:03F4  1010: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:440E 37F5:03FE  1020: #F0:1 = Angle_list:743[#I4:87]
 33F4:4416 37F5:0406  1028: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4420 37F5:0410  1038: #F0:1 = Angle_list:743[#I0:16]
 33F4:4428 37F5:0418  1046: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4432 37F5:0422  1056: #F0:1 = Angle_list:743[#I1:17]
 33F4:443A 37F5:042A  1064: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4444 37F5:0434  1074: #F0:1 = Angle_list:743[#I3:74]
 33F4:444C 37F5:043C  1082: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4456 37F5:0446  1092: #F0:1 = Angle_list:743[#I2:53]
 33F4:445E 37F5:044E  1100: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4468 37F5:0458  1110: #F0:1 = Angle_list:743[#I7:129]
 33F4:4470 37F5:0460  1118: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:447A 37F5:046A  1128: GOTO .+180 (goto 1308)
 33F4:447E 37F5:046E  1132: #L0:145 = TgAng:2274 == #I5:111
 33F4:448C 37F5:047C  1146: IFnot (#L0:145) GOTO .+162 (goto 1308)
 33F4:4494 37F5:0484  1154: THemi:2275 = #I2:53
 33F4:449E 37F5:048E  1164: #F0:1 = Angle_list:743[#I7:129]
 33F4:44A6 37F5:0496  1172: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:44B0 37F5:04A0  1182: #F0:1 = Angle_list:743[#I3:74]
 33F4:44B8 37F5:04A8  1190: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:44C2 37F5:04B2  1200: #F0:1 = Angle_list:743[#I5:111]
 33F4:44CA 37F5:04BA  1208: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:44D4 37F5:04C4  1218: #F0:1 = Angle_list:743[#I1:17]
 33F4:44DC 37F5:04CC  1226: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:44E6 37F5:04D6  1236: #F0:1 = Angle_list:743[#I2:53]
 33F4:44EE 37F5:04DE  1244: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:44F8 37F5:04E8  1254: #F0:1 = Angle_list:743[#I4:87]
 33F4:4500 37F5:04F0  1262: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:450A 37F5:04FA  1272: #F0:1 = Angle_list:743[#I6:120]
 33F4:4512 37F5:0502  1280: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:451C 37F5:050C  1290: #F0:1 = Angle_list:743[#I0:16]
 33F4:4524 37F5:0514  1298: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:452E 37F5:051E  1308: #L0:145 = LatStruct:1313 == #I1:17
 33F4:453C 37F5:052C  1322: IFnot (#L0:145) GOTO .+1452 (goto 2774)
 33F4:4544 37F5:0534  1330: TgAng = CALL1 random(#I8:133)
 33F4:454C 37F5:053C  1338: #L0:145 = TgAng:2274 == #I0:16
 33F4:455A 37F5:054A  1352: IFnot (#L0:145) GOTO .+166 (goto 1518)
 33F4:4562 37F5:0552  1360: THemi:2275 = #I1:17
 33F4:456C 37F5:055C  1370: #F0:1 = Angle_list:743[#I1:17]
 33F4:4574 37F5:0564  1378: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:457E 37F5:056E  1388: #F0:1 = Angle_list:743[#I4:87]
 33F4:4586 37F5:0576  1396: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4590 37F5:0580  1406: #F0:1 = Angle_list:743[#I2:53]
 33F4:4598 37F5:0588  1414: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:45A2 37F5:0592  1424: #F0:1 = Angle_list:743[#I6:120]
 33F4:45AA 37F5:059A  1432: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:45B4 37F5:05A4  1442: #F0:1 = Angle_list:743[#I0:16]
 33F4:45BC 37F5:05AC  1450: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:45C6 37F5:05B6  1460: #F0:1 = Angle_list:743[#I3:74]
 33F4:45CE 37F5:05BE  1468: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:45D8 37F5:05C8  1478: #F0:1 = Angle_list:743[#I5:111]
 33F4:45E0 37F5:05D0  1486: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:45EA 37F5:05DA  1496: #F0:1 = Angle_list:743[#I7:129]
 33F4:45F2 37F5:05E2  1504: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:45FC 37F5:05EC  1514: GOTO .+1260 (goto 2774)
 33F4:4600 37F5:05F0  1518: #L0:145 = TgAng:2274 == #I1:17
 33F4:460E 37F5:05FE  1532: IFnot (#L0:145) GOTO .+166 (goto 1698)
 33F4:4616 37F5:0606  1540: THemi:2275 = #I1:17
 33F4:4620 37F5:0610  1550: #F0:1 = Angle_list:743[#I3:74]
 33F4:4628 37F5:0618  1558: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4632 37F5:0622  1568: #F0:1 = Angle_list:743[#I5:111]
 33F4:463A 37F5:062A  1576: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4644 37F5:0634  1586: #F0:1 = Angle_list:743[#I1:17]
 33F4:464C 37F5:063C  1594: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4656 37F5:0646  1604: #F0:1 = Angle_list:743[#I7:129]
 33F4:465E 37F5:064E  1612: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4668 37F5:0658  1622: #F0:1 = Angle_list:743[#I2:53]
 33F4:4670 37F5:0660  1630: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:467A 37F5:066A  1640: #F0:1 = Angle_list:743[#I4:87]
 33F4:4682 37F5:0672  1648: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:468C 37F5:067C  1658: #F0:1 = Angle_list:743[#I6:120]
 33F4:4694 37F5:0684  1666: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:469E 37F5:068E  1676: #F0:1 = Angle_list:743[#I0:16]
 33F4:46A6 37F5:0696  1684: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:46B0 37F5:06A0  1694: GOTO .+1080 (goto 2774)
 33F4:46B4 37F5:06A4  1698: #L0:145 = TgAng:2274 == #I2:53
 33F4:46C2 37F5:06B2  1712: IFnot (#L0:145) GOTO .+166 (goto 1878)
 33F4:46CA 37F5:06BA  1720: THemi:2275 = #I1:17
 33F4:46D4 37F5:06C4  1730: #F0:1 = Angle_list:743[#I5:111]
 33F4:46DC 37F5:06CC  1738: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:46E6 37F5:06D6  1748: #F0:1 = Angle_list:743[#I6:120]
 33F4:46EE 37F5:06DE  1756: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:46F8 37F5:06E8  1766: #F0:1 = Angle_list:743[#I4:87]
 33F4:4700 37F5:06F0  1774: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:470A 37F5:06FA  1784: #F0:1 = Angle_list:743[#I0:16]
 33F4:4712 37F5:0702  1792: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:471C 37F5:070C  1802: #F0:1 = Angle_list:743[#I1:17]
 33F4:4724 37F5:0714  1810: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:472E 37F5:071E  1820: #F0:1 = Angle_list:743[#I3:74]
 33F4:4736 37F5:0726  1828: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4740 37F5:0730  1838: #F0:1 = Angle_list:743[#I2:53]
 33F4:4748 37F5:0738  1846: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4752 37F5:0742  1856: #F0:1 = Angle_list:743[#I7:129]
 33F4:475A 37F5:074A  1864: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4764 37F5:0754  1874: GOTO .+900 (goto 2774)
 33F4:4768 37F5:0758  1878: #L0:145 = TgAng:2274 == #I3:74
 33F4:4776 37F5:0766  1892: IFnot (#L0:145) GOTO .+166 (goto 2058)
 33F4:477E 37F5:076E  1900: THemi:2275 = #I2:53
 33F4:4788 37F5:0778  1910: #F0:1 = Angle_list:743[#I7:129]
 33F4:4790 37F5:0780  1918: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:479A 37F5:078A  1928: #F0:1 = Angle_list:743[#I3:74]
 33F4:47A2 37F5:0792  1936: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:47AC 37F5:079C  1946: #F0:1 = Angle_list:743[#I5:111]
 33F4:47B4 37F5:07A4  1954: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:47BE 37F5:07AE  1964: #F0:1 = Angle_list:743[#I1:17]
 33F4:47C6 37F5:07B6  1972: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:47D0 37F5:07C0  1982: #F0:1 = Angle_list:743[#I2:53]
 33F4:47D8 37F5:07C8  1990: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:47E2 37F5:07D2  2000: #F0:1 = Angle_list:743[#I4:87]
 33F4:47EA 37F5:07DA  2008: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:47F4 37F5:07E4  2018: #F0:1 = Angle_list:743[#I6:120]
 33F4:47FC 37F5:07EC  2026: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4806 37F5:07F6  2036: #F0:1 = Angle_list:743[#I0:16]
 33F4:480E 37F5:07FE  2044: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4818 37F5:0808  2054: GOTO .+720 (goto 2774)
 33F4:481C 37F5:080C  2058: #L0:145 = TgAng:2274 == #I4:87
 33F4:482A 37F5:081A  2072: IFnot (#L0:145) GOTO .+166 (goto 2238)
 33F4:4832 37F5:0822  2080: THemi:2275 = #I0:16
 33F4:483C 37F5:082C  2090: #F0:1 = Angle_list:743[#I0:16]
 33F4:4844 37F5:0834  2098: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:484E 37F5:083E  2108: #F0:1 = Angle_list:743[#I4:87]
 33F4:4856 37F5:0846  2116: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4860 37F5:0850  2126: #F0:1 = Angle_list:743[#I2:53]
 33F4:4868 37F5:0858  2134: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4872 37F5:0862  2144: #F0:1 = Angle_list:743[#I6:120]
 33F4:487A 37F5:086A  2152: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4884 37F5:0874  2162: #F0:1 = Angle_list:743[#I1:17]
 33F4:488C 37F5:087C  2170: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4896 37F5:0886  2180: #F0:1 = Angle_list:743[#I3:74]
 33F4:489E 37F5:088E  2188: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:48A8 37F5:0898  2198: #F0:1 = Angle_list:743[#I5:111]
 33F4:48B0 37F5:08A0  2206: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:48BA 37F5:08AA  2216: #F0:1 = Angle_list:743[#I7:129]
 33F4:48C2 37F5:08B2  2224: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:48CC 37F5:08BC  2234: GOTO .+540 (goto 2774)
 33F4:48D0 37F5:08C0  2238: #L0:145 = TgAng:2274 == #I5:111
 33F4:48DE 37F5:08CE  2252: IFnot (#L0:145) GOTO .+166 (goto 2418)
 33F4:48E6 37F5:08D6  2260: THemi:2275 = #I1:17
 33F4:48F0 37F5:08E0  2270: #F0:1 = Angle_list:743[#I2:53]
 33F4:48F8 37F5:08E8  2278: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4902 37F5:08F2  2288: #F0:1 = Angle_list:743[#I1:17]
 33F4:490A 37F5:08FA  2296: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4914 37F5:0904  2306: #F0:1 = Angle_list:743[#I7:129]
 33F4:491C 37F5:090C  2314: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4926 37F5:0916  2324: #F0:1 = Angle_list:743[#I3:74]
 33F4:492E 37F5:091E  2332: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4938 37F5:0928  2342: #F0:1 = Angle_list:743[#I5:111]
 33F4:4940 37F5:0930  2350: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:494A 37F5:093A  2360: #F0:1 = Angle_list:743[#I4:87]
 33F4:4952 37F5:0942  2368: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:495C 37F5:094C  2378: #F0:1 = Angle_list:743[#I6:120]
 33F4:4964 37F5:0954  2386: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:496E 37F5:095E  2396: #F0:1 = Angle_list:743[#I0:16]
 33F4:4976 37F5:0966  2404: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4980 37F5:0970  2414: GOTO .+360 (goto 2774)
 33F4:4984 37F5:0974  2418: #L0:145 = TgAng:2274 == #I6:120
 33F4:4992 37F5:0982  2432: IFnot (#L0:145) GOTO .+166 (goto 2598)
 33F4:499A 37F5:098A  2440: THemi:2275 = #I0:16
 33F4:49A4 37F5:0994  2450: #F0:1 = Angle_list:743[#I4:87]
 33F4:49AC 37F5:099C  2458: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:49B6 37F5:09A6  2468: #F0:1 = Angle_list:743[#I2:53]
 33F4:49BE 37F5:09AE  2476: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:49C8 37F5:09B8  2486: #F0:1 = Angle_list:743[#I0:16]
 33F4:49D0 37F5:09C0  2494: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:49DA 37F5:09CA  2504: #F0:1 = Angle_list:743[#I6:120]
 33F4:49E2 37F5:09D2  2512: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:49EC 37F5:09DC  2522: #F0:1 = Angle_list:743[#I1:17]
 33F4:49F4 37F5:09E4  2530: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:49FE 37F5:09EE  2540: #F0:1 = Angle_list:743[#I3:74]
 33F4:4A06 37F5:09F6  2548: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4A10 37F5:0A00  2558: #F0:1 = Angle_list:743[#I5:111]
 33F4:4A18 37F5:0A08  2566: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4A22 37F5:0A12  2576: #F0:1 = Angle_list:743[#I7:129]
 33F4:4A2A 37F5:0A1A  2584: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4A34 37F5:0A24  2594: GOTO .+180 (goto 2774)
 33F4:4A38 37F5:0A28  2598: #L0:145 = TgAng:2274 == #I7:129
 33F4:4A46 37F5:0A36  2612: IFnot (#L0:145) GOTO .+162 (goto 2774)
 33F4:4A4E 37F5:0A3E  2620: THemi:2275 = #I2:53
 33F4:4A58 37F5:0A48  2630: #F0:1 = Angle_list:743[#I6:120]
 33F4:4A60 37F5:0A50  2638: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4A6A 37F5:0A5A  2648: #F0:1 = Angle_list:743[#I3:74]
 33F4:4A72 37F5:0A62  2656: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4A7C 37F5:0A6C  2666: #F0:1 = Angle_list:743[#I1:17]
 33F4:4A84 37F5:0A74  2674: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4A8E 37F5:0A7E  2684: #F0:1 = Angle_list:743[#I5:111]
 33F4:4A96 37F5:0A86  2692: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4AA0 37F5:0A90  2702: #F0:1 = Angle_list:743[#I2:53]
 33F4:4AA8 37F5:0A98  2710: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4AB2 37F5:0AA2  2720: #F0:1 = Angle_list:743[#I4:87]
 33F4:4ABA 37F5:0AAA  2728: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4AC4 37F5:0AB4  2738: #F0:1 = Angle_list:743[#I0:16]
 33F4:4ACC 37F5:0ABC  2746: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4AD6 37F5:0AC6  2756: #F0:1 = Angle_list:743[#I7:129]
 33F4:4ADE 37F5:0ACE  2764: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4AE8 37F5:0AD8  2774: GOTO .+1430 (goto 4204)
 33F4:4AEC 37F5:0ADC  2778: #L0:145 = TargTrainSet:2261 == #I2:53
 33F4:4AFA 37F5:0AEA  2792: IFnot (#L0:145) GOTO .+166 (goto 2958)
 33F4:4B02 37F5:0AF2  2800: THemi:2275 = #I0:16
 33F4:4B0C 37F5:0AFC  2810: #F0:1 = Angle_list:743[#I0:16]
 33F4:4B14 37F5:0B04  2818: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4B1E 37F5:0B0E  2828: #F0:1 = Angle_list:743[#I2:53]
 33F4:4B26 37F5:0B16  2836: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4B30 37F5:0B20  2846: #F0:1 = Angle_list:743[#I4:87]
 33F4:4B38 37F5:0B28  2854: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4B42 37F5:0B32  2864: #F0:1 = Angle_list:743[#I6:120]
 33F4:4B4A 37F5:0B3A  2872: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4B54 37F5:0B44  2882: #F0:1 = Angle_list:743[#I1:17]
 33F4:4B5C 37F5:0B4C  2890: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4B66 37F5:0B56  2900: #F0:1 = Angle_list:743[#I3:74]
 33F4:4B6E 37F5:0B5E  2908: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4B78 37F5:0B68  2918: #F0:1 = Angle_list:743[#I5:111]
 33F4:4B80 37F5:0B70  2926: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4B8A 37F5:0B7A  2936: #F0:1 = Angle_list:743[#I7:129]
 33F4:4B92 37F5:0B82  2944: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4B9C 37F5:0B8C  2954: GOTO .+1250 (goto 4204)
 33F4:4BA0 37F5:0B90  2958: #L0:145 = TargTrainSet:2261 == #I3:74
 33F4:4BAE 37F5:0B9E  2972: IFnot (#L0:145) GOTO .+156 (goto 3128)
 33F4:4BB6 37F5:0BA6  2980: #F0:1 = Angle_list:743[#I1:17]
 33F4:4BBE 37F5:0BAE  2988: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4BC8 37F5:0BB8  2998: #F0:1 = Angle_list:743[#I3:74]
 33F4:4BD0 37F5:0BC0  3006: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4BDA 37F5:0BCA  3016: #F0:1 = Angle_list:743[#I5:111]
 33F4:4BE2 37F5:0BD2  3024: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4BEC 37F5:0BDC  3034: #F0:1 = Angle_list:743[#I7:129]
 33F4:4BF4 37F5:0BE4  3042: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4BFE 37F5:0BEE  3052: #F0:1 = Angle_list:743[#I2:53]
 33F4:4C06 37F5:0BF6  3060: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4C10 37F5:0C00  3070: #F0:1 = Angle_list:743[#I4:87]
 33F4:4C18 37F5:0C08  3078: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4C22 37F5:0C12  3088: #F0:1 = Angle_list:743[#I6:120]
 33F4:4C2A 37F5:0C1A  3096: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4C34 37F5:0C24  3106: #F0:1 = Angle_list:743[#I0:16]
 33F4:4C3C 37F5:0C2C  3114: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4C46 37F5:0C36  3124: GOTO .+1080 (goto 4204)
 33F4:4C4A 37F5:0C3A  3128: #L0:145 = TargTrainSet:2261 == #I4:87
 33F4:4C58 37F5:0C48  3142: IFnot (#L0:145) GOTO .+166 (goto 3308)
 33F4:4C60 37F5:0C50  3150: THemi:2275 = #I1:17
 33F4:4C6A 37F5:0C5A  3160: #F0:1 = Angle_list:743[#I2:53]
 33F4:4C72 37F5:0C62  3168: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4C7C 37F5:0C6C  3178: #F0:1 = Angle_list:743[#I6:120]
 33F4:4C84 37F5:0C74  3186: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4C8E 37F5:0C7E  3196: #F0:1 = Angle_list:743[#I4:87]
 33F4:4C96 37F5:0C86  3204: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4CA0 37F5:0C90  3214: #F0:1 = Angle_list:743[#I0:16]
 33F4:4CA8 37F5:0C98  3222: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4CB2 37F5:0CA2  3232: #F0:1 = Angle_list:743[#I1:17]
 33F4:4CBA 37F5:0CAA  3240: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4CC4 37F5:0CB4  3250: #F0:1 = Angle_list:743[#I3:74]
 33F4:4CCC 37F5:0CBC  3258: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4CD6 37F5:0CC6  3268: #F0:1 = Angle_list:743[#I5:111]
 33F4:4CDE 37F5:0CCE  3276: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4CE8 37F5:0CD8  3286: #F0:1 = Angle_list:743[#I7:129]
 33F4:4CF0 37F5:0CE0  3294: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4CFA 37F5:0CEA  3304: GOTO .+900 (goto 4204)
 33F4:4CFE 37F5:0CEE  3308: #L0:145 = TargTrainSet:2261 == #I5:111
 33F4:4D0C 37F5:0CFC  3322: IFnot (#L0:145) GOTO .+166 (goto 3488)
 33F4:4D14 37F5:0D04  3330: THemi:2275 = #I1:17
 33F4:4D1E 37F5:0D0E  3340: #F0:1 = Angle_list:743[#I3:74]
 33F4:4D26 37F5:0D16  3348: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4D30 37F5:0D20  3358: #F0:1 = Angle_list:743[#I7:129]
 33F4:4D38 37F5:0D28  3366: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4D42 37F5:0D32  3376: #F0:1 = Angle_list:743[#I5:111]
 33F4:4D4A 37F5:0D3A  3384: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4D54 37F5:0D44  3394: #F0:1 = Angle_list:743[#I1:17]
 33F4:4D5C 37F5:0D4C  3402: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4D66 37F5:0D56  3412: #F0:1 = Angle_list:743[#I2:53]
 33F4:4D6E 37F5:0D5E  3420: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4D78 37F5:0D68  3430: #F0:1 = Angle_list:743[#I4:87]
 33F4:4D80 37F5:0D70  3438: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4D8A 37F5:0D7A  3448: #F0:1 = Angle_list:743[#I6:120]
 33F4:4D92 37F5:0D82  3456: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4D9C 37F5:0D8C  3466: #F0:1 = Angle_list:743[#I0:16]
 33F4:4DA4 37F5:0D94  3474: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4DAE 37F5:0D9E  3484: GOTO .+720 (goto 4204)
 33F4:4DB2 37F5:0DA2  3488: #L0:145 = TargTrainSet:2261 == #I6:120
 33F4:4DC0 37F5:0DB0  3502: IFnot (#L0:145) GOTO .+166 (goto 3668)
 33F4:4DC8 37F5:0DB8  3510: THemi:2275 = #I0:16
 33F4:4DD2 37F5:0DC2  3520: #F0:1 = Angle_list:743[#I4:87]
 33F4:4DDA 37F5:0DCA  3528: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4DE4 37F5:0DD4  3538: #F0:1 = Angle_list:743[#I0:16]
 33F4:4DEC 37F5:0DDC  3546: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4DF6 37F5:0DE6  3556: #F0:1 = Angle_list:743[#I2:53]
 33F4:4DFE 37F5:0DEE  3564: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4E08 37F5:0DF8  3574: #F0:1 = Angle_list:743[#I6:120]
 33F4:4E10 37F5:0E00  3582: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4E1A 37F5:0E0A  3592: #F0:1 = Angle_list:743[#I1:17]
 33F4:4E22 37F5:0E12  3600: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4E2C 37F5:0E1C  3610: #F0:1 = Angle_list:743[#I3:74]
 33F4:4E34 37F5:0E24  3618: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4E3E 37F5:0E2E  3628: #F0:1 = Angle_list:743[#I5:111]
 33F4:4E46 37F5:0E36  3636: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4E50 37F5:0E40  3646: #F0:1 = Angle_list:743[#I7:129]
 33F4:4E58 37F5:0E48  3654: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4E62 37F5:0E52  3664: GOTO .+540 (goto 4204)
 33F4:4E66 37F5:0E56  3668: #L0:145 = TargTrainSet:2261 == #I7:129
 33F4:4E74 37F5:0E64  3682: IFnot (#L0:145) GOTO .+166 (goto 3848)
 33F4:4E7C 37F5:0E6C  3690: THemi:2275 = #I2:53
 33F4:4E86 37F5:0E76  3700: #F0:1 = Angle_list:743[#I5:111]
 33F4:4E8E 37F5:0E7E  3708: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4E98 37F5:0E88  3718: #F0:1 = Angle_list:743[#I1:17]
 33F4:4EA0 37F5:0E90  3726: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4EAA 37F5:0E9A  3736: #F0:1 = Angle_list:743[#I7:129]
 33F4:4EB2 37F5:0EA2  3744: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4EBC 37F5:0EAC  3754: #F0:1 = Angle_list:743[#I3:74]
 33F4:4EC4 37F5:0EB4  3762: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4ECE 37F5:0EBE  3772: #F0:1 = Angle_list:743[#I2:53]
 33F4:4ED6 37F5:0EC6  3780: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4EE0 37F5:0ED0  3790: #F0:1 = Angle_list:743[#I4:87]
 33F4:4EE8 37F5:0ED8  3798: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4EF2 37F5:0EE2  3808: #F0:1 = Angle_list:743[#I6:120]
 33F4:4EFA 37F5:0EEA  3816: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4F04 37F5:0EF4  3826: #F0:1 = Angle_list:743[#I0:16]
 33F4:4F0C 37F5:0EFC  3834: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4F16 37F5:0F06  3844: GOTO .+360 (goto 4204)
 33F4:4F1A 37F5:0F0A  3848: #L0:145 = TargTrainSet:2261 == #I8:133
 33F4:4F28 37F5:0F18  3862: IFnot (#L0:145) GOTO .+166 (goto 4028)
 33F4:4F30 37F5:0F20  3870: THemi:2275 = #I2:53
 33F4:4F3A 37F5:0F2A  3880: #F0:1 = Angle_list:743[#I6:120]
 33F4:4F42 37F5:0F32  3888: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4F4C 37F5:0F3C  3898: #F0:1 = Angle_list:743[#I2:53]
 33F4:4F54 37F5:0F44  3906: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4F5E 37F5:0F4E  3916: #F0:1 = Angle_list:743[#I0:16]
 33F4:4F66 37F5:0F56  3924: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4F70 37F5:0F60  3934: #F0:1 = Angle_list:743[#I4:87]
 33F4:4F78 37F5:0F68  3942: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4F82 37F5:0F72  3952: #F0:1 = Angle_list:743[#I1:17]
 33F4:4F8A 37F5:0F7A  3960: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4F94 37F5:0F84  3970: #F0:1 = Angle_list:743[#I3:74]
 33F4:4F9C 37F5:0F8C  3978: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4FA6 37F5:0F96  3988: #F0:1 = Angle_list:743[#I5:111]
 33F4:4FAE 37F5:0F9E  3996: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4FB8 37F5:0FA8  4006: #F0:1 = Angle_list:743[#I7:129]
 33F4:4FC0 37F5:0FB0  4014: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4FCA 37F5:0FBA  4024: GOTO .+180 (goto 4204)
 33F4:4FCE 37F5:0FBE  4028: #L0:145 = TargTrainSet:2261 == #I9:140
 33F4:4FDC 37F5:0FCC  4042: IFnot (#L0:145) GOTO .+162 (goto 4204)
 33F4:4FE4 37F5:0FD4  4050: THemi:2275 = #I2:53
 33F4:4FEE 37F5:0FDE  4060: #F0:1 = Angle_list:743[#I7:129]
 33F4:4FF6 37F5:0FE6  4068: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5000 37F5:0FF0  4078: #F0:1 = Angle_list:743[#I3:74]
 33F4:5008 37F5:0FF8  4086: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5012 37F5:1002  4096: #F0:1 = Angle_list:743[#I1:17]
 33F4:501A 37F5:100A  4104: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5024 37F5:1014  4114: #F0:1 = Angle_list:743[#I5:111]
 33F4:502C 37F5:101C  4122: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5036 37F5:1026  4132: #F0:1 = Angle_list:743[#I2:53]
 33F4:503E 37F5:102E  4140: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5048 37F5:1038  4150: #F0:1 = Angle_list:743[#I4:87]
 33F4:5050 37F5:1040  4158: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:505A 37F5:104A  4168: #F0:1 = Angle_list:743[#I6:120]
 33F4:5062 37F5:1052  4176: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:506C 37F5:105C  4186: #F0:1 = Angle_list:743[#I0:16]
 33F4:5074 37F5:1064  4194: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:507E 37F5:106E  4204: Rand_targ_ecc:1897 = SearchEcc:2031
 33F4:5088 37F5:1078  4214: Rand_d1_ecc:1868 = SearchEcc:2031
 33F4:5092 37F5:1082  4224: Rand_d2_ecc:1871 = SearchEcc:2031
 33F4:509C 37F5:108C  4234: Rand_d3_ecc:1874 = SearchEcc:2031
 33F4:50A6 37F5:1096  4244: Rand_d4_ecc:1877 = SearchEcc:2031
 33F4:50B0 37F5:10A0  4254: Rand_d5_ecc:1880 = SearchEcc:2031
 33F4:50BA 37F5:10AA  4264: Rand_d6_ecc:1883 = SearchEcc:2031
 33F4:50C4 37F5:10B4  4274: Rand_d7_ecc:1886 = SearchEcc:2031
 33F4:50CE 37F5:10BE  4284: #L0:145 = ArrStruct:759 == #I0:16
 33F4:50DC 37F5:10CC  4298: IFnot (#L0:145) GOTO .+342 (goto 4640)
 33F4:50E4 37F5:10D4  4306: SPAWN RandomizeRanDistAngles:1902(with 0 args)
 33F4:50EA 37F5:10DA  4312: WAITFORPROCESS RandomizeRanDistAngles:1902
 33F4:50F0 37F5:10E0  4318: SPAWN RandomizeRanDistEccentricities:1903(with 0 args)
 33F4:50F6 37F5:10E6  4324: WAITFORPROCESS RandomizeRanDistEccentricities:1903
 33F4:50FC 37F5:10EC  4330: SPAWN RandomizeRanTargAngles:1904(with 0 args)
 33F4:5102 37F5:10F2  4336: WAITFORPROCESS RandomizeRanTargAngles:1904
 33F4:5108 37F5:10F8  4342: #F0:1 = RanTarg_Ang_list:1911[#I0:16]
 33F4:5110 37F5:1100  4350: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:511A 37F5:110A  4360: #F0:1 = Dist_Ang_list:985[#I1:17]
 33F4:5122 37F5:1112  4368: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:512C 37F5:111C  4378: #F0:1 = Dist_Ang_list:985[#I2:53]
 33F4:5134 37F5:1124  4386: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:513E 37F5:112E  4396: #F0:1 = Dist_Ang_list:985[#I3:74]
 33F4:5146 37F5:1136  4404: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5150 37F5:1140  4414: #F0:1 = Dist_Ang_list:985[#I4:87]
 33F4:5158 37F5:1148  4422: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5162 37F5:1152  4432: #F0:1 = Dist_Ang_list:985[#I5:111]
 33F4:516A 37F5:115A  4440: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5174 37F5:1164  4450: #F0:1 = Dist_Ang_list:985[#I6:120]
 33F4:517C 37F5:116C  4458: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5186 37F5:1176  4468: #F0:1 = Dist_Ang_list:985[#I7:129]
 33F4:518E 37F5:117E  4476: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5198 37F5:1188  4486: Rand_targ_ecc:1897 = SearchEcc:2031
 33F4:51A2 37F5:1192  4496: #F0:1 = Dist_Ecc_list:986[#I1:17]
 33F4:51AA 37F5:119A  4504: Rand_d1_ecc:1868 = F= Rand_d1_ecc:1868
 33F4:51B4 37F5:11A4  4514: #F0:1 = Dist_Ecc_list:986[#I2:53]
 33F4:51BC 37F5:11AC  4522: Rand_d2_ecc:1871 = F= Rand_d2_ecc:1871
 33F4:51C6 37F5:11B6  4532: #F0:1 = Dist_Ecc_list:986[#I3:74]
 33F4:51CE 37F5:11BE  4540: Rand_d3_ecc:1874 = F= Rand_d3_ecc:1874
 33F4:51D8 37F5:11C8  4550: #F0:1 = Dist_Ecc_list:986[#I4:87]
 33F4:51E0 37F5:11D0  4558: Rand_d4_ecc:1877 = F= Rand_d4_ecc:1877
 33F4:51EA 37F5:11DA  4568: #F0:1 = Dist_Ecc_list:986[#I5:111]
 33F4:51F2 37F5:11E2  4576: Rand_d5_ecc:1880 = F= Rand_d5_ecc:1880
 33F4:51FC 37F5:11EC  4586: #F0:1 = Dist_Ecc_list:986[#I6:120]
 33F4:5204 37F5:11F4  4594: Rand_d6_ecc:1883 = F= Rand_d6_ecc:1883
 33F4:520E 37F5:11FE  4604: #F0:1 = Dist_Ecc_list:986[#I7:129]
 33F4:5216 37F5:1206  4612: Rand_d7_ecc:1886 = F= Rand_d7_ecc:1886
 33F4:5220 37F5:1210  4622: #F0:1 = Dist_Ecc_list:986[#I8:133]
 33F4:5228 37F5:1218  4630: Rand_d8_ecc:1888 = F= Rand_d8_ecc:1888
 33F4:5232 37F5:1222  4640: GOTO .+3656 (goto 8296)
 33F4:5236 37F5:1226  4644: #L0:145 = SingMode:2077 == #I1:17
 33F4:5244 37F5:1234  4658: IFnot (#L0:145) GOTO .+3638 (goto 8296)
 33F4:524C 37F5:123C  4666: SingFreq = CALL1 random(#I100:19)
 33F4:5254 37F5:1244  4674: #L0:145 = SingFreq:2075 < PercSingTrl:1609
 33F4:5262 37F5:1252  4688: IFnot (#L0:145) GOTO .+32 (goto 4720)
 33F4:526A 37F5:125A  4696: d1color:913 = #I251:67
 33F4:5274 37F5:1264  4706: DistPres:990 = #I2222:61
 33F4:527E 37F5:126E  4716: GOTO .+24 (goto 4740)
 33F4:5282 37F5:1272  4720: d1color:913 = #I250:66
 33F4:528C 37F5:127C  4730: DistPres:990 = #I1111:29
 33F4:5296 37F5:1286  4740: #L0:145 = ArrStruct:759 == #I1:17
 33F4:52A4 37F5:1294  4754: IFnot (#L0:145) GOTO .+3186 (goto 7940)
 33F4:52AC 37F5:129C  4762: #L1:146 = LatStruct:1313 == #I0:16
 33F4:52BA 37F5:12AA  4776: IFnot (#L1:146) GOTO .+844 (goto 5620)
 33F4:52C2 37F5:12B2  4784: TgAng = CALL1 random(#I4:87)
 33F4:52CA 37F5:12BA  4792: #L0:145 = TgAng:2274 == #I0:16
 33F4:52D8 37F5:12C8  4806: IFnot (#L0:145) GOTO .+172 (goto 4978)
 33F4:52E0 37F5:12D0  4814: THemi:2275 = #I8100:137
 33F4:52EA 37F5:12DA  4824: DHemi:984 = #I8200:138
 33F4:52F4 37F5:12E4  4834: #F0:1 = Angle_list:743[#I6:120]
 33F4:52FC 37F5:12EC  4842: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5306 37F5:12F6  4852: #F0:1 = Angle_list:743[#I2:53]
 33F4:530E 37F5:12FE  4860: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5318 37F5:1308  4870: #F0:1 = Angle_list:743[#I4:87]
 33F4:5320 37F5:1310  4878: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:532A 37F5:131A  4888: #F0:1 = Angle_list:743[#I0:16]
 33F4:5332 37F5:1322  4896: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:533C 37F5:132C  4906: #F0:1 = Angle_list:743[#I7:129]
 33F4:5344 37F5:1334  4914: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:534E 37F5:133E  4924: #F0:1 = Angle_list:743[#I1:17]
 33F4:5356 37F5:1346  4932: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5360 37F5:1350  4942: #F0:1 = Angle_list:743[#I3:74]
 33F4:5368 37F5:1358  4950: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5372 37F5:1362  4960: #F0:1 = Angle_list:743[#I5:111]
 33F4:537A 37F5:136A  4968: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5384 37F5:1374  4978: #L0:145 = TgAng:2274 == #I1:17
 33F4:5392 37F5:1382  4992: IFnot (#L0:145) GOTO .+172 (goto 5164)
 33F4:539A 37F5:138A  5000: THemi:2275 = #I8200:138
 33F4:53A4 37F5:1394  5010: DHemi:984 = #I8100:137
 33F4:53AE 37F5:139E  5020: #F0:1 = Angle_list:743[#I2:53]
 33F4:53B6 37F5:13A6  5028: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:53C0 37F5:13B0  5038: #F0:1 = Angle_list:743[#I6:120]
 33F4:53C8 37F5:13B8  5046: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:53D2 37F5:13C2  5056: #F0:1 = Angle_list:743[#I4:87]
 33F4:53DA 37F5:13CA  5064: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:53E4 37F5:13D4  5074: #F0:1 = Angle_list:743[#I0:16]
 33F4:53EC 37F5:13DC  5082: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:53F6 37F5:13E6  5092: #F0:1 = Angle_list:743[#I1:17]
 33F4:53FE 37F5:13EE  5100: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5408 37F5:13F8  5110: #F0:1 = Angle_list:743[#I5:111]
 33F4:5410 37F5:1400  5118: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:541A 37F5:140A  5128: #F0:1 = Angle_list:743[#I7:129]
 33F4:5422 37F5:1412  5136: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:542C 37F5:141C  5146: #F0:1 = Angle_list:743[#I3:74]
 33F4:5434 37F5:1424  5154: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:543E 37F5:142E  5164: #L0:145 = TgAng:2274 == #I2:53
 33F4:544C 37F5:143C  5178: IFnot (#L0:145) GOTO .+172 (goto 5350)
 33F4:5454 37F5:1444  5186: THemi:2275 = #I8100:137
 33F4:545E 37F5:144E  5196: DHemi:984 = #I8200:138
 33F4:5468 37F5:1458  5206: #F0:1 = Angle_list:743[#I0:16]
 33F4:5470 37F5:1460  5214: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:547A 37F5:146A  5224: #F0:1 = Angle_list:743[#I4:87]
 33F4:5482 37F5:1472  5232: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:548C 37F5:147C  5242: #F0:1 = Angle_list:743[#I6:120]
 33F4:5494 37F5:1484  5250: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:549E 37F5:148E  5260: #F0:1 = Angle_list:743[#I2:53]
 33F4:54A6 37F5:1496  5268: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:54B0 37F5:14A0  5278: #F0:1 = Angle_list:743[#I7:129]
 33F4:54B8 37F5:14A8  5286: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:54C2 37F5:14B2  5296: #F0:1 = Angle_list:743[#I1:17]
 33F4:54CA 37F5:14BA  5304: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:54D4 37F5:14C4  5314: #F0:1 = Angle_list:743[#I3:74]
 33F4:54DC 37F5:14CC  5322: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:54E6 37F5:14D6  5332: #F0:1 = Angle_list:743[#I5:111]
 33F4:54EE 37F5:14DE  5340: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:54F8 37F5:14E8  5350: #L0:145 = TgAng:2274 == #I3:74
 33F4:5506 37F5:14F6  5364: IFnot (#L0:145) GOTO .+172 (goto 5536)
 33F4:550E 37F5:14FE  5372: THemi:2275 = #I8200:138
 33F4:5518 37F5:1508  5382: DHemi:984 = #I8100:137
 33F4:5522 37F5:1512  5392: #F0:1 = Angle_list:743[#I4:87]
 33F4:552A 37F5:151A  5400: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5534 37F5:1524  5410: #F0:1 = Angle_list:743[#I0:16]
 33F4:553C 37F5:152C  5418: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5546 37F5:1536  5428: #F0:1 = Angle_list:743[#I6:120]
 33F4:554E 37F5:153E  5436: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5558 37F5:1548  5446: #F0:1 = Angle_list:743[#I2:53]
 33F4:5560 37F5:1550  5454: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:556A 37F5:155A  5464: #F0:1 = Angle_list:743[#I1:17]
 33F4:5572 37F5:1562  5472: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:557C 37F5:156C  5482: #F0:1 = Angle_list:743[#I5:111]
 33F4:5584 37F5:1574  5490: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:558E 37F5:157E  5500: #F0:1 = Angle_list:743[#I7:129]
 33F4:5596 37F5:1586  5508: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:55A0 37F5:1590  5518: #F0:1 = Angle_list:743[#I3:74]
 33F4:55A8 37F5:1598  5526: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:55B2 37F5:15A2  5536: Rand_targ_ecc:1897 = SearchEcc:2031
 33F4:55BC 37F5:15AC  5546: Rand_d1_ecc:1868 = SearchEcc:2031
 33F4:55C6 37F5:15B6  5556: Rand_d2_ecc:1871 = SearchEcc:2031
 33F4:55D0 37F5:15C0  5566: Rand_d3_ecc:1874 = SearchEcc:2031
 33F4:55DA 37F5:15CA  5576: Rand_d4_ecc:1877 = SearchEcc:2031
 33F4:55E4 37F5:15D4  5586: Rand_d5_ecc:1880 = SearchEcc:2031
 33F4:55EE 37F5:15DE  5596: Rand_d6_ecc:1883 = SearchEcc:2031
 33F4:55F8 37F5:15E8  5606: Rand_d7_ecc:1886 = SearchEcc:2031
 33F4:5602 37F5:15F2  5616: GOTO .+2324 (goto 7940)
 33F4:5606 37F5:15F6  5620: TgAng = CALL1 random(#I12:30)
 33F4:560E 37F5:15FE  5628: #L0:145 = TgAng:2274 == #I0:16
 33F4:561C 37F5:160C  5642: IFnot (#L0:145) GOTO .+172 (goto 5814)
 33F4:5624 37F5:1614  5650: THemi:2275 = #I8888:139
 33F4:562E 37F5:161E  5660: DHemi:984 = #I8200:138
 33F4:5638 37F5:1628  5670: #F0:1 = Angle_list:743[#I0:16]
 33F4:5640 37F5:1630  5678: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:564A 37F5:163A  5688: #F0:1 = Angle_list:743[#I2:53]
 33F4:5652 37F5:1642  5696: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:565C 37F5:164C  5706: #F0:1 = Angle_list:743[#I6:120]
 33F4:5664 37F5:1654  5714: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:566E 37F5:165E  5724: #F0:1 = Angle_list:743[#I4:87]
 33F4:5676 37F5:1666  5732: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5680 37F5:1670  5742: #F0:1 = Angle_list:743[#I7:129]
 33F4:5688 37F5:1678  5750: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5692 37F5:1682  5760: #F0:1 = Angle_list:743[#I1:17]
 33F4:569A 37F5:168A  5768: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:56A4 37F5:1694  5778: #F0:1 = Angle_list:743[#I3:74]
 33F4:56AC 37F5:169C  5786: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:56B6 37F5:16A6  5796: #F0:1 = Angle_list:743[#I5:111]
 33F4:56BE 37F5:16AE  5804: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:56C8 37F5:16B8  5814: #L0:145 = TgAng:2274 == #I1:17
 33F4:56D6 37F5:16C6  5828: IFnot (#L0:145) GOTO .+172 (goto 6000)
 33F4:56DE 37F5:16CE  5836: THemi:2275 = #I8888:139
 33F4:56E8 37F5:16D8  5846: DHemi:984 = #I8100:137
 33F4:56F2 37F5:16E2  5856: #F0:1 = Angle_list:743[#I0:16]
 33F4:56FA 37F5:16EA  5864: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5704 37F5:16F4  5874: #F0:1 = Angle_list:743[#I6:120]
 33F4:570C 37F5:16FC  5882: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5716 37F5:1706  5892: #F0:1 = Angle_list:743[#I4:87]
 33F4:571E 37F5:170E  5900: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5728 37F5:1718  5910: #F0:1 = Angle_list:743[#I2:53]
 33F4:5730 37F5:1720  5918: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:573A 37F5:172A  5928: #F0:1 = Angle_list:743[#I1:17]
 33F4:5742 37F5:1732  5936: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:574C 37F5:173C  5946: #F0:1 = Angle_list:743[#I5:111]
 33F4:5754 37F5:1744  5954: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:575E 37F5:174E  5964: #F0:1 = Angle_list:743[#I7:129]
 33F4:5766 37F5:1756  5972: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5770 37F5:1760  5982: #F0:1 = Angle_list:743[#I3:74]
 33F4:5778 37F5:1768  5990: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5782 37F5:1772  6000: #L0:145 = TgAng:2274 == #I2:53
 33F4:5790 37F5:1780  6014: IFnot (#L0:145) GOTO .+172 (goto 6186)
 33F4:5798 37F5:1788  6022: THemi:2275 = #I8888:139
 33F4:57A2 37F5:1792  6032: DHemi:984 = #I8200:138
 33F4:57AC 37F5:179C  6042: #F0:1 = Angle_list:743[#I4:87]
 33F4:57B4 37F5:17A4  6050: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:57BE 37F5:17AE  6060: #F0:1 = Angle_list:743[#I2:53]
 33F4:57C6 37F5:17B6  6068: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:57D0 37F5:17C0  6078: #F0:1 = Angle_list:743[#I6:120]
 33F4:57D8 37F5:17C8  6086: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:57E2 37F5:17D2  6096: #F0:1 = Angle_list:743[#I0:16]
 33F4:57EA 37F5:17DA  6104: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:57F4 37F5:17E4  6114: #F0:1 = Angle_list:743[#I5:111]
 33F4:57FC 37F5:17EC  6122: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5806 37F5:17F6  6132: #F0:1 = Angle_list:743[#I1:17]
 33F4:580E 37F5:17FE  6140: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5818 37F5:1808  6150: #F0:1 = Angle_list:743[#I3:74]
 33F4:5820 37F5:1810  6158: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:582A 37F5:181A  6168: #F0:1 = Angle_list:743[#I7:129]
 33F4:5832 37F5:1822  6176: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:583C 37F5:182C  6186: #L0:145 = TgAng:2274 == #I3:74
 33F4:584A 37F5:183A  6200: IFnot (#L0:145) GOTO .+172 (goto 6372)
 33F4:5852 37F5:1842  6208: THemi:2275 = #I8888:139
 33F4:585C 37F5:184C  6218: DHemi:984 = #I8100:137
 33F4:5866 37F5:1856  6228: #F0:1 = Angle_list:743[#I4:87]
 33F4:586E 37F5:185E  6236: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5878 37F5:1868  6246: #F0:1 = Angle_list:743[#I6:120]
 33F4:5880 37F5:1870  6254: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:588A 37F5:187A  6264: #F0:1 = Angle_list:743[#I2:53]
 33F4:5892 37F5:1882  6272: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:589C 37F5:188C  6282: #F0:1 = Angle_list:743[#I0:16]
 33F4:58A4 37F5:1894  6290: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:58AE 37F5:189E  6300: #F0:1 = Angle_list:743[#I1:17]
 33F4:58B6 37F5:18A6  6308: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:58C0 37F5:18B0  6318: #F0:1 = Angle_list:743[#I5:111]
 33F4:58C8 37F5:18B8  6326: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:58D2 37F5:18C2  6336: #F0:1 = Angle_list:743[#I7:129]
 33F4:58DA 37F5:18CA  6344: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:58E4 37F5:18D4  6354: #F0:1 = Angle_list:743[#I3:74]
 33F4:58EC 37F5:18DC  6362: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:58F6 37F5:18E6  6372: #L0:145 = TgAng:2274 == #I4:87
 33F4:5904 37F5:18F4  6386: IFnot (#L0:145) GOTO .+172 (goto 6558)
 33F4:590C 37F5:18FC  6394: THemi:2275 = #I8100:137
 33F4:5916 37F5:1906  6404: DHemi:984 = #I8888:139
 33F4:5920 37F5:1910  6414: #F0:1 = Angle_list:743[#I6:120]
 33F4:5928 37F5:1918  6422: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5932 37F5:1922  6432: #F0:1 = Angle_list:743[#I0:16]
 33F4:593A 37F5:192A  6440: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5944 37F5:1934  6450: #F0:1 = Angle_list:743[#I4:87]
 33F4:594C 37F5:193C  6458: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5956 37F5:1946  6468: #F0:1 = Angle_list:743[#I2:53]
 33F4:595E 37F5:194E  6476: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5968 37F5:1958  6486: #F0:1 = Angle_list:743[#I5:111]
 33F4:5970 37F5:1960  6494: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:597A 37F5:196A  6504: #F0:1 = Angle_list:743[#I3:74]
 33F4:5982 37F5:1972  6512: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:598C 37F5:197C  6522: #F0:1 = Angle_list:743[#I7:129]
 33F4:5994 37F5:1984  6530: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:599E 37F5:198E  6540: #F0:1 = Angle_list:743[#I1:17]
 33F4:59A6 37F5:1996  6548: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:59B0 37F5:19A0  6558: #L0:145 = TgAng:2274 == #I5:111
 33F4:59BE 37F5:19AE  6572: IFnot (#L0:145) GOTO .+172 (goto 6744)
 33F4:59C6 37F5:19B6  6580: THemi:2275 = #I8100:137
 33F4:59D0 37F5:19C0  6590: DHemi:984 = #I8888:139
 33F4:59DA 37F5:19CA  6600: #F0:1 = Angle_list:743[#I6:120]
 33F4:59E2 37F5:19D2  6608: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:59EC 37F5:19DC  6618: #F0:1 = Angle_list:743[#I4:87]
 33F4:59F4 37F5:19E4  6626: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:59FE 37F5:19EE  6636: #F0:1 = Angle_list:743[#I2:53]
 33F4:5A06 37F5:19F6  6644: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5A10 37F5:1A00  6654: #F0:1 = Angle_list:743[#I0:16]
 33F4:5A18 37F5:1A08  6662: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5A22 37F5:1A12  6672: #F0:1 = Angle_list:743[#I5:111]
 33F4:5A2A 37F5:1A1A  6680: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5A34 37F5:1A24  6690: #F0:1 = Angle_list:743[#I3:74]
 33F4:5A3C 37F5:1A2C  6698: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5A46 37F5:1A36  6708: #F0:1 = Angle_list:743[#I7:129]
 33F4:5A4E 37F5:1A3E  6716: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5A58 37F5:1A48  6726: #F0:1 = Angle_list:743[#I1:17]
 33F4:5A60 37F5:1A50  6734: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5A6A 37F5:1A5A  6744: #L0:145 = TgAng:2274 == #I6:120
 33F4:5A78 37F5:1A68  6758: IFnot (#L0:145) GOTO .+172 (goto 6930)
 33F4:5A80 37F5:1A70  6766: THemi:2275 = #I8200:138
 33F4:5A8A 37F5:1A7A  6776: DHemi:984 = #I8888:139
 33F4:5A94 37F5:1A84  6786: #F0:1 = Angle_list:743[#I2:53]
 33F4:5A9C 37F5:1A8C  6794: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5AA6 37F5:1A96  6804: #F0:1 = Angle_list:743[#I0:16]
 33F4:5AAE 37F5:1A9E  6812: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5AB8 37F5:1AA8  6822: #F0:1 = Angle_list:743[#I6:120]
 33F4:5AC0 37F5:1AB0  6830: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5ACA 37F5:1ABA  6840: #F0:1 = Angle_list:743[#I4:87]
 33F4:5AD2 37F5:1AC2  6848: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5ADC 37F5:1ACC  6858: #F0:1 = Angle_list:743[#I1:17]
 33F4:5AE4 37F5:1AD4  6866: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5AEE 37F5:1ADE  6876: #F0:1 = Angle_list:743[#I7:129]
 33F4:5AF6 37F5:1AE6  6884: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5B00 37F5:1AF0  6894: #F0:1 = Angle_list:743[#I3:74]
 33F4:5B08 37F5:1AF8  6902: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5B12 37F5:1B02  6912: #F0:1 = Angle_list:743[#I5:111]
 33F4:5B1A 37F5:1B0A  6920: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5B24 37F5:1B14  6930: #L0:145 = TgAng:2274 == #I7:129
 33F4:5B32 37F5:1B22  6944: IFnot (#L0:145) GOTO .+172 (goto 7116)
 33F4:5B3A 37F5:1B2A  6952: THemi:2275 = #I8200:138
 33F4:5B44 37F5:1B34  6962: DHemi:984 = #I8888:139
 33F4:5B4E 37F5:1B3E  6972: #F0:1 = Angle_list:743[#I2:53]
 33F4:5B56 37F5:1B46  6980: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5B60 37F5:1B50  6990: #F0:1 = Angle_list:743[#I4:87]
 33F4:5B68 37F5:1B58  6998: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5B72 37F5:1B62  7008: #F0:1 = Angle_list:743[#I6:120]
 33F4:5B7A 37F5:1B6A  7016: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5B84 37F5:1B74  7026: #F0:1 = Angle_list:743[#I0:16]
 33F4:5B8C 37F5:1B7C  7034: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5B96 37F5:1B86  7044: #F0:1 = Angle_list:743[#I3:74]
 33F4:5B9E 37F5:1B8E  7052: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5BA8 37F5:1B98  7062: #F0:1 = Angle_list:743[#I7:129]
 33F4:5BB0 37F5:1BA0  7070: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5BBA 37F5:1BAA  7080: #F0:1 = Angle_list:743[#I1:17]
 33F4:5BC2 37F5:1BB2  7088: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5BCC 37F5:1BBC  7098: #F0:1 = Angle_list:743[#I5:111]
 33F4:5BD4 37F5:1BC4  7106: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5BDE 37F5:1BCE  7116: #L0:145 = TgAng:2274 == #I8:133
 33F4:5BEC 37F5:1BDC  7130: IFnot (#L0:145) GOTO .+172 (goto 7302)
 33F4:5BF4 37F5:1BE4  7138: THemi:2275 = #I8100:137
 33F4:5BFE 37F5:1BEE  7148: DHemi:984 = #I8200:138
 33F4:5C08 37F5:1BF8  7158: #F0:1 = Angle_list:743[#I6:120]
 33F4:5C10 37F5:1C00  7166: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5C1A 37F5:1C0A  7176: #F0:1 = Angle_list:743[#I2:53]
 33F4:5C22 37F5:1C12  7184: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5C2C 37F5:1C1C  7194: #F0:1 = Angle_list:743[#I4:87]
 33F4:5C34 37F5:1C24  7202: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5C3E 37F5:1C2E  7212: #F0:1 = Angle_list:743[#I0:16]
 33F4:5C46 37F5:1C36  7220: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5C50 37F5:1C40  7230: #F0:1 = Angle_list:743[#I7:129]
 33F4:5C58 37F5:1C48  7238: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5C62 37F5:1C52  7248: #F0:1 = Angle_list:743[#I1:17]
 33F4:5C6A 37F5:1C5A  7256: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5C74 37F5:1C64  7266: #F0:1 = Angle_list:743[#I3:74]
 33F4:5C7C 37F5:1C6C  7274: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5C86 37F5:1C76  7284: #F0:1 = Angle_list:743[#I5:111]
 33F4:5C8E 37F5:1C7E  7292: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5C98 37F5:1C88  7302: #L0:145 = TgAng:2274 == #I9:140
 33F4:5CA6 37F5:1C96  7316: IFnot (#L0:145) GOTO .+172 (goto 7488)
 33F4:5CAE 37F5:1C9E  7324: THemi:2275 = #I8200:138
 33F4:5CB8 37F5:1CA8  7334: DHemi:984 = #I8100:137
 33F4:5CC2 37F5:1CB2  7344: #F0:1 = Angle_list:743[#I2:53]
 33F4:5CCA 37F5:1CBA  7352: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5CD4 37F5:1CC4  7362: #F0:1 = Angle_list:743[#I6:120]
 33F4:5CDC 37F5:1CCC  7370: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5CE6 37F5:1CD6  7380: #F0:1 = Angle_list:743[#I4:87]
 33F4:5CEE 37F5:1CDE  7388: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5CF8 37F5:1CE8  7398: #F0:1 = Angle_list:743[#I0:16]
 33F4:5D00 37F5:1CF0  7406: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5D0A 37F5:1CFA  7416: #F0:1 = Angle_list:743[#I1:17]
 33F4:5D12 37F5:1D02  7424: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5D1C 37F5:1D0C  7434: #F0:1 = Angle_list:743[#I5:111]
 33F4:5D24 37F5:1D14  7442: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5D2E 37F5:1D1E  7452: #F0:1 = Angle_list:743[#I7:129]
 33F4:5D36 37F5:1D26  7460: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5D40 37F5:1D30  7470: #F0:1 = Angle_list:743[#I3:74]
 33F4:5D48 37F5:1D38  7478: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5D52 37F5:1D42  7488: #L0:145 = TgAng:2274 == #I10:18
 33F4:5D60 37F5:1D50  7502: IFnot (#L0:145) GOTO .+172 (goto 7674)
 33F4:5D68 37F5:1D58  7510: THemi:2275 = #I8888:139
 33F4:5D72 37F5:1D62  7520: DHemi:984 = #I8888:139
 33F4:5D7C 37F5:1D6C  7530: #F0:1 = Angle_list:743[#I0:16]
 33F4:5D84 37F5:1D74  7538: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5D8E 37F5:1D7E  7548: #F0:1 = Angle_list:743[#I4:87]
 33F4:5D96 37F5:1D86  7556: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5DA0 37F5:1D90  7566: #F0:1 = Angle_list:743[#I6:120]
 33F4:5DA8 37F5:1D98  7574: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5DB2 37F5:1DA2  7584: #F0:1 = Angle_list:743[#I2:53]
 33F4:5DBA 37F5:1DAA  7592: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5DC4 37F5:1DB4  7602: #F0:1 = Angle_list:743[#I7:129]
 33F4:5DCC 37F5:1DBC  7610: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5DD6 37F5:1DC6  7620: #F0:1 = Angle_list:743[#I1:17]
 33F4:5DDE 37F5:1DCE  7628: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5DE8 37F5:1DD8  7638: #F0:1 = Angle_list:743[#I3:74]
 33F4:5DF0 37F5:1DE0  7646: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5DFA 37F5:1DEA  7656: #F0:1 = Angle_list:743[#I5:111]
 33F4:5E02 37F5:1DF2  7664: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5E0C 37F5:1DFC  7674: #L0:145 = TgAng:2274 == #I11:27
 33F4:5E1A 37F5:1E0A  7688: IFnot (#L0:145) GOTO .+172 (goto 7860)
 33F4:5E22 37F5:1E12  7696: THemi:2275 = #I8888:139
 33F4:5E2C 37F5:1E1C  7706: DHemi:984 = #I8888:139
 33F4:5E36 37F5:1E26  7716: #F0:1 = Angle_list:743[#I4:87]
 33F4:5E3E 37F5:1E2E  7724: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5E48 37F5:1E38  7734: #F0:1 = Angle_list:743[#I0:16]
 33F4:5E50 37F5:1E40  7742: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5E5A 37F5:1E4A  7752: #F0:1 = Angle_list:743[#I6:120]
 33F4:5E62 37F5:1E52  7760: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5E6C 37F5:1E5C  7770: #F0:1 = Angle_list:743[#I2:53]
 33F4:5E74 37F5:1E64  7778: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5E7E 37F5:1E6E  7788: #F0:1 = Angle_list:743[#I1:17]
 33F4:5E86 37F5:1E76  7796: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5E90 37F5:1E80  7806: #F0:1 = Angle_list:743[#I5:111]
 33F4:5E98 37F5:1E88  7814: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5EA2 37F5:1E92  7824: #F0:1 = Angle_list:743[#I7:129]
 33F4:5EAA 37F5:1E9A  7832: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5EB4 37F5:1EA4  7842: #F0:1 = Angle_list:743[#I3:74]
 33F4:5EBC 37F5:1EAC  7850: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5EC6 37F5:1EB6  7860: Rand_targ_ecc:1897 = SearchEcc:2031
 33F4:5ED0 37F5:1EC0  7870: Rand_d1_ecc:1868 = SearchEcc:2031
 33F4:5EDA 37F5:1ECA  7880: Rand_d2_ecc:1871 = SearchEcc:2031
 33F4:5EE4 37F5:1ED4  7890: Rand_d3_ecc:1874 = SearchEcc:2031
 33F4:5EEE 37F5:1EDE  7900: Rand_d4_ecc:1877 = SearchEcc:2031
 33F4:5EF8 37F5:1EE8  7910: Rand_d5_ecc:1880 = SearchEcc:2031
 33F4:5F02 37F5:1EF2  7920: Rand_d6_ecc:1883 = SearchEcc:2031
 33F4:5F0C 37F5:1EFC  7930: Rand_d7_ecc:1886 = SearchEcc:2031
 33F4:5F16 37F5:1F06  7940: #L0:145 = ArrStruct:759 == #I0:16
 33F4:5F24 37F5:1F14  7954: IFnot (#L0:145) GOTO .+342 (goto 8296)
 33F4:5F2C 37F5:1F1C  7962: SPAWN RandomizeRanDistAngles:1902(with 0 args)
 33F4:5F32 37F5:1F22  7968: WAITFORPROCESS RandomizeRanDistAngles:1902
 33F4:5F38 37F5:1F28  7974: SPAWN RandomizeRanDistEccentricities:1903(with 0 args)
 33F4:5F3E 37F5:1F2E  7980: WAITFORPROCESS RandomizeRanDistEccentricities:1903
 33F4:5F44 37F5:1F34  7986: SPAWN RandomizeRanTargAngles:1904(with 0 args)
 33F4:5F4A 37F5:1F3A  7992: WAITFORPROCESS RandomizeRanTargAngles:1904
 33F4:5F50 37F5:1F40  7998: #F0:1 = RanTarg_Ang_list:1911[#I0:16]
 33F4:5F58 37F5:1F48  8006: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:5F62 37F5:1F52  8016: #F0:1 = Dist_Ang_list:985[#I1:17]
 33F4:5F6A 37F5:1F5A  8024: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:5F74 37F5:1F64  8034: #F0:1 = Dist_Ang_list:985[#I2:53]
 33F4:5F7C 37F5:1F6C  8042: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:5F86 37F5:1F76  8052: #F0:1 = Dist_Ang_list:985[#I3:74]
 33F4:5F8E 37F5:1F7E  8060: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:5F98 37F5:1F88  8070: #F0:1 = Dist_Ang_list:985[#I4:87]
 33F4:5FA0 37F5:1F90  8078: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:5FAA 37F5:1F9A  8088: #F0:1 = Dist_Ang_list:985[#I5:111]
 33F4:5FB2 37F5:1FA2  8096: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:5FBC 37F5:1FAC  8106: #F0:1 = Dist_Ang_list:985[#I6:120]
 33F4:5FC4 37F5:1FB4  8114: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:5FCE 37F5:1FBE  8124: #F0:1 = Dist_Ang_list:985[#I7:129]
 33F4:5FD6 37F5:1FC6  8132: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:5FE0 37F5:1FD0  8142: Rand_targ_ecc:1897 = SearchEcc:2031
 33F4:5FEA 37F5:1FDA  8152: #F0:1 = Dist_Ecc_list:986[#I1:17]
 33F4:5FF2 37F5:1FE2  8160: Rand_d1_ecc:1868 = F= Rand_d1_ecc:1868
 33F4:5FFC 37F5:1FEC  8170: #F0:1 = Dist_Ecc_list:986[#I2:53]
 33F4:6004 37F5:1FF4  8178: Rand_d2_ecc:1871 = F= Rand_d2_ecc:1871
 33F4:600E 37F5:1FFE  8188: #F0:1 = Dist_Ecc_list:986[#I3:74]
 33F4:6016 37F5:2006  8196: Rand_d3_ecc:1874 = F= Rand_d3_ecc:1874
 33F4:6020 37F5:2010  8206: #F0:1 = Dist_Ecc_list:986[#I4:87]
 33F4:6028 37F5:2018  8214: Rand_d4_ecc:1877 = F= Rand_d4_ecc:1877
 33F4:6032 37F5:2022  8224: #F0:1 = Dist_Ecc_list:986[#I5:111]
 33F4:603A 37F5:202A  8232: Rand_d5_ecc:1880 = F= Rand_d5_ecc:1880
 33F4:6044 37F5:2034  8242: #F0:1 = Dist_Ecc_list:986[#I6:120]
 33F4:604C 37F5:203C  8250: Rand_d6_ecc:1883 = F= Rand_d6_ecc:1883
 33F4:6056 37F5:2046  8260: #F0:1 = Dist_Ecc_list:986[#I7:129]
 33F4:605E 37F5:204E  8268: Rand_d7_ecc:1886 = F= Rand_d7_ecc:1886
 33F4:6068 37F5:2058  8278: #F0:1 = Dist_Ecc_list:986[#I8:133]
 33F4:6070 37F5:2060  8286: Rand_d8_ecc:1888 = F= Rand_d8_ecc:1888

PROCESS  39: LOC_ASYM (Args=0 CtrlBlk=33F4:2318 Size=3924  iOp=2-3925 iCache=45490-49413) DISABLED
 33F4:4012 37F5:0002     0: d1color:913 = #I250:66
 33F4:401C 37F5:000C    10: #L0:145 = ArrStruct:759 == #I1:17
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+3900 (goto 3924)
 33F4:4032 37F5:0022    32: #L1:146 = ProbCue:1633 == #I0:16
 33F4:4040 37F5:0030    46: IFnot (#L1:146) GOTO .+1456 (goto 1502)
 33F4:4048 37F5:0038    54: TgAng = CALL1 random(#I8:133)
 33F4:4050 37F5:0040    62: #L0:145 = TgAng:2274 == #I0:16
 33F4:405E 37F5:004E    76: IFnot (#L0:145) GOTO .+166 (goto 242)
 33F4:4066 37F5:0056    84: THemi:2275 = #I0:16
 33F4:4070 37F5:0060    94: #F0:1 = Angle_list:743[#I0:16]
 33F4:4078 37F5:0068   102: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4082 37F5:0072   112: #F0:1 = Angle_list:743[#I4:87]
 33F4:408A 37F5:007A   120: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4094 37F5:0084   130: #F0:1 = Angle_list:743[#I2:53]
 33F4:409C 37F5:008C   138: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:40A6 37F5:0096   148: #F0:1 = Angle_list:743[#I6:120]
 33F4:40AE 37F5:009E   156: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:40B8 37F5:00A8   166: #F0:1 = Angle_list:743[#I1:17]
 33F4:40C0 37F5:00B0   174: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:40CA 37F5:00BA   184: #F0:1 = Angle_list:743[#I3:74]
 33F4:40D2 37F5:00C2   192: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:40DC 37F5:00CC   202: #F0:1 = Angle_list:743[#I5:111]
 33F4:40E4 37F5:00D4   210: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:40EE 37F5:00DE   220: #F0:1 = Angle_list:743[#I7:129]
 33F4:40F6 37F5:00E6   228: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4100 37F5:00F0   238: GOTO .+1260 (goto 1498)
 33F4:4104 37F5:00F4   242: #L0:145 = TgAng:2274 == #I1:17
 33F4:4112 37F5:0102   256: IFnot (#L0:145) GOTO .+166 (goto 422)
 33F4:411A 37F5:010A   264: THemi:2275 = #I1:17
 33F4:4124 37F5:0114   274: #F0:1 = Angle_list:743[#I1:17]
 33F4:412C 37F5:011C   282: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4136 37F5:0126   292: #F0:1 = Angle_list:743[#I5:111]
 33F4:413E 37F5:012E   300: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4148 37F5:0138   310: #F0:1 = Angle_list:743[#I3:74]
 33F4:4150 37F5:0140   318: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:415A 37F5:014A   328: #F0:1 = Angle_list:743[#I7:129]
 33F4:4162 37F5:0152   336: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:416C 37F5:015C   346: #F0:1 = Angle_list:743[#I2:53]
 33F4:4174 37F5:0164   354: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:417E 37F5:016E   364: #F0:1 = Angle_list:743[#I4:87]
 33F4:4186 37F5:0176   372: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4190 37F5:0180   382: #F0:1 = Angle_list:743[#I6:120]
 33F4:4198 37F5:0188   390: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:41A2 37F5:0192   400: #F0:1 = Angle_list:743[#I0:16]
 33F4:41AA 37F5:019A   408: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:41B4 37F5:01A4   418: GOTO .+1080 (goto 1498)
 33F4:41B8 37F5:01A8   422: #L0:145 = TgAng:2274 == #I2:53
 33F4:41C6 37F5:01B6   436: IFnot (#L0:145) GOTO .+166 (goto 602)
 33F4:41CE 37F5:01BE   444: THemi:2275 = #I1:17
 33F4:41D8 37F5:01C8   454: #F0:1 = Angle_list:743[#I2:53]
 33F4:41E0 37F5:01D0   462: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:41EA 37F5:01DA   472: #F0:1 = Angle_list:743[#I6:120]
 33F4:41F2 37F5:01E2   480: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:41FC 37F5:01EC   490: #F0:1 = Angle_list:743[#I4:87]
 33F4:4204 37F5:01F4   498: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:420E 37F5:01FE   508: #F0:1 = Angle_list:743[#I0:16]
 33F4:4216 37F5:0206   516: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4220 37F5:0210   526: #F0:1 = Angle_list:743[#I1:17]
 33F4:4228 37F5:0218   534: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4232 37F5:0222   544: #F0:1 = Angle_list:743[#I3:74]
 33F4:423A 37F5:022A   552: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4244 37F5:0234   562: #F0:1 = Angle_list:743[#I5:111]
 33F4:424C 37F5:023C   570: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4256 37F5:0246   580: #F0:1 = Angle_list:743[#I7:129]
 33F4:425E 37F5:024E   588: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4268 37F5:0258   598: GOTO .+900 (goto 1498)
 33F4:426C 37F5:025C   602: #L0:145 = TgAng:2274 == #I3:74
 33F4:427A 37F5:026A   616: IFnot (#L0:145) GOTO .+166 (goto 782)
 33F4:4282 37F5:0272   624: THemi:2275 = #I1:17
 33F4:428C 37F5:027C   634: #F0:1 = Angle_list:743[#I3:74]
 33F4:4294 37F5:0284   642: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:429E 37F5:028E   652: #F0:1 = Angle_list:743[#I7:129]
 33F4:42A6 37F5:0296   660: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:42B0 37F5:02A0   670: #F0:1 = Angle_list:743[#I5:111]
 33F4:42B8 37F5:02A8   678: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:42C2 37F5:02B2   688: #F0:1 = Angle_list:743[#I1:17]
 33F4:42CA 37F5:02BA   696: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:42D4 37F5:02C4   706: #F0:1 = Angle_list:743[#I2:53]
 33F4:42DC 37F5:02CC   714: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:42E6 37F5:02D6   724: #F0:1 = Angle_list:743[#I4:87]
 33F4:42EE 37F5:02DE   732: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:42F8 37F5:02E8   742: #F0:1 = Angle_list:743[#I6:120]
 33F4:4300 37F5:02F0   750: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:430A 37F5:02FA   760: #F0:1 = Angle_list:743[#I0:16]
 33F4:4312 37F5:0302   768: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:431C 37F5:030C   778: GOTO .+720 (goto 1498)
 33F4:4320 37F5:0310   782: #L0:145 = TgAng:2274 == #I4:87
 33F4:432E 37F5:031E   796: IFnot (#L0:145) GOTO .+166 (goto 962)
 33F4:4336 37F5:0326   804: THemi:2275 = #I0:16
 33F4:4340 37F5:0330   814: #F0:1 = Angle_list:743[#I4:87]
 33F4:4348 37F5:0338   822: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4352 37F5:0342   832: #F0:1 = Angle_list:743[#I0:16]
 33F4:435A 37F5:034A   840: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4364 37F5:0354   850: #F0:1 = Angle_list:743[#I2:53]
 33F4:436C 37F5:035C   858: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4376 37F5:0366   868: #F0:1 = Angle_list:743[#I6:120]
 33F4:437E 37F5:036E   876: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4388 37F5:0378   886: #F0:1 = Angle_list:743[#I1:17]
 33F4:4390 37F5:0380   894: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:439A 37F5:038A   904: #F0:1 = Angle_list:743[#I3:74]
 33F4:43A2 37F5:0392   912: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:43AC 37F5:039C   922: #F0:1 = Angle_list:743[#I5:111]
 33F4:43B4 37F5:03A4   930: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:43BE 37F5:03AE   940: #F0:1 = Angle_list:743[#I7:129]
 33F4:43C6 37F5:03B6   948: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:43D0 37F5:03C0   958: GOTO .+540 (goto 1498)
 33F4:43D4 37F5:03C4   962: #L0:145 = TgAng:2274 == #I5:111
 33F4:43E2 37F5:03D2   976: IFnot (#L0:145) GOTO .+166 (goto 1142)
 33F4:43EA 37F5:03DA   984: THemi:2275 = #I2:53
 33F4:43F4 37F5:03E4   994: #F0:1 = Angle_list:743[#I5:111]
 33F4:43FC 37F5:03EC  1002: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4406 37F5:03F6  1012: #F0:1 = Angle_list:743[#I1:17]
 33F4:440E 37F5:03FE  1020: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4418 37F5:0408  1030: #F0:1 = Angle_list:743[#I7:129]
 33F4:4420 37F5:0410  1038: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:442A 37F5:041A  1048: #F0:1 = Angle_list:743[#I3:74]
 33F4:4432 37F5:0422  1056: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:443C 37F5:042C  1066: #F0:1 = Angle_list:743[#I2:53]
 33F4:4444 37F5:0434  1074: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:444E 37F5:043E  1084: #F0:1 = Angle_list:743[#I4:87]
 33F4:4456 37F5:0446  1092: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4460 37F5:0450  1102: #F0:1 = Angle_list:743[#I6:120]
 33F4:4468 37F5:0458  1110: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4472 37F5:0462  1120: #F0:1 = Angle_list:743[#I0:16]
 33F4:447A 37F5:046A  1128: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4484 37F5:0474  1138: GOTO .+360 (goto 1498)
 33F4:4488 37F5:0478  1142: #L0:145 = TgAng:2274 == #I6:120
 33F4:4496 37F5:0486  1156: IFnot (#L0:145) GOTO .+166 (goto 1322)
 33F4:449E 37F5:048E  1164: THemi:2275 = #I2:53
 33F4:44A8 37F5:0498  1174: #F0:1 = Angle_list:743[#I6:120]
 33F4:44B0 37F5:04A0  1182: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:44BA 37F5:04AA  1192: #F0:1 = Angle_list:743[#I2:53]
 33F4:44C2 37F5:04B2  1200: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:44CC 37F5:04BC  1210: #F0:1 = Angle_list:743[#I0:16]
 33F4:44D4 37F5:04C4  1218: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:44DE 37F5:04CE  1228: #F0:1 = Angle_list:743[#I4:87]
 33F4:44E6 37F5:04D6  1236: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:44F0 37F5:04E0  1246: #F0:1 = Angle_list:743[#I1:17]
 33F4:44F8 37F5:04E8  1254: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4502 37F5:04F2  1264: #F0:1 = Angle_list:743[#I3:74]
 33F4:450A 37F5:04FA  1272: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4514 37F5:0504  1282: #F0:1 = Angle_list:743[#I5:111]
 33F4:451C 37F5:050C  1290: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4526 37F5:0516  1300: #F0:1 = Angle_list:743[#I7:129]
 33F4:452E 37F5:051E  1308: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4538 37F5:0528  1318: GOTO .+180 (goto 1498)
 33F4:453C 37F5:052C  1322: #L0:145 = TgAng:2274 == #I7:129
 33F4:454A 37F5:053A  1336: IFnot (#L0:145) GOTO .+162 (goto 1498)
 33F4:4552 37F5:0542  1344: THemi:2275 = #I2:53
 33F4:455C 37F5:054C  1354: #F0:1 = Angle_list:743[#I7:129]
 33F4:4564 37F5:0554  1362: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:456E 37F5:055E  1372: #F0:1 = Angle_list:743[#I3:74]
 33F4:4576 37F5:0566  1380: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4580 37F5:0570  1390: #F0:1 = Angle_list:743[#I1:17]
 33F4:4588 37F5:0578  1398: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4592 37F5:0582  1408: #F0:1 = Angle_list:743[#I5:111]
 33F4:459A 37F5:058A  1416: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:45A4 37F5:0594  1426: #F0:1 = Angle_list:743[#I2:53]
 33F4:45AC 37F5:059C  1434: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:45B6 37F5:05A6  1444: #F0:1 = Angle_list:743[#I4:87]
 33F4:45BE 37F5:05AE  1452: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:45C8 37F5:05B8  1462: #F0:1 = Angle_list:743[#I6:120]
 33F4:45D0 37F5:05C0  1470: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:45DA 37F5:05CA  1480: #F0:1 = Angle_list:743[#I0:16]
 33F4:45E2 37F5:05D2  1488: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:45EC 37F5:05DC  1498: GOTO .+2346 (goto 3844)
 33F4:45F0 37F5:05E0  1502: #L0:145 = ProbCue:1633 == #I1:17
 33F4:45FE 37F5:05EE  1516: IFnot (#L0:145) GOTO .+2328 (goto 3844)
 33F4:4606 37F5:05F6  1524: TgAng = CALL1 random(#I12:30)
 33F4:460E 37F5:05FE  1532: #L0:145 = ProbSide:1634 == #I0:16
 33F4:461C 37F5:060C  1546: IFnot (#L0:145) GOTO .+1144 (goto 2690)
 33F4:4624 37F5:0614  1554: #L1:146 = TgAng:2274 <= #I2:53
 33F4:4632 37F5:0622  1568: IFnot (#L1:146) GOTO .+166 (goto 1734)
 33F4:463A 37F5:062A  1576: THemi:2275 = #I1:17
 33F4:4644 37F5:0634  1586: #F0:1 = Angle_list:743[#I1:17]
 33F4:464C 37F5:063C  1594: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4656 37F5:0646  1604: #F0:1 = Angle_list:743[#I5:111]
 33F4:465E 37F5:064E  1612: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4668 37F5:0658  1622: #F0:1 = Angle_list:743[#I3:74]
 33F4:4670 37F5:0660  1630: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:467A 37F5:066A  1640: #F0:1 = Angle_list:743[#I7:129]
 33F4:4682 37F5:0672  1648: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:468C 37F5:067C  1658: #F0:1 = Angle_list:743[#I2:53]
 33F4:4694 37F5:0684  1666: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:469E 37F5:068E  1676: #F0:1 = Angle_list:743[#I4:87]
 33F4:46A6 37F5:0696  1684: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:46B0 37F5:06A0  1694: #F0:1 = Angle_list:743[#I6:120]
 33F4:46B8 37F5:06A8  1702: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:46C2 37F5:06B2  1712: #F0:1 = Angle_list:743[#I0:16]
 33F4:46CA 37F5:06BA  1720: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:46D4 37F5:06C4  1730: GOTO .+956 (goto 2686)
 33F4:46D8 37F5:06C8  1734: #L0:145 = TgAng:2274 >= #I3:74
 33F4:46E6 37F5:06D6  1748: #L1:146 = TgAng:2274 <= #I5:111
 33F4:46F4 37F5:06E4  1762: #L2:156 = #L0:145 && #L1:146
 33F4:4702 37F5:06F2  1776: IFnot (#L2:156) GOTO .+166 (goto 1942)
 33F4:470A 37F5:06FA  1784: THemi:2275 = #I1:17
 33F4:4714 37F5:0704  1794: #F0:1 = Angle_list:743[#I2:53]
 33F4:471C 37F5:070C  1802: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4726 37F5:0716  1812: #F0:1 = Angle_list:743[#I6:120]
 33F4:472E 37F5:071E  1820: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4738 37F5:0728  1830: #F0:1 = Angle_list:743[#I4:87]
 33F4:4740 37F5:0730  1838: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:474A 37F5:073A  1848: #F0:1 = Angle_list:743[#I0:16]
 33F4:4752 37F5:0742  1856: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:475C 37F5:074C  1866: #F0:1 = Angle_list:743[#I1:17]
 33F4:4764 37F5:0754  1874: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:476E 37F5:075E  1884: #F0:1 = Angle_list:743[#I3:74]
 33F4:4776 37F5:0766  1892: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4780 37F5:0770  1902: #F0:1 = Angle_list:743[#I5:111]
 33F4:4788 37F5:0778  1910: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4792 37F5:0782  1920: #F0:1 = Angle_list:743[#I7:129]
 33F4:479A 37F5:078A  1928: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:47A4 37F5:0794  1938: GOTO .+748 (goto 2686)
 33F4:47A8 37F5:0798  1942: #L0:145 = TgAng:2274 >= #I6:120
 33F4:47B6 37F5:07A6  1956: #L1:146 = TgAng:2274 <= #I8:133
 33F4:47C4 37F5:07B4  1970: #L2:156 = #L0:145 && #L1:146
 33F4:47D2 37F5:07C2  1984: IFnot (#L2:156) GOTO .+166 (goto 2150)
 33F4:47DA 37F5:07CA  1992: THemi:2275 = #I1:17
 33F4:47E4 37F5:07D4  2002: #F0:1 = Angle_list:743[#I3:74]
 33F4:47EC 37F5:07DC  2010: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:47F6 37F5:07E6  2020: #F0:1 = Angle_list:743[#I7:129]
 33F4:47FE 37F5:07EE  2028: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4808 37F5:07F8  2038: #F0:1 = Angle_list:743[#I5:111]
 33F4:4810 37F5:0800  2046: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:481A 37F5:080A  2056: #F0:1 = Angle_list:743[#I1:17]
 33F4:4822 37F5:0812  2064: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:482C 37F5:081C  2074: #F0:1 = Angle_list:743[#I2:53]
 33F4:4834 37F5:0824  2082: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:483E 37F5:082E  2092: #F0:1 = Angle_list:743[#I4:87]
 33F4:4846 37F5:0836  2100: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4850 37F5:0840  2110: #F0:1 = Angle_list:743[#I6:120]
 33F4:4858 37F5:0848  2118: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4862 37F5:0852  2128: #F0:1 = Angle_list:743[#I0:16]
 33F4:486A 37F5:085A  2136: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4874 37F5:0864  2146: GOTO .+540 (goto 2686)
 33F4:4878 37F5:0868  2150: #L0:145 = TgAng:2274 == #I9:140
 33F4:4886 37F5:0876  2164: IFnot (#L0:145) GOTO .+166 (goto 2330)
 33F4:488E 37F5:087E  2172: THemi:2275 = #I2:53
 33F4:4898 37F5:0888  2182: #F0:1 = Angle_list:743[#I5:111]
 33F4:48A0 37F5:0890  2190: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:48AA 37F5:089A  2200: #F0:1 = Angle_list:743[#I1:17]
 33F4:48B2 37F5:08A2  2208: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:48BC 37F5:08AC  2218: #F0:1 = Angle_list:743[#I7:129]
 33F4:48C4 37F5:08B4  2226: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:48CE 37F5:08BE  2236: #F0:1 = Angle_list:743[#I3:74]
 33F4:48D6 37F5:08C6  2244: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:48E0 37F5:08D0  2254: #F0:1 = Angle_list:743[#I2:53]
 33F4:48E8 37F5:08D8  2262: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:48F2 37F5:08E2  2272: #F0:1 = Angle_list:743[#I4:87]
 33F4:48FA 37F5:08EA  2280: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4904 37F5:08F4  2290: #F0:1 = Angle_list:743[#I6:120]
 33F4:490C 37F5:08FC  2298: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4916 37F5:0906  2308: #F0:1 = Angle_list:743[#I0:16]
 33F4:491E 37F5:090E  2316: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4928 37F5:0918  2326: GOTO .+360 (goto 2686)
 33F4:492C 37F5:091C  2330: #L0:145 = TgAng:2274 == #I10:18
 33F4:493A 37F5:092A  2344: IFnot (#L0:145) GOTO .+166 (goto 2510)
 33F4:4942 37F5:0932  2352: THemi:2275 = #I2:53
 33F4:494C 37F5:093C  2362: #F0:1 = Angle_list:743[#I6:120]
 33F4:4954 37F5:0944  2370: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:495E 37F5:094E  2380: #F0:1 = Angle_list:743[#I2:53]
 33F4:4966 37F5:0956  2388: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4970 37F5:0960  2398: #F0:1 = Angle_list:743[#I0:16]
 33F4:4978 37F5:0968  2406: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4982 37F5:0972  2416: #F0:1 = Angle_list:743[#I4:87]
 33F4:498A 37F5:097A  2424: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4994 37F5:0984  2434: #F0:1 = Angle_list:743[#I1:17]
 33F4:499C 37F5:098C  2442: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:49A6 37F5:0996  2452: #F0:1 = Angle_list:743[#I3:74]
 33F4:49AE 37F5:099E  2460: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:49B8 37F5:09A8  2470: #F0:1 = Angle_list:743[#I5:111]
 33F4:49C0 37F5:09B0  2478: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:49CA 37F5:09BA  2488: #F0:1 = Angle_list:743[#I7:129]
 33F4:49D2 37F5:09C2  2496: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:49DC 37F5:09CC  2506: GOTO .+180 (goto 2686)
 33F4:49E0 37F5:09D0  2510: #L0:145 = TgAng:2274 == #I11:27
 33F4:49EE 37F5:09DE  2524: IFnot (#L0:145) GOTO .+162 (goto 2686)
 33F4:49F6 37F5:09E6  2532: THemi:2275 = #I2:53
 33F4:4A00 37F5:09F0  2542: #F0:1 = Angle_list:743[#I7:129]
 33F4:4A08 37F5:09F8  2550: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4A12 37F5:0A02  2560: #F0:1 = Angle_list:743[#I3:74]
 33F4:4A1A 37F5:0A0A  2568: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4A24 37F5:0A14  2578: #F0:1 = Angle_list:743[#I1:17]
 33F4:4A2C 37F5:0A1C  2586: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4A36 37F5:0A26  2596: #F0:1 = Angle_list:743[#I5:111]
 33F4:4A3E 37F5:0A2E  2604: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4A48 37F5:0A38  2614: #F0:1 = Angle_list:743[#I2:53]
 33F4:4A50 37F5:0A40  2622: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4A5A 37F5:0A4A  2632: #F0:1 = Angle_list:743[#I4:87]
 33F4:4A62 37F5:0A52  2640: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4A6C 37F5:0A5C  2650: #F0:1 = Angle_list:743[#I6:120]
 33F4:4A74 37F5:0A64  2658: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4A7E 37F5:0A6E  2668: #F0:1 = Angle_list:743[#I0:16]
 33F4:4A86 37F5:0A76  2676: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4A90 37F5:0A80  2686: GOTO .+1158 (goto 3844)
 33F4:4A94 37F5:0A84  2690: #L0:145 = ProbSide:1634 == #I1:17
 33F4:4AA2 37F5:0A92  2704: IFnot (#L0:145) GOTO .+1140 (goto 3844)
 33F4:4AAA 37F5:0A9A  2712: #L1:146 = TgAng:2274 <= #I2:53
 33F4:4AB8 37F5:0AA8  2726: IFnot (#L1:146) GOTO .+166 (goto 2892)
 33F4:4AC0 37F5:0AB0  2734: THemi:2275 = #I2:53
 33F4:4ACA 37F5:0ABA  2744: #F0:1 = Angle_list:743[#I5:111]
 33F4:4AD2 37F5:0AC2  2752: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4ADC 37F5:0ACC  2762: #F0:1 = Angle_list:743[#I1:17]
 33F4:4AE4 37F5:0AD4  2770: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4AEE 37F5:0ADE  2780: #F0:1 = Angle_list:743[#I3:74]
 33F4:4AF6 37F5:0AE6  2788: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4B00 37F5:0AF0  2798: #F0:1 = Angle_list:743[#I7:129]
 33F4:4B08 37F5:0AF8  2806: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4B12 37F5:0B02  2816: #F0:1 = Angle_list:743[#I2:53]
 33F4:4B1A 37F5:0B0A  2824: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4B24 37F5:0B14  2834: #F0:1 = Angle_list:743[#I4:87]
 33F4:4B2C 37F5:0B1C  2842: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4B36 37F5:0B26  2852: #F0:1 = Angle_list:743[#I6:120]
 33F4:4B3E 37F5:0B2E  2860: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4B48 37F5:0B38  2870: #F0:1 = Angle_list:743[#I0:16]
 33F4:4B50 37F5:0B40  2878: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4B5A 37F5:0B4A  2888: GOTO .+956 (goto 3844)
 33F4:4B5E 37F5:0B4E  2892: #L0:145 = TgAng:2274 >= #I3:74
 33F4:4B6C 37F5:0B5C  2906: #L1:146 = TgAng:2274 <= #I5:111
 33F4:4B7A 37F5:0B6A  2920: #L2:156 = #L0:145 && #L1:146
 33F4:4B88 37F5:0B78  2934: IFnot (#L2:156) GOTO .+166 (goto 3100)
 33F4:4B90 37F5:0B80  2942: THemi:2275 = #I2:53
 33F4:4B9A 37F5:0B8A  2952: #F0:1 = Angle_list:743[#I6:120]
 33F4:4BA2 37F5:0B92  2960: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4BAC 37F5:0B9C  2970: #F0:1 = Angle_list:743[#I2:53]
 33F4:4BB4 37F5:0BA4  2978: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4BBE 37F5:0BAE  2988: #F0:1 = Angle_list:743[#I4:87]
 33F4:4BC6 37F5:0BB6  2996: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4BD0 37F5:0BC0  3006: #F0:1 = Angle_list:743[#I0:16]
 33F4:4BD8 37F5:0BC8  3014: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4BE2 37F5:0BD2  3024: #F0:1 = Angle_list:743[#I1:17]
 33F4:4BEA 37F5:0BDA  3032: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4BF4 37F5:0BE4  3042: #F0:1 = Angle_list:743[#I3:74]
 33F4:4BFC 37F5:0BEC  3050: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4C06 37F5:0BF6  3060: #F0:1 = Angle_list:743[#I5:111]
 33F4:4C0E 37F5:0BFE  3068: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4C18 37F5:0C08  3078: #F0:1 = Angle_list:743[#I7:129]
 33F4:4C20 37F5:0C10  3086: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4C2A 37F5:0C1A  3096: GOTO .+748 (goto 3844)
 33F4:4C2E 37F5:0C1E  3100: #L0:145 = TgAng:2274 >= #I6:120
 33F4:4C3C 37F5:0C2C  3114: #L1:146 = TgAng:2274 <= #I8:133
 33F4:4C4A 37F5:0C3A  3128: #L2:156 = #L0:145 && #L1:146
 33F4:4C58 37F5:0C48  3142: IFnot (#L2:156) GOTO .+166 (goto 3308)
 33F4:4C60 37F5:0C50  3150: THemi:2275 = #I2:53
 33F4:4C6A 37F5:0C5A  3160: #F0:1 = Angle_list:743[#I7:129]
 33F4:4C72 37F5:0C62  3168: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4C7C 37F5:0C6C  3178: #F0:1 = Angle_list:743[#I3:74]
 33F4:4C84 37F5:0C74  3186: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4C8E 37F5:0C7E  3196: #F0:1 = Angle_list:743[#I5:111]
 33F4:4C96 37F5:0C86  3204: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4CA0 37F5:0C90  3214: #F0:1 = Angle_list:743[#I1:17]
 33F4:4CA8 37F5:0C98  3222: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4CB2 37F5:0CA2  3232: #F0:1 = Angle_list:743[#I2:53]
 33F4:4CBA 37F5:0CAA  3240: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4CC4 37F5:0CB4  3250: #F0:1 = Angle_list:743[#I4:87]
 33F4:4CCC 37F5:0CBC  3258: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4CD6 37F5:0CC6  3268: #F0:1 = Angle_list:743[#I6:120]
 33F4:4CDE 37F5:0CCE  3276: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4CE8 37F5:0CD8  3286: #F0:1 = Angle_list:743[#I0:16]
 33F4:4CF0 37F5:0CE0  3294: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4CFA 37F5:0CEA  3304: GOTO .+540 (goto 3844)
 33F4:4CFE 37F5:0CEE  3308: #L0:145 = TgAng:2274 == #I9:140
 33F4:4D0C 37F5:0CFC  3322: IFnot (#L0:145) GOTO .+166 (goto 3488)
 33F4:4D14 37F5:0D04  3330: THemi:2275 = #I1:17
 33F4:4D1E 37F5:0D0E  3340: #F0:1 = Angle_list:743[#I1:17]
 33F4:4D26 37F5:0D16  3348: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4D30 37F5:0D20  3358: #F0:1 = Angle_list:743[#I5:111]
 33F4:4D38 37F5:0D28  3366: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4D42 37F5:0D32  3376: #F0:1 = Angle_list:743[#I7:129]
 33F4:4D4A 37F5:0D3A  3384: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4D54 37F5:0D44  3394: #F0:1 = Angle_list:743[#I3:74]
 33F4:4D5C 37F5:0D4C  3402: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4D66 37F5:0D56  3412: #F0:1 = Angle_list:743[#I2:53]
 33F4:4D6E 37F5:0D5E  3420: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4D78 37F5:0D68  3430: #F0:1 = Angle_list:743[#I4:87]
 33F4:4D80 37F5:0D70  3438: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4D8A 37F5:0D7A  3448: #F0:1 = Angle_list:743[#I6:120]
 33F4:4D92 37F5:0D82  3456: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4D9C 37F5:0D8C  3466: #F0:1 = Angle_list:743[#I0:16]
 33F4:4DA4 37F5:0D94  3474: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4DAE 37F5:0D9E  3484: GOTO .+360 (goto 3844)
 33F4:4DB2 37F5:0DA2  3488: #L0:145 = TgAng:2274 == #I10:18
 33F4:4DC0 37F5:0DB0  3502: IFnot (#L0:145) GOTO .+166 (goto 3668)
 33F4:4DC8 37F5:0DB8  3510: THemi:2275 = #I1:17
 33F4:4DD2 37F5:0DC2  3520: #F0:1 = Angle_list:743[#I2:53]
 33F4:4DDA 37F5:0DCA  3528: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4DE4 37F5:0DD4  3538: #F0:1 = Angle_list:743[#I6:120]
 33F4:4DEC 37F5:0DDC  3546: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4DF6 37F5:0DE6  3556: #F0:1 = Angle_list:743[#I0:16]
 33F4:4DFE 37F5:0DEE  3564: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4E08 37F5:0DF8  3574: #F0:1 = Angle_list:743[#I4:87]
 33F4:4E10 37F5:0E00  3582: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4E1A 37F5:0E0A  3592: #F0:1 = Angle_list:743[#I1:17]
 33F4:4E22 37F5:0E12  3600: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4E2C 37F5:0E1C  3610: #F0:1 = Angle_list:743[#I3:74]
 33F4:4E34 37F5:0E24  3618: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4E3E 37F5:0E2E  3628: #F0:1 = Angle_list:743[#I5:111]
 33F4:4E46 37F5:0E36  3636: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4E50 37F5:0E40  3646: #F0:1 = Angle_list:743[#I7:129]
 33F4:4E58 37F5:0E48  3654: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4E62 37F5:0E52  3664: GOTO .+180 (goto 3844)
 33F4:4E66 37F5:0E56  3668: #L0:145 = TgAng:2274 == #I11:27
 33F4:4E74 37F5:0E64  3682: IFnot (#L0:145) GOTO .+162 (goto 3844)
 33F4:4E7C 37F5:0E6C  3690: THemi:2275 = #I1:17
 33F4:4E86 37F5:0E76  3700: #F0:1 = Angle_list:743[#I3:74]
 33F4:4E8E 37F5:0E7E  3708: Rand_targ_angle:1896 = F= Rand_targ_angle:1896
 33F4:4E98 37F5:0E88  3718: #F0:1 = Angle_list:743[#I7:129]
 33F4:4EA0 37F5:0E90  3726: Rand_d1_angle:1867 = F= Rand_d1_angle:1867
 33F4:4EAA 37F5:0E9A  3736: #F0:1 = Angle_list:743[#I1:17]
 33F4:4EB2 37F5:0EA2  3744: Rand_d2_angle:1870 = F= Rand_d2_angle:1870
 33F4:4EBC 37F5:0EAC  3754: #F0:1 = Angle_list:743[#I5:111]
 33F4:4EC4 37F5:0EB4  3762: Rand_d3_angle:1873 = F= Rand_d3_angle:1873
 33F4:4ECE 37F5:0EBE  3772: #F0:1 = Angle_list:743[#I2:53]
 33F4:4ED6 37F5:0EC6  3780: Rand_d4_angle:1876 = F= Rand_d4_angle:1876
 33F4:4EE0 37F5:0ED0  3790: #F0:1 = Angle_list:743[#I4:87]
 33F4:4EE8 37F5:0ED8  3798: Rand_d5_angle:1879 = F= Rand_d5_angle:1879
 33F4:4EF2 37F5:0EE2  3808: #F0:1 = Angle_list:743[#I6:120]
 33F4:4EFA 37F5:0EEA  3816: Rand_d6_angle:1882 = F= Rand_d6_angle:1882
 33F4:4F04 37F5:0EF4  3826: #F0:1 = Angle_list:743[#I0:16]
 33F4:4F0C 37F5:0EFC  3834: Rand_d7_angle:1885 = F= Rand_d7_angle:1885
 33F4:4F16 37F5:0F06  3844: Rand_targ_ecc:1897 = SearchEcc:2031
 33F4:4F20 37F5:0F10  3854: Rand_d1_ecc:1868 = SearchEcc:2031
 33F4:4F2A 37F5:0F1A  3864: Rand_d2_ecc:1871 = SearchEcc:2031
 33F4:4F34 37F5:0F24  3874: Rand_d3_ecc:1874 = SearchEcc:2031
 33F4:4F3E 37F5:0F2E  3884: Rand_d4_ecc:1877 = SearchEcc:2031
 33F4:4F48 37F5:0F38  3894: Rand_d5_ecc:1880 = SearchEcc:2031
 33F4:4F52 37F5:0F42  3904: Rand_d6_ecc:1883 = SearchEcc:2031
 33F4:4F5C 37F5:0F4C  3914: Rand_d7_ecc:1886 = SearchEcc:2031

PROCESS  40: SEL_LOCS (Args=0 CtrlBlk=33F4:2344 Size=2834  iOp=2-2835 iCache=49414-52247) DISABLED
 33F4:4012 37F5:0002     0: trialtype = CALL1 random(#I12:30)
 33F4:401A 37F5:000A     8: #L0:145 = ArrStruct:759 == #I1:17
 33F4:4028 37F5:0018    22: IFnot (#L0:145) GOTO .+364 (goto 386)
 33F4:4030 37F5:0020    30: #L1:146 = trialtype:2301 >= #I0:16
 33F4:403E 37F5:002E    44: IFnot (#L1:146) GOTO .+338 (goto 382)
 33F4:4046 37F5:0036    52: TrialTp:2300 = #I1:17
 33F4:4050 37F5:0040    62: targ_angle:2195 = F= targ_angle:2195
 33F4:405A 37F5:004A    72: d1_angle:910 = F= d1_angle:910
 33F4:4064 37F5:0054    82: d2_angle:914 = F= d2_angle:914
 33F4:406E 37F5:005E    92: d3_angle:917 = F= d3_angle:917
 33F4:4078 37F5:0068   102: d4_angle:920 = F= d4_angle:920
 33F4:4082 37F5:0072   112: d5_angle:923 = F= d5_angle:923
 33F4:408C 37F5:007C   122: d6_angle:926 = F= d6_angle:926
 33F4:4096 37F5:0086   132: d7_angle:929 = F= d7_angle:929
 33F4:40A0 37F5:0090   142: targ_ecc:2196 = F= targ_ecc:2196
 33F4:40AA 37F5:009A   152: d1_ecc:911 = F= d1_ecc:911
 33F4:40B4 37F5:00A4   162: d2_ecc:915 = F= d2_ecc:915
 33F4:40BE 37F5:00AE   172: d3_ecc:918 = F= d3_ecc:918
 33F4:40C8 37F5:00B8   182: d4_ecc:921 = F= d4_ecc:921
 33F4:40D2 37F5:00C2   192: d5_ecc:924 = F= d5_ecc:924
 33F4:40DC 37F5:00CC   202: d6_ecc:927 = F= d6_ecc:927
 33F4:40E6 37F5:00D6   212: d7_ecc:930 = F= d7_ecc:930
 33F4:40F0 37F5:00E0   222: d8_ecc:933 = F= d8_ecc:933
 33F4:40FA 37F5:00EA   232: d9_ecc:936 = F= d9_ecc:936
 33F4:4104 37F5:00F4   242: d10_ecc:905 = F= d10_ecc:905
 33F4:410E 37F5:00FE   252: d11_ecc:908 = F= d11_ecc:908
 33F4:4118 37F5:0108   262: targ_orient:2208 = F= targ_orient:2208
 33F4:4122 37F5:0112   272: d1_orient:912 = F= d1_orient:912
 33F4:412C 37F5:011C   282: d2_orient:916 = F= d2_orient:916
 33F4:4136 37F5:0126   292: d3_orient:919 = F= d3_orient:919
 33F4:4140 37F5:0130   302: d4_orient:922 = F= d4_orient:922
 33F4:414A 37F5:013A   312: d5_orient:925 = F= d5_orient:925
 33F4:4154 37F5:0144   322: d6_orient:928 = F= d6_orient:928
 33F4:415E 37F5:014E   332: d7_orient:931 = F= d7_orient:931
 33F4:4168 37F5:0158   342: d8_orient:934 = F= d8_orient:934
 33F4:4172 37F5:0162   352: d9_orient:937 = F= d9_orient:937
 33F4:417C 37F5:016C   362: d10_orient:906 = F= d10_orient:906
 33F4:4186 37F5:0176   372: d11_orient:909 = F= d11_orient:909
 33F4:4190 37F5:0180   382: GOTO .+2452 (goto 2834)
 33F4:4194 37F5:0184   386: #L0:145 = trialtype:2301 < #I6:120
 33F4:41A2 37F5:0192   400: IFnot (#L0:145) GOTO .+302 (goto 702)
 33F4:41AA 37F5:019A   408: TrialTp:2300 = #I1:17
 33F4:41B4 37F5:01A4   418: targ_angle:2195 = F= targ_angle:2195
 33F4:41BE 37F5:01AE   428: d1_angle:910 = F= d1_angle:910
 33F4:41C8 37F5:01B8   438: d2_angle:914 = F= d2_angle:914
 33F4:41D2 37F5:01C2   448: d3_angle:917 = F= d3_angle:917
 33F4:41DC 37F5:01CC   458: d4_angle:920 = F= d4_angle:920
 33F4:41E6 37F5:01D6   468: d5_angle:923 = F= d5_angle:923
 33F4:41F0 37F5:01E0   478: d6_angle:926 = F= d6_angle:926
 33F4:41FA 37F5:01EA   488: d7_angle:929 = F= d7_angle:929
 33F4:4204 37F5:01F4   498: targ_ecc:2196 = F= targ_ecc:2196
 33F4:420E 37F5:01FE   508: d1_ecc:911 = F= d1_ecc:911
 33F4:4218 37F5:0208   518: d2_ecc:915 = F= d2_ecc:915
 33F4:4222 37F5:0212   528: d3_ecc:918 = F= d3_ecc:918
 33F4:422C 37F5:021C   538: d4_ecc:921 = F= d4_ecc:921
 33F4:4236 37F5:0226   548: d5_ecc:924 = F= d5_ecc:924
 33F4:4240 37F5:0230   558: d6_ecc:927 = F= d6_ecc:927
 33F4:424A 37F5:023A   568: d7_ecc:930 = F= d7_ecc:930
 33F4:4254 37F5:0244   578: d8_ecc:933 = F= d8_ecc:933
 33F4:425E 37F5:024E   588: d9_ecc:936 = F= d9_ecc:936
 33F4:4268 37F5:0258   598: d10_ecc:905 = F= d10_ecc:905
 33F4:4272 37F5:0262   608: d11_ecc:908 = F= d11_ecc:908
 33F4:427C 37F5:026C   618: targ_orient:2208 = F= targ_orient:2208
 33F4:4286 37F5:0276   628: d1_orient:912 = F= d1_orient:912
 33F4:4290 37F5:0280   638: d2_orient:916 = F= d2_orient:916
 33F4:429A 37F5:028A   648: d3_orient:919 = F= d3_orient:919
 33F4:42A4 37F5:0294   658: d4_orient:922 = F= d4_orient:922
 33F4:42AE 37F5:029E   668: d5_orient:925 = F= d5_orient:925
 33F4:42B8 37F5:02A8   678: d6_orient:928 = F= d6_orient:928
 33F4:42C2 37F5:02B2   688: d7_orient:931 = F= d7_orient:931
 33F4:42CC 37F5:02BC   698: GOTO .+2136 (goto 2834)
 33F4:42D0 37F5:02C0   702: #L0:145 = trialtype:2301 == #I6:120
 33F4:42DE 37F5:02CE   716: IFnot (#L0:145) GOTO .+342 (goto 1058)
 33F4:42E6 37F5:02D6   724: TrialTp:2300 = #I2:53
 33F4:42F0 37F5:02E0   734: targ_angle:2195 = F= targ_angle:2195
 33F4:42FA 37F5:02EA   744: d1_angle:910 = F= d1_angle:910
 33F4:4304 37F5:02F4   754: d2_angle:914 = F= d2_angle:914
 33F4:430E 37F5:02FE   764: d3_angle:917 = F= d3_angle:917
 33F4:4318 37F5:0308   774: d4_angle:920 = F= d4_angle:920
 33F4:4322 37F5:0312   784: d5_angle:923 = F= d5_angle:923
 33F4:432C 37F5:031C   794: d6_angle:926 = F= d6_angle:926
 33F4:4336 37F5:0326   804: d7_angle:929 = F= d7_angle:929
 33F4:4340 37F5:0330   814: targ_ecc:2196 = F= targ_ecc:2196
 33F4:434A 37F5:033A   824: d1_ecc:911 = F= d1_ecc:911
 33F4:4354 37F5:0344   834: d2_ecc:915 = F= d2_ecc:915
 33F4:435E 37F5:034E   844: d3_ecc:918 = F= d3_ecc:918
 33F4:4368 37F5:0358   854: d4_ecc:921 = F= d4_ecc:921
 33F4:4372 37F5:0362   864: d5_ecc:924 = F= d5_ecc:924
 33F4:437C 37F5:036C   874: d6_ecc:927 = F= d6_ecc:927
 33F4:4386 37F5:0376   884: d7_ecc:930 = F= d7_ecc:930
 33F4:4390 37F5:0380   894: d8_ecc:933 = F= d8_ecc:933
 33F4:439A 37F5:038A   904: d9_ecc:936 = F= d9_ecc:936
 33F4:43A4 37F5:0394   914: d10_ecc:905 = F= d10_ecc:905
 33F4:43AE 37F5:039E   924: d11_ecc:908 = F= d11_ecc:908
 33F4:43B8 37F5:03A8   934: targ_orient:2208 = F= targ_orient:2208
 33F4:43C2 37F5:03B2   944: d1_orient:912 = F= d1_orient:912
 33F4:43CC 37F5:03BC   954: d2_orient:916 = F= d2_orient:916
 33F4:43D6 37F5:03C6   964: d3_orient:919 = F= d3_orient:919
 33F4:43E0 37F5:03D0   974: d4_orient:922 = F= d4_orient:922
 33F4:43EA 37F5:03DA   984: d5_orient:925 = F= d5_orient:925
 33F4:43F4 37F5:03E4   994: d6_orient:928 = F= d6_orient:928
 33F4:43FE 37F5:03EE  1004: d7_orient:931 = F= d7_orient:931
 33F4:4408 37F5:03F8  1014: d8_orient:934 = F= d8_orient:934
 33F4:4412 37F5:0402  1024: d9_orient:937 = F= d9_orient:937
 33F4:441C 37F5:040C  1034: d10_orient:906 = F= d10_orient:906
 33F4:4426 37F5:0416  1044: d11_orient:909 = F= d11_orient:909
 33F4:4430 37F5:0420  1054: GOTO .+1780 (goto 2834)
 33F4:4434 37F5:0424  1058: #L0:145 = trialtype:2301 == #I7:129
 33F4:4442 37F5:0432  1072: IFnot (#L0:145) GOTO .+342 (goto 1414)
 33F4:444A 37F5:043A  1080: TrialTp:2300 = #I2:53
 33F4:4454 37F5:0444  1090: targ_angle:2195 = F= targ_angle:2195
 33F4:445E 37F5:044E  1100: d1_angle:910 = F= d1_angle:910
 33F4:4468 37F5:0458  1110: d2_angle:914 = F= d2_angle:914
 33F4:4472 37F5:0462  1120: d3_angle:917 = F= d3_angle:917
 33F4:447C 37F5:046C  1130: d4_angle:920 = F= d4_angle:920
 33F4:4486 37F5:0476  1140: d5_angle:923 = F= d5_angle:923
 33F4:4490 37F5:0480  1150: d6_angle:926 = F= d6_angle:926
 33F4:449A 37F5:048A  1160: d7_angle:929 = F= d7_angle:929
 33F4:44A4 37F5:0494  1170: targ_ecc:2196 = F= targ_ecc:2196
 33F4:44AE 37F5:049E  1180: d1_ecc:911 = F= d1_ecc:911
 33F4:44B8 37F5:04A8  1190: d2_ecc:915 = F= d2_ecc:915
 33F4:44C2 37F5:04B2  1200: d3_ecc:918 = F= d3_ecc:918
 33F4:44CC 37F5:04BC  1210: d4_ecc:921 = F= d4_ecc:921
 33F4:44D6 37F5:04C6  1220: d5_ecc:924 = F= d5_ecc:924
 33F4:44E0 37F5:04D0  1230: d6_ecc:927 = F= d6_ecc:927
 33F4:44EA 37F5:04DA  1240: d7_ecc:930 = F= d7_ecc:930
 33F4:44F4 37F5:04E4  1250: d8_ecc:933 = F= d8_ecc:933
 33F4:44FE 37F5:04EE  1260: d9_ecc:936 = F= d9_ecc:936
 33F4:4508 37F5:04F8  1270: d10_ecc:905 = F= d10_ecc:905
 33F4:4512 37F5:0502  1280: d11_ecc:908 = F= d11_ecc:908
 33F4:451C 37F5:050C  1290: targ_orient:2208 = F= targ_orient:2208
 33F4:4526 37F5:0516  1300: d1_orient:912 = F= d1_orient:912
 33F4:4530 37F5:0520  1310: d2_orient:916 = F= d2_orient:916
 33F4:453A 37F5:052A  1320: d3_orient:919 = F= d3_orient:919
 33F4:4544 37F5:0534  1330: d4_orient:922 = F= d4_orient:922
 33F4:454E 37F5:053E  1340: d5_orient:925 = F= d5_orient:925
 33F4:4558 37F5:0548  1350: d6_orient:928 = F= d6_orient:928
 33F4:4562 37F5:0552  1360: d7_orient:931 = F= d7_orient:931
 33F4:456C 37F5:055C  1370: d8_orient:934 = F= d8_orient:934
 33F4:4576 37F5:0566  1380: d9_orient:937 = F= d9_orient:937
 33F4:4580 37F5:0570  1390: d10_orient:906 = F= d10_orient:906
 33F4:458A 37F5:057A  1400: d11_orient:909 = F= d11_orient:909
 33F4:4594 37F5:0584  1410: GOTO .+1424 (goto 2834)
 33F4:4598 37F5:0588  1414: #L0:145 = trialtype:2301 == #I8:133
 33F4:45A6 37F5:0596  1428: IFnot (#L0:145) GOTO .+342 (goto 1770)
 33F4:45AE 37F5:059E  1436: TrialTp:2300 = #I2:53
 33F4:45B8 37F5:05A8  1446: targ_angle:2195 = F= targ_angle:2195
 33F4:45C2 37F5:05B2  1456: d1_angle:910 = F= d1_angle:910
 33F4:45CC 37F5:05BC  1466: d2_angle:914 = F= d2_angle:914
 33F4:45D6 37F5:05C6  1476: d3_angle:917 = F= d3_angle:917
 33F4:45E0 37F5:05D0  1486: d4_angle:920 = F= d4_angle:920
 33F4:45EA 37F5:05DA  1496: d5_angle:923 = F= d5_angle:923
 33F4:45F4 37F5:05E4  1506: d6_angle:926 = F= d6_angle:926
 33F4:45FE 37F5:05EE  1516: d7_angle:929 = F= d7_angle:929
 33F4:4608 37F5:05F8  1526: targ_ecc:2196 = F= targ_ecc:2196
 33F4:4612 37F5:0602  1536: d1_ecc:911 = F= d1_ecc:911
 33F4:461C 37F5:060C  1546: d2_ecc:915 = F= d2_ecc:915
 33F4:4626 37F5:0616  1556: d3_ecc:918 = F= d3_ecc:918
 33F4:4630 37F5:0620  1566: d4_ecc:921 = F= d4_ecc:921
 33F4:463A 37F5:062A  1576: d5_ecc:924 = F= d5_ecc:924
 33F4:4644 37F5:0634  1586: d6_ecc:927 = F= d6_ecc:927
 33F4:464E 37F5:063E  1596: d7_ecc:930 = F= d7_ecc:930
 33F4:4658 37F5:0648  1606: d8_ecc:933 = F= d8_ecc:933
 33F4:4662 37F5:0652  1616: d9_ecc:936 = F= d9_ecc:936
 33F4:466C 37F5:065C  1626: d10_ecc:905 = F= d10_ecc:905
 33F4:4676 37F5:0666  1636: d11_ecc:908 = F= d11_ecc:908
 33F4:4680 37F5:0670  1646: targ_orient:2208 = F= targ_orient:2208
 33F4:468A 37F5:067A  1656: d1_orient:912 = F= d1_orient:912
 33F4:4694 37F5:0684  1666: d2_orient:916 = F= d2_orient:916
 33F4:469E 37F5:068E  1676: d3_orient:919 = F= d3_orient:919
 33F4:46A8 37F5:0698  1686: d4_orient:922 = F= d4_orient:922
 33F4:46B2 37F5:06A2  1696: d5_orient:925 = F= d5_orient:925
 33F4:46BC 37F5:06AC  1706: d6_orient:928 = F= d6_orient:928
 33F4:46C6 37F5:06B6  1716: d7_orient:931 = F= d7_orient:931
 33F4:46D0 37F5:06C0  1726: d8_orient:934 = F= d8_orient:934
 33F4:46DA 37F5:06CA  1736: d9_orient:937 = F= d9_orient:937
 33F4:46E4 37F5:06D4  1746: d10_orient:906 = F= d10_orient:906
 33F4:46EE 37F5:06DE  1756: d11_orient:909 = F= d11_orient:909
 33F4:46F8 37F5:06E8  1766: GOTO .+1068 (goto 2834)
 33F4:46FC 37F5:06EC  1770: #L0:145 = trialtype:2301 == #I9:140
 33F4:470A 37F5:06FA  1784: IFnot (#L0:145) GOTO .+342 (goto 2126)
 33F4:4712 37F5:0702  1792: TrialTp:2300 = #I2:53
 33F4:471C 37F5:070C  1802: targ_angle:2195 = F= targ_angle:2195
 33F4:4726 37F5:0716  1812: d1_angle:910 = F= d1_angle:910
 33F4:4730 37F5:0720  1822: d2_angle:914 = F= d2_angle:914
 33F4:473A 37F5:072A  1832: d3_angle:917 = F= d3_angle:917
 33F4:4744 37F5:0734  1842: d4_angle:920 = F= d4_angle:920
 33F4:474E 37F5:073E  1852: d5_angle:923 = F= d5_angle:923
 33F4:4758 37F5:0748  1862: d6_angle:926 = F= d6_angle:926
 33F4:4762 37F5:0752  1872: d7_angle:929 = F= d7_angle:929
 33F4:476C 37F5:075C  1882: targ_ecc:2196 = F= targ_ecc:2196
 33F4:4776 37F5:0766  1892: d1_ecc:911 = F= d1_ecc:911
 33F4:4780 37F5:0770  1902: d2_ecc:915 = F= d2_ecc:915
 33F4:478A 37F5:077A  1912: d3_ecc:918 = F= d3_ecc:918
 33F4:4794 37F5:0784  1922: d4_ecc:921 = F= d4_ecc:921
 33F4:479E 37F5:078E  1932: d5_ecc:924 = F= d5_ecc:924
 33F4:47A8 37F5:0798  1942: d6_ecc:927 = F= d6_ecc:927
 33F4:47B2 37F5:07A2  1952: d7_ecc:930 = F= d7_ecc:930
 33F4:47BC 37F5:07AC  1962: d8_ecc:933 = F= d8_ecc:933
 33F4:47C6 37F5:07B6  1972: d9_ecc:936 = F= d9_ecc:936
 33F4:47D0 37F5:07C0  1982: d10_ecc:905 = F= d10_ecc:905
 33F4:47DA 37F5:07CA  1992: d11_ecc:908 = F= d11_ecc:908
 33F4:47E4 37F5:07D4  2002: targ_orient:2208 = F= targ_orient:2208
 33F4:47EE 37F5:07DE  2012: d1_orient:912 = F= d1_orient:912
 33F4:47F8 37F5:07E8  2022: d2_orient:916 = F= d2_orient:916
 33F4:4802 37F5:07F2  2032: d3_orient:919 = F= d3_orient:919
 33F4:480C 37F5:07FC  2042: d4_orient:922 = F= d4_orient:922
 33F4:4816 37F5:0806  2052: d5_orient:925 = F= d5_orient:925
 33F4:4820 37F5:0810  2062: d6_orient:928 = F= d6_orient:928
 33F4:482A 37F5:081A  2072: d7_orient:931 = F= d7_orient:931
 33F4:4834 37F5:0824  2082: d8_orient:934 = F= d8_orient:934
 33F4:483E 37F5:082E  2092: d9_orient:937 = F= d9_orient:937
 33F4:4848 37F5:0838  2102: d10_orient:906 = F= d10_orient:906
 33F4:4852 37F5:0842  2112: d11_orient:909 = F= d11_orient:909
 33F4:485C 37F5:084C  2122: GOTO .+712 (goto 2834)
 33F4:4860 37F5:0850  2126: #L0:145 = trialtype:2301 == #I10:18
 33F4:486E 37F5:085E  2140: IFnot (#L0:145) GOTO .+342 (goto 2482)
 33F4:4876 37F5:0866  2148: TrialTp:2300 = #I2:53
 33F4:4880 37F5:0870  2158: targ_angle:2195 = F= targ_angle:2195
 33F4:488A 37F5:087A  2168: d1_angle:910 = F= d1_angle:910
 33F4:4894 37F5:0884  2178: d2_angle:914 = F= d2_angle:914
 33F4:489E 37F5:088E  2188: d3_angle:917 = F= d3_angle:917
 33F4:48A8 37F5:0898  2198: d4_angle:920 = F= d4_angle:920
 33F4:48B2 37F5:08A2  2208: d5_angle:923 = F= d5_angle:923
 33F4:48BC 37F5:08AC  2218: d6_angle:926 = F= d6_angle:926
 33F4:48C6 37F5:08B6  2228: d7_angle:929 = F= d7_angle:929
 33F4:48D0 37F5:08C0  2238: targ_ecc:2196 = F= targ_ecc:2196
 33F4:48DA 37F5:08CA  2248: d1_ecc:911 = F= d1_ecc:911
 33F4:48E4 37F5:08D4  2258: d2_ecc:915 = F= d2_ecc:915
 33F4:48EE 37F5:08DE  2268: d3_ecc:918 = F= d3_ecc:918
 33F4:48F8 37F5:08E8  2278: d4_ecc:921 = F= d4_ecc:921
 33F4:4902 37F5:08F2  2288: d5_ecc:924 = F= d5_ecc:924
 33F4:490C 37F5:08FC  2298: d6_ecc:927 = F= d6_ecc:927
 33F4:4916 37F5:0906  2308: d7_ecc:930 = F= d7_ecc:930
 33F4:4920 37F5:0910  2318: d8_ecc:933 = F= d8_ecc:933
 33F4:492A 37F5:091A  2328: d9_ecc:936 = F= d9_ecc:936
 33F4:4934 37F5:0924  2338: d10_ecc:905 = F= d10_ecc:905
 33F4:493E 37F5:092E  2348: d11_ecc:908 = F= d11_ecc:908
 33F4:4948 37F5:0938  2358: targ_orient:2208 = F= targ_orient:2208
 33F4:4952 37F5:0942  2368: d1_orient:912 = F= d1_orient:912
 33F4:495C 37F5:094C  2378: d2_orient:916 = F= d2_orient:916
 33F4:4966 37F5:0956  2388: d3_orient:919 = F= d3_orient:919
 33F4:4970 37F5:0960  2398: d4_orient:922 = F= d4_orient:922
 33F4:497A 37F5:096A  2408: d5_orient:925 = F= d5_orient:925
 33F4:4984 37F5:0974  2418: d6_orient:928 = F= d6_orient:928
 33F4:498E 37F5:097E  2428: d7_orient:931 = F= d7_orient:931
 33F4:4998 37F5:0988  2438: d8_orient:934 = F= d8_orient:934
 33F4:49A2 37F5:0992  2448: d9_orient:937 = F= d9_orient:937
 33F4:49AC 37F5:099C  2458: d10_orient:906 = F= d10_orient:906
 33F4:49B6 37F5:09A6  2468: d11_orient:909 = F= d11_orient:909
 33F4:49C0 37F5:09B0  2478: GOTO .+356 (goto 2834)
 33F4:49C4 37F5:09B4  2482: #L0:145 = trialtype:2301 == #I11:27
 33F4:49D2 37F5:09C2  2496: IFnot (#L0:145) GOTO .+338 (goto 2834)
 33F4:49DA 37F5:09CA  2504: TrialTp:2300 = #I2:53
 33F4:49E4 37F5:09D4  2514: targ_angle:2195 = F= targ_angle:2195
 33F4:49EE 37F5:09DE  2524: d1_angle:910 = F= d1_angle:910
 33F4:49F8 37F5:09E8  2534: d2_angle:914 = F= d2_angle:914
 33F4:4A02 37F5:09F2  2544: d3_angle:917 = F= d3_angle:917
 33F4:4A0C 37F5:09FC  2554: d4_angle:920 = F= d4_angle:920
 33F4:4A16 37F5:0A06  2564: d5_angle:923 = F= d5_angle:923
 33F4:4A20 37F5:0A10  2574: d6_angle:926 = F= d6_angle:926
 33F4:4A2A 37F5:0A1A  2584: d7_angle:929 = F= d7_angle:929
 33F4:4A34 37F5:0A24  2594: targ_ecc:2196 = F= targ_ecc:2196
 33F4:4A3E 37F5:0A2E  2604: d1_ecc:911 = F= d1_ecc:911
 33F4:4A48 37F5:0A38  2614: d2_ecc:915 = F= d2_ecc:915
 33F4:4A52 37F5:0A42  2624: d3_ecc:918 = F= d3_ecc:918
 33F4:4A5C 37F5:0A4C  2634: d4_ecc:921 = F= d4_ecc:921
 33F4:4A66 37F5:0A56  2644: d5_ecc:924 = F= d5_ecc:924
 33F4:4A70 37F5:0A60  2654: d6_ecc:927 = F= d6_ecc:927
 33F4:4A7A 37F5:0A6A  2664: d7_ecc:930 = F= d7_ecc:930
 33F4:4A84 37F5:0A74  2674: d8_ecc:933 = F= d8_ecc:933
 33F4:4A8E 37F5:0A7E  2684: d9_ecc:936 = F= d9_ecc:936
 33F4:4A98 37F5:0A88  2694: d10_ecc:905 = F= d10_ecc:905
 33F4:4AA2 37F5:0A92  2704: d11_ecc:908 = F= d11_ecc:908
 33F4:4AAC 37F5:0A9C  2714: targ_orient:2208 = F= targ_orient:2208
 33F4:4AB6 37F5:0AA6  2724: d1_orient:912 = F= d1_orient:912
 33F4:4AC0 37F5:0AB0  2734: d2_orient:916 = F= d2_orient:916
 33F4:4ACA 37F5:0ABA  2744: d3_orient:919 = F= d3_orient:919
 33F4:4AD4 37F5:0AC4  2754: d4_orient:922 = F= d4_orient:922
 33F4:4ADE 37F5:0ACE  2764: d5_orient:925 = F= d5_orient:925
 33F4:4AE8 37F5:0AD8  2774: d6_orient:928 = F= d6_orient:928
 33F4:4AF2 37F5:0AE2  2784: d7_orient:931 = F= d7_orient:931
 33F4:4AFC 37F5:0AEC  2794: d8_orient:934 = F= d8_orient:934
 33F4:4B06 37F5:0AF6  2804: d9_orient:937 = F= d9_orient:937
 33F4:4B10 37F5:0B00  2814: d10_orient:906 = F= d10_orient:906
 33F4:4B1A 37F5:0B0A  2824: d11_orient:909 = F= d11_orient:909

PROCESS  41: DRW_T (Args=7 CtrlBlk=33F4:2370 Size=1294  iOp=2-1295 iCache=52248-53541) DISABLED
 33F4:4012 37F5:0002     0: angle@41:738 = F= angle@41:738
 33F4:401C 37F5:000C    10: eccentricity@41:1007 = F= eccentricity@41:1007
 33F4:4026 37F5:0016    20: color@41:845 = #P3:247
 33F4:4030 37F5:0020    30: orientation@41:1558 = F= orientation@41:1558
 33F4:403A 37F5:002A    40: fill@41:1057 = #P5:249
 33F4:4044 37F5:0034    50: conversion_X@41:856 = F= conversion_X@41:856
 33F4:404E 37F5:003E    60: conversion_Y@41:860 = F= conversion_Y@41:860
 33F4:4058 37F5:0048    70: #F0 = CALL1 cos(angle@41:738)
 33F4:4060 37F5:0050    78: stim_ecc_x@41:2123 = #F0:1 F* eccentricity@41:1007
 33F4:406E 37F5:005E    92: #F0 = CALL1 sin(angle@41:738)
 33F4:4076 37F5:0066   100: stim_ecc_y@41:2135 = #F0:1 F* eccentricity@41:1007
 33F4:4084 37F5:0074   114: half_length@41:1221 = llength:1319 F/ #I2:53
 33F4:4092 37F5:0082   128: half_width@41:1227 = lwidth:1333 F/ #I2:53
 33F4:40A0 37F5:0090   142: #L0:145 = orientation@41:1558 F== #I1:17
 33F4:40AE 37F5:009E   156: IFnot (#L0:145) GOTO .+250 (goto 406)
 33F4:40B6 37F5:00A6   164: #F0:1 = stim_ecc_x@41:2123 F- half_length@41:1221
 33F4:40C4 37F5:00B4   178: THx1@41:2276 = #F0:1 F* conversion_X@41:856
 33F4:40D2 37F5:00C2   192: #F0:1 = stim_ecc_y@41:2135 F+ half_length@41:1221
 33F4:40E0 37F5:00D0   206: THy1@41:2278 = #F0:1 F* conversion_Y@41:860
 33F4:40EE 37F5:00DE   220: #F0:1 = stim_ecc_x@41:2123 F+ half_length@41:1221
 33F4:40FC 37F5:00EC   234: THx2@41:2277 = #F0:1 F* conversion_X@41:856
 33F4:410A 37F5:00FA   248: #F0:1 = half_length@41:1221 F- lwidth:1333
 33F4:4118 37F5:0108   262: #F1:2 = stim_ecc_y@41:2135 F+ #F0:1
 33F4:4126 37F5:0116   276: THy2@41:2279 = #F1:2 F* conversion_Y@41:860
 33F4:4134 37F5:0124   290: #F0:1 = stim_ecc_x@41:2123 F- half_width@41:1227
 33F4:4142 37F5:0132   304: TVx1@41:2325 = #F0:1 F* conversion_X@41:856
 33F4:4150 37F5:0140   318: #F0:1 = stim_ecc_y@41:2135 F- half_length@41:1221
 33F4:415E 37F5:014E   332: TVy1@41:2327 = #F0:1 F* conversion_Y@41:860
 33F4:416C 37F5:015C   346: #F0:1 = stim_ecc_x@41:2123 F+ half_width@41:1227
 33F4:417A 37F5:016A   360: TVx2@41:2326 = #F0:1 F* conversion_X@41:856
 33F4:4188 37F5:0178   374: #F0:1 = stim_ecc_y@41:2135 F+ half_length@41:1221
 33F4:4196 37F5:0186   388: TVy2@41:2328 = #F0:1 F* conversion_Y@41:860
 33F4:41A4 37F5:0194   402: GOTO .+792 (goto 1194)
 33F4:41A8 37F5:0198   406: #L0:145 = orientation@41:1558 F== #I2:53
 33F4:41B6 37F5:01A6   420: IFnot (#L0:145) GOTO .+250 (goto 670)
 33F4:41BE 37F5:01AE   428: #F0:1 = stim_ecc_x@41:2123 F+ half_length@41:1221
 33F4:41CC 37F5:01BC   442: THx1@41:2276 = #F0:1 F* conversion_X@41:856
 33F4:41DA 37F5:01CA   456: #F0:1 = stim_ecc_y@41:2135 F- half_length@41:1221
 33F4:41E8 37F5:01D8   470: THy1@41:2278 = #F0:1 F* conversion_Y@41:860
 33F4:41F6 37F5:01E6   484: #F0:1 = stim_ecc_x@41:2123 F- half_length@41:1221
 33F4:4204 37F5:01F4   498: THx2@41:2277 = #F0:1 F* conversion_X@41:856
 33F4:4212 37F5:0202   512: #F0:1 = half_length@41:1221 F- lwidth:1333
 33F4:4220 37F5:0210   526: #F1:2 = stim_ecc_y@41:2135 F- #F0:1
 33F4:422E 37F5:021E   540: THy2@41:2279 = #F1:2 F* conversion_Y@41:860
 33F4:423C 37F5:022C   554: #F0:1 = stim_ecc_x@41:2123 F- half_width@41:1227
 33F4:424A 37F5:023A   568: TVx1@41:2325 = #F0:1 F* conversion_X@41:856
 33F4:4258 37F5:0248   582: #F0:1 = stim_ecc_y@41:2135 F- half_length@41:1221
 33F4:4266 37F5:0256   596: TVy1@41:2327 = #F0:1 F* conversion_Y@41:860
 33F4:4274 37F5:0264   610: #F0:1 = stim_ecc_x@41:2123 F+ half_width@41:1227
 33F4:4282 37F5:0272   624: TVx2@41:2326 = #F0:1 F* conversion_X@41:856
 33F4:4290 37F5:0280   638: #F0:1 = stim_ecc_y@41:2135 F+ half_length@41:1221
 33F4:429E 37F5:028E   652: TVy2@41:2328 = #F0:1 F* conversion_Y@41:860
 33F4:42AC 37F5:029C   666: GOTO .+528 (goto 1194)
 33F4:42B0 37F5:02A0   670: #L0:145 = orientation@41:1558 F== #I3:74
 33F4:42BE 37F5:02AE   684: IFnot (#L0:145) GOTO .+250 (goto 934)
 33F4:42C6 37F5:02B6   692: #F0:1 = stim_ecc_x@41:2123 F- half_length@41:1221
 33F4:42D4 37F5:02C4   706: THx1@41:2276 = #F0:1 F* conversion_X@41:856
 33F4:42E2 37F5:02D2   720: #F0:1 = stim_ecc_y@41:2135 F+ half_width@41:1227
 33F4:42F0 37F5:02E0   734: THy1@41:2278 = #F0:1 F* conversion_Y@41:860
 33F4:42FE 37F5:02EE   748: #F0:1 = stim_ecc_x@41:2123 F+ half_length@41:1221
 33F4:430C 37F5:02FC   762: THx2@41:2277 = #F0:1 F* conversion_X@41:856
 33F4:431A 37F5:030A   776: #F0:1 = stim_ecc_y@41:2135 F- half_width@41:1227
 33F4:4328 37F5:0318   790: THy2@41:2279 = #F0:1 F* conversion_Y@41:860
 33F4:4336 37F5:0326   804: #F0:1 = stim_ecc_x@41:2123 F- half_length@41:1221
 33F4:4344 37F5:0334   818: TVx1@41:2325 = #F0:1 F* conversion_X@41:856
 33F4:4352 37F5:0342   832: #F0:1 = stim_ecc_y@41:2135 F+ half_length@41:1221
 33F4:4360 37F5:0350   846: TVy1@41:2327 = #F0:1 F* conversion_Y@41:860
 33F4:436E 37F5:035E   860: #F0:1 = half_length@41:1221 F- lwidth:1333
 33F4:437C 37F5:036C   874: #F1:2 = stim_ecc_x@41:2123 F- #F0:1
 33F4:438A 37F5:037A   888: TVx2@41:2326 = #F1:2 F* conversion_X@41:856
 33F4:4398 37F5:0388   902: #F0:1 = stim_ecc_y@41:2135 F- half_length@41:1221
 33F4:43A6 37F5:0396   916: TVy2@41:2328 = #F0:1 F* conversion_Y@41:860
 33F4:43B4 37F5:03A4   930: GOTO .+264 (goto 1194)
 33F4:43B8 37F5:03A8   934: #L0:145 = orientation@41:1558 F== #I4:87
 33F4:43C6 37F5:03B6   948: IFnot (#L0:145) GOTO .+246 (goto 1194)
 33F4:43CE 37F5:03BE   956: #F0:1 = stim_ecc_x@41:2123 F- half_length@41:1221
 33F4:43DC 37F5:03CC   970: THx1@41:2276 = #F0:1 F* conversion_X@41:856
 33F4:43EA 37F5:03DA   984: #F0:1 = stim_ecc_y@41:2135 F+ half_width@41:1227
 33F4:43F8 37F5:03E8   998: THy1@41:2278 = #F0:1 F* conversion_Y@41:860
 33F4:4406 37F5:03F6  1012: #F0:1 = stim_ecc_x@41:2123 F+ half_length@41:1221
 33F4:4414 37F5:0404  1026: THx2@41:2277 = #F0:1 F* conversion_X@41:856
 33F4:4422 37F5:0412  1040: #F0:1 = stim_ecc_y@41:2135 F- half_width@41:1227
 33F4:4430 37F5:0420  1054: THy2@41:2279 = #F0:1 F* conversion_Y@41:860
 33F4:443E 37F5:042E  1068: #F0:1 = stim_ecc_x@41:2123 F+ half_length@41:1221
 33F4:444C 37F5:043C  1082: TVx1@41:2325 = #F0:1 F* conversion_X@41:856
 33F4:445A 37F5:044A  1096: #F0:1 = stim_ecc_y@41:2135 F- half_length@41:1221
 33F4:4468 37F5:0458  1110: TVy1@41:2327 = #F0:1 F* conversion_Y@41:860
 33F4:4476 37F5:0466  1124: #F0:1 = half_length@41:1221 F- lwidth:1333
 33F4:4484 37F5:0474  1138: #F1:2 = stim_ecc_x@41:2123 F+ #F0:1
 33F4:4492 37F5:0482  1152: TVx2@41:2326 = #F1:2 F* conversion_X@41:856
 33F4:44A0 37F5:0490  1166: #F0:1 = stim_ecc_y@41:2135 F+ half_length@41:1221
 33F4:44AE 37F5:049E  1180: TVy2@41:2328 = #F0:1 F* conversion_Y@41:860
 33F4:44BC 37F5:04AC  1194: #L0 = CALL2 dSendf(#S198:378,color@41:845)
 33F4:44C6 37F5:04B6  1204: #L0:145 = fill@41:1057 == #I0:16
 33F4:44D4 37F5:04C4  1218: IFnot (#L0:145) GOTO .+44 (goto 1262)
 33F4:44DC 37F5:04CC  1226: #L1 = CALL5 dSendf(#S199:379,THx1@41:2276,THy1@41:2278,THx2@41:2277,THy2@41:2279)
 33F4:44EC 37F5:04DC  1242: #L0 = CALL5 dSendf(#S200:382,TVx1@41:2325,TVy1@41:2327,TVx2@41:2326,TVy2@41:2328)
 33F4:44FC 37F5:04EC  1258: GOTO .+36 (goto 1294)
 33F4:4500 37F5:04F0  1262: #L0 = CALL5 dSendf(#S201:383,THx1@41:2276,THy1@41:2278,THx2@41:2277,THy2@41:2279)
 33F4:4510 37F5:0500  1278: #L0 = CALL5 dSendf(#S202:384,TVx1@41:2325,TVy1@41:2327,TVx2@41:2326,TVy2@41:2328)

PROCESS  42: DRW_L (Args=7 CtrlBlk=33F4:239C Size=1350  iOp=2-1351 iCache=53542-54891) DISABLED
 33F4:4012 37F5:0002     0: angle@42:739 = F= angle@42:739
 33F4:401C 37F5:000C    10: eccentricity@42:1008 = F= eccentricity@42:1008
 33F4:4026 37F5:0016    20: color@42:846 = #P3:247
 33F4:4030 37F5:0020    30: orientation@42:1559 = F= orientation@42:1559
 33F4:403A 37F5:002A    40: fill@42:1058 = #P5:249
 33F4:4044 37F5:0034    50: conversion_X@42:857 = F= conversion_X@42:857
 33F4:404E 37F5:003E    60: conversion_Y@42:861 = F= conversion_Y@42:861
 33F4:4058 37F5:0048    70: #F0 = CALL1 cos(angle@42:739)
 33F4:4060 37F5:0050    78: stim_ecc_x@42:2124 = #F0:1 F* eccentricity@42:1008
 33F4:406E 37F5:005E    92: #F0 = CALL1 sin(angle@42:739)
 33F4:4076 37F5:0066   100: stim_ecc_y@42:2136 = #F0:1 F* eccentricity@42:1008
 33F4:4084 37F5:0074   114: half_length@42:1222 = llength:1319 F/ #I2:53
 33F4:4092 37F5:0082   128: half_width@42:1228 = lwidth:1333 F/ #I2:53
 33F4:40A0 37F5:0090   142: #L0:145 = orientation@42:1559 F== #I1:17
 33F4:40AE 37F5:009E   156: IFnot (#L0:145) GOTO .+264 (goto 420)
 33F4:40B6 37F5:00A6   164: #F0:1 = stim_ecc_x@42:2124 F+ half_length@42:1222
 33F4:40C4 37F5:00B4   178: LHx1@42:1315 = #F0:1 F* conversion_X@42:857
 33F4:40D2 37F5:00C2   192: #F0:1 = stim_ecc_y@42:2136 F- half_length@42:1222
 33F4:40E0 37F5:00D0   206: LHy1@42:1317 = #F0:1 F* conversion_Y@42:861
 33F4:40EE 37F5:00DE   220: #F0:1 = stim_ecc_x@42:2124 F- half_length@42:1222
 33F4:40FC 37F5:00EC   234: LHx2@42:1316 = #F0:1 F* conversion_X@42:857
 33F4:410A 37F5:00FA   248: #F0:1 = half_length@42:1222 F- lwidth:1333
 33F4:4118 37F5:0108   262: #F1:2 = stim_ecc_y@42:2136 F- #F0:1
 33F4:4126 37F5:0116   276: LHy2@42:1318 = #F1:2 F* conversion_Y@42:861
 33F4:4134 37F5:0124   290: #F0:1 = stim_ecc_x@42:2124 F- half_length@42:1222
 33F4:4142 37F5:0132   304: LVx1@42:1329 = #F0:1 F* conversion_X@42:857
 33F4:4150 37F5:0140   318: #F0:1 = stim_ecc_y@42:2136 F+ half_length@42:1222
 33F4:415E 37F5:014E   332: LVy1@42:1331 = #F0:1 F* conversion_Y@42:861
 33F4:416C 37F5:015C   346: #F0:1 = half_length@42:1222 F- lwidth:1333
 33F4:417A 37F5:016A   360: #F1:2 = stim_ecc_x@42:2124 F- #F0:1
 33F4:4188 37F5:0178   374: LVx2@42:1330 = #F1:2 F* conversion_X@42:857
 33F4:4196 37F5:0186   388: #F0:1 = stim_ecc_y@42:2136 F- half_length@42:1222
 33F4:41A4 37F5:0194   402: LVy2@42:1332 = #F0:1 F* conversion_Y@42:861
 33F4:41B2 37F5:01A2   416: GOTO .+834 (goto 1250)
 33F4:41B6 37F5:01A6   420: #L0:145 = orientation@42:1559 F== #I2:53
 33F4:41C4 37F5:01B4   434: IFnot (#L0:145) GOTO .+264 (goto 698)
 33F4:41CC 37F5:01BC   442: #F0:1 = stim_ecc_x@42:2124 F- half_length@42:1222
 33F4:41DA 37F5:01CA   456: LHx1@42:1315 = #F0:1 F* conversion_X@42:857
 33F4:41E8 37F5:01D8   470: #F0:1 = stim_ecc_y@42:2136 F+ half_length@42:1222
 33F4:41F6 37F5:01E6   484: LHy1@42:1317 = #F0:1 F* conversion_Y@42:861
 33F4:4204 37F5:01F4   498: #F0:1 = stim_ecc_x@42:2124 F+ half_length@42:1222
 33F4:4212 37F5:0202   512: LHx2@42:1316 = #F0:1 F* conversion_X@42:857
 33F4:4220 37F5:0210   526: #F0:1 = half_length@42:1222 F- lwidth:1333
 33F4:422E 37F5:021E   540: #F1:2 = stim_ecc_y@42:2136 F+ #F0:1
 33F4:423C 37F5:022C   554: LHy2@42:1318 = #F1:2 F* conversion_Y@42:861
 33F4:424A 37F5:023A   568: #F0:1 = stim_ecc_x@42:2124 F- half_length@42:1222
 33F4:4258 37F5:0248   582: LVx1@42:1329 = #F0:1 F* conversion_X@42:857
 33F4:4266 37F5:0256   596: #F0:1 = stim_ecc_y@42:2136 F+ half_length@42:1222
 33F4:4274 37F5:0264   610: LVy1@42:1331 = #F0:1 F* conversion_Y@42:861
 33F4:4282 37F5:0272   624: #F0:1 = half_length@42:1222 F- lwidth:1333
 33F4:4290 37F5:0280   638: #F1:2 = stim_ecc_x@42:2124 F- #F0:1
 33F4:429E 37F5:028E   652: LVx2@42:1330 = #F1:2 F* conversion_X@42:857
 33F4:42AC 37F5:029C   666: #F0:1 = stim_ecc_y@42:2136 F- half_length@42:1222
 33F4:42BA 37F5:02AA   680: LVy2@42:1332 = #F0:1 F* conversion_Y@42:861
 33F4:42C8 37F5:02B8   694: GOTO .+556 (goto 1250)
 33F4:42CC 37F5:02BC   698: #L0:145 = orientation@42:1559 F== #I3:74
 33F4:42DA 37F5:02CA   712: IFnot (#L0:145) GOTO .+264 (goto 976)
 33F4:42E2 37F5:02D2   720: #F0:1 = stim_ecc_x@42:2124 F+ half_length@42:1222
 33F4:42F0 37F5:02E0   734: LHx1@42:1315 = #F0:1 F* conversion_X@42:857
 33F4:42FE 37F5:02EE   748: #F0:1 = stim_ecc_y@42:2136 F- half_length@42:1222
 33F4:430C 37F5:02FC   762: LHy1@42:1317 = #F0:1 F* conversion_Y@42:861
 33F4:431A 37F5:030A   776: #F0:1 = stim_ecc_x@42:2124 F- half_length@42:1222
 33F4:4328 37F5:0318   790: LHx2@42:1316 = #F0:1 F* conversion_X@42:857
 33F4:4336 37F5:0326   804: #F0:1 = half_length@42:1222 F- lwidth:1333
 33F4:4344 37F5:0334   818: #F1:2 = stim_ecc_y@42:2136 F- #F0:1
 33F4:4352 37F5:0342   832: LHy2@42:1318 = #F1:2 F* conversion_Y@42:861
 33F4:4360 37F5:0350   846: #F0:1 = stim_ecc_x@42:2124 F+ half_length@42:1222
 33F4:436E 37F5:035E   860: LVx1@42:1329 = #F0:1 F* conversion_X@42:857
 33F4:437C 37F5:036C   874: #F0:1 = stim_ecc_y@42:2136 F- half_length@42:1222
 33F4:438A 37F5:037A   888: LVy1@42:1331 = #F0:1 F* conversion_Y@42:861
 33F4:4398 37F5:0388   902: #F0:1 = half_length@42:1222 F- lwidth:1333
 33F4:43A6 37F5:0396   916: #F1:2 = stim_ecc_x@42:2124 F+ #F0:1
 33F4:43B4 37F5:03A4   930: LVx2@42:1330 = #F1:2 F* conversion_X@42:857
 33F4:43C2 37F5:03B2   944: #F0:1 = stim_ecc_y@42:2136 F+ half_length@42:1222
 33F4:43D0 37F5:03C0   958: LVy2@42:1332 = #F0:1 F* conversion_Y@42:861
 33F4:43DE 37F5:03CE   972: GOTO .+278 (goto 1250)
 33F4:43E2 37F5:03D2   976: #L0:145 = orientation@42:1559 F== #I4:87
 33F4:43F0 37F5:03E0   990: IFnot (#L0:145) GOTO .+260 (goto 1250)
 33F4:43F8 37F5:03E8   998: #F0:1 = stim_ecc_x@42:2124 F- half_length@42:1222
 33F4:4406 37F5:03F6  1012: LHx1@42:1315 = #F0:1 F* conversion_X@42:857
 33F4:4414 37F5:0404  1026: #F0:1 = stim_ecc_y@42:2136 F+ half_length@42:1222
 33F4:4422 37F5:0412  1040: LHy1@42:1317 = #F0:1 F* conversion_Y@42:861
 33F4:4430 37F5:0420  1054: #F0:1 = stim_ecc_x@42:2124 F+ half_length@42:1222
 33F4:443E 37F5:042E  1068: LHx2@42:1316 = #F0:1 F* conversion_X@42:857
 33F4:444C 37F5:043C  1082: #F0:1 = half_length@42:1222 F- lwidth:1333
 33F4:445A 37F5:044A  1096: #F1:2 = stim_ecc_y@42:2136 F+ #F0:1
 33F4:4468 37F5:0458  1110: LHy2@42:1318 = #F1:2 F* conversion_Y@42:861
 33F4:4476 37F5:0466  1124: #F0:1 = stim_ecc_x@42:2124 F+ half_length@42:1222
 33F4:4484 37F5:0474  1138: LVx1@42:1329 = #F0:1 F* conversion_X@42:857
 33F4:4492 37F5:0482  1152: #F0:1 = stim_ecc_y@42:2136 F- half_length@42:1222
 33F4:44A0 37F5:0490  1166: LVy1@42:1331 = #F0:1 F* conversion_Y@42:861
 33F4:44AE 37F5:049E  1180: #F0:1 = half_length@42:1222 F- lwidth:1333
 33F4:44BC 37F5:04AC  1194: #F1:2 = stim_ecc_x@42:2124 F+ #F0:1
 33F4:44CA 37F5:04BA  1208: LVx2@42:1330 = #F1:2 F* conversion_X@42:857
 33F4:44D8 37F5:04C8  1222: #F0:1 = stim_ecc_y@42:2136 F+ half_length@42:1222
 33F4:44E6 37F5:04D6  1236: LVy2@42:1332 = #F0:1 F* conversion_Y@42:861
 33F4:44F4 37F5:04E4  1250: #L0 = CALL2 dSendf(#S203:385,color@42:846)
 33F4:44FE 37F5:04EE  1260: #L0:145 = fill@42:1058 == #I0:16
 33F4:450C 37F5:04FC  1274: IFnot (#L0:145) GOTO .+44 (goto 1318)
 33F4:4514 37F5:0504  1282: #L1 = CALL5 dSendf(#S204:386,LHx1@42:1315,LHy1@42:1317,LHx2@42:1316,LHy2@42:1318)
 33F4:4524 37F5:0514  1298: #L0 = CALL5 dSendf(#S205:387,LVx1@42:1329,LVy1@42:1331,LVx2@42:1330,LVy2@42:1332)
 33F4:4534 37F5:0524  1314: GOTO .+36 (goto 1350)
 33F4:4538 37F5:0528  1318: #L0 = CALL5 dSendf(#S206:388,LHx1@42:1315,LHy1@42:1317,LHx2@42:1316,LHy2@42:1318)
 33F4:4548 37F5:0538  1334: #L0 = CALL5 dSendf(#S207:389,LVx1@42:1329,LVy1@42:1331,LVx2@42:1330,LVy2@42:1332)

PROCESS  43: DRW_PLAC (Args=6 CtrlBlk=33F4:23C8 Size=370  iOp=2-371 iCache=54892-55261) DISABLED
 33F4:4012 37F5:0002     0: angle@43:740 = F= angle@43:740
 33F4:401C 37F5:000C    10: eccentricity@43:1009 = F= eccentricity@43:1009
 33F4:4026 37F5:0016    20: color@43:847 = #P3:247
 33F4:4030 37F5:0020    30: fill@43:1059 = #P4:248
 33F4:403A 37F5:002A    40: conversion_X@43:858 = F= conversion_X@43:858
 33F4:4044 37F5:0034    50: conversion_Y@43:862 = F= conversion_Y@43:862
 33F4:404E 37F5:003E    60: #F0 = CALL1 cos(angle@43:740)
 33F4:4056 37F5:0046    68: stim_ecc_x@43:2125 = #F0:1 F* eccentricity@43:1009
 33F4:4064 37F5:0054    82: #F0 = CALL1 sin(angle@43:740)
 33F4:406C 37F5:005C    90: stim_ecc_y@43:2137 = #F0:1 F* eccentricity@43:1009
 33F4:407A 37F5:006A   104: half_size@43:1223 = llength:1319 F/ #I2:53
 33F4:4088 37F5:0078   118: #F0:1 = stim_ecc_x@43:2125 F- half_size@43:1223
 33F4:4096 37F5:0086   132: #F1:2 = #F0:1 F* conversion_X@43:858
 33F4:40A4 37F5:0094   146: #F2 = CALL1 round(#F1:2)
 33F4:40AC 37F5:009C   154: ulx@43:2331 = F= ulx@43:2331
 33F4:40B6 37F5:00A6   164: #F0:1 = stim_ecc_y@43:2137 F+ half_size@43:1223
 33F4:40C4 37F5:00B4   178: #F1:2 = #F0:1 F* conversion_Y@43:862
 33F4:40D2 37F5:00C2   192: #F2 = CALL1 round(#F1:2)
 33F4:40DA 37F5:00CA   200: uly@43:2333 = F= uly@43:2333
 33F4:40E4 37F5:00D4   210: #F0:1 = stim_ecc_x@43:2125 F+ half_size@43:1223
 33F4:40F2 37F5:00E2   224: #F1:2 = #F0:1 F* conversion_X@43:858
 33F4:4100 37F5:00F0   238: #F2 = CALL1 round(#F1:2)
 33F4:4108 37F5:00F8   246: lrx@43:1324 = F= lrx@43:1324
 33F4:4112 37F5:0102   256: #F0:1 = stim_ecc_y@43:2137 F- half_size@43:1223
 33F4:4120 37F5:0110   270: #F1:2 = #F0:1 F* conversion_Y@43:862
 33F4:412E 37F5:011E   284: #F2 = CALL1 round(#F1:2)
 33F4:4136 37F5:0126   292: lry@43:1326 = F= lry@43:1326
 33F4:4140 37F5:0130   302: #L0 = CALL2 dSendf(#S208:390,color@43:847)
 33F4:414A 37F5:013A   312: #L0:145 = fill@43:1059 == #I0:16
 33F4:4158 37F5:0148   326: IFnot (#L0:145) GOTO .+28 (goto 354)
 33F4:4160 37F5:0150   334: #L1 = CALL5 dSendf(#S209:391,ulx@43:2331,uly@43:2333,lrx@43:1324,lry@43:1326)
 33F4:4170 37F5:0160   350: GOTO .+20 (goto 370)
 33F4:4174 37F5:0164   354: #L0 = CALL5 dSendf(#S210:393,ulx@43:2331,uly@43:2333,lrx@43:1324,lry@43:1326)

PROCESS  44: DRW_SQR (Args=7 CtrlBlk=33F4:23F4 Size=380  iOp=2-381 iCache=55262-55641) DISABLED
 33F4:4012 37F5:0002     0: size@44:2079 = F= size@44:2079
 33F4:401C 37F5:000C    10: angle@44:741 = F= angle@44:741
 33F4:4026 37F5:0016    20: eccentricity@44:1010 = F= eccentricity@44:1010
 33F4:4030 37F5:0020    30: color@44:848 = #P4:248
 33F4:403A 37F5:002A    40: fill@44:1060 = #P5:249
 33F4:4044 37F5:0034    50: conversion_X@44:859 = F= conversion_X@44:859
 33F4:404E 37F5:003E    60: conversion_Y@44:863 = F= conversion_Y@44:863
 33F4:4058 37F5:0048    70: #F0 = CALL1 cos(angle@44:741)
 33F4:4060 37F5:0050    78: stim_ecc_x@44:2126 = #F0:1 F* eccentricity@44:1010
 33F4:406E 37F5:005E    92: #F0 = CALL1 sin(angle@44:741)
 33F4:4076 37F5:0066   100: stim_ecc_y@44:2138 = #F0:1 F* eccentricity@44:1010
 33F4:4084 37F5:0074   114: half_size@44:1224 = size@44:2079 F/ #I2:53
 33F4:4092 37F5:0082   128: #F0:1 = stim_ecc_x@44:2126 F- half_size@44:1224
 33F4:40A0 37F5:0090   142: #F1:2 = #F0:1 F* conversion_X@44:859
 33F4:40AE 37F5:009E   156: #F2 = CALL1 round(#F1:2)
 33F4:40B6 37F5:00A6   164: ulx@44:2332 = F= ulx@44:2332
 33F4:40C0 37F5:00B0   174: #F0:1 = stim_ecc_y@44:2138 F+ half_size@44:1224
 33F4:40CE 37F5:00BE   188: #F1:2 = #F0:1 F* conversion_Y@44:863
 33F4:40DC 37F5:00CC   202: #F2 = CALL1 round(#F1:2)
 33F4:40E4 37F5:00D4   210: uly@44:2334 = F= uly@44:2334
 33F4:40EE 37F5:00DE   220: #F0:1 = stim_ecc_x@44:2126 F+ half_size@44:1224
 33F4:40FC 37F5:00EC   234: #F1:2 = #F0:1 F* conversion_X@44:859
 33F4:410A 37F5:00FA   248: #F2 = CALL1 round(#F1:2)
 33F4:4112 37F5:0102   256: lrx@44:1325 = F= lrx@44:1325
 33F4:411C 37F5:010C   266: #F0:1 = stim_ecc_y@44:2138 F- half_size@44:1224
 33F4:412A 37F5:011A   280: #F1:2 = #F0:1 F* conversion_Y@44:863
 33F4:4138 37F5:0128   294: #F2 = CALL1 round(#F1:2)
 33F4:4140 37F5:0130   302: lry@44:1327 = F= lry@44:1327
 33F4:414A 37F5:013A   312: #L0 = CALL2 dSendf(#S211:394,color@44:848)
 33F4:4154 37F5:0144   322: #L0:145 = fill@44:1060 == #I0:16
 33F4:4162 37F5:0152   336: IFnot (#L0:145) GOTO .+28 (goto 364)
 33F4:416A 37F5:015A   344: #L1 = CALL5 dSendf(#S212:395,ulx@44:2332,uly@44:2334,lrx@44:1325,lry@44:1327)
 33F4:417A 37F5:016A   360: GOTO .+20 (goto 380)
 33F4:417E 37F5:016E   364: #L0 = CALL5 dSendf(#S213:396,ulx@44:2332,uly@44:2334,lrx@44:1325,lry@44:1327)

PROCESS  45: FIX_PGS (Args=4 CtrlBlk=33F4:2420 Size=442  iOp=2-443 iCache=55642-56083) DISABLED
 33F4:4012 37F5:0002     0: curr_target@45:896 = #P1:241
 33F4:401C 37F5:000C    10: deg2pix_X@45:958 = F= deg2pix_X@45:958
 33F4:4026 37F5:0016    20: deg2pix_Y@45:970 = F= deg2pix_Y@45:970
 33F4:4030 37F5:0020    30: object_targ@45:1514 = #P4:248
 33F4:403A 37F5:002A    40: #F0:1 = Size_list:2081[curr_target@45:896]
 33F4:4042 37F5:0032    48: size@45:2080 = F= size@45:2080
 33F4:404C 37F5:003C    58: #F0:1 = Angle_list:743[curr_target@45:896]
 33F4:4054 37F5:0044    66: angle@45:742 = F= angle@45:742
 33F4:405E 37F5:004E    76: #F0:1 = Eccentricity_list:1012[curr_target@45:896]
 33F4:4066 37F5:0056    84: eccentricity@45:1011 = F= eccentricity@45:1011
 33F4:4070 37F5:0060    94: color@45:849 = curr_target@45:896 + #I1:17
 33F4:407E 37F5:006E   108: #F0 = CALL1 cos(angle@45:742)
 33F4:4086 37F5:0076   116: stim_ecc_x@45:2127 = #F0:1 F* eccentricity@45:1011
 33F4:4094 37F5:0084   130: #F0 = CALL1 sin(angle@45:742)
 33F4:409C 37F5:008C   138: #F1:2 = #F0:1 F* eccentricity@45:1011
 33F4:40AA 37F5:009A   152: stim_ecc_y@45:2139 = #F1:2 F* #I-1:7
 33F4:40B8 37F5:00A8   166: #F0:1 = stim_ecc_x@45:2127 F* deg2pix_X@45:958
 33F4:40C6 37F5:00B6   180: #L1:146 = stim_ecc_y@45:2139 F* deg2pix_Y@45:970
 33F4:40D4 37F5:00C4   194: #L2:156 = F= #L2:156
 33F4:40DE 37F5:00CE   204: #L0 = CALL3 oMove(object_targ@45:1514,#L2:156,#L1:146)
 33F4:40EA 37F5:00DA   216: #F0:1 = size@45:2080 F* deg2pix_X@45:958
 33F4:40F8 37F5:00E8   230: #L1:146 = size@45:2080 F* deg2pix_Y@45:970
 33F4:4106 37F5:00F6   244: #L2:156 = F= #L2:156
 33F4:4110 37F5:0100   254: #L0 = CALL4 oSetAttribute(object_targ@45:1514,aSIZE:760,#L2:156,#L1:146)
 33F4:411E 37F5:010E   268: #F0:1 = #I1:17 F* deg2pix_X@45:958
 33F4:412C 37F5:011C   282: #L1:146 = #I1:17 F* deg2pix_Y@45:970
 33F4:413A 37F5:012A   296: #L2:156 = F= #L2:156
 33F4:4144 37F5:0134   306: #L0 = CALL4 oSetAttribute(object_fix:1463,aSIZE:760,#L2:156,#L1:146)
 33F4:4152 37F5:0142   320: #L0 = CALL3 dSendf(#S214:397,target@45:2228,target@45:2228)
 33F4:415E 37F5:014E   332: #L0 = CALL1 dSendf(#S215:398)
 33F4:4166 37F5:0156   340: #Q1:254 = F= #Q1:254
 33F4:4170 37F5:0160   350: #Q2:260 = F= #Q2:260
 33F4:417A 37F5:016A   360: #Q3:261 = F= #Q3:261
 33F4:4184 37F5:0174   370: #P4:248 = color@45:849
 33F4:418E 37F5:017E   380: #P5:249 = fill@45:1061
 33F4:4198 37F5:0188   390: #Q6:264 = F= #Q6:264
 33F4:41A2 37F5:0192   400: #Q7:265 = F= #Q7:265
 33F4:41AC 37F5:019C   410: SPAWN DRW_SQR:995(with 7 args)
 33F4:41B2 37F5:01A2   416: WAITFORPROCESS DRW_SQR:995
 33F4:41B8 37F5:01A8   422: #L0 = CALL3 dSendf(#S216:399,blank@45:780,blank@45:780)
 33F4:41C4 37F5:01B4   434: #L0 = CALL1 dSendf(#S217:400)

PROCESS  46: FLS_PGS (Args=10 CtrlBlk=33F4:244C Size=506  iOp=2-507 iCache=56084-56589) DISABLED
 33F4:4012 37F5:0002     0: scr_width@46:2022 = F= scr_width@46:2022
 33F4:401C 37F5:000C    10: scr_height@46:2007 = F= scr_height@46:2007
 33F4:4026 37F5:0016    20: pd_left@46:1586 = F= pd_left@46:1586
 33F4:4030 37F5:0020    30: pd_bottom@46:1571 = F= pd_bottom@46:1571
 33F4:403A 37F5:002A    40: pd_size@46:1594 = F= pd_size@46:1594
 33F4:4044 37F5:0034    50: deg2pix_X@46:959 = F= deg2pix_X@46:959
 33F4:404E 37F5:003E    60: deg2pix_Y@46:971 = F= deg2pix_Y@46:971
 33F4:4058 37F5:0048    70: unit2pix_X@46:2336 = F= unit2pix_X@46:2336
 33F4:4062 37F5:0052    80: unit2pix_Y@46:2344 = F= unit2pix_Y@46:2344
 33F4:406C 37F5:005C    90: object_targ@46:1515 = #P10:242
 33F4:4076 37F5:0066   100: #F0:1 = #I1:17 F* deg2pix_X@46:959
 33F4:4084 37F5:0074   114: #L1:146 = #I1:17 F* deg2pix_Y@46:971
 33F4:4092 37F5:0082   128: #L2:156 = F= #L2:156
 33F4:409C 37F5:008C   138: #L0 = CALL4 oSetAttribute(object_fix:1463,aSIZE:760,#L2:156,#L1:146)
 33F4:40AA 37F5:009A   152: #F0:1 = scr_height@46:2007 F/ #I2:53
 33F4:40B8 37F5:00A8   166: opposite@46:1550 = #F0:1 F- pd_bottom@46:1571
 33F4:40C6 37F5:00B6   180: #F0:1 = scr_width@46:2022 F/ #I2:53
 33F4:40D4 37F5:00C4   194: adjacent@46:718 = #F0:1 F- pd_left@46:1586
 33F4:40E2 37F5:00D2   208: #F0:1 = opposite@46:1550 F* opposite@46:1550
 33F4:40F0 37F5:00E0   222: #F1:2 = adjacent@46:718 F* adjacent@46:718
 33F4:40FE 37F5:00EE   236: #F2:3 = #F0:1 F+ #F1:2
 33F4:410C 37F5:00FC   250: pd_eccentricity = CALL1 sqrt(#F2:3)
 33F4:4114 37F5:0104   258: #F0:1 = opposite@46:1550 F/ adjacent@46:718
 33F4:4122 37F5:0112   272: #F1 = CALL1 atan(#F0:1)
 33F4:412A 37F5:011A   280: pd_angle = CALL1 rad2deg(#F1:2)
 33F4:4132 37F5:0122   288: pd_angle@46:1563 = pd_angle@46:1563 F+ #I180:50
 33F4:4140 37F5:0130   302: #L0 = CALL3 dSendf(#S218:401,flash@46:1167,flash@46:1167)
 33F4:414C 37F5:013C   314: #L0 = CALL1 dSendf(#S219:402)
 33F4:4154 37F5:0144   322: #Q1:254 = F= #Q1:254
 33F4:415E 37F5:014E   332: #Q2:260 = F= #Q2:260
 33F4:4168 37F5:0158   342: #Q3:261 = F= #Q3:261
 33F4:4172 37F5:0162   352: #P4:248 = #I15:41
 33F4:417C 37F5:016C   362: #P5:249 = fill@46:1062
 33F4:4186 37F5:0176   372: #Q6:264 = F= #Q6:264
 33F4:4190 37F5:0180   382: #Q7:265 = F= #Q7:265
 33F4:419A 37F5:018A   392: SPAWN DRW_SQR:995(with 7 args)
 33F4:41A0 37F5:0190   398: WAITFORPROCESS DRW_SQR:995
 33F4:41A6 37F5:0196   404: #Q1:254 = F= #Q1:254
 33F4:41B0 37F5:01A0   414: #Q2:260 = F= #Q2:260
 33F4:41BA 37F5:01AA   424: #Q3:261 = F= #Q3:261
 33F4:41C4 37F5:01B4   434: #P4:248 = #I15:41
 33F4:41CE 37F5:01BE   444: #P5:249 = fill@46:1062
 33F4:41D8 37F5:01C8   454: #Q6:264 = F= #Q6:264
 33F4:41E2 37F5:01D2   464: #Q7:265 = F= #Q7:265
 33F4:41EC 37F5:01DC   474: SPAWN DRW_SQR:995(with 7 args)
 33F4:41F2 37F5:01E2   480: WAITFORPROCESS DRW_SQR:995
 33F4:41F8 37F5:01E8   486: #L0 = CALL3 dSendf(#S220:404,blank@46:781,blank@46:781)
 33F4:4204 37F5:01F4   498: #L0 = CALL1 dSendf(#S221:405)

PROCESS  47: CMD_PGS (Args=14 CtrlBlk=33F4:2478 Size=2046  iOp=2-2047 iCache=56590-58635) DISABLED
 33F4:4012 37F5:0002     0: curr_target@47:897 = #P1:241
 33F4:401C 37F5:000C    10: fixation_size@47:1145 = F= fixation_size@47:1145
 33F4:4026 37F5:0016    20: fixation_color@47:1118 = #P3:247
 33F4:4030 37F5:0020    30: sig_color@47:2057 = #P4:248
 33F4:403A 37F5:002A    40: scr_width@47:2023 = F= scr_width@47:2023
 33F4:4044 37F5:0034    50: scr_height@47:2008 = F= scr_height@47:2008
 33F4:404E 37F5:003E    60: pd_left@47:1587 = F= pd_left@47:1587
 33F4:4058 37F5:0048    70: pd_bottom@47:1572 = F= pd_bottom@47:1572
 33F4:4062 37F5:0052    80: pd_size@47:1595 = F= pd_size@47:1595
 33F4:406C 37F5:005C    90: deg2pix_X@47:960 = F= deg2pix_X@47:960
 33F4:4076 37F5:0066   100: deg2pix_Y@47:972 = F= deg2pix_Y@47:972
 33F4:4080 37F5:0070   110: unit2pix_X@47:2337 = F= unit2pix_X@47:2337
 33F4:408A 37F5:007A   120: unit2pix_Y@47:2345 = F= unit2pix_Y@47:2345
 33F4:4094 37F5:0084   130: object_targ@47:1516 = #P14:244
 33F4:409E 37F5:008E   140: #F0:1 = Size_list:2081[curr_target@47:897]
 33F4:40A6 37F5:0096   148: Size:2078 = F= Size:2078
 33F4:40B0 37F5:00A0   158: #F0:1 = Angle_list:743[curr_target@47:897]
 33F4:40B8 37F5:00A8   166: Angle:736 = F= Angle:736
 33F4:40C2 37F5:00B2   176: #F0:1 = Eccentricity_list:1012[curr_target@47:897]
 33F4:40CA 37F5:00BA   184: Eccentricity:1005 = F= Eccentricity:1005
 33F4:40D4 37F5:00C4   194: Color:844 = curr_target@47:897 + #I1:17
 33F4:40E2 37F5:00D2   208: #F0 = CALL1 cos(Angle:736)
 33F4:40EA 37F5:00DA   216: stim_ecc_x@47:2128 = #F0:1 F* Eccentricity:1005
 33F4:40F8 37F5:00E8   230: #F0 = CALL1 sin(Angle:736)
 33F4:4100 37F5:00F0   238: #F1:2 = #F0:1 F* Eccentricity:1005
 33F4:410E 37F5:00FE   252: stim_ecc_y@47:2140 = #F1:2 F* #I-1:7
 33F4:411C 37F5:010C   266: #F0:1 = stim_ecc_x@47:2128 F* deg2pix_X@47:960
 33F4:412A 37F5:011A   280: #L1:146 = stim_ecc_y@47:2140 F* deg2pix_Y@47:972
 33F4:4138 37F5:0128   294: #L2:156 = F= #L2:156
 33F4:4142 37F5:0132   304: #L0 = CALL3 oMove(object_targ@47:1516,#L2:156,#L1:146)
 33F4:414E 37F5:013E   316: #F0:1 = Size:2078 F* deg2pix_X@47:960
 33F4:415C 37F5:014C   330: #L1:146 = Size:2078 F* deg2pix_Y@47:972
 33F4:416A 37F5:015A   344: #L2:156 = F= #L2:156
 33F4:4174 37F5:0164   354: #L0 = CALL4 oSetAttribute(object_targ@47:1516,aSIZE:760,#L2:156,#L1:146)
 33F4:4182 37F5:0172   368: #F0:1 = #I1:17 F* deg2pix_X@47:960
 33F4:4190 37F5:0180   382: #L1:146 = #I1:17 F* deg2pix_Y@47:972
 33F4:419E 37F5:018E   396: #L2:156 = F= #L2:156
 33F4:41A8 37F5:0198   406: #L0 = CALL4 oSetAttribute(object_fix:1463,aSIZE:760,#L2:156,#L1:146)
 33F4:41B6 37F5:01A6   420: #F0:1 = scr_height@47:2008 F/ #I2:53
 33F4:41C4 37F5:01B4   434: opposite@47:1551 = #F0:1 F- pd_bottom@47:1572
 33F4:41D2 37F5:01C2   448: #F0:1 = scr_width@47:2023 F/ #I2:53
 33F4:41E0 37F5:01D0   462: adjacent@47:719 = #F0:1 F- pd_left@47:1587
 33F4:41EE 37F5:01DE   476: #F0:1 = opposite@47:1551 F* opposite@47:1551
 33F4:41FC 37F5:01EC   490: #F1:2 = adjacent@47:719 F* adjacent@47:719
 33F4:420A 37F5:01FA   504: #F2:3 = #F0:1 F+ #F1:2
 33F4:4218 37F5:0208   518: pd_eccentricity = CALL1 sqrt(#F2:3)
 33F4:4220 37F5:0210   526: #F0:1 = opposite@47:1551 F/ adjacent@47:719
 33F4:422E 37F5:021E   540: #F1 = CALL1 atan(#F0:1)
 33F4:4236 37F5:0226   548: pd_angle = CALL1 rad2deg(#F1:2)
 33F4:423E 37F5:022E   556: pd_angle@47:1564 = pd_angle@47:1564 F+ #I180:50
 33F4:424C 37F5:023C   570: #L0 = CALL3 dSendf(#S222:406,fixation_pd@47:1136,fixation_pd@47:1136)
 33F4:4258 37F5:0248   582: #L0 = CALL1 dSendf(#S223:407)
 33F4:4260 37F5:0250   590: #Q1:254 = F= #Q1:254
 33F4:426A 37F5:025A   600: #Q2:260 = F= #Q2:260
 33F4:4274 37F5:0264   610: #Q3:261 = F= #Q3:261
 33F4:427E 37F5:026E   620: #P4:248 = fixation_color@47:1118
 33F4:4288 37F5:0278   630: #P5:249 = fill@47:1063
 33F4:4292 37F5:0282   640: #Q6:264 = F= #Q6:264
 33F4:429C 37F5:028C   650: #Q7:265 = F= #Q7:265
 33F4:42A6 37F5:0296   660: SPAWN DRW_SQR:995(with 7 args)
 33F4:42AC 37F5:029C   666: WAITFORPROCESS DRW_SQR:995
 33F4:42B2 37F5:02A2   672: #Q1:254 = F= #Q1:254
 33F4:42BC 37F5:02AC   682: #Q2:260 = F= #Q2:260
 33F4:42C6 37F5:02B6   692: #Q3:261 = F= #Q3:261
 33F4:42D0 37F5:02C0   702: #P4:248 = #I15:41
 33F4:42DA 37F5:02CA   712: #P5:249 = fill@47:1063
 33F4:42E4 37F5:02D4   722: #Q6:264 = F= #Q6:264
 33F4:42EE 37F5:02DE   732: #Q7:265 = F= #Q7:265
 33F4:42F8 37F5:02E8   742: SPAWN DRW_SQR:995(with 7 args)
 33F4:42FE 37F5:02EE   748: WAITFORPROCESS DRW_SQR:995
 33F4:4304 37F5:02F4   754: #L0 = CALL3 dSendf(#S224:408,fixation@47:1109,fixation@47:1109)
 33F4:4310 37F5:0300   766: #L0 = CALL1 dSendf(#S225:409)
 33F4:4318 37F5:0308   774: #Q1:254 = F= #Q1:254
 33F4:4322 37F5:0312   784: #Q2:260 = F= #Q2:260
 33F4:432C 37F5:031C   794: #Q3:261 = F= #Q3:261
 33F4:4336 37F5:0326   804: #P4:248 = fixation_color@47:1118
 33F4:4340 37F5:0330   814: #P5:249 = fill@47:1063
 33F4:434A 37F5:033A   824: #Q6:264 = F= #Q6:264
 33F4:4354 37F5:0344   834: #Q7:265 = F= #Q7:265
 33F4:435E 37F5:034E   844: SPAWN DRW_SQR:995(with 7 args)
 33F4:4364 37F5:0354   850: WAITFORPROCESS DRW_SQR:995
 33F4:436A 37F5:035A   856: NEXTTICK1
 33F4:436C 37F5:035C   858: #L0 = CALL3 dSendf(#S226:410,target_pd@47:2250,target_pd@47:2250)
 33F4:4378 37F5:0368   870: #L0 = CALL1 dSendf(#S227:411)
 33F4:4380 37F5:0370   878: #Q1:254 = F= #Q1:254
 33F4:438A 37F5:037A   888: #Q2:260 = F= #Q2:260
 33F4:4394 37F5:0384   898: #Q3:261 = F= #Q3:261
 33F4:439E 37F5:038E   908: #P4:248 = Color:844
 33F4:43A8 37F5:0398   918: #P5:249 = fill@47:1063
 33F4:43B2 37F5:03A2   928: #Q6:264 = F= #Q6:264
 33F4:43BC 37F5:03AC   938: #Q7:265 = F= #Q7:265
 33F4:43C6 37F5:03B6   948: SPAWN DRW_SQR:995(with 7 args)
 33F4:43CC 37F5:03BC   954: WAITFORPROCESS DRW_SQR:995
 33F4:43D2 37F5:03C2   960: #L0:145 = ! Classic:837
 33F4:43E0 37F5:03D0   974: IFnot (#L0:145) GOTO .+90 (goto 1064)
 33F4:43E8 37F5:03D8   982: #Q1:254 = F= #Q1:254
 33F4:43F2 37F5:03E2   992: #Q2:260 = F= #Q2:260
 33F4:43FC 37F5:03EC  1002: #Q3:261 = F= #Q3:261
 33F4:4406 37F5:03F6  1012: #P4:248 = fixation_color@47:1118
 33F4:4410 37F5:0400  1022: #P5:249 = open@47:1543
 33F4:441A 37F5:040A  1032: #Q6:264 = F= #Q6:264
 33F4:4424 37F5:0414  1042: #Q7:265 = F= #Q7:265
 33F4:442E 37F5:041E  1052: SPAWN DRW_SQR:995(with 7 args)
 33F4:4434 37F5:0424  1058: WAITFORPROCESS DRW_SQR:995
 33F4:443A 37F5:042A  1064: #Q1:254 = F= #Q1:254
 33F4:4444 37F5:0434  1074: #Q2:260 = F= #Q2:260
 33F4:444E 37F5:043E  1084: #Q3:261 = F= #Q3:261
 33F4:4458 37F5:0448  1094: #P4:248 = #I15:41
 33F4:4462 37F5:0452  1104: #P5:249 = fill@47:1063
 33F4:446C 37F5:045C  1114: #Q6:264 = F= #Q6:264
 33F4:4476 37F5:0466  1124: #Q7:265 = F= #Q7:265
 33F4:4480 37F5:0470  1134: SPAWN DRW_SQR:995(with 7 args)
 33F4:4486 37F5:0476  1140: WAITFORPROCESS DRW_SQR:995
 33F4:448C 37F5:047C  1146: NEXTTICK1
 33F4:448E 37F5:047E  1148: #L0 = CALL3 dSendf(#S228:412,target@47:2229,target@47:2229)
 33F4:449A 37F5:048A  1160: #L0 = CALL1 dSendf(#S229:413)
 33F4:44A2 37F5:0492  1168: #Q1:254 = F= #Q1:254
 33F4:44AC 37F5:049C  1178: #Q2:260 = F= #Q2:260
 33F4:44B6 37F5:04A6  1188: #Q3:261 = F= #Q3:261
 33F4:44C0 37F5:04B0  1198: #P4:248 = Color:844
 33F4:44CA 37F5:04BA  1208: #P5:249 = fill@47:1063
 33F4:44D4 37F5:04C4  1218: #Q6:264 = F= #Q6:264
 33F4:44DE 37F5:04CE  1228: #Q7:265 = F= #Q7:265
 33F4:44E8 37F5:04D8  1238: SPAWN DRW_SQR:995(with 7 args)
 33F4:44EE 37F5:04DE  1244: WAITFORPROCESS DRW_SQR:995
 33F4:44F4 37F5:04E4  1250: #L0:145 = ! Classic:837
 33F4:4502 37F5:04F2  1264: IFnot (#L0:145) GOTO .+90 (goto 1354)
 33F4:450A 37F5:04FA  1272: #Q1:254 = F= #Q1:254
 33F4:4514 37F5:0504  1282: #Q2:260 = F= #Q2:260
 33F4:451E 37F5:050E  1292: #Q3:261 = F= #Q3:261
 33F4:4528 37F5:0518  1302: #P4:248 = fixation_color@47:1118
 33F4:4532 37F5:0522  1312: #P5:249 = open@47:1543
 33F4:453C 37F5:052C  1322: #Q6:264 = F= #Q6:264
 33F4:4546 37F5:0536  1332: #Q7:265 = F= #Q7:265
 33F4:4550 37F5:0540  1342: SPAWN DRW_SQR:995(with 7 args)
 33F4:4556 37F5:0546  1348: WAITFORPROCESS DRW_SQR:995
 33F4:455C 37F5:054C  1354: NEXTTICK1
 33F4:455E 37F5:054E  1356: #L0 = CALL3 dSendf(#S230:415,signal_pd@47:2068,signal_pd@47:2068)
 33F4:456A 37F5:055A  1368: #L0 = CALL1 dSendf(#S231:416)
 33F4:4572 37F5:0562  1376: #Q1:254 = F= #Q1:254
 33F4:457C 37F5:056C  1386: #Q2:260 = F= #Q2:260
 33F4:4586 37F5:0576  1396: #Q3:261 = F= #Q3:261
 33F4:4590 37F5:0580  1406: #P4:248 = Color:844
 33F4:459A 37F5:058A  1416: #P5:249 = fill@47:1063
 33F4:45A4 37F5:0594  1426: #Q6:264 = F= #Q6:264
 33F4:45AE 37F5:059E  1436: #Q7:265 = F= #Q7:265
 33F4:45B8 37F5:05A8  1446: SPAWN DRW_SQR:995(with 7 args)
 33F4:45BE 37F5:05AE  1452: WAITFORPROCESS DRW_SQR:995
 33F4:45C4 37F5:05B4  1458: IFnot (Classic:837) GOTO .+90 (goto 1548)
 33F4:45CC 37F5:05BC  1466: #Q1:254 = F= #Q1:254
 33F4:45D6 37F5:05C6  1476: #Q2:260 = F= #Q2:260
 33F4:45E0 37F5:05D0  1486: #Q3:261 = F= #Q3:261
 33F4:45EA 37F5:05DA  1496: #P4:248 = sig_color@47:2057
 33F4:45F4 37F5:05E4  1506: #P5:249 = fill@47:1063
 33F4:45FE 37F5:05EE  1516: #Q6:264 = F= #Q6:264
 33F4:4608 37F5:05F8  1526: #Q7:265 = F= #Q7:265
 33F4:4612 37F5:0602  1536: SPAWN DRW_SQR:995(with 7 args)
 33F4:4618 37F5:0608  1542: WAITFORPROCESS DRW_SQR:995
 33F4:461E 37F5:060E  1548: #L0:145 = ! Classic:837
 33F4:462C 37F5:061C  1562: IFnot (#L0:145) GOTO .+90 (goto 1652)
 33F4:4634 37F5:0624  1570: #Q1:254 = F= #Q1:254
 33F4:463E 37F5:062E  1580: #Q2:260 = F= #Q2:260
 33F4:4648 37F5:0638  1590: #Q3:261 = F= #Q3:261
 33F4:4652 37F5:0642  1600: #P4:248 = fixation_color@47:1118
 33F4:465C 37F5:064C  1610: #P5:249 = open@47:1543
 33F4:4666 37F5:0656  1620: #Q6:264 = F= #Q6:264
 33F4:4670 37F5:0660  1630: #Q7:265 = F= #Q7:265
 33F4:467A 37F5:066A  1640: SPAWN DRW_SQR:995(with 7 args)
 33F4:4680 37F5:0670  1646: WAITFORPROCESS DRW_SQR:995
 33F4:4686 37F5:0676  1652: #Q1:254 = F= #Q1:254
 33F4:4690 37F5:0680  1662: #Q2:260 = F= #Q2:260
 33F4:469A 37F5:068A  1672: #Q3:261 = F= #Q3:261
 33F4:46A4 37F5:0694  1682: #P4:248 = #I15:41
 33F4:46AE 37F5:069E  1692: #P5:249 = fill@47:1063
 33F4:46B8 37F5:06A8  1702: #Q6:264 = F= #Q6:264
 33F4:46C2 37F5:06B2  1712: #Q7:265 = F= #Q7:265
 33F4:46CC 37F5:06BC  1722: SPAWN DRW_SQR:995(with 7 args)
 33F4:46D2 37F5:06C2  1728: WAITFORPROCESS DRW_SQR:995
 33F4:46D8 37F5:06C8  1734: NEXTTICK1
 33F4:46DA 37F5:06CA  1736: #L0 = CALL3 dSendf(#S232:417,signal@47:2064,signal@47:2064)
 33F4:46E6 37F5:06D6  1748: #L0 = CALL1 dSendf(#S233:418)
 33F4:46EE 37F5:06DE  1756: #Q1:254 = F= #Q1:254
 33F4:46F8 37F5:06E8  1766: #Q2:260 = F= #Q2:260
 33F4:4702 37F5:06F2  1776: #Q3:261 = F= #Q3:261
 33F4:470C 37F5:06FC  1786: #P4:248 = Color:844
 33F4:4716 37F5:0706  1796: #P5:249 = fill@47:1063
 33F4:4720 37F5:0710  1806: #Q6:264 = F= #Q6:264
 33F4:472A 37F5:071A  1816: #Q7:265 = F= #Q7:265
 33F4:4734 37F5:0724  1826: SPAWN DRW_SQR:995(with 7 args)
 33F4:473A 37F5:072A  1832: WAITFORPROCESS DRW_SQR:995
 33F4:4740 37F5:0730  1838: #Q1:254 = F= #Q1:254
 33F4:474A 37F5:073A  1848: #Q2:260 = F= #Q2:260
 33F4:4754 37F5:0744  1858: #Q3:261 = F= #Q3:261
 33F4:475E 37F5:074E  1868: #P4:248 = sig_color@47:2057
 33F4:4768 37F5:0758  1878: #P5:249 = fill@47:1063
 33F4:4772 37F5:0762  1888: #Q6:264 = F= #Q6:264
 33F4:477C 37F5:076C  1898: #Q7:265 = F= #Q7:265
 33F4:4786 37F5:0776  1908: SPAWN DRW_SQR:995(with 7 args)
 33F4:478C 37F5:077C  1914: WAITFORPROCESS DRW_SQR:995
 33F4:4792 37F5:0782  1920: #L0:145 = ! Classic:837
 33F4:47A0 37F5:0790  1934: IFnot (#L0:145) GOTO .+90 (goto 2024)
 33F4:47A8 37F5:0798  1942: #Q1:254 = F= #Q1:254
 33F4:47B2 37F5:07A2  1952: #Q2:260 = F= #Q2:260
 33F4:47BC 37F5:07AC  1962: #Q3:261 = F= #Q3:261
 33F4:47C6 37F5:07B6  1972: #P4:248 = fixation_color@47:1118
 33F4:47D0 37F5:07C0  1982: #P5:249 = open@47:1543
 33F4:47DA 37F5:07CA  1992: #Q6:264 = F= #Q6:264
 33F4:47E4 37F5:07D4  2002: #Q7:265 = F= #Q7:265
 33F4:47EE 37F5:07DE  2012: SPAWN DRW_SQR:995(with 7 args)
 33F4:47F4 37F5:07E4  2018: WAITFORPROCESS DRW_SQR:995
 33F4:47FA 37F5:07EA  2024: NEXTTICK1
 33F4:47FC 37F5:07EC  2026: #L0 = CALL3 dSendf(#S234:419,blank@47:782,blank@47:782)
 33F4:4808 37F5:07F8  2038: #L0 = CALL1 dSendf(#S235:420)

PROCESS  48: STAIR (Args=2 CtrlBlk=33F4:24A4 Size=250  iOp=2-251 iCache=58636-58885) DISABLED
 33F4:4012 37F5:0002     0: laststopoutcome@48:1309 = #P1:241
 33F4:401C 37F5:000C    10: n_SSDs@48:1404 = #P2:246
 33F4:4026 37F5:0016    20: #L0:145 = Decide_SSD:946 == #I-1:7
 33F4:4034 37F5:0024    34: IFnot (#L0:145) GOTO .+18 (goto 52)
 33F4:403C 37F5:002C    42: Decide_SSD:946 = n_SSDs@48:1404
 33F4:4046 37F5:0036    52: #L0 = CALL1 random(#I3:74)
 33F4:404E 37F5:003E    60: plus_minus@48:1625 = #I1:17 + #L0:145
 33F4:405C 37F5:004C    74: #L0:145 = laststopoutcome@48:1309 == success@48:2183
 33F4:406A 37F5:005A    88: IFnot (#L0:145) GOTO .+26 (goto 114)
 33F4:4072 37F5:0062    96: Decide_SSD:946 = Decide_SSD:946 + plus_minus@48:1625
 33F4:4080 37F5:0070   110: GOTO .+40 (goto 150)
 33F4:4084 37F5:0074   114: #L0:145 = laststopoutcome@48:1309 == failure@48:1046
 33F4:4092 37F5:0082   128: IFnot (#L0:145) GOTO .+22 (goto 150)
 33F4:409A 37F5:008A   136: Decide_SSD:946 = Decide_SSD:946 - plus_minus@48:1625
 33F4:40A8 37F5:0098   150: #L0:145 = n_SSDs@48:1404 - #I1:17
 33F4:40B6 37F5:00A6   164: #L1:146 = Decide_SSD:946 > #L0:145
 33F4:40C4 37F5:00B4   178: IFnot (#L1:146) GOTO .+22 (goto 200)
 33F4:40CC 37F5:00BC   186: Decide_SSD:946 = n_SSDs@48:1404 - #I1:17
 33F4:40DA 37F5:00CA   200: #L0:145 = Decide_SSD:946 < #I0:16
 33F4:40E8 37F5:00D8   214: IFnot (#L0:145) GOTO .+18 (goto 232)
 33F4:40F0 37F5:00E0   222: Decide_SSD:946 = #I0:16
 33F4:40FA 37F5:00EA   232: #F0:1 = SSD_list:2100[Decide_SSD:946]
 33F4:4102 37F5:00F2   240: Curr_SSD:890 = F= Curr_SSD:890

PROCESS  49: SETC_TRL (Args=9 CtrlBlk=33F4:24D0 Size=730  iOp=2-731 iCache=58886-59615) DISABLED
 33F4:4012 37F5:0002     0: n_targ_pos@49:1409 = #P1:241
 33F4:401C 37F5:000C    10: go_weight@49:1202 = F= go_weight@49:1202
 33F4:4026 37F5:0016    20: stop_weight@49:2172 = F= stop_weight@49:2172
 33F4:4030 37F5:0020    30: ignore_weight@49:1264 = F= ignore_weight@49:1264
 33F4:403A 37F5:002A    40: staircase@49:2111 = #P5:249
 33F4:4044 37F5:0034    50: n_SSDs@49:1405 = #P6:250
 33F4:404E 37F5:003E    60: min_holdtime@49:1374 = #P7:251
 33F4:4058 37F5:0048    70: max_holdtime@49:1339 = #P8:252
 33F4:4062 37F5:0052    80: expo_jitter@49:1023 = #P9:253
 33F4:406C 37F5:005C    90: #L0:145 = Correct_trls:869 == Trls_per_block:2323
 33F4:407A 37F5:006A   104: IFnot (#L0:145) GOTO .+32 (goto 136)
 33F4:4082 37F5:0072   112: Block_number:792 = Block_number:792 + #I1:17
 33F4:4090 37F5:0080   126: Correct_trls:869 = #I0:16
 33F4:409A 37F5:008A   136: #L0 = CALL1 random(#I9999:144)
 33F4:40A2 37F5:0092   144: #F0:1 = #M3F800000:167 F+ #L0:145
 33F4:40B0 37F5:00A0   158: decide_trl_type@49:948 = #F0:1 F/ #M42C80000:201
 33F4:40BE 37F5:00AE   172: #L0:145 = decide_trl_type@49:948 F<= go_weight@49:1202
 33F4:40CC 37F5:00BC   186: IFnot (#L0:145) GOTO .+22 (goto 208)
 33F4:40D4 37F5:00C4   194: Trl_type:2318 = Go_trl:1193
 33F4:40DE 37F5:00CE   204: GOTO .+112 (goto 316)
 33F4:40E2 37F5:00D2   208: #L0:145 = decide_trl_type@49:948 F> go_weight@49:1202
 33F4:40F0 37F5:00E0   222: #F0:1 = go_weight@49:1202 F+ stop_weight@49:2172
 33F4:40FE 37F5:00EE   236: #L1:146 = decide_trl_type@49:948 F<= #F0:1
 33F4:410C 37F5:00FC   250: #L2:156 = #L0:145 && #L1:146
 33F4:411A 37F5:010A   264: IFnot (#L2:156) GOTO .+32 (goto 296)
 33F4:4122 37F5:0112   272: Trl_type:2318 = Stop_trl:2163
 33F4:412C 37F5:011C   282: Sig_color:2056 = stop_sig_color@49:2154
 33F4:4136 37F5:0126   292: GOTO .+24 (goto 316)
 33F4:413A 37F5:012A   296: Trl_type:2318 = Ignore_trl:1255
 33F4:4144 37F5:0134   306: Sig_color:2056 = ignore_sig_color@49:1249
 33F4:414E 37F5:013E   316: IFnot (Classic:837) GOTO .+18 (goto 334)
 33F4:4156 37F5:0146   324: Sig_color:2056 = fixation_color@49:1119
 33F4:4160 37F5:0150   334: #P1:241 = Curr_target:894
 33F4:416A 37F5:015A   344: #Q2:260 = F= #Q2:260
 33F4:4174 37F5:0164   354: #P3:247 = fixation_color@49:1119
 33F4:417E 37F5:016E   364: #P4:248 = Sig_color:2056
 33F4:4188 37F5:0178   374: #Q5:263 = F= #Q5:263
 33F4:4192 37F5:0182   384: #Q6:264 = F= #Q6:264
 33F4:419C 37F5:018C   394: #Q7:265 = F= #Q7:265
 33F4:41A6 37F5:0196   404: #Q8:266 = F= #Q8:266
 33F4:41B0 37F5:01A0   414: #Q9:267 = F= #Q9:267
 33F4:41BA 37F5:01AA   424: #Q10:255 = F= #Q10:255
 33F4:41C4 37F5:01B4   434: #Q11:256 = F= #Q11:256
 33F4:41CE 37F5:01BE   444: #Q12:257 = F= #Q12:257
 33F4:41D8 37F5:01C8   454: #Q13:258 = F= #Q13:258
 33F4:41E2 37F5:01D2   464: #P14:244 = object_targ:1513
 33F4:41EC 37F5:01DC   474: SPAWN CMD_PGS:842(with 14 args)
 33F4:41F2 37F5:01E2   480: WAITFORPROCESS CMD_PGS:842
 33F4:41F8 37F5:01E8   486: #P1:241 = Curr_target:894
 33F4:4202 37F5:01F2   496: #Q2:260 = F= #Q2:260
 33F4:420C 37F5:01FC   506: #Q3:261 = F= #Q3:261
 33F4:4216 37F5:0206   516: #P4:248 = object_fixwin:1469
 33F4:4220 37F5:0210   526: #P5:249 = object_targwin:1523
 33F4:422A 37F5:021A   536: #Q6:264 = F= #Q6:264
 33F4:4234 37F5:0224   546: #Q7:265 = F= #Q7:265
 33F4:423E 37F5:022E   556: SPAWN WINDOWS:2366(with 7 args)
 33F4:4244 37F5:0234   562: WAITFORPROCESS WINDOWS:2366
 33F4:424A 37F5:023A   568: #L0:145 = max_holdtime@49:1339 - min_holdtime@49:1374
 33F4:4258 37F5:0248   582: holdtime_diff@49:1230 = F= holdtime_diff@49:1230
 33F4:4262 37F5:0252   592: IFnot (expo_jitter@49:1023) GOTO .+70 (goto 662)
 33F4:426A 37F5:025A   600: #L0 = CALL1 random(#I1001:23)
 33F4:4272 37F5:0262   608: decide_jitter@49:940 = #L0:145 F/ #M447A0000:226
 33F4:4280 37F5:0270   622: #F0:1 = decide_jitter@49:940 F/ #M3E800000:165
 33F4:428E 37F5:027E   636: #F1:2 = #MBF800000:236 F* #F0:1
 33F4:429C 37F5:028C   650: per_jitter = CALL1 exp(#F1:2)
 33F4:42A4 37F5:0294   658: GOTO .+26 (goto 684)
 33F4:42A8 37F5:0298   662: #L0 = CALL1 random(#I1001:23)
 33F4:42B0 37F5:02A0   670: per_jitter@49:1602 = #L0:145 F/ #M447A0000:226
 33F4:42BE 37F5:02AE   684: jitter@49:1292 = holdtime_diff@49:1230 F* per_jitter@49:1602
 33F4:42CC 37F5:02BC   698: #F0:1 = min_holdtime@49:1374 F+ jitter@49:1292
 33F4:42DA 37F5:02CA   712: #F1 = CALL1 round(#F0:1)
 33F4:42E2 37F5:02D2   720: Curr_holdtime:879 = F= Curr_holdtime:879

PROCESS  50: MG_PGS (Args=14 CtrlBlk=33F4:24FC Size=2156  iOp=2-2157 iCache=59616-61771) DISABLED
 33F4:4012 37F5:0002     0: curr_target@50:898 = #P1:241
 33F4:401C 37F5:000C    10: fixation_size@50:1146 = F= fixation_size@50:1146
 33F4:4026 37F5:0016    20: fixation_color@50:1120 = #P3:247
 33F4:4030 37F5:0020    30: sig_color@50:2058 = #P4:248
 33F4:403A 37F5:002A    40: scr_width@50:2024 = F= scr_width@50:2024
 33F4:4044 37F5:0034    50: scr_height@50:2009 = F= scr_height@50:2009
 33F4:404E 37F5:003E    60: pd_left@50:1588 = F= pd_left@50:1588
 33F4:4058 37F5:0048    70: pd_bottom@50:1573 = F= pd_bottom@50:1573
 33F4:4062 37F5:0052    80: pd_size@50:1596 = F= pd_size@50:1596
 33F4:406C 37F5:005C    90: deg2pix_X@50:961 = F= deg2pix_X@50:961
 33F4:4076 37F5:0066   100: deg2pix_Y@50:973 = F= deg2pix_Y@50:973
 33F4:4080 37F5:0070   110: unit2pix_X@50:2338 = F= unit2pix_X@50:2338
 33F4:408A 37F5:007A   120: unit2pix_Y@50:2346 = F= unit2pix_Y@50:2346
 33F4:4094 37F5:0084   130: object_targ@50:1517 = #P14:244
 33F4:409E 37F5:008E   140: #F0:1 = Size_list:2081[curr_target@50:898]
 33F4:40A6 37F5:0096   148: Size:2078 = F= Size:2078
 33F4:40B0 37F5:00A0   158: #F0:1 = Angle_list:743[curr_target@50:898]
 33F4:40B8 37F5:00A8   166: Angle:736 = F= Angle:736
 33F4:40C2 37F5:00B2   176: #F0:1 = Eccentricity_list:1012[curr_target@50:898]
 33F4:40CA 37F5:00BA   184: Eccentricity:1005 = F= Eccentricity:1005
 33F4:40D4 37F5:00C4   194: Color = CALL1 random(#I8:133)
 33F4:40DC 37F5:00CC   202: #F0 = CALL1 cos(Angle:736)
 33F4:40E4 37F5:00D4   210: stim_ecc_x@50:2129 = #F0:1 F* Eccentricity:1005
 33F4:40F2 37F5:00E2   224: #F0 = CALL1 sin(Angle:736)
 33F4:40FA 37F5:00EA   232: #F1:2 = #F0:1 F* Eccentricity:1005
 33F4:4108 37F5:00F8   246: stim_ecc_y@50:2141 = #F1:2 F* #I-1:7
 33F4:4116 37F5:0106   260: #F0:1 = stim_ecc_x@50:2129 F* deg2pix_X@50:961
 33F4:4124 37F5:0114   274: #L1:146 = stim_ecc_y@50:2141 F* deg2pix_Y@50:973
 33F4:4132 37F5:0122   288: #L2:156 = F= #L2:156
 33F4:413C 37F5:012C   298: #L0 = CALL3 oMove(object_targ@50:1517,#L2:156,#L1:146)
 33F4:4148 37F5:0138   310: #F0:1 = Size:2078 F* deg2pix_X@50:961
 33F4:4156 37F5:0146   324: #L1:146 = Size:2078 F* deg2pix_Y@50:973
 33F4:4164 37F5:0154   338: #L2:156 = F= #L2:156
 33F4:416E 37F5:015E   348: #L0 = CALL4 oSetAttribute(object_targ@50:1517,aSIZE:760,#L2:156,#L1:146)
 33F4:417C 37F5:016C   362: #F0:1 = #I1:17 F* deg2pix_X@50:961
 33F4:418A 37F5:017A   376: #L1:146 = #I1:17 F* deg2pix_Y@50:973
 33F4:4198 37F5:0188   390: #L2:156 = F= #L2:156
 33F4:41A2 37F5:0192   400: #L0 = CALL4 oSetAttribute(object_fix:1463,aSIZE:760,#L2:156,#L1:146)
 33F4:41B0 37F5:01A0   414: #F0:1 = scr_height@50:2009 F/ #I2:53
 33F4:41BE 37F5:01AE   428: opposite@50:1552 = #F0:1 F- pd_bottom@50:1573
 33F4:41CC 37F5:01BC   442: #F0:1 = scr_width@50:2024 F/ #I2:53
 33F4:41DA 37F5:01CA   456: adjacent@50:720 = #F0:1 F- pd_left@50:1588
 33F4:41E8 37F5:01D8   470: #F0:1 = opposite@50:1552 F* opposite@50:1552
 33F4:41F6 37F5:01E6   484: #F1:2 = adjacent@50:720 F* adjacent@50:720
 33F4:4204 37F5:01F4   498: #F2:3 = #F0:1 F+ #F1:2
 33F4:4212 37F5:0202   512: pd_eccentricity = CALL1 sqrt(#F2:3)
 33F4:421A 37F5:020A   520: #F0:1 = opposite@50:1552 F/ adjacent@50:720
 33F4:4228 37F5:0218   534: #F1 = CALL1 atan(#F0:1)
 33F4:4230 37F5:0220   542: pd_angle = CALL1 rad2deg(#F1:2)
 33F4:4238 37F5:0228   550: pd_angle@50:1565 = pd_angle@50:1565 F+ #I180:50
 33F4:4246 37F5:0236   564: #L0 = CALL3 dSendf(#S236:421,fixation_pd@50:1137,fixation_pd@50:1137)
 33F4:4252 37F5:0242   576: #L0 = CALL1 dSendf(#S237:422)
 33F4:425A 37F5:024A   584: #Q1:254 = F= #Q1:254
 33F4:4264 37F5:0254   594: #Q2:260 = F= #Q2:260
 33F4:426E 37F5:025E   604: #Q3:261 = F= #Q3:261
 33F4:4278 37F5:0268   614: #P4:248 = fixation_color@50:1120
 33F4:4282 37F5:0272   624: #P5:249 = fill@50:1064
 33F4:428C 37F5:027C   634: #Q6:264 = F= #Q6:264
 33F4:4296 37F5:0286   644: #Q7:265 = F= #Q7:265
 33F4:42A0 37F5:0290   654: SPAWN DRW_SQR:995(with 7 args)
 33F4:42A6 37F5:0296   660: WAITFORPROCESS DRW_SQR:995
 33F4:42AC 37F5:029C   666: #Q1:254 = F= #Q1:254
 33F4:42B6 37F5:02A6   676: #Q2:260 = F= #Q2:260
 33F4:42C0 37F5:02B0   686: #Q3:261 = F= #Q3:261
 33F4:42CA 37F5:02BA   696: #P4:248 = #I15:41
 33F4:42D4 37F5:02C4   706: #P5:249 = fill@50:1064
 33F4:42DE 37F5:02CE   716: #Q6:264 = F= #Q6:264
 33F4:42E8 37F5:02D8   726: #Q7:265 = F= #Q7:265
 33F4:42F2 37F5:02E2   736: SPAWN DRW_SQR:995(with 7 args)
 33F4:42F8 37F5:02E8   742: WAITFORPROCESS DRW_SQR:995
 33F4:42FE 37F5:02EE   748: #L0 = CALL3 dSendf(#S238:423,fixation@50:1110,fixation@50:1110)
 33F4:430A 37F5:02FA   760: #L0 = CALL1 dSendf(#S239:424)
 33F4:4312 37F5:0302   768: #Q1:254 = F= #Q1:254
 33F4:431C 37F5:030C   778: #Q2:260 = F= #Q2:260
 33F4:4326 37F5:0316   788: #Q3:261 = F= #Q3:261
 33F4:4330 37F5:0320   798: #P4:248 = fixation_color@50:1120
 33F4:433A 37F5:032A   808: #P5:249 = fill@50:1064
 33F4:4344 37F5:0334   818: #Q6:264 = F= #Q6:264
 33F4:434E 37F5:033E   828: #Q7:265 = F= #Q7:265
 33F4:4358 37F5:0348   838: SPAWN DRW_SQR:995(with 7 args)
 33F4:435E 37F5:034E   844: WAITFORPROCESS DRW_SQR:995
 33F4:4364 37F5:0354   850: NEXTTICK1
 33F4:4366 37F5:0356   852: #L0 = CALL3 dSendf(#S240:426,target_pd@50:2251,target_pd@50:2251)
 33F4:4372 37F5:0362   864: #L0 = CALL1 dSendf(#S241:427)
 33F4:437A 37F5:036A   872: #L0:145 = ! sacctarg:2002
 33F4:4388 37F5:0378   886: IFnot (#L0:145) GOTO .+176 (goto 1062)
 33F4:4390 37F5:0380   894: #Q1:254 = F= #Q1:254
 33F4:439A 37F5:038A   904: #Q2:260 = F= #Q2:260
 33F4:43A4 37F5:0394   914: #Q3:261 = F= #Q3:261
 33F4:43AE 37F5:039E   924: #P4:248 = fixation_color@50:1120
 33F4:43B8 37F5:03A8   934: #P5:249 = fill@50:1064
 33F4:43C2 37F5:03B2   944: #Q6:264 = F= #Q6:264
 33F4:43CC 37F5:03BC   954: #Q7:265 = F= #Q7:265
 33F4:43D6 37F5:03C6   964: SPAWN DRW_SQR:995(with 7 args)
 33F4:43DC 37F5:03CC   970: WAITFORPROCESS DRW_SQR:995
 33F4:43E2 37F5:03D2   976: #Q1:254 = F= #Q1:254
 33F4:43EC 37F5:03DC   986: #Q2:260 = F= #Q2:260
 33F4:43F6 37F5:03E6   996: #Q3:261 = F= #Q3:261
 33F4:4400 37F5:03F0  1006: #P4:248 = Color:844
 33F4:440A 37F5:03FA  1016: #P5:249 = fill@50:1064
 33F4:4414 37F5:0404  1026: #Q6:264 = F= #Q6:264
 33F4:441E 37F5:040E  1036: #Q7:265 = F= #Q7:265
 33F4:4428 37F5:0418  1046: SPAWN DRW_SQR:995(with 7 args)
 33F4:442E 37F5:041E  1052: WAITFORPROCESS DRW_SQR:995
 33F4:4434 37F5:0424  1058: GOTO .+176 (goto 1234)
 33F4:4438 37F5:0428  1062: IFnot (sacctarg:2002) GOTO .+172 (goto 1234)
 33F4:4440 37F5:0430  1070: #Q1:254 = F= #Q1:254
 33F4:444A 37F5:043A  1080: #Q2:260 = F= #Q2:260
 33F4:4454 37F5:0444  1090: #Q3:261 = F= #Q3:261
 33F4:445E 37F5:044E  1100: #P4:248 = fixation_color@50:1120
 33F4:4468 37F5:0458  1110: #P5:249 = open@50:1544
 33F4:4472 37F5:0462  1120: #Q6:264 = F= #Q6:264
 33F4:447C 37F5:046C  1130: #Q7:265 = F= #Q7:265
 33F4:4486 37F5:0476  1140: SPAWN DRW_SQR:995(with 7 args)
 33F4:448C 37F5:047C  1146: WAITFORPROCESS DRW_SQR:995
 33F4:4492 37F5:0482  1152: #Q1:254 = F= #Q1:254
 33F4:449C 37F5:048C  1162: #Q2:260 = F= #Q2:260
 33F4:44A6 37F5:0496  1172: #Q3:261 = F= #Q3:261
 33F4:44B0 37F5:04A0  1182: #P4:248 = Color:844
 33F4:44BA 37F5:04AA  1192: #P5:249 = fill@50:1064
 33F4:44C4 37F5:04B4  1202: #Q6:264 = F= #Q6:264
 33F4:44CE 37F5:04BE  1212: #Q7:265 = F= #Q7:265
 33F4:44D8 37F5:04C8  1222: SPAWN DRW_SQR:995(with 7 args)
 33F4:44DE 37F5:04CE  1228: WAITFORPROCESS DRW_SQR:995
 33F4:44E4 37F5:04D4  1234: #Q1:254 = F= #Q1:254
 33F4:44EE 37F5:04DE  1244: #Q2:260 = F= #Q2:260
 33F4:44F8 37F5:04E8  1254: #Q3:261 = F= #Q3:261
 33F4:4502 37F5:04F2  1264: #P4:248 = #I15:41
 33F4:450C 37F5:04FC  1274: #P5:249 = fill@50:1064
 33F4:4516 37F5:0506  1284: #Q6:264 = F= #Q6:264
 33F4:4520 37F5:0510  1294: #Q7:265 = F= #Q7:265
 33F4:452A 37F5:051A  1304: SPAWN DRW_SQR:995(with 7 args)
 33F4:4530 37F5:0520  1310: WAITFORPROCESS DRW_SQR:995
 33F4:4536 37F5:0526  1316: NEXTTICK1
 33F4:4538 37F5:0528  1318: #L0 = CALL3 dSendf(#S242:428,target@50:2230,target@50:2230)
 33F4:4544 37F5:0534  1330: #L0 = CALL1 dSendf(#S243:429)
 33F4:454C 37F5:053C  1338: #Q1:254 = F= #Q1:254
 33F4:4556 37F5:0546  1348: #Q2:260 = F= #Q2:260
 33F4:4560 37F5:0550  1358: #Q3:261 = F= #Q3:261
 33F4:456A 37F5:055A  1368: #P4:248 = Color:844
 33F4:4574 37F5:0564  1378: #P5:249 = fill@50:1064
 33F4:457E 37F5:056E  1388: #Q6:264 = F= #Q6:264
 33F4:4588 37F5:0578  1398: #Q7:265 = F= #Q7:265
 33F4:4592 37F5:0582  1408: SPAWN DRW_SQR:995(with 7 args)
 33F4:4598 37F5:0588  1414: WAITFORPROCESS DRW_SQR:995
 33F4:459E 37F5:058E  1420: #Q1:254 = F= #Q1:254
 33F4:45A8 37F5:0598  1430: #Q2:260 = F= #Q2:260
 33F4:45B2 37F5:05A2  1440: #Q3:261 = F= #Q3:261
 33F4:45BC 37F5:05AC  1450: #P4:248 = fixation_color@50:1120
 33F4:45C6 37F5:05B6  1460: #P5:249 = open@50:1544
 33F4:45D0 37F5:05C0  1470: #Q6:264 = F= #Q6:264
 33F4:45DA 37F5:05CA  1480: #Q7:265 = F= #Q7:265
 33F4:45E4 37F5:05D4  1490: SPAWN DRW_SQR:995(with 7 args)
 33F4:45EA 37F5:05DA  1496: WAITFORPROCESS DRW_SQR:995
 33F4:45F0 37F5:05E0  1502: NEXTTICK1
 33F4:45F2 37F5:05E2  1504: #L0 = CALL3 dSendf(#S244:430,signal_pd@50:2069,signal_pd@50:2069)
 33F4:45FE 37F5:05EE  1516: #L0 = CALL1 dSendf(#S245:431)
 33F4:4606 37F5:05F6  1524: #L0:145 = nogosoa:1453 == #I1:17
 33F4:4614 37F5:0604  1538: IFnot (#L0:145) GOTO .+176 (goto 1714)
 33F4:461C 37F5:060C  1546: #Q1:254 = F= #Q1:254
 33F4:4626 37F5:0616  1556: #Q2:260 = F= #Q2:260
 33F4:4630 37F5:0620  1566: #Q3:261 = F= #Q3:261
 33F4:463A 37F5:062A  1576: #P4:248 = sig_color@50:2058
 33F4:4644 37F5:0634  1586: #P5:249 = fill@50:1064
 33F4:464E 37F5:063E  1596: #Q6:264 = F= #Q6:264
 33F4:4658 37F5:0648  1606: #Q7:265 = F= #Q7:265
 33F4:4662 37F5:0652  1616: SPAWN DRW_SQR:995(with 7 args)
 33F4:4668 37F5:0658  1622: WAITFORPROCESS DRW_SQR:995
 33F4:466E 37F5:065E  1628: #Q1:254 = F= #Q1:254
 33F4:4678 37F5:0668  1638: #Q2:260 = F= #Q2:260
 33F4:4682 37F5:0672  1648: #Q3:261 = F= #Q3:261
 33F4:468C 37F5:067C  1658: #P4:248 = #I15:41
 33F4:4696 37F5:0686  1668: #P5:249 = fill@50:1064
 33F4:46A0 37F5:0690  1678: #Q6:264 = F= #Q6:264
 33F4:46AA 37F5:069A  1688: #Q7:265 = F= #Q7:265
 33F4:46B4 37F5:06A4  1698: SPAWN DRW_SQR:995(with 7 args)
 33F4:46BA 37F5:06AA  1704: WAITFORPROCESS DRW_SQR:995
 33F4:46C0 37F5:06B0  1710: GOTO .+190 (goto 1900)
 33F4:46C4 37F5:06B4  1714: #L0:145 = nogosoa:1453 == #I0:16
 33F4:46D2 37F5:06C2  1728: IFnot (#L0:145) GOTO .+172 (goto 1900)
 33F4:46DA 37F5:06CA  1736: #Q1:254 = F= #Q1:254
 33F4:46E4 37F5:06D4  1746: #Q2:260 = F= #Q2:260
 33F4:46EE 37F5:06DE  1756: #Q3:261 = F= #Q3:261
 33F4:46F8 37F5:06E8  1766: #P4:248 = fixation_color@50:1120
 33F4:4702 37F5:06F2  1776: #P5:249 = open@50:1544
 33F4:470C 37F5:06FC  1786: #Q6:264 = F= #Q6:264
 33F4:4716 37F5:0706  1796: #Q7:265 = F= #Q7:265
 33F4:4720 37F5:0710  1806: SPAWN DRW_SQR:995(with 7 args)
 33F4:4726 37F5:0716  1812: WAITFORPROCESS DRW_SQR:995
 33F4:472C 37F5:071C  1818: #Q1:254 = F= #Q1:254
 33F4:4736 37F5:0726  1828: #Q2:260 = F= #Q2:260
 33F4:4740 37F5:0730  1838: #Q3:261 = F= #Q3:261
 33F4:474A 37F5:073A  1848: #P4:248 = #I15:41
 33F4:4754 37F5:0744  1858: #P5:249 = fill@50:1064
 33F4:475E 37F5:074E  1868: #Q6:264 = F= #Q6:264
 33F4:4768 37F5:0758  1878: #Q7:265 = F= #Q7:265
 33F4:4772 37F5:0762  1888: SPAWN DRW_SQR:995(with 7 args)
 33F4:4778 37F5:0768  1894: WAITFORPROCESS DRW_SQR:995
 33F4:477E 37F5:076E  1900: NEXTTICK1
 33F4:4780 37F5:0770  1902: #L0 = CALL3 dSendf(#S246:432,signal@50:2065,signal@50:2065)
 33F4:478C 37F5:077C  1914: #L0 = CALL1 dSendf(#S247:433)
 33F4:4794 37F5:0784  1922: #L0:145 = nogosoa:1453 == #I1:17
 33F4:47A2 37F5:0792  1936: IFnot (#L0:145) GOTO .+94 (goto 2030)
 33F4:47AA 37F5:079A  1944: #Q1:254 = F= #Q1:254
 33F4:47B4 37F5:07A4  1954: #Q2:260 = F= #Q2:260
 33F4:47BE 37F5:07AE  1964: #Q3:261 = F= #Q3:261
 33F4:47C8 37F5:07B8  1974: #P4:248 = sig_color@50:2058
 33F4:47D2 37F5:07C2  1984: #P5:249 = fill@50:1064
 33F4:47DC 37F5:07CC  1994: #Q6:264 = F= #Q6:264
 33F4:47E6 37F5:07D6  2004: #Q7:265 = F= #Q7:265
 33F4:47F0 37F5:07E0  2014: SPAWN DRW_SQR:995(with 7 args)
 33F4:47F6 37F5:07E6  2020: WAITFORPROCESS DRW_SQR:995
 33F4:47FC 37F5:07EC  2026: GOTO .+108 (goto 2134)
 33F4:4800 37F5:07F0  2030: #L0:145 = nogosoa:1453 == #I0:16
 33F4:480E 37F5:07FE  2044: IFnot (#L0:145) GOTO .+90 (goto 2134)
 33F4:4816 37F5:0806  2052: #Q1:254 = F= #Q1:254
 33F4:4820 37F5:0810  2062: #Q2:260 = F= #Q2:260
 33F4:482A 37F5:081A  2072: #Q3:261 = F= #Q3:261
 33F4:4834 37F5:0824  2082: #P4:248 = fixation_color@50:1120
 33F4:483E 37F5:082E  2092: #P5:249 = open@50:1544
 33F4:4848 37F5:0838  2102: #Q6:264 = F= #Q6:264
 33F4:4852 37F5:0842  2112: #Q7:265 = F= #Q7:265
 33F4:485C 37F5:084C  2122: SPAWN DRW_SQR:995(with 7 args)
 33F4:4862 37F5:0852  2128: WAITFORPROCESS DRW_SQR:995
 33F4:4868 37F5:0858  2134: NEXTTICK1
 33F4:486A 37F5:085A  2136: #L0 = CALL3 dSendf(#S248:434,blank@50:783,blank@50:783)
 33F4:4876 37F5:0866  2148: #L0 = CALL1 dSendf(#S249:435)

PROCESS  51: SETMGTRL (Args=9 CtrlBlk=33F4:2528 Size=760  iOp=2-761 iCache=61772-62531) DISABLED
 33F4:4012 37F5:0002     0: n_targ_pos@51:1410 = #P1:241
 33F4:401C 37F5:000C    10: go_weight@51:1203 = F= go_weight@51:1203
 33F4:4026 37F5:0016    20: stop_weight@51:2173 = F= stop_weight@51:2173
 33F4:4030 37F5:0020    30: ignore_weight@51:1265 = F= ignore_weight@51:1265
 33F4:403A 37F5:002A    40: n_SOAs@51:1401 = #P5:249
 33F4:4044 37F5:0034    50: min_holdtime@51:1375 = #P6:250
 33F4:404E 37F5:003E    60: max_holdtime@51:1340 = #P7:251
 33F4:4058 37F5:0048    70: expo_jitter@51:1024 = #P8:252
 33F4:4062 37F5:0052    80: expo_jitter_soa@51:1029 = #P9:253
 33F4:406C 37F5:005C    90: #L0 = CALL1 random(#I9999:144)
 33F4:4074 37F5:0064    98: #F0:1 = #M3F800000:167 F+ #L0:145
 33F4:4082 37F5:0072   112: decide_trl_type@51:949 = #F0:1 F/ #M42C80000:201
 33F4:4090 37F5:0080   126: #L0:145 = decide_trl_type@51:949 F<= go_weight@51:1203
 33F4:409E 37F5:008E   140: IFnot (#L0:145) GOTO .+32 (goto 172)
 33F4:40A6 37F5:0096   148: nogosoa:1453 = #I0:16
 33F4:40B0 37F5:00A0   158: Trl_type:2318 = Go_trl@51:1197
 33F4:40BA 37F5:00AA   168: GOTO .+122 (goto 290)
 33F4:40BE 37F5:00AE   172: #L0:145 = decide_trl_type@51:949 F> go_weight@51:1203
 33F4:40CC 37F5:00BC   186: #F0:1 = go_weight@51:1203 F+ stop_weight@51:2173
 33F4:40DA 37F5:00CA   200: #L1:146 = decide_trl_type@51:949 F<= #F0:1
 33F4:40E8 37F5:00D8   214: #L2:156 = #L0:145 && #L1:146
 33F4:40F6 37F5:00E6   228: IFnot (#L2:156) GOTO .+42 (goto 270)
 33F4:40FE 37F5:00EE   236: nogosoa:1453 = #I1:17
 33F4:4108 37F5:00F8   246: Trl_type:2318 = Stop_trl@51:2167
 33F4:4112 37F5:0102   256: Sig_color:2056 = stop_sig_color@51:2155
 33F4:411C 37F5:010C   266: GOTO .+24 (goto 290)
 33F4:4120 37F5:0110   270: Trl_type:2318 = Ignore_trl@51:1259
 33F4:412A 37F5:011A   280: Sig_color:2056 = ignore_sig_color@51:1250
 33F4:4134 37F5:0124   290: Curr_target = CALL1 random(n_targ_pos@51:1410)
 33F4:413C 37F5:012C   298: #P1:241 = Curr_target:894
 33F4:4146 37F5:0136   308: #Q2:260 = F= #Q2:260
 33F4:4150 37F5:0140   318: #P3:247 = fixation_color@51:1121
 33F4:415A 37F5:014A   328: #P4:248 = Sig_color:2056
 33F4:4164 37F5:0154   338: #Q5:263 = F= #Q5:263
 33F4:416E 37F5:015E   348: #Q6:264 = F= #Q6:264
 33F4:4178 37F5:0168   358: #Q7:265 = F= #Q7:265
 33F4:4182 37F5:0172   368: #Q8:266 = F= #Q8:266
 33F4:418C 37F5:017C   378: #Q9:267 = F= #Q9:267
 33F4:4196 37F5:0186   388: #Q10:255 = F= #Q10:255
 33F4:41A0 37F5:0190   398: #Q11:256 = F= #Q11:256
 33F4:41AA 37F5:019A   408: #Q12:257 = F= #Q12:257
 33F4:41B4 37F5:01A4   418: #Q13:258 = F= #Q13:258
 33F4:41BE 37F5:01AE   428: #P14:244 = object_targ:1513
 33F4:41C8 37F5:01B8   438: SPAWN MG_PGS:1370(with 14 args)
 33F4:41CE 37F5:01BE   444: WAITFORPROCESS MG_PGS:1370
 33F4:41D4 37F5:01C4   450: #P1:241 = Curr_target:894
 33F4:41DE 37F5:01CE   460: #Q2:260 = F= #Q2:260
 33F4:41E8 37F5:01D8   470: #Q3:261 = F= #Q3:261
 33F4:41F2 37F5:01E2   480: #P4:248 = object_fixwin:1469
 33F4:41FC 37F5:01EC   490: #P5:249 = object_targwin:1523
 33F4:4206 37F5:01F6   500: #Q6:264 = F= #Q6:264
 33F4:4210 37F5:0200   510: #Q7:265 = F= #Q7:265
 33F4:421A 37F5:020A   520: SPAWN WINDOWS:2366(with 7 args)
 33F4:4220 37F5:0210   526: WAITFORPROCESS WINDOWS:2366
 33F4:4226 37F5:0216   532: #L0:145 = max_holdtime@51:1340 - min_holdtime@51:1375
 33F4:4234 37F5:0224   546: holdtime_diff@51:1231 = F= holdtime_diff@51:1231
 33F4:423E 37F5:022E   556: IFnot (expo_jitter@51:1024) GOTO .+80 (goto 636)
 33F4:4246 37F5:0236   564: #L0 = CALL1 random(#I1001:23)
 33F4:424E 37F5:023E   572: decide_jitter@51:941 = #L0:145 F/ #M447A0000:226
 33F4:425C 37F5:024C   586: #F0:1 = decide_jitter@51:941 F/ #M3E800000:165
 33F4:426A 37F5:025A   600: #F1:2 = #MBF800000:236 F* #F0:1
 33F4:4278 37F5:0268   614: #F2 = CALL1 exp(#F1:2)
 33F4:4280 37F5:0270   622: per_jitter:1601 = F= per_jitter:1601
 33F4:428A 37F5:027A   632: GOTO .+26 (goto 658)
 33F4:428E 37F5:027E   636: #L0 = CALL1 random(#I1001:23)
 33F4:4296 37F5:0286   644: per_jitter:1601 = #L0:145 F/ #M447A0000:226
 33F4:42A4 37F5:0294   658: jitter@51:1293 = holdtime_diff@51:1231 F* per_jitter:1601
 33F4:42B2 37F5:02A2   672: #F0:1 = min_holdtime@51:1375 F+ jitter@51:1293
 33F4:42C0 37F5:02B0   686: #F1 = CALL1 round(#F0:1)
 33F4:42C8 37F5:02B8   694: Curr_holdtime:879 = F= Curr_holdtime:879
 33F4:42D2 37F5:02C2   704: soa_jitter = CALL1 random(#I4:87)
 33F4:42DA 37F5:02CA   712: #F0:1 = SOA_list:2090[soa_jitter:2088]
 33F4:42E2 37F5:02D2   720: Curr_soa:885 = F= Curr_soa:885
 33F4:42EC 37F5:02DC   730: #L0:145 = TaskStim:2262 == #I1:17
 33F4:42FA 37F5:02EA   744: IFnot (#L0:145) GOTO .+16 (goto 760)
 33F4:4302 37F5:02F2   752: StimTm = CALL1 random(#I4:87)

PROCESS  52: GNG_PGS (Args=15 CtrlBlk=33F4:2554 Size=2312  iOp=2-2313 iCache=62532-64843) DISABLED
 33F4:4012 37F5:0002     0: curr_target@52:899 = #P1:241
 33F4:401C 37F5:000C    10: fixation_size@52:1147 = F= fixation_size@52:1147
 33F4:4026 37F5:0016    20: fixation_color@52:1122 = #P3:247
 33F4:4030 37F5:0020    30: sig_color@52:2059 = #P4:248
 33F4:403A 37F5:002A    40: maskcolor@52:1336 = #P5:249
 33F4:4044 37F5:0034    50: scr_width@52:2025 = F= scr_width@52:2025
 33F4:404E 37F5:003E    60: scr_height@52:2010 = F= scr_height@52:2010
 33F4:4058 37F5:0048    70: pd_left@52:1589 = F= pd_left@52:1589
 33F4:4062 37F5:0052    80: pd_bottom@52:1574 = F= pd_bottom@52:1574
 33F4:406C 37F5:005C    90: pd_size@52:1597 = F= pd_size@52:1597
 33F4:4076 37F5:0066   100: deg2pix_X@52:962 = F= deg2pix_X@52:962
 33F4:4080 37F5:0070   110: deg2pix_Y@52:974 = F= deg2pix_Y@52:974
 33F4:408A 37F5:007A   120: unit2pix_X@52:2339 = F= unit2pix_X@52:2339
 33F4:4094 37F5:0084   130: unit2pix_Y@52:2347 = F= unit2pix_Y@52:2347
 33F4:409E 37F5:008E   140: object_targ@52:1518 = #P15:245
 33F4:40A8 37F5:0098   150: #F0:1 = Size_list:2081[curr_target@52:899]
 33F4:40B0 37F5:00A0   158: Size:2078 = F= Size:2078
 33F4:40BA 37F5:00AA   168: #F0:1 = Angle_list:743[curr_target@52:899]
 33F4:40C2 37F5:00B2   176: Angle:736 = F= Angle:736
 33F4:40CC 37F5:00BC   186: #F0:1 = Eccentricity_list:1012[curr_target@52:899]
 33F4:40D4 37F5:00C4   194: Eccentricity:1005 = F= Eccentricity:1005
 33F4:40DE 37F5:00CE   204: Color:844 = curr_target@52:899 + #I1:17
 33F4:40EC 37F5:00DC   218: #F0 = CALL1 cos(Angle:736)
 33F4:40F4 37F5:00E4   226: stim_ecc_x@52:2130 = #F0:1 F* Eccentricity:1005
 33F4:4102 37F5:00F2   240: #F0 = CALL1 sin(Angle:736)
 33F4:410A 37F5:00FA   248: #F1:2 = #F0:1 F* Eccentricity:1005
 33F4:4118 37F5:0108   262: stim_ecc_y@52:2142 = #F1:2 F* #I-1:7
 33F4:4126 37F5:0116   276: #F0:1 = stim_ecc_x@52:2130 F* deg2pix_X@52:962
 33F4:4134 37F5:0124   290: #L1:146 = stim_ecc_y@52:2142 F* deg2pix_Y@52:974
 33F4:4142 37F5:0132   304: #L2:156 = F= #L2:156
 33F4:414C 37F5:013C   314: #L0 = CALL3 oMove(object_targ@52:1518,#L2:156,#L1:146)
 33F4:4158 37F5:0148   326: #F0:1 = Size:2078 F* deg2pix_X@52:962
 33F4:4166 37F5:0156   340: #L1:146 = Size:2078 F* deg2pix_Y@52:974
 33F4:4174 37F5:0164   354: #L2:156 = F= #L2:156
 33F4:417E 37F5:016E   364: #L0 = CALL4 oSetAttribute(object_targ@52:1518,aSIZE:760,#L2:156,#L1:146)
 33F4:418C 37F5:017C   378: #F0:1 = #I1:17 F* deg2pix_X@52:962
 33F4:419A 37F5:018A   392: #L1:146 = #I1:17 F* deg2pix_Y@52:974
 33F4:41A8 37F5:0198   406: #L2:156 = F= #L2:156
 33F4:41B2 37F5:01A2   416: #L0 = CALL4 oSetAttribute(object_fix:1463,aSIZE:760,#L2:156,#L1:146)
 33F4:41C0 37F5:01B0   430: #F0:1 = scr_height@52:2010 F/ #I2:53
 33F4:41CE 37F5:01BE   444: opposite@52:1553 = #F0:1 F- pd_bottom@52:1574
 33F4:41DC 37F5:01CC   458: #F0:1 = scr_width@52:2025 F/ #I2:53
 33F4:41EA 37F5:01DA   472: adjacent@52:721 = #F0:1 F- pd_left@52:1589
 33F4:41F8 37F5:01E8   486: #F0:1 = opposite@52:1553 F* opposite@52:1553
 33F4:4206 37F5:01F6   500: #F1:2 = adjacent@52:721 F* adjacent@52:721
 33F4:4214 37F5:0204   514: #F2:3 = #F0:1 F+ #F1:2
 33F4:4222 37F5:0212   528: pd_eccentricity = CALL1 sqrt(#F2:3)
 33F4:422A 37F5:021A   536: #F0:1 = opposite@52:1553 F/ adjacent@52:721
 33F4:4238 37F5:0228   550: #F1 = CALL1 atan(#F0:1)
 33F4:4240 37F5:0230   558: pd_angle = CALL1 rad2deg(#F1:2)
 33F4:4248 37F5:0238   566: pd_angle@52:1566 = pd_angle@52:1566 F+ #I180:50
 33F4:4256 37F5:0246   580: #L0 = CALL3 dSendf(#S250:437,fixation_pd@52:1138,fixation_pd@52:1138)
 33F4:4262 37F5:0252   592: #L0 = CALL1 dSendf(#S251:438)
 33F4:426A 37F5:025A   600: #Q1:254 = F= #Q1:254
 33F4:4274 37F5:0264   610: #Q2:260 = F= #Q2:260
 33F4:427E 37F5:026E   620: #Q3:261 = F= #Q3:261
 33F4:4288 37F5:0278   630: #P4:248 = fixation_color@52:1122
 33F4:4292 37F5:0282   640: #P5:249 = fill@52:1065
 33F4:429C 37F5:028C   650: #Q6:264 = F= #Q6:264
 33F4:42A6 37F5:0296   660: #Q7:265 = F= #Q7:265
 33F4:42B0 37F5:02A0   670: SPAWN DRW_SQR:995(with 7 args)
 33F4:42B6 37F5:02A6   676: WAITFORPROCESS DRW_SQR:995
 33F4:42BC 37F5:02AC   682: #Q1:254 = F= #Q1:254
 33F4:42C6 37F5:02B6   692: #Q2:260 = F= #Q2:260
 33F4:42D0 37F5:02C0   702: #Q3:261 = F= #Q3:261
 33F4:42DA 37F5:02CA   712: #P4:248 = #I15:41
 33F4:42E4 37F5:02D4   722: #P5:249 = fill@52:1065
 33F4:42EE 37F5:02DE   732: #Q6:264 = F= #Q6:264
 33F4:42F8 37F5:02E8   742: #Q7:265 = F= #Q7:265
 33F4:4302 37F5:02F2   752: SPAWN DRW_SQR:995(with 7 args)
 33F4:4308 37F5:02F8   758: WAITFORPROCESS DRW_SQR:995
 33F4:430E 37F5:02FE   764: NEXTTICK1
 33F4:4310 37F5:0300   766: #L0 = CALL3 dSendf(#S252:439,fixation@52:1111,fixation@52:1111)
 33F4:431C 37F5:030C   778: #L0 = CALL1 dSendf(#S253:440)
 33F4:4324 37F5:0314   786: #Q1:254 = F= #Q1:254
 33F4:432E 37F5:031E   796: #Q2:260 = F= #Q2:260
 33F4:4338 37F5:0328   806: #Q3:261 = F= #Q3:261
 33F4:4342 37F5:0332   816: #P4:248 = fixation_color@52:1122
 33F4:434C 37F5:033C   826: #P5:249 = fill@52:1065
 33F4:4356 37F5:0346   836: #Q6:264 = F= #Q6:264
 33F4:4360 37F5:0350   846: #Q7:265 = F= #Q7:265
 33F4:436A 37F5:035A   856: SPAWN DRW_SQR:995(with 7 args)
 33F4:4370 37F5:0360   862: WAITFORPROCESS DRW_SQR:995
 33F4:4376 37F5:0366   868: NEXTTICK1
 33F4:4378 37F5:0368   870: #L0 = CALL3 dSendf(#S254:441,fixation_target_pd@52:1154,fixation_target_pd@52:1154)
 33F4:4384 37F5:0374   882: #L0 = CALL1 dSendf(#S255:442)
 33F4:438C 37F5:037C   890: #Q1:254 = F= #Q1:254
 33F4:4396 37F5:0386   900: #Q2:260 = F= #Q2:260
 33F4:43A0 37F5:0390   910: #Q3:261 = F= #Q3:261
 33F4:43AA 37F5:039A   920: #P4:248 = fixation_color@52:1122
 33F4:43B4 37F5:03A4   930: #P5:249 = fill@52:1065
 33F4:43BE 37F5:03AE   940: #Q6:264 = F= #Q6:264
 33F4:43C8 37F5:03B8   950: #Q7:265 = F= #Q7:265
 33F4:43D2 37F5:03C2   960: SPAWN DRW_SQR:995(with 7 args)
 33F4:43D8 37F5:03C8   966: WAITFORPROCESS DRW_SQR:995
 33F4:43DE 37F5:03CE   972: #Q1:254 = F= #Q1:254
 33F4:43E8 37F5:03D8   982: #Q2:260 = F= #Q2:260
 33F4:43F2 37F5:03E2   992: #Q3:261 = F= #Q3:261
 33F4:43FC 37F5:03EC  1002: #P4:248 = Color:844
 33F4:4406 37F5:03F6  1012: #P5:249 = fill@52:1065
 33F4:4410 37F5:0400  1022: #Q6:264 = F= #Q6:264
 33F4:441A 37F5:040A  1032: #Q7:265 = F= #Q7:265
 33F4:4424 37F5:0414  1042: SPAWN DRW_SQR:995(with 7 args)
 33F4:442A 37F5:041A  1048: WAITFORPROCESS DRW_SQR:995
 33F4:4430 37F5:0420  1054: #Q1:254 = F= #Q1:254
 33F4:443A 37F5:042A  1064: #Q2:260 = F= #Q2:260
 33F4:4444 37F5:0434  1074: #Q3:261 = F= #Q3:261
 33F4:444E 37F5:043E  1084: #P4:248 = #I15:41
 33F4:4458 37F5:0448  1094: #P5:249 = fill@52:1065
 33F4:4462 37F5:0452  1104: #Q6:264 = F= #Q6:264
 33F4:446C 37F5:045C  1114: #Q7:265 = F= #Q7:265
 33F4:4476 37F5:0466  1124: SPAWN DRW_SQR:995(with 7 args)
 33F4:447C 37F5:046C  1130: WAITFORPROCESS DRW_SQR:995
 33F4:4482 37F5:0472  1136: NEXTTICK1
 33F4:4484 37F5:0474  1138: #L0 = CALL3 dSendf(#S256:443,signal_pd_T@52:2072,signal_pd_T@52:2072)
 33F4:4490 37F5:0480  1150: #L0 = CALL1 dSendf(#S257:444)
 33F4:4498 37F5:0488  1158: #Q1:254 = F= #Q1:254
 33F4:44A2 37F5:0492  1168: #Q2:260 = F= #Q2:260
 33F4:44AC 37F5:049C  1178: #Q3:261 = F= #Q3:261
 33F4:44B6 37F5:04A6  1188: #P4:248 = sig_color@52:2059
 33F4:44C0 37F5:04B0  1198: #P5:249 = fill@52:1065
 33F4:44CA 37F5:04BA  1208: #Q6:264 = F= #Q6:264
 33F4:44D4 37F5:04C4  1218: #Q7:265 = F= #Q7:265
 33F4:44DE 37F5:04CE  1228: SPAWN DRW_SQR:995(with 7 args)
 33F4:44E4 37F5:04D4  1234: WAITFORPROCESS DRW_SQR:995
 33F4:44EA 37F5:04DA  1240: #Q1:254 = F= #Q1:254
 33F4:44F4 37F5:04E4  1250: #Q2:260 = F= #Q2:260
 33F4:44FE 37F5:04EE  1260: #Q3:261 = F= #Q3:261
 33F4:4508 37F5:04F8  1270: #P4:248 = #I15:41
 33F4:4512 37F5:0502  1280: #P5:249 = fill@52:1065
 33F4:451C 37F5:050C  1290: #Q6:264 = F= #Q6:264
 33F4:4526 37F5:0516  1300: #Q7:265 = F= #Q7:265
 33F4:4530 37F5:0520  1310: SPAWN DRW_SQR:995(with 7 args)
 33F4:4536 37F5:0526  1316: WAITFORPROCESS DRW_SQR:995
 33F4:453C 37F5:052C  1322: #Q1:254 = F= #Q1:254
 33F4:4546 37F5:0536  1332: #Q2:260 = F= #Q2:260
 33F4:4550 37F5:0540  1342: #Q3:261 = F= #Q3:261
 33F4:455A 37F5:054A  1352: #P4:248 = fixation_color@52:1122
 33F4:4564 37F5:0554  1362: #P5:249 = open@52:1545
 33F4:456E 37F5:055E  1372: #Q6:264 = F= #Q6:264
 33F4:4578 37F5:0568  1382: #Q7:265 = F= #Q7:265
 33F4:4582 37F5:0572  1392: SPAWN DRW_SQR:995(with 7 args)
 33F4:4588 37F5:0578  1398: WAITFORPROCESS DRW_SQR:995
 33F4:458E 37F5:057E  1404: #Q1:254 = F= #Q1:254
 33F4:4598 37F5:0588  1414: #Q2:260 = F= #Q2:260
 33F4:45A2 37F5:0592  1424: #Q3:261 = F= #Q3:261
 33F4:45AC 37F5:059C  1434: #P4:248 = maskcolor@52:1336
 33F4:45B6 37F5:05A6  1444: #P5:249 = fill@52:1065
 33F4:45C0 37F5:05B0  1454: #Q6:264 = F= #Q6:264
 33F4:45CA 37F5:05BA  1464: #Q7:265 = F= #Q7:265
 33F4:45D4 37F5:05C4  1474: SPAWN DRW_SQR:995(with 7 args)
 33F4:45DA 37F5:05CA  1480: WAITFORPROCESS DRW_SQR:995
 33F4:45E0 37F5:05D0  1486: NEXTTICK1
 33F4:45E2 37F5:05D2  1488: #L0 = CALL3 dSendf(#S258:445,signal_pd_S@52:2070,signal_pd_S@52:2070)
 33F4:45EE 37F5:05DE  1500: #L0 = CALL1 dSendf(#S259:446)
 33F4:45F6 37F5:05E6  1508: #Q1:254 = F= #Q1:254
 33F4:4600 37F5:05F0  1518: #Q2:260 = F= #Q2:260
 33F4:460A 37F5:05FA  1528: #Q3:261 = F= #Q3:261
 33F4:4614 37F5:0604  1538: #P4:248 = sig_color@52:2059
 33F4:461E 37F5:060E  1548: #P5:249 = fill@52:1065
 33F4:4628 37F5:0618  1558: #Q6:264 = F= #Q6:264
 33F4:4632 37F5:0622  1568: #Q7:265 = F= #Q7:265
 33F4:463C 37F5:062C  1578: SPAWN DRW_SQR:995(with 7 args)
 33F4:4642 37F5:0632  1584: WAITFORPROCESS DRW_SQR:995
 33F4:4648 37F5:0638  1590: #Q1:254 = F= #Q1:254
 33F4:4652 37F5:0642  1600: #Q2:260 = F= #Q2:260
 33F4:465C 37F5:064C  1610: #Q3:261 = F= #Q3:261
 33F4:4666 37F5:0656  1620: #P4:248 = #I15:41
 33F4:4670 37F5:0660  1630: #P5:249 = fill@52:1065
 33F4:467A 37F5:066A  1640: #Q6:264 = F= #Q6:264
 33F4:4684 37F5:0674  1650: #Q7:265 = F= #Q7:265
 33F4:468E 37F5:067E  1660: SPAWN DRW_SQR:995(with 7 args)
 33F4:4694 37F5:0684  1666: WAITFORPROCESS DRW_SQR:995
 33F4:469A 37F5:068A  1672: #Q1:254 = F= #Q1:254
 33F4:46A4 37F5:0694  1682: #Q2:260 = F= #Q2:260
 33F4:46AE 37F5:069E  1692: #Q3:261 = F= #Q3:261
 33F4:46B8 37F5:06A8  1702: #P4:248 = fixation_color@52:1122
 33F4:46C2 37F5:06B2  1712: #P5:249 = open@52:1545
 33F4:46CC 37F5:06BC  1722: #Q6:264 = F= #Q6:264
 33F4:46D6 37F5:06C6  1732: #Q7:265 = F= #Q7:265
 33F4:46E0 37F5:06D0  1742: SPAWN DRW_SQR:995(with 7 args)
 33F4:46E6 37F5:06D6  1748: WAITFORPROCESS DRW_SQR:995
 33F4:46EC 37F5:06DC  1754: NEXTTICK1
 33F4:46EE 37F5:06DE  1756: #L0 = CALL3 dSendf(#S260:448,target@52:2231,target@52:2231)
 33F4:46FA 37F5:06EA  1768: #L0 = CALL1 dSendf(#S261:449)
 33F4:4702 37F5:06F2  1776: #Q1:254 = F= #Q1:254
 33F4:470C 37F5:06FC  1786: #Q2:260 = F= #Q2:260
 33F4:4716 37F5:0706  1796: #Q3:261 = F= #Q3:261
 33F4:4720 37F5:0710  1806: #P4:248 = sig_color@52:2059
 33F4:472A 37F5:071A  1816: #P5:249 = fill@52:1065
 33F4:4734 37F5:0724  1826: #Q6:264 = F= #Q6:264
 33F4:473E 37F5:072E  1836: #Q7:265 = F= #Q7:265
 33F4:4748 37F5:0738  1846: SPAWN DRW_SQR:995(with 7 args)
 33F4:474E 37F5:073E  1852: WAITFORPROCESS DRW_SQR:995
 33F4:4754 37F5:0744  1858: #Q1:254 = F= #Q1:254
 33F4:475E 37F5:074E  1868: #Q2:260 = F= #Q2:260
 33F4:4768 37F5:0758  1878: #Q3:261 = F= #Q3:261
 33F4:4772 37F5:0762  1888: #P4:248 = fixation_color@52:1122
 33F4:477C 37F5:076C  1898: #P5:249 = open@52:1545
 33F4:4786 37F5:0776  1908: #Q6:264 = F= #Q6:264
 33F4:4790 37F5:0780  1918: #Q7:265 = F= #Q7:265
 33F4:479A 37F5:078A  1928: SPAWN DRW_SQR:995(with 7 args)
 33F4:47A0 37F5:0790  1934: WAITFORPROCESS DRW_SQR:995
 33F4:47A6 37F5:0796  1940: #Q1:254 = F= #Q1:254
 33F4:47B0 37F5:07A0  1950: #Q2:260 = F= #Q2:260
 33F4:47BA 37F5:07AA  1960: #Q3:261 = F= #Q3:261
 33F4:47C4 37F5:07B4  1970: #P4:248 = maskcolor@52:1336
 33F4:47CE 37F5:07BE  1980: #P5:249 = fill@52:1065
 33F4:47D8 37F5:07C8  1990: #Q6:264 = F= #Q6:264
 33F4:47E2 37F5:07D2  2000: #Q7:265 = F= #Q7:265
 33F4:47EC 37F5:07DC  2010: SPAWN DRW_SQR:995(with 7 args)
 33F4:47F2 37F5:07E2  2016: WAITFORPROCESS DRW_SQR:995
 33F4:47F8 37F5:07E8  2022: NEXTTICK1
 33F4:47FA 37F5:07EA  2024: #L0 = CALL3 dSendf(#S262:450,atarget@52:761,atarget@52:761)
 33F4:4806 37F5:07F6  2036: #L0 = CALL1 dSendf(#S263:451)
 33F4:480E 37F5:07FE  2044: #Q1:254 = F= #Q1:254
 33F4:4818 37F5:0808  2054: #Q2:260 = F= #Q2:260
 33F4:4822 37F5:0812  2064: #Q3:261 = F= #Q3:261
 33F4:482C 37F5:081C  2074: #P4:248 = sig_color@52:2059
 33F4:4836 37F5:0826  2084: #P5:249 = fill@52:1065
 33F4:4840 37F5:0830  2094: #Q6:264 = F= #Q6:264
 33F4:484A 37F5:083A  2104: #Q7:265 = F= #Q7:265
 33F4:4854 37F5:0844  2114: SPAWN DRW_SQR:995(with 7 args)
 33F4:485A 37F5:084A  2120: WAITFORPROCESS DRW_SQR:995
 33F4:4860 37F5:0850  2126: #Q1:254 = F= #Q1:254
 33F4:486A 37F5:085A  2136: #Q2:260 = F= #Q2:260
 33F4:4874 37F5:0864  2146: #Q3:261 = F= #Q3:261
 33F4:487E 37F5:086E  2156: #P4:248 = fixation_color@52:1122
 33F4:4888 37F5:0878  2166: #P5:249 = open@52:1545
 33F4:4892 37F5:0882  2176: #Q6:264 = F= #Q6:264
 33F4:489C 37F5:088C  2186: #Q7:265 = F= #Q7:265
 33F4:48A6 37F5:0896  2196: SPAWN DRW_SQR:995(with 7 args)
 33F4:48AC 37F5:089C  2202: WAITFORPROCESS DRW_SQR:995
 33F4:48B2 37F5:08A2  2208: #Q1:254 = F= #Q1:254
 33F4:48BC 37F5:08AC  2218: #Q2:260 = F= #Q2:260
 33F4:48C6 37F5:08B6  2228: #Q3:261 = F= #Q3:261
 33F4:48D0 37F5:08C0  2238: #P4:248 = Color:844
 33F4:48DA 37F5:08CA  2248: #P5:249 = fill@52:1065
 33F4:48E4 37F5:08D4  2258: #Q6:264 = F= #Q6:264
 33F4:48EE 37F5:08DE  2268: #Q7:265 = F= #Q7:265
 33F4:48F8 37F5:08E8  2278: SPAWN DRW_SQR:995(with 7 args)
 33F4:48FE 37F5:08EE  2284: WAITFORPROCESS DRW_SQR:995
 33F4:4904 37F5:08F4  2290: NEXTTICK1
 33F4:4906 37F5:08F6  2292: #L0 = CALL3 dSendf(#S264:452,blank@52:784,blank@52:784)
 33F4:4912 37F5:0902  2304: #L0 = CALL1 dSendf(#S265:453)

PROCESS  53: SETG_TRL (Args=7 CtrlBlk=33F4:2580 Size=1014  iOp=2-1015 iCache=64844-65857) DISABLED
 33F4:4012 37F5:0002     0: n_targ_pos@53:1411 = #P1:241
 33F4:401C 37F5:000C    10: min_holdtime@53:1376 = #P2:246
 33F4:4026 37F5:0016    20: max_holdtime@53:1341 = #P3:247
 33F4:4030 37F5:0020    30: expo_jitter@53:1025 = #P4:248
 33F4:403A 37F5:002A    40: min_soa@53:1383 = #P5:249
 33F4:4044 37F5:0034    50: max_soa@53:1361 = #P6:250
 33F4:404E 37F5:003E    60: expo_jitter_soa@53:1030 = #P7:251
 33F4:4058 37F5:0048    70: Curr_target = CALL1 random(n_targ_pos@53:1411)
 33F4:4060 37F5:0050    78: #L0 = CALL1 random(#I9999:144)
 33F4:4068 37F5:0058    86: #F0:1 = #M3F800000:167 F+ #L0:145
 33F4:4076 37F5:0066   100: decide_trl_type@53:950 = #F0:1 F/ #M42C80000:201
 33F4:4084 37F5:0074   114: #L0:145 = decide_trl_type@53:950 F<= Go_weight:1201
 33F4:4092 37F5:0082   128: IFnot (#L0:145) GOTO .+22 (goto 150)
 33F4:409A 37F5:008A   136: Trl_type:2318 = Go_trl@53:1198
 33F4:40A4 37F5:0094   146: GOTO .+112 (goto 258)
 33F4:40A8 37F5:0098   150: #L0:145 = decide_trl_type@53:950 F> Go_weight:1201
 33F4:40B6 37F5:00A6   164: #F0:1 = Go_weight:1201 F+ Stop_weight:2171
 33F4:40C4 37F5:00B4   178: #L1:146 = decide_trl_type@53:950 F<= #F0:1
 33F4:40D2 37F5:00C2   192: #L2:156 = #L0:145 && #L1:146
 33F4:40E0 37F5:00D0   206: IFnot (#L2:156) GOTO .+32 (goto 238)
 33F4:40E8 37F5:00D8   214: Trl_type:2318 = Stop_trl@53:2168
 33F4:40F2 37F5:00E2   224: Sig_color:2056 = stop_sig_color@53:2156
 33F4:40FC 37F5:00EC   234: GOTO .+24 (goto 258)
 33F4:4100 37F5:00F0   238: Trl_type:2318 = Ignore_trl@53:1260
 33F4:410A 37F5:00FA   248: Sig_color:2056 = ignore_sig_color@53:1251
 33F4:4114 37F5:0104   258: #P1:241 = Curr_target:894
 33F4:411E 37F5:010E   268: #Q2:260 = F= #Q2:260
 33F4:4128 37F5:0118   278: #P3:247 = fixation_color@53:1123
 33F4:4132 37F5:0122   288: #P4:248 = Sig_color:2056
 33F4:413C 37F5:012C   298: #P5:249 = maskcolor@53:1337
 33F4:4146 37F5:0136   308: #Q6:264 = F= #Q6:264
 33F4:4150 37F5:0140   318: #Q7:265 = F= #Q7:265
 33F4:415A 37F5:014A   328: #Q8:266 = F= #Q8:266
 33F4:4164 37F5:0154   338: #Q9:267 = F= #Q9:267
 33F4:416E 37F5:015E   348: #Q10:255 = F= #Q10:255
 33F4:4178 37F5:0168   358: #Q11:256 = F= #Q11:256
 33F4:4182 37F5:0172   368: #Q12:257 = F= #Q12:257
 33F4:418C 37F5:017C   378: #Q13:258 = F= #Q13:258
 33F4:4196 37F5:0186   388: #Q14:259 = F= #Q14:259
 33F4:41A0 37F5:0190   398: #P15:245 = object_targ:1513
 33F4:41AA 37F5:019A   408: SPAWN GNG_PGS:1183(with 15 args)
 33F4:41B0 37F5:01A0   414: WAITFORPROCESS GNG_PGS:1183
 33F4:41B6 37F5:01A6   420: #P1:241 = Curr_target:894
 33F4:41C0 37F5:01B0   430: #Q2:260 = F= #Q2:260
 33F4:41CA 37F5:01BA   440: #Q3:261 = F= #Q3:261
 33F4:41D4 37F5:01C4   450: #P4:248 = object_fixwin:1469
 33F4:41DE 37F5:01CE   460: #P5:249 = object_targwin:1523
 33F4:41E8 37F5:01D8   470: #Q6:264 = F= #Q6:264
 33F4:41F2 37F5:01E2   480: #Q7:265 = F= #Q7:265
 33F4:41FC 37F5:01EC   490: SPAWN WINDOWS:2366(with 7 args)
 33F4:4202 37F5:01F2   496: WAITFORPROCESS WINDOWS:2366
 33F4:4208 37F5:01F8   502: #L0:145 = max_holdtime@53:1341 - min_holdtime@53:1376
 33F4:4216 37F5:0206   516: holdtime_diff@53:1232 = F= holdtime_diff@53:1232
 33F4:4220 37F5:0210   526: IFnot (expo_jitter@53:1025) GOTO .+70 (goto 596)
 33F4:4228 37F5:0218   534: #L0 = CALL1 random(#I1001:23)
 33F4:4230 37F5:0220   542: decide_jitter@53:942 = #L0:145 F/ #M447A0000:226
 33F4:423E 37F5:022E   556: #F0:1 = decide_jitter@53:942 F/ #M3E800000:165
 33F4:424C 37F5:023C   570: #F1:2 = #MBF800000:236 F* #F0:1
 33F4:425A 37F5:024A   584: per_jitter = CALL1 exp(#F1:2)
 33F4:4262 37F5:0252   592: GOTO .+26 (goto 618)
 33F4:4266 37F5:0256   596: #L0 = CALL1 random(#I1001:23)
 33F4:426E 37F5:025E   604: per_jitter@53:1603 = #L0:145 F/ #M447A0000:226
 33F4:427C 37F5:026C   618: jitter@53:1294 = holdtime_diff@53:1232 F* per_jitter@53:1603
 33F4:428A 37F5:027A   632: #F0:1 = min_holdtime@53:1376 F+ jitter@53:1294
 33F4:4298 37F5:0288   646: #F1 = CALL1 round(#F0:1)
 33F4:42A0 37F5:0290   654: Curr_holdtime:879 = F= Curr_holdtime:879
 33F4:42AA 37F5:029A   664: #L0:145 = max_soa@53:1361 - min_soa@53:1383
 33F4:42B8 37F5:02A8   678: soa_diff@53:2086 = F= soa_diff@53:2086
 33F4:42C2 37F5:02B2   688: IFnot (expo_jitter_soa@53:1030) GOTO .+240 (goto 928)
 33F4:42CA 37F5:02BA   696: #L0 = CALL1 random(#I1001:23)
 33F4:42D2 37F5:02C2   704: decide_jitter@53:942 = #L0:145 F/ #M447A0000:226
 33F4:42E0 37F5:02D0   718: #F0 = CALL1 ln(decide_jitter@53:942)
 33F4:42E8 37F5:02D8   726: #F1:2 = #MC3A6AA3D:240 F* #F0:1
 33F4:42F6 37F5:02E6   740: #F2:3 = #F1:2 F+ min_soa@53:1383
 33F4:4304 37F5:02F4   754: #F3:4 = #F2:3 F/ #I100:19
 33F4:4312 37F5:0302   768: #F4 = CALL1 floor(#F3:4)
 33F4:431A 37F5:030A   776: Curr_soa:885 = #F4:5 F* #I100:19
 33F4:4328 37F5:0318   790: #L0:145 = max_soa@53:1361 + #I1:17
 33F4:4336 37F5:0326   804: #L1:146 = Curr_soa:885 > #L0:145
 33F4:4344 37F5:0334   818: IFnot (#L1:146) GOTO .+106 (goto 924)
 33F4:434C 37F5:033C   826: #L2 = CALL1 random(#I1001:23)
 33F4:4354 37F5:0344   834: decide_jitter@53:942 = #L2:156 F/ #M447A0000:226
 33F4:4362 37F5:0352   848: #F0 = CALL1 ln(decide_jitter@53:942)
 33F4:436A 37F5:035A   856: #F1:2 = #MC3A6AA3D:240 F* #F0:1
 33F4:4378 37F5:0368   870: #F2:3 = #F1:2 F+ min_soa@53:1383
 33F4:4386 37F5:0376   884: #F3:4 = #F2:3 F/ #I100:19
 33F4:4394 37F5:0384   898: #F4 = CALL1 floor(#F3:4)
 33F4:439C 37F5:038C   906: Curr_soa:885 = #F4:5 F* #I100:19
 33F4:43AA 37F5:039A   920: GOTO .-130 (goto 790)
 33F4:43AE 37F5:039E   924: GOTO .+90 (goto 1014)
 33F4:43B2 37F5:03A2   928: #L0 = CALL1 random(#I1099:26)
 33F4:43BA 37F5:03AA   936: per_jitter@53:1603 = #L0:145 F/ #M447A0000:226
 33F4:43C8 37F5:03B8   950: jitter@53:1294 = soa_diff@53:2086 F* per_jitter@53:1603
 33F4:43D6 37F5:03C6   964: #F0:1 = min_soa@53:1383 F+ jitter@53:1294
 33F4:43E4 37F5:03D4   978: #F1:2 = #F0:1 F/ #I100:19
 33F4:43F2 37F5:03E2   992: #F2 = CALL1 floor(#F1:2)
 33F4:43FA 37F5:03EA  1000: Curr_soa:885 = #F2:3 F* #I100:19

PROCESS  54: DEL_PGS (Args=13 CtrlBlk=33F4:25AC Size=1780  iOp=2-1781 iCache=65858-67637) DISABLED
 33F4:4012 37F5:0002     0: curr_target@54:900 = #P1:241
 33F4:401C 37F5:000C    10: fixation_size@54:1148 = F= fixation_size@54:1148
 33F4:4026 37F5:0016    20: fixation_color@54:1124 = #P3:247
 33F4:4030 37F5:0020    30: scr_width@54:2026 = F= scr_width@54:2026
 33F4:403A 37F5:002A    40: scr_height@54:2011 = F= scr_height@54:2011
 33F4:4044 37F5:0034    50: pd_left@54:1590 = F= pd_left@54:1590
 33F4:404E 37F5:003E    60: pd_bottom@54:1575 = F= pd_bottom@54:1575
 33F4:4058 37F5:0048    70: pd_size@54:1598 = F= pd_size@54:1598
 33F4:4062 37F5:0052    80: deg2pix_X@54:963 = F= deg2pix_X@54:963
 33F4:406C 37F5:005C    90: deg2pix_Y@54:975 = F= deg2pix_Y@54:975
 33F4:4076 37F5:0066   100: unit2pix_X@54:2340 = F= unit2pix_X@54:2340
 33F4:4080 37F5:0070   110: unit2pix_Y@54:2348 = F= unit2pix_Y@54:2348
 33F4:408A 37F5:007A   120: object_targ@54:1519 = #P13:243
 33F4:4094 37F5:0084   130: #F0:1 = Size_list:2081[curr_target@54:900]
 33F4:409C 37F5:008C   138: Size:2078 = F= Size:2078
 33F4:40A6 37F5:0096   148: #F0:1 = Angle_list:743[curr_target@54:900]
 33F4:40AE 37F5:009E   156: Angle:736 = F= Angle:736
 33F4:40B8 37F5:00A8   166: #F0:1 = Eccentricity_list:1012[curr_target@54:900]
 33F4:40C0 37F5:00B0   174: Eccentricity:1005 = F= Eccentricity:1005
 33F4:40CA 37F5:00BA   184: Color:844 = curr_target@54:900 + #I1:17
 33F4:40D8 37F5:00C8   198: #F0 = CALL1 cos(Angle:736)
 33F4:40E0 37F5:00D0   206: stim_ecc_x@54:2131 = #F0:1 F* Eccentricity:1005
 33F4:40EE 37F5:00DE   220: #F0 = CALL1 sin(Angle:736)
 33F4:40F6 37F5:00E6   228: #F1:2 = #F0:1 F* Eccentricity:1005
 33F4:4104 37F5:00F4   242: stim_ecc_y@54:2143 = #F1:2 F* #I-1:7
 33F4:4112 37F5:0102   256: #F0:1 = stim_ecc_x@54:2131 F* deg2pix_X@54:963
 33F4:4120 37F5:0110   270: #L1:146 = stim_ecc_y@54:2143 F* deg2pix_Y@54:975
 33F4:412E 37F5:011E   284: #L2:156 = F= #L2:156
 33F4:4138 37F5:0128   294: #L0 = CALL3 oMove(object_targ@54:1519,#L2:156,#L1:146)
 33F4:4144 37F5:0134   306: #F0:1 = Size:2078 F* deg2pix_X@54:963
 33F4:4152 37F5:0142   320: #L1:146 = Size:2078 F* deg2pix_Y@54:975
 33F4:4160 37F5:0150   334: #L2:156 = F= #L2:156
 33F4:416A 37F5:015A   344: #L0 = CALL4 oSetAttribute(object_targ@54:1519,aSIZE:760,#L2:156,#L1:146)
 33F4:4178 37F5:0168   358: #F0:1 = #I1:17 F* deg2pix_X@54:963
 33F4:4186 37F5:0176   372: #L1:146 = #I1:17 F* deg2pix_Y@54:975
 33F4:4194 37F5:0184   386: #L2:156 = F= #L2:156
 33F4:419E 37F5:018E   396: #L0 = CALL4 oSetAttribute(object_fix:1463,aSIZE:760,#L2:156,#L1:146)
 33F4:41AC 37F5:019C   410: #F0:1 = scr_height@54:2011 F/ #I2:53
 33F4:41BA 37F5:01AA   424: opposite@54:1554 = #F0:1 F- pd_bottom@54:1575
 33F4:41C8 37F5:01B8   438: #F0:1 = scr_width@54:2026 F/ #I2:53
 33F4:41D6 37F5:01C6   452: adjacent@54:722 = #F0:1 F- pd_left@54:1590
 33F4:41E4 37F5:01D4   466: #F0:1 = opposite@54:1554 F* opposite@54:1554
 33F4:41F2 37F5:01E2   480: #F1:2 = adjacent@54:722 F* adjacent@54:722
 33F4:4200 37F5:01F0   494: #F2:3 = #F0:1 F+ #F1:2
 33F4:420E 37F5:01FE   508: pd_eccentricity = CALL1 sqrt(#F2:3)
 33F4:4216 37F5:0206   516: #F0:1 = opposite@54:1554 F/ adjacent@54:722
 33F4:4224 37F5:0214   530: #F1 = CALL1 atan(#F0:1)
 33F4:422C 37F5:021C   538: pd_angle = CALL1 rad2deg(#F1:2)
 33F4:4234 37F5:0224   546: pd_angle@54:1567 = pd_angle@54:1567 F+ #I180:50
 33F4:4242 37F5:0232   560: #L0 = CALL3 dSendf(#S266:454,fixation_pd@54:1139,fixation_pd@54:1139)
 33F4:424E 37F5:023E   572: #L0 = CALL1 dSendf(#S267:455)
 33F4:4256 37F5:0246   580: #Q1:254 = F= #Q1:254
 33F4:4260 37F5:0250   590: #Q2:260 = F= #Q2:260
 33F4:426A 37F5:025A   600: #Q3:261 = F= #Q3:261
 33F4:4274 37F5:0264   610: #P4:248 = fixation_color@54:1124
 33F4:427E 37F5:026E   620: #P5:249 = fill@54:1066
 33F4:4288 37F5:0278   630: #Q6:264 = F= #Q6:264
 33F4:4292 37F5:0282   640: #Q7:265 = F= #Q7:265
 33F4:429C 37F5:028C   650: SPAWN DRW_SQR:995(with 7 args)
 33F4:42A2 37F5:0292   656: WAITFORPROCESS DRW_SQR:995
 33F4:42A8 37F5:0298   662: #Q1:254 = F= #Q1:254
 33F4:42B2 37F5:02A2   672: #Q2:260 = F= #Q2:260
 33F4:42BC 37F5:02AC   682: #Q3:261 = F= #Q3:261
 33F4:42C6 37F5:02B6   692: #P4:248 = #I15:41
 33F4:42D0 37F5:02C0   702: #P5:249 = fill@54:1066
 33F4:42DA 37F5:02CA   712: #Q6:264 = F= #Q6:264
 33F4:42E4 37F5:02D4   722: #Q7:265 = F= #Q7:265
 33F4:42EE 37F5:02DE   732: SPAWN DRW_SQR:995(with 7 args)
 33F4:42F4 37F5:02E4   738: WAITFORPROCESS DRW_SQR:995
 33F4:42FA 37F5:02EA   744: NEXTTICK1
 33F4:42FC 37F5:02EC   746: #L0 = CALL3 dSendf(#S268:456,fixation@54:1112,fixation@54:1112)
 33F4:4308 37F5:02F8   758: #L0 = CALL1 dSendf(#S269:457)
 33F4:4310 37F5:0300   766: #Q1:254 = F= #Q1:254
 33F4:431A 37F5:030A   776: #Q2:260 = F= #Q2:260
 33F4:4324 37F5:0314   786: #Q3:261 = F= #Q3:261
 33F4:432E 37F5:031E   796: #P4:248 = fixation_color@54:1124
 33F4:4338 37F5:0328   806: #P5:249 = fill@54:1066
 33F4:4342 37F5:0332   816: #Q6:264 = F= #Q6:264
 33F4:434C 37F5:033C   826: #Q7:265 = F= #Q7:265
 33F4:4356 37F5:0346   836: SPAWN DRW_SQR:995(with 7 args)
 33F4:435C 37F5:034C   842: WAITFORPROCESS DRW_SQR:995
 33F4:4362 37F5:0352   848: NEXTTICK1
 33F4:4364 37F5:0354   850: #L0 = CALL3 dSendf(#S270:459,fixation_target_pd@54:1155,fixation_target_pd@54:1155)
 33F4:4370 37F5:0360   862: #L0 = CALL1 dSendf(#S271:460)
 33F4:4378 37F5:0368   870: #Q1:254 = F= #Q1:254
 33F4:4382 37F5:0372   880: #Q2:260 = F= #Q2:260
 33F4:438C 37F5:037C   890: #Q3:261 = F= #Q3:261
 33F4:4396 37F5:0386   900: #P4:248 = fixation_color@54:1124
 33F4:43A0 37F5:0390   910: #P5:249 = fill@54:1066
 33F4:43AA 37F5:039A   920: #Q6:264 = F= #Q6:264
 33F4:43B4 37F5:03A4   930: #Q7:265 = F= #Q7:265
 33F4:43BE 37F5:03AE   940: SPAWN DRW_SQR:995(with 7 args)
 33F4:43C4 37F5:03B4   946: WAITFORPROCESS DRW_SQR:995
 33F4:43CA 37F5:03BA   952: #Q1:254 = F= #Q1:254
 33F4:43D4 37F5:03C4   962: #Q2:260 = F= #Q2:260
 33F4:43DE 37F5:03CE   972: #Q3:261 = F= #Q3:261
 33F4:43E8 37F5:03D8   982: #P4:248 = Color:844
 33F4:43F2 37F5:03E2   992: #P5:249 = fill@54:1066
 33F4:43FC 37F5:03EC  1002: #Q6:264 = F= #Q6:264
 33F4:4406 37F5:03F6  1012: #Q7:265 = F= #Q7:265
 33F4:4410 37F5:0400  1022: SPAWN DRW_SQR:995(with 7 args)
 33F4:4416 37F5:0406  1028: WAITFORPROCESS DRW_SQR:995
 33F4:441C 37F5:040C  1034: #Q1:254 = F= #Q1:254
 33F4:4426 37F5:0416  1044: #Q2:260 = F= #Q2:260
 33F4:4430 37F5:0420  1054: #Q3:261 = F= #Q3:261
 33F4:443A 37F5:042A  1064: #P4:248 = #I15:41
 33F4:4444 37F5:0434  1074: #P5:249 = fill@54:1066
 33F4:444E 37F5:043E  1084: #Q6:264 = F= #Q6:264
 33F4:4458 37F5:0448  1094: #Q7:265 = F= #Q7:265
 33F4:4462 37F5:0452  1104: SPAWN DRW_SQR:995(with 7 args)
 33F4:4468 37F5:0458  1110: WAITFORPROCESS DRW_SQR:995
 33F4:446E 37F5:045E  1116: NEXTTICK1
 33F4:4470 37F5:0460  1118: #L0 = CALL3 dSendf(#S272:461,fixation_target@54:1152,fixation_target@54:1152)
 33F4:447C 37F5:046C  1130: #L0 = CALL1 dSendf(#S273:462)
 33F4:4484 37F5:0474  1138: #Q1:254 = F= #Q1:254
 33F4:448E 37F5:047E  1148: #Q2:260 = F= #Q2:260
 33F4:4498 37F5:0488  1158: #Q3:261 = F= #Q3:261
 33F4:44A2 37F5:0492  1168: #P4:248 = fixation_color@54:1124
 33F4:44AC 37F5:049C  1178: #P5:249 = fill@54:1066
 33F4:44B6 37F5:04A6  1188: #Q6:264 = F= #Q6:264
 33F4:44C0 37F5:04B0  1198: #Q7:265 = F= #Q7:265
 33F4:44CA 37F5:04BA  1208: SPAWN DRW_SQR:995(with 7 args)
 33F4:44D0 37F5:04C0  1214: WAITFORPROCESS DRW_SQR:995
 33F4:44D6 37F5:04C6  1220: #Q1:254 = F= #Q1:254
 33F4:44E0 37F5:04D0  1230: #Q2:260 = F= #Q2:260
 33F4:44EA 37F5:04DA  1240: #Q3:261 = F= #Q3:261
 33F4:44F4 37F5:04E4  1250: #P4:248 = Color:844
 33F4:44FE 37F5:04EE  1260: #P5:249 = fill@54:1066
 33F4:4508 37F5:04F8  1270: #Q6:264 = F= #Q6:264
 33F4:4512 37F5:0502  1280: #Q7:265 = F= #Q7:265
 33F4:451C 37F5:050C  1290: SPAWN DRW_SQR:995(with 7 args)
 33F4:4522 37F5:0512  1296: WAITFORPROCESS DRW_SQR:995
 33F4:4528 37F5:0518  1302: NEXTTICK1
 33F4:452A 37F5:051A  1304: #L0 = CALL3 dSendf(#S274:463,target_pd@54:2252,target_pd@54:2252)
 33F4:4536 37F5:0526  1316: #L0 = CALL1 dSendf(#S275:464)
 33F4:453E 37F5:052E  1324: #Q1:254 = F= #Q1:254
 33F4:4548 37F5:0538  1334: #Q2:260 = F= #Q2:260
 33F4:4552 37F5:0542  1344: #Q3:261 = F= #Q3:261
 33F4:455C 37F5:054C  1354: #P4:248 = fixation_color@54:1124
 33F4:4566 37F5:0556  1364: #P5:249 = open@54:1546
 33F4:4570 37F5:0560  1374: #Q6:264 = F= #Q6:264
 33F4:457A 37F5:056A  1384: #Q7:265 = F= #Q7:265
 33F4:4584 37F5:0574  1394: SPAWN DRW_SQR:995(with 7 args)
 33F4:458A 37F5:057A  1400: WAITFORPROCESS DRW_SQR:995
 33F4:4590 37F5:0580  1406: #Q1:254 = F= #Q1:254
 33F4:459A 37F5:058A  1416: #Q2:260 = F= #Q2:260
 33F4:45A4 37F5:0594  1426: #Q3:261 = F= #Q3:261
 33F4:45AE 37F5:059E  1436: #P4:248 = Color:844
 33F4:45B8 37F5:05A8  1446: #P5:249 = fill@54:1066
 33F4:45C2 37F5:05B2  1456: #Q6:264 = F= #Q6:264
 33F4:45CC 37F5:05BC  1466: #Q7:265 = F= #Q7:265
 33F4:45D6 37F5:05C6  1476: SPAWN DRW_SQR:995(with 7 args)
 33F4:45DC 37F5:05CC  1482: WAITFORPROCESS DRW_SQR:995
 33F4:45E2 37F5:05D2  1488: #Q1:254 = F= #Q1:254
 33F4:45EC 37F5:05DC  1498: #Q2:260 = F= #Q2:260
 33F4:45F6 37F5:05E6  1508: #Q3:261 = F= #Q3:261
 33F4:4600 37F5:05F0  1518: #P4:248 = #I15:41
 33F4:460A 37F5:05FA  1528: #P5:249 = fill@54:1066
 33F4:4614 37F5:0604  1538: #Q6:264 = F= #Q6:264
 33F4:461E 37F5:060E  1548: #Q7:265 = F= #Q7:265
 33F4:4628 37F5:0618  1558: SPAWN DRW_SQR:995(with 7 args)
 33F4:462E 37F5:061E  1564: WAITFORPROCESS DRW_SQR:995
 33F4:4634 37F5:0624  1570: NEXTTICK1
 33F4:4636 37F5:0626  1572: #L0 = CALL3 dSendf(#S276:465,target@54:2232,target@54:2232)
 33F4:4642 37F5:0632  1584: #L0 = CALL1 dSendf(#S277:466)
 33F4:464A 37F5:063A  1592: #Q1:254 = F= #Q1:254
 33F4:4654 37F5:0644  1602: #Q2:260 = F= #Q2:260
 33F4:465E 37F5:064E  1612: #Q3:261 = F= #Q3:261
 33F4:4668 37F5:0658  1622: #P4:248 = fixation_color@54:1124
 33F4:4672 37F5:0662  1632: #P5:249 = open@54:1546
 33F4:467C 37F5:066C  1642: #Q6:264 = F= #Q6:264
 33F4:4686 37F5:0676  1652: #Q7:265 = F= #Q7:265
 33F4:4690 37F5:0680  1662: SPAWN DRW_SQR:995(with 7 args)
 33F4:4696 37F5:0686  1668: WAITFORPROCESS DRW_SQR:995
 33F4:469C 37F5:068C  1674: #Q1:254 = F= #Q1:254
 33F4:46A6 37F5:0696  1684: #Q2:260 = F= #Q2:260
 33F4:46B0 37F5:06A0  1694: #Q3:261 = F= #Q3:261
 33F4:46BA 37F5:06AA  1704: #P4:248 = Color:844
 33F4:46C4 37F5:06B4  1714: #P5:249 = fill@54:1066
 33F4:46CE 37F5:06BE  1724: #Q6:264 = F= #Q6:264
 33F4:46D8 37F5:06C8  1734: #Q7:265 = F= #Q7:265
 33F4:46E2 37F5:06D2  1744: SPAWN DRW_SQR:995(with 7 args)
 33F4:46E8 37F5:06D8  1750: WAITFORPROCESS DRW_SQR:995
 33F4:46EE 37F5:06DE  1756: NEXTTICK1
 33F4:46F0 37F5:06E0  1758: #L0 = CALL3 dSendf(#S278:467,blank@54:785,blank@54:785)
 33F4:46FC 37F5:06EC  1770: #L0 = CALL1 dSendf(#S279:468)
 33F4:4704 37F5:06F4  1778: NEXTTICK1

PROCESS  55: SETD_TRL (Args=7 CtrlBlk=33F4:25D8 Size=510  iOp=2-511 iCache=67638-68147) DISABLED
 33F4:4012 37F5:0002     0: n_targ_pos@55:1412 = #P1:241
 33F4:401C 37F5:000C    10: min_holdtime@55:1377 = #P2:246
 33F4:4026 37F5:0016    20: max_holdtime@55:1342 = #P3:247
 33F4:4030 37F5:0020    30: expo_jitter@55:1026 = #P4:248
 33F4:403A 37F5:002A    40: min_soa@55:1384 = #P5:249
 33F4:4044 37F5:0034    50: max_soa@55:1362 = #P6:250
 33F4:404E 37F5:003E    60: expo_jitter_soa@55:1031 = #P7:251
 33F4:4058 37F5:0048    70: Curr_target = CALL1 random(n_targ_pos@55:1412)
 33F4:4060 37F5:0050    78: #P1:241 = Curr_target:894
 33F4:406A 37F5:005A    88: #Q2:260 = F= #Q2:260
 33F4:4074 37F5:0064    98: #P3:247 = fixation_color@55:1125
 33F4:407E 37F5:006E   108: #Q4:262 = F= #Q4:262
 33F4:4088 37F5:0078   118: #Q5:263 = F= #Q5:263
 33F4:4092 37F5:0082   128: #Q6:264 = F= #Q6:264
 33F4:409C 37F5:008C   138: #Q7:265 = F= #Q7:265
 33F4:40A6 37F5:0096   148: #Q8:266 = F= #Q8:266
 33F4:40B0 37F5:00A0   158: #Q9:267 = F= #Q9:267
 33F4:40BA 37F5:00AA   168: #Q10:255 = F= #Q10:255
 33F4:40C4 37F5:00B4   178: #Q11:256 = F= #Q11:256
 33F4:40CE 37F5:00BE   188: #Q12:257 = F= #Q12:257
 33F4:40D8 37F5:00C8   198: #P13:243 = object_targ:1513
 33F4:40E2 37F5:00D2   208: SPAWN DEL_PGS:980(with 13 args)
 33F4:40E8 37F5:00D8   214: WAITFORPROCESS DEL_PGS:980
 33F4:40EE 37F5:00DE   220: #P1:241 = Curr_target:894
 33F4:40F8 37F5:00E8   230: #Q2:260 = F= #Q2:260
 33F4:4102 37F5:00F2   240: #Q3:261 = F= #Q3:261
 33F4:410C 37F5:00FC   250: #P4:248 = object_fixwin:1469
 33F4:4116 37F5:0106   260: #P5:249 = object_targwin:1523
 33F4:4120 37F5:0110   270: #Q6:264 = F= #Q6:264
 33F4:412A 37F5:011A   280: #Q7:265 = F= #Q7:265
 33F4:4134 37F5:0124   290: SPAWN WINDOWS:2366(with 7 args)
 33F4:413A 37F5:012A   296: WAITFORPROCESS WINDOWS:2366
 33F4:4140 37F5:0130   302: #L0:145 = max_holdtime@55:1342 - min_holdtime@55:1377
 33F4:414E 37F5:013E   316: holdtime_diff@55:1233 = F= holdtime_diff@55:1233
 33F4:4158 37F5:0148   326: IFnot (expo_jitter@55:1026) GOTO .+70 (goto 396)
 33F4:4160 37F5:0150   334: #L0 = CALL1 random(#I1001:23)
 33F4:4168 37F5:0158   342: decide_jitter@55:943 = #L0:145 F/ #M447A0000:226
 33F4:4176 37F5:0166   356: #F0:1 = decide_jitter@55:943 F/ #M3E800000:165
 33F4:4184 37F5:0174   370: #F1:2 = #MBF800000:236 F* #F0:1
 33F4:4192 37F5:0182   384: per_jitter = CALL1 exp(#F1:2)
 33F4:419A 37F5:018A   392: GOTO .+26 (goto 418)
 33F4:419E 37F5:018E   396: #L0 = CALL1 random(#I1001:23)
 33F4:41A6 37F5:0196   404: per_jitter@55:1604 = #L0:145 F/ #M447A0000:226
 33F4:41B4 37F5:01A4   418: jitter@55:1295 = holdtime_diff@55:1233 F* per_jitter@55:1604
 33F4:41C2 37F5:01B2   432: #F0:1 = min_holdtime@55:1377 F+ jitter@55:1295
 33F4:41D0 37F5:01C0   446: #F1 = CALL1 round(#F0:1)
 33F4:41D8 37F5:01C8   454: Curr_holdtime:879 = F= Curr_holdtime:879
 33F4:41E2 37F5:01D2   464: #L0 = CALL1 random(#I5:111)
 33F4:41EA 37F5:01DA   472: per_jitter@55:1604 = F= per_jitter@55:1604
 33F4:41F4 37F5:01E4   482: #L0:145 = F= #L0:145
 33F4:41FE 37F5:01EE   492: #F0:1 = SOA_list:2090[#L0:145]
 33F4:4206 37F5:01F6   500: Curr_soa:885 = F= Curr_soa:885

PROCESS  56: TSCH_PGS (Args=14 CtrlBlk=33F4:2604 Size=7982  iOp=2-7983 iCache=68148-76129) DISABLED
 33F4:4012 37F5:0002     0: curr_target@56:901 = #P1:241
 33F4:401C 37F5:000C    10: fixation_size@56:1149 = F= fixation_size@56:1149
 33F4:4026 37F5:0016    20: fixation_color@56:1126 = #P3:247
 33F4:4030 37F5:0020    30: sig_color@56:2060 = #P4:248
 33F4:403A 37F5:002A    40: scr_width@56:2027 = F= scr_width@56:2027
 33F4:4044 37F5:0034    50: scr_height@56:2012 = F= scr_height@56:2012
 33F4:404E 37F5:003E    60: pd_left@56:1591 = F= pd_left@56:1591
 33F4:4058 37F5:0048    70: pd_bottom@56:1576 = F= pd_bottom@56:1576
 33F4:4062 37F5:0052    80: pd_size@56:1599 = F= pd_size@56:1599
 33F4:406C 37F5:005C    90: deg2pix_X@56:964 = F= deg2pix_X@56:964
 33F4:4076 37F5:0066   100: deg2pix_Y@56:976 = F= deg2pix_Y@56:976
 33F4:4080 37F5:0070   110: unit2pix_X@56:2341 = F= unit2pix_X@56:2341
 33F4:408A 37F5:007A   120: unit2pix_Y@56:2349 = F= unit2pix_Y@56:2349
 33F4:4094 37F5:0084   130: object_targ@56:1520 = #P14:244
 33F4:409E 37F5:008E   140: Size:2078 = F= Size:2078
 33F4:40A8 37F5:0098   150: Color:844 = #I250:66
 33F4:40B2 37F5:00A2   160: Angle:736 = F= Angle:736
 33F4:40BC 37F5:00AC   170: Eccentricity:1005 = F= Eccentricity:1005
 33F4:40C6 37F5:00B6   180: #F0 = CALL1 cos(Angle:736)
 33F4:40CE 37F5:00BE   188: stim_ecc_x@56:2132 = #F0:1 F* Eccentricity:1005
 33F4:40DC 37F5:00CC   202: #F0 = CALL1 sin(Angle:736)
 33F4:40E4 37F5:00D4   210: #F1:2 = #F0:1 F* Eccentricity:1005
 33F4:40F2 37F5:00E2   224: stim_ecc_y@56:2144 = #F1:2 F* #I-1:7
 33F4:4100 37F5:00F0   238: #F0:1 = Size:2078 F* deg2pix_X@56:964
 33F4:410E 37F5:00FE   252: #L1:146 = Size:2078 F* deg2pix_Y@56:976
 33F4:411C 37F5:010C   266: #L2:156 = F= #L2:156
 33F4:4126 37F5:0116   276: #L0 = CALL4 oSetAttribute(object_targ@56:1520,aSIZE:760,#L2:156,#L1:146)
 33F4:4134 37F5:0124   290: #F0:1 = #I1:17 F* deg2pix_X@56:964
 33F4:4142 37F5:0132   304: #L1:146 = #I1:17 F* deg2pix_Y@56:976
 33F4:4150 37F5:0140   318: #L2:156 = F= #L2:156
 33F4:415A 37F5:014A   328: #L0 = CALL4 oSetAttribute(object_fix:1463,aSIZE:760,#L2:156,#L1:146)
 33F4:4168 37F5:0158   342: #F0:1 = scr_height@56:2012 F/ #I2:53
 33F4:4176 37F5:0166   356: opposite@56:1555 = #F0:1 F- pd_bottom@56:1576
 33F4:4184 37F5:0174   370: #F0:1 = scr_width@56:2027 F/ #I2:53
 33F4:4192 37F5:0182   384: adjacent@56:723 = #F0:1 F- pd_left@56:1591
 33F4:41A0 37F5:0190   398: #F0:1 = opposite@56:1555 F* opposite@56:1555
 33F4:41AE 37F5:019E   412: #F1:2 = adjacent@56:723 F* adjacent@56:723
 33F4:41BC 37F5:01AC   426: #F2:3 = #F0:1 F+ #F1:2
 33F4:41CA 37F5:01BA   440: pd_eccentricity = CALL1 sqrt(#F2:3)
 33F4:41D2 37F5:01C2   448: #F0:1 = opposite@56:1555 F/ adjacent@56:723
 33F4:41E0 37F5:01D0   462: #F1 = CALL1 atan(#F0:1)
 33F4:41E8 37F5:01D8   470: pd_angle = CALL1 rad2deg(#F1:2)
 33F4:41F0 37F5:01E0   478: pd_angle@56:1568 = pd_angle@56:1568 F+ #I180:50
 33F4:41FE 37F5:01EE   492: #L0 = CALL3 dSendf(#S280:470,fixation_pd@56:1140,fixation_pd@56:1140)
 33F4:420A 37F5:01FA   504: #L0 = CALL1 dSendf(#S281:471)
 33F4:4212 37F5:0202   512: #Q1:254 = F= #Q1:254
 33F4:421C 37F5:020C   522: #Q2:260 = F= #Q2:260
 33F4:4226 37F5:0216   532: #Q3:261 = F= #Q3:261
 33F4:4230 37F5:0220   542: #P4:248 = fixation_color@56:1126
 33F4:423A 37F5:022A   552: #P5:249 = fill@56:1067
 33F4:4244 37F5:0234   562: #Q6:264 = F= #Q6:264
 33F4:424E 37F5:023E   572: #Q7:265 = F= #Q7:265
 33F4:4258 37F5:0248   582: SPAWN DRW_SQR:995(with 7 args)
 33F4:425E 37F5:024E   588: WAITFORPROCESS DRW_SQR:995
 33F4:4264 37F5:0254   594: #Q1:254 = F= #Q1:254
 33F4:426E 37F5:025E   604: #Q2:260 = F= #Q2:260
 33F4:4278 37F5:0268   614: #Q3:261 = F= #Q3:261
 33F4:4282 37F5:0272   624: #P4:248 = #I15:41
 33F4:428C 37F5:027C   634: #P5:249 = fill@56:1067
 33F4:4296 37F5:0286   644: #Q6:264 = F= #Q6:264
 33F4:42A0 37F5:0290   654: #Q7:265 = F= #Q7:265
 33F4:42AA 37F5:029A   664: SPAWN DRW_SQR:995(with 7 args)
 33F4:42B0 37F5:02A0   670: WAITFORPROCESS DRW_SQR:995
 33F4:42B6 37F5:02A6   676: #L0 = CALL3 dSendf(#S282:472,fixation@56:1113,fixation@56:1113)
 33F4:42C2 37F5:02B2   688: #L0 = CALL1 dSendf(#S283:473)
 33F4:42CA 37F5:02BA   696: #Q1:254 = F= #Q1:254
 33F4:42D4 37F5:02C4   706: #Q2:260 = F= #Q2:260
 33F4:42DE 37F5:02CE   716: #Q3:261 = F= #Q3:261
 33F4:42E8 37F5:02D8   726: #P4:248 = fixation_color@56:1126
 33F4:42F2 37F5:02E2   736: #P5:249 = fill@56:1067
 33F4:42FC 37F5:02EC   746: #Q6:264 = F= #Q6:264
 33F4:4306 37F5:02F6   756: #Q7:265 = F= #Q7:265
 33F4:4310 37F5:0300   766: SPAWN DRW_SQR:995(with 7 args)
 33F4:4316 37F5:0306   772: WAITFORPROCESS DRW_SQR:995
 33F4:431C 37F5:030C   778: NEXTTICK1
 33F4:431E 37F5:030E   780: #L0 = CALL3 dSendf(#S284:474,plac_pd@56:1618,plac_pd@56:1618)
 33F4:432A 37F5:031A   792: #L0 = CALL1 dSendf(#S285:475)
 33F4:4332 37F5:0322   800: #Q1:254 = F= #Q1:254
 33F4:433C 37F5:032C   810: #Q2:260 = F= #Q2:260
 33F4:4346 37F5:0336   820: #Q3:261 = F= #Q3:261
 33F4:4350 37F5:0340   830: #P4:248 = fixation_color@56:1126
 33F4:435A 37F5:034A   840: #P5:249 = fill@56:1067
 33F4:4364 37F5:0354   850: #Q6:264 = F= #Q6:264
 33F4:436E 37F5:035E   860: #Q7:265 = F= #Q7:265
 33F4:4378 37F5:0368   870: SPAWN DRW_SQR:995(with 7 args)
 33F4:437E 37F5:036E   876: WAITFORPROCESS DRW_SQR:995
 33F4:4384 37F5:0374   882: #L0:145 = SetSize:2053 > #I0:16
 33F4:4392 37F5:0382   896: IFnot (#L0:145) GOTO .+80 (goto 976)
 33F4:439A 37F5:038A   904: #Q1:254 = F= #Q1:254
 33F4:43A4 37F5:0394   914: #Q2:260 = F= #Q2:260
 33F4:43AE 37F5:039E   924: #P3:247 = Color:844
 33F4:43B8 37F5:03A8   934: #P4:248 = fill@56:1067
 33F4:43C2 37F5:03B2   944: #Q5:263 = F= #Q5:263
 33F4:43CC 37F5:03BC   954: #Q6:264 = F= #Q6:264
 33F4:43D6 37F5:03C6   964: SPAWN DRW_PLAC:994(with 6 args)
 33F4:43DC 37F5:03CC   970: WAITFORPROCESS DRW_PLAC:994
 33F4:43E2 37F5:03D2   976: #L0:145 = SetSize:2053 > #I1:17
 33F4:43F0 37F5:03E0   990: IFnot (#L0:145) GOTO .+80 (goto 1070)
 33F4:43F8 37F5:03E8   998: #Q1:254 = F= #Q1:254
 33F4:4402 37F5:03F2  1008: #Q2:260 = F= #Q2:260
 33F4:440C 37F5:03FC  1018: #P3:247 = d1color:913
 33F4:4416 37F5:0406  1028: #P4:248 = fill@56:1067
 33F4:4420 37F5:0410  1038: #Q5:263 = F= #Q5:263
 33F4:442A 37F5:041A  1048: #Q6:264 = F= #Q6:264
 33F4:4434 37F5:0424  1058: SPAWN DRW_PLAC:994(with 6 args)
 33F4:443A 37F5:042A  1064: WAITFORPROCESS DRW_PLAC:994
 33F4:4440 37F5:0430  1070: #L0:145 = SetSize:2053 > #I2:53
 33F4:444E 37F5:043E  1084: IFnot (#L0:145) GOTO .+80 (goto 1164)
 33F4:4456 37F5:0446  1092: #Q1:254 = F= #Q1:254
 33F4:4460 37F5:0450  1102: #Q2:260 = F= #Q2:260
 33F4:446A 37F5:045A  1112: #P3:247 = Color:844
 33F4:4474 37F5:0464  1122: #P4:248 = fill@56:1067
 33F4:447E 37F5:046E  1132: #Q5:263 = F= #Q5:263
 33F4:4488 37F5:0478  1142: #Q6:264 = F= #Q6:264
 33F4:4492 37F5:0482  1152: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4498 37F5:0488  1158: WAITFORPROCESS DRW_PLAC:994
 33F4:449E 37F5:048E  1164: #L0:145 = SetSize:2053 > #I3:74
 33F4:44AC 37F5:049C  1178: IFnot (#L0:145) GOTO .+80 (goto 1258)
 33F4:44B4 37F5:04A4  1186: #Q1:254 = F= #Q1:254
 33F4:44BE 37F5:04AE  1196: #Q2:260 = F= #Q2:260
 33F4:44C8 37F5:04B8  1206: #P3:247 = Color:844
 33F4:44D2 37F5:04C2  1216: #P4:248 = fill@56:1067
 33F4:44DC 37F5:04CC  1226: #Q5:263 = F= #Q5:263
 33F4:44E6 37F5:04D6  1236: #Q6:264 = F= #Q6:264
 33F4:44F0 37F5:04E0  1246: SPAWN DRW_PLAC:994(with 6 args)
 33F4:44F6 37F5:04E6  1252: WAITFORPROCESS DRW_PLAC:994
 33F4:44FC 37F5:04EC  1258: #L0:145 = SetSize:2053 > #I4:87
 33F4:450A 37F5:04FA  1272: IFnot (#L0:145) GOTO .+80 (goto 1352)
 33F4:4512 37F5:0502  1280: #Q1:254 = F= #Q1:254
 33F4:451C 37F5:050C  1290: #Q2:260 = F= #Q2:260
 33F4:4526 37F5:0516  1300: #P3:247 = Color:844
 33F4:4530 37F5:0520  1310: #P4:248 = fill@56:1067
 33F4:453A 37F5:052A  1320: #Q5:263 = F= #Q5:263
 33F4:4544 37F5:0534  1330: #Q6:264 = F= #Q6:264
 33F4:454E 37F5:053E  1340: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4554 37F5:0544  1346: WAITFORPROCESS DRW_PLAC:994
 33F4:455A 37F5:054A  1352: #L0:145 = SetSize:2053 > #I5:111
 33F4:4568 37F5:0558  1366: IFnot (#L0:145) GOTO .+80 (goto 1446)
 33F4:4570 37F5:0560  1374: #Q1:254 = F= #Q1:254
 33F4:457A 37F5:056A  1384: #Q2:260 = F= #Q2:260
 33F4:4584 37F5:0574  1394: #P3:247 = Color:844
 33F4:458E 37F5:057E  1404: #P4:248 = fill@56:1067
 33F4:4598 37F5:0588  1414: #Q5:263 = F= #Q5:263
 33F4:45A2 37F5:0592  1424: #Q6:264 = F= #Q6:264
 33F4:45AC 37F5:059C  1434: SPAWN DRW_PLAC:994(with 6 args)
 33F4:45B2 37F5:05A2  1440: WAITFORPROCESS DRW_PLAC:994
 33F4:45B8 37F5:05A8  1446: #L0:145 = SetSize:2053 > #I6:120
 33F4:45C6 37F5:05B6  1460: IFnot (#L0:145) GOTO .+80 (goto 1540)
 33F4:45CE 37F5:05BE  1468: #Q1:254 = F= #Q1:254
 33F4:45D8 37F5:05C8  1478: #Q2:260 = F= #Q2:260
 33F4:45E2 37F5:05D2  1488: #P3:247 = Color:844
 33F4:45EC 37F5:05DC  1498: #P4:248 = fill@56:1067
 33F4:45F6 37F5:05E6  1508: #Q5:263 = F= #Q5:263
 33F4:4600 37F5:05F0  1518: #Q6:264 = F= #Q6:264
 33F4:460A 37F5:05FA  1528: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4610 37F5:0600  1534: WAITFORPROCESS DRW_PLAC:994
 33F4:4616 37F5:0606  1540: #L0:145 = SetSize:2053 > #I7:129
 33F4:4624 37F5:0614  1554: IFnot (#L0:145) GOTO .+80 (goto 1634)
 33F4:462C 37F5:061C  1562: #Q1:254 = F= #Q1:254
 33F4:4636 37F5:0626  1572: #Q2:260 = F= #Q2:260
 33F4:4640 37F5:0630  1582: #P3:247 = Color:844
 33F4:464A 37F5:063A  1592: #P4:248 = fill@56:1067
 33F4:4654 37F5:0644  1602: #Q5:263 = F= #Q5:263
 33F4:465E 37F5:064E  1612: #Q6:264 = F= #Q6:264
 33F4:4668 37F5:0658  1622: SPAWN DRW_PLAC:994(with 6 args)
 33F4:466E 37F5:065E  1628: WAITFORPROCESS DRW_PLAC:994
 33F4:4674 37F5:0664  1634: #L0:145 = SetSize:2053 > #I8:133
 33F4:4682 37F5:0672  1648: IFnot (#L0:145) GOTO .+80 (goto 1728)
 33F4:468A 37F5:067A  1656: #Q1:254 = F= #Q1:254
 33F4:4694 37F5:0684  1666: #Q2:260 = F= #Q2:260
 33F4:469E 37F5:068E  1676: #P3:247 = Color:844
 33F4:46A8 37F5:0698  1686: #P4:248 = fill@56:1067
 33F4:46B2 37F5:06A2  1696: #Q5:263 = F= #Q5:263
 33F4:46BC 37F5:06AC  1706: #Q6:264 = F= #Q6:264
 33F4:46C6 37F5:06B6  1716: SPAWN DRW_PLAC:994(with 6 args)
 33F4:46CC 37F5:06BC  1722: WAITFORPROCESS DRW_PLAC:994
 33F4:46D2 37F5:06C2  1728: #L0:145 = SetSize:2053 > #I9:140
 33F4:46E0 37F5:06D0  1742: IFnot (#L0:145) GOTO .+80 (goto 1822)
 33F4:46E8 37F5:06D8  1750: #Q1:254 = F= #Q1:254
 33F4:46F2 37F5:06E2  1760: #Q2:260 = F= #Q2:260
 33F4:46FC 37F5:06EC  1770: #P3:247 = Color:844
 33F4:4706 37F5:06F6  1780: #P4:248 = fill@56:1067
 33F4:4710 37F5:0700  1790: #Q5:263 = F= #Q5:263
 33F4:471A 37F5:070A  1800: #Q6:264 = F= #Q6:264
 33F4:4724 37F5:0714  1810: SPAWN DRW_PLAC:994(with 6 args)
 33F4:472A 37F5:071A  1816: WAITFORPROCESS DRW_PLAC:994
 33F4:4730 37F5:0720  1822: #L0:145 = SetSize:2053 > #I10:18
 33F4:473E 37F5:072E  1836: IFnot (#L0:145) GOTO .+80 (goto 1916)
 33F4:4746 37F5:0736  1844: #Q1:254 = F= #Q1:254
 33F4:4750 37F5:0740  1854: #Q2:260 = F= #Q2:260
 33F4:475A 37F5:074A  1864: #P3:247 = Color:844
 33F4:4764 37F5:0754  1874: #P4:248 = fill@56:1067
 33F4:476E 37F5:075E  1884: #Q5:263 = F= #Q5:263
 33F4:4778 37F5:0768  1894: #Q6:264 = F= #Q6:264
 33F4:4782 37F5:0772  1904: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4788 37F5:0778  1910: WAITFORPROCESS DRW_PLAC:994
 33F4:478E 37F5:077E  1916: #L0:145 = SetSize:2053 > #I11:27
 33F4:479C 37F5:078C  1930: IFnot (#L0:145) GOTO .+80 (goto 2010)
 33F4:47A4 37F5:0794  1938: #Q1:254 = F= #Q1:254
 33F4:47AE 37F5:079E  1948: #Q2:260 = F= #Q2:260
 33F4:47B8 37F5:07A8  1958: #P3:247 = Color:844
 33F4:47C2 37F5:07B2  1968: #P4:248 = fill@56:1067
 33F4:47CC 37F5:07BC  1978: #Q5:263 = F= #Q5:263
 33F4:47D6 37F5:07C6  1988: #Q6:264 = F= #Q6:264
 33F4:47E0 37F5:07D0  1998: SPAWN DRW_PLAC:994(with 6 args)
 33F4:47E6 37F5:07D6  2004: WAITFORPROCESS DRW_PLAC:994
 33F4:47EC 37F5:07DC  2010: #Q1:254 = F= #Q1:254
 33F4:47F6 37F5:07E6  2020: #Q2:260 = F= #Q2:260
 33F4:4800 37F5:07F0  2030: #Q3:261 = F= #Q3:261
 33F4:480A 37F5:07FA  2040: #P4:248 = #I15:41
 33F4:4814 37F5:0804  2050: #P5:249 = fill@56:1067
 33F4:481E 37F5:080E  2060: #Q6:264 = F= #Q6:264
 33F4:4828 37F5:0818  2070: #Q7:265 = F= #Q7:265
 33F4:4832 37F5:0822  2080: SPAWN DRW_SQR:995(with 7 args)
 33F4:4838 37F5:0828  2086: WAITFORPROCESS DRW_SQR:995
 33F4:483E 37F5:082E  2092: NEXTTICK1
 33F4:4840 37F5:0830  2094: #L0 = CALL3 dSendf(#S286:476,plac@56:1612,plac@56:1612)
 33F4:484C 37F5:083C  2106: #L0 = CALL1 dSendf(#S287:477)
 33F4:4854 37F5:0844  2114: #Q1:254 = F= #Q1:254
 33F4:485E 37F5:084E  2124: #Q2:260 = F= #Q2:260
 33F4:4868 37F5:0858  2134: #Q3:261 = F= #Q3:261
 33F4:4872 37F5:0862  2144: #P4:248 = fixation_color@56:1126
 33F4:487C 37F5:086C  2154: #P5:249 = fill@56:1067
 33F4:4886 37F5:0876  2164: #Q6:264 = F= #Q6:264
 33F4:4890 37F5:0880  2174: #Q7:265 = F= #Q7:265
 33F4:489A 37F5:088A  2184: SPAWN DRW_SQR:995(with 7 args)
 33F4:48A0 37F5:0890  2190: WAITFORPROCESS DRW_SQR:995
 33F4:48A6 37F5:0896  2196: #L0:145 = SetSize:2053 > #I0:16
 33F4:48B4 37F5:08A4  2210: IFnot (#L0:145) GOTO .+80 (goto 2290)
 33F4:48BC 37F5:08AC  2218: #Q1:254 = F= #Q1:254
 33F4:48C6 37F5:08B6  2228: #Q2:260 = F= #Q2:260
 33F4:48D0 37F5:08C0  2238: #P3:247 = Color:844
 33F4:48DA 37F5:08CA  2248: #P4:248 = fill@56:1067
 33F4:48E4 37F5:08D4  2258: #Q5:263 = F= #Q5:263
 33F4:48EE 37F5:08DE  2268: #Q6:264 = F= #Q6:264
 33F4:48F8 37F5:08E8  2278: SPAWN DRW_PLAC:994(with 6 args)
 33F4:48FE 37F5:08EE  2284: WAITFORPROCESS DRW_PLAC:994
 33F4:4904 37F5:08F4  2290: #L0:145 = SetSize:2053 > #I1:17
 33F4:4912 37F5:0902  2304: IFnot (#L0:145) GOTO .+80 (goto 2384)
 33F4:491A 37F5:090A  2312: #Q1:254 = F= #Q1:254
 33F4:4924 37F5:0914  2322: #Q2:260 = F= #Q2:260
 33F4:492E 37F5:091E  2332: #P3:247 = d1color:913
 33F4:4938 37F5:0928  2342: #P4:248 = fill@56:1067
 33F4:4942 37F5:0932  2352: #Q5:263 = F= #Q5:263
 33F4:494C 37F5:093C  2362: #Q6:264 = F= #Q6:264
 33F4:4956 37F5:0946  2372: SPAWN DRW_PLAC:994(with 6 args)
 33F4:495C 37F5:094C  2378: WAITFORPROCESS DRW_PLAC:994
 33F4:4962 37F5:0952  2384: #L0:145 = SetSize:2053 > #I2:53
 33F4:4970 37F5:0960  2398: IFnot (#L0:145) GOTO .+80 (goto 2478)
 33F4:4978 37F5:0968  2406: #Q1:254 = F= #Q1:254
 33F4:4982 37F5:0972  2416: #Q2:260 = F= #Q2:260
 33F4:498C 37F5:097C  2426: #P3:247 = Color:844
 33F4:4996 37F5:0986  2436: #P4:248 = fill@56:1067
 33F4:49A0 37F5:0990  2446: #Q5:263 = F= #Q5:263
 33F4:49AA 37F5:099A  2456: #Q6:264 = F= #Q6:264
 33F4:49B4 37F5:09A4  2466: SPAWN DRW_PLAC:994(with 6 args)
 33F4:49BA 37F5:09AA  2472: WAITFORPROCESS DRW_PLAC:994
 33F4:49C0 37F5:09B0  2478: #L0:145 = SetSize:2053 > #I3:74
 33F4:49CE 37F5:09BE  2492: IFnot (#L0:145) GOTO .+80 (goto 2572)
 33F4:49D6 37F5:09C6  2500: #Q1:254 = F= #Q1:254
 33F4:49E0 37F5:09D0  2510: #Q2:260 = F= #Q2:260
 33F4:49EA 37F5:09DA  2520: #P3:247 = Color:844
 33F4:49F4 37F5:09E4  2530: #P4:248 = fill@56:1067
 33F4:49FE 37F5:09EE  2540: #Q5:263 = F= #Q5:263
 33F4:4A08 37F5:09F8  2550: #Q6:264 = F= #Q6:264
 33F4:4A12 37F5:0A02  2560: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4A18 37F5:0A08  2566: WAITFORPROCESS DRW_PLAC:994
 33F4:4A1E 37F5:0A0E  2572: #L0:145 = SetSize:2053 > #I4:87
 33F4:4A2C 37F5:0A1C  2586: IFnot (#L0:145) GOTO .+80 (goto 2666)
 33F4:4A34 37F5:0A24  2594: #Q1:254 = F= #Q1:254
 33F4:4A3E 37F5:0A2E  2604: #Q2:260 = F= #Q2:260
 33F4:4A48 37F5:0A38  2614: #P3:247 = Color:844
 33F4:4A52 37F5:0A42  2624: #P4:248 = fill@56:1067
 33F4:4A5C 37F5:0A4C  2634: #Q5:263 = F= #Q5:263
 33F4:4A66 37F5:0A56  2644: #Q6:264 = F= #Q6:264
 33F4:4A70 37F5:0A60  2654: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4A76 37F5:0A66  2660: WAITFORPROCESS DRW_PLAC:994
 33F4:4A7C 37F5:0A6C  2666: #L0:145 = SetSize:2053 > #I5:111
 33F4:4A8A 37F5:0A7A  2680: IFnot (#L0:145) GOTO .+80 (goto 2760)
 33F4:4A92 37F5:0A82  2688: #Q1:254 = F= #Q1:254
 33F4:4A9C 37F5:0A8C  2698: #Q2:260 = F= #Q2:260
 33F4:4AA6 37F5:0A96  2708: #P3:247 = Color:844
 33F4:4AB0 37F5:0AA0  2718: #P4:248 = fill@56:1067
 33F4:4ABA 37F5:0AAA  2728: #Q5:263 = F= #Q5:263
 33F4:4AC4 37F5:0AB4  2738: #Q6:264 = F= #Q6:264
 33F4:4ACE 37F5:0ABE  2748: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4AD4 37F5:0AC4  2754: WAITFORPROCESS DRW_PLAC:994
 33F4:4ADA 37F5:0ACA  2760: #L0:145 = SetSize:2053 > #I6:120
 33F4:4AE8 37F5:0AD8  2774: IFnot (#L0:145) GOTO .+80 (goto 2854)
 33F4:4AF0 37F5:0AE0  2782: #Q1:254 = F= #Q1:254
 33F4:4AFA 37F5:0AEA  2792: #Q2:260 = F= #Q2:260
 33F4:4B04 37F5:0AF4  2802: #P3:247 = Color:844
 33F4:4B0E 37F5:0AFE  2812: #P4:248 = fill@56:1067
 33F4:4B18 37F5:0B08  2822: #Q5:263 = F= #Q5:263
 33F4:4B22 37F5:0B12  2832: #Q6:264 = F= #Q6:264
 33F4:4B2C 37F5:0B1C  2842: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4B32 37F5:0B22  2848: WAITFORPROCESS DRW_PLAC:994
 33F4:4B38 37F5:0B28  2854: #L0:145 = SetSize:2053 > #I7:129
 33F4:4B46 37F5:0B36  2868: IFnot (#L0:145) GOTO .+80 (goto 2948)
 33F4:4B4E 37F5:0B3E  2876: #Q1:254 = F= #Q1:254
 33F4:4B58 37F5:0B48  2886: #Q2:260 = F= #Q2:260
 33F4:4B62 37F5:0B52  2896: #P3:247 = Color:844
 33F4:4B6C 37F5:0B5C  2906: #P4:248 = fill@56:1067
 33F4:4B76 37F5:0B66  2916: #Q5:263 = F= #Q5:263
 33F4:4B80 37F5:0B70  2926: #Q6:264 = F= #Q6:264
 33F4:4B8A 37F5:0B7A  2936: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4B90 37F5:0B80  2942: WAITFORPROCESS DRW_PLAC:994
 33F4:4B96 37F5:0B86  2948: #L0:145 = SetSize:2053 > #I8:133
 33F4:4BA4 37F5:0B94  2962: IFnot (#L0:145) GOTO .+80 (goto 3042)
 33F4:4BAC 37F5:0B9C  2970: #Q1:254 = F= #Q1:254
 33F4:4BB6 37F5:0BA6  2980: #Q2:260 = F= #Q2:260
 33F4:4BC0 37F5:0BB0  2990: #P3:247 = Color:844
 33F4:4BCA 37F5:0BBA  3000: #P4:248 = fill@56:1067
 33F4:4BD4 37F5:0BC4  3010: #Q5:263 = F= #Q5:263
 33F4:4BDE 37F5:0BCE  3020: #Q6:264 = F= #Q6:264
 33F4:4BE8 37F5:0BD8  3030: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4BEE 37F5:0BDE  3036: WAITFORPROCESS DRW_PLAC:994
 33F4:4BF4 37F5:0BE4  3042: #L0:145 = SetSize:2053 > #I9:140
 33F4:4C02 37F5:0BF2  3056: IFnot (#L0:145) GOTO .+80 (goto 3136)
 33F4:4C0A 37F5:0BFA  3064: #Q1:254 = F= #Q1:254
 33F4:4C14 37F5:0C04  3074: #Q2:260 = F= #Q2:260
 33F4:4C1E 37F5:0C0E  3084: #P3:247 = Color:844
 33F4:4C28 37F5:0C18  3094: #P4:248 = fill@56:1067
 33F4:4C32 37F5:0C22  3104: #Q5:263 = F= #Q5:263
 33F4:4C3C 37F5:0C2C  3114: #Q6:264 = F= #Q6:264
 33F4:4C46 37F5:0C36  3124: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4C4C 37F5:0C3C  3130: WAITFORPROCESS DRW_PLAC:994
 33F4:4C52 37F5:0C42  3136: #L0:145 = SetSize:2053 > #I10:18
 33F4:4C60 37F5:0C50  3150: IFnot (#L0:145) GOTO .+80 (goto 3230)
 33F4:4C68 37F5:0C58  3158: #Q1:254 = F= #Q1:254
 33F4:4C72 37F5:0C62  3168: #Q2:260 = F= #Q2:260
 33F4:4C7C 37F5:0C6C  3178: #P3:247 = Color:844
 33F4:4C86 37F5:0C76  3188: #P4:248 = fill@56:1067
 33F4:4C90 37F5:0C80  3198: #Q5:263 = F= #Q5:263
 33F4:4C9A 37F5:0C8A  3208: #Q6:264 = F= #Q6:264
 33F4:4CA4 37F5:0C94  3218: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4CAA 37F5:0C9A  3224: WAITFORPROCESS DRW_PLAC:994
 33F4:4CB0 37F5:0CA0  3230: #L0:145 = SetSize:2053 > #I11:27
 33F4:4CBE 37F5:0CAE  3244: IFnot (#L0:145) GOTO .+80 (goto 3324)
 33F4:4CC6 37F5:0CB6  3252: #Q1:254 = F= #Q1:254
 33F4:4CD0 37F5:0CC0  3262: #Q2:260 = F= #Q2:260
 33F4:4CDA 37F5:0CCA  3272: #P3:247 = Color:844
 33F4:4CE4 37F5:0CD4  3282: #P4:248 = fill@56:1067
 33F4:4CEE 37F5:0CDE  3292: #Q5:263 = F= #Q5:263
 33F4:4CF8 37F5:0CE8  3302: #Q6:264 = F= #Q6:264
 33F4:4D02 37F5:0CF2  3312: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4D08 37F5:0CF8  3318: WAITFORPROCESS DRW_PLAC:994
 33F4:4D0E 37F5:0CFE  3324: NEXTTICK1
 33F4:4D10 37F5:0D00  3326: #L0 = CALL3 dSendf(#S288:478,target_f_pd@56:2246,target_f_pd@56:2246)
 33F4:4D1C 37F5:0D0C  3338: #L0 = CALL1 dSendf(#S289:479)
 33F4:4D24 37F5:0D14  3346: #L0:145 = SetSize:2053 > #I0:16
 33F4:4D32 37F5:0D22  3360: IFnot (#L0:145) GOTO .+220 (goto 3580)
 33F4:4D3A 37F5:0D2A  3368: #L1:146 = Catch:821 == #I0:16
 33F4:4D48 37F5:0D38  3382: IFnot (#L1:146) GOTO .+94 (goto 3476)
 33F4:4D50 37F5:0D40  3390: #Q1:254 = F= #Q1:254
 33F4:4D5A 37F5:0D4A  3400: #Q2:260 = F= #Q2:260
 33F4:4D64 37F5:0D54  3410: #P3:247 = Color:844
 33F4:4D6E 37F5:0D5E  3420: #Q4:262 = F= #Q4:262
 33F4:4D78 37F5:0D68  3430: #P5:249 = fill@56:1067
 33F4:4D82 37F5:0D72  3440: #Q6:264 = F= #Q6:264
 33F4:4D8C 37F5:0D7C  3450: #Q7:265 = F= #Q7:265
 33F4:4D96 37F5:0D86  3460: SPAWN DRW_T:996(with 7 args)
 33F4:4D9C 37F5:0D8C  3466: WAITFORPROCESS DRW_T:996
 33F4:4DA2 37F5:0D92  3472: GOTO .+108 (goto 3580)
 33F4:4DA6 37F5:0D96  3476: #L0:145 = Catch:821 == #I1:17
 33F4:4DB4 37F5:0DA4  3490: IFnot (#L0:145) GOTO .+90 (goto 3580)
 33F4:4DBC 37F5:0DAC  3498: #Q1:254 = F= #Q1:254
 33F4:4DC6 37F5:0DB6  3508: #Q2:260 = F= #Q2:260
 33F4:4DD0 37F5:0DC0  3518: #P3:247 = Color:844
 33F4:4DDA 37F5:0DCA  3528: #Q4:262 = F= #Q4:262
 33F4:4DE4 37F5:0DD4  3538: #P5:249 = fill@56:1067
 33F4:4DEE 37F5:0DDE  3548: #Q6:264 = F= #Q6:264
 33F4:4DF8 37F5:0DE8  3558: #Q7:265 = F= #Q7:265
 33F4:4E02 37F5:0DF2  3568: SPAWN DRW_L:993(with 7 args)
 33F4:4E08 37F5:0DF8  3574: WAITFORPROCESS DRW_L:993
 33F4:4E0E 37F5:0DFE  3580: #L0:145 = SetSize:2053 > #I1:17
 33F4:4E1C 37F5:0E0C  3594: IFnot (#L0:145) GOTO .+90 (goto 3684)
 33F4:4E24 37F5:0E14  3602: #Q1:254 = F= #Q1:254
 33F4:4E2E 37F5:0E1E  3612: #Q2:260 = F= #Q2:260
 33F4:4E38 37F5:0E28  3622: #P3:247 = d1color:913
 33F4:4E42 37F5:0E32  3632: #Q4:262 = F= #Q4:262
 33F4:4E4C 37F5:0E3C  3642: #P5:249 = fill@56:1067
 33F4:4E56 37F5:0E46  3652: #Q6:264 = F= #Q6:264
 33F4:4E60 37F5:0E50  3662: #Q7:265 = F= #Q7:265
 33F4:4E6A 37F5:0E5A  3672: SPAWN DRW_L:993(with 7 args)
 33F4:4E70 37F5:0E60  3678: WAITFORPROCESS DRW_L:993
 33F4:4E76 37F5:0E66  3684: #L0:145 = SetSize:2053 > #I2:53
 33F4:4E84 37F5:0E74  3698: IFnot (#L0:145) GOTO .+90 (goto 3788)
 33F4:4E8C 37F5:0E7C  3706: #Q1:254 = F= #Q1:254
 33F4:4E96 37F5:0E86  3716: #Q2:260 = F= #Q2:260
 33F4:4EA0 37F5:0E90  3726: #P3:247 = Color:844
 33F4:4EAA 37F5:0E9A  3736: #Q4:262 = F= #Q4:262
 33F4:4EB4 37F5:0EA4  3746: #P5:249 = fill@56:1067
 33F4:4EBE 37F5:0EAE  3756: #Q6:264 = F= #Q6:264
 33F4:4EC8 37F5:0EB8  3766: #Q7:265 = F= #Q7:265
 33F4:4ED2 37F5:0EC2  3776: SPAWN DRW_L:993(with 7 args)
 33F4:4ED8 37F5:0EC8  3782: WAITFORPROCESS DRW_L:993
 33F4:4EDE 37F5:0ECE  3788: #L0:145 = SetSize:2053 > #I3:74
 33F4:4EEC 37F5:0EDC  3802: IFnot (#L0:145) GOTO .+90 (goto 3892)
 33F4:4EF4 37F5:0EE4  3810: #Q1:254 = F= #Q1:254
 33F4:4EFE 37F5:0EEE  3820: #Q2:260 = F= #Q2:260
 33F4:4F08 37F5:0EF8  3830: #P3:247 = Color:844
 33F4:4F12 37F5:0F02  3840: #Q4:262 = F= #Q4:262
 33F4:4F1C 37F5:0F0C  3850: #P5:249 = fill@56:1067
 33F4:4F26 37F5:0F16  3860: #Q6:264 = F= #Q6:264
 33F4:4F30 37F5:0F20  3870: #Q7:265 = F= #Q7:265
 33F4:4F3A 37F5:0F2A  3880: SPAWN DRW_L:993(with 7 args)
 33F4:4F40 37F5:0F30  3886: WAITFORPROCESS DRW_L:993
 33F4:4F46 37F5:0F36  3892: #L0:145 = SetSize:2053 > #I4:87
 33F4:4F54 37F5:0F44  3906: IFnot (#L0:145) GOTO .+90 (goto 3996)
 33F4:4F5C 37F5:0F4C  3914: #Q1:254 = F= #Q1:254
 33F4:4F66 37F5:0F56  3924: #Q2:260 = F= #Q2:260
 33F4:4F70 37F5:0F60  3934: #P3:247 = Color:844
 33F4:4F7A 37F5:0F6A  3944: #Q4:262 = F= #Q4:262
 33F4:4F84 37F5:0F74  3954: #P5:249 = fill@56:1067
 33F4:4F8E 37F5:0F7E  3964: #Q6:264 = F= #Q6:264
 33F4:4F98 37F5:0F88  3974: #Q7:265 = F= #Q7:265
 33F4:4FA2 37F5:0F92  3984: SPAWN DRW_L:993(with 7 args)
 33F4:4FA8 37F5:0F98  3990: WAITFORPROCESS DRW_L:993
 33F4:4FAE 37F5:0F9E  3996: #L0:145 = SetSize:2053 > #I5:111
 33F4:4FBC 37F5:0FAC  4010: IFnot (#L0:145) GOTO .+90 (goto 4100)
 33F4:4FC4 37F5:0FB4  4018: #Q1:254 = F= #Q1:254
 33F4:4FCE 37F5:0FBE  4028: #Q2:260 = F= #Q2:260
 33F4:4FD8 37F5:0FC8  4038: #P3:247 = Color:844
 33F4:4FE2 37F5:0FD2  4048: #Q4:262 = F= #Q4:262
 33F4:4FEC 37F5:0FDC  4058: #P5:249 = fill@56:1067
 33F4:4FF6 37F5:0FE6  4068: #Q6:264 = F= #Q6:264
 33F4:5000 37F5:0FF0  4078: #Q7:265 = F= #Q7:265
 33F4:500A 37F5:0FFA  4088: SPAWN DRW_L:993(with 7 args)
 33F4:5010 37F5:1000  4094: WAITFORPROCESS DRW_L:993
 33F4:5016 37F5:1006  4100: #L0:145 = SetSize:2053 > #I6:120
 33F4:5024 37F5:1014  4114: IFnot (#L0:145) GOTO .+90 (goto 4204)
 33F4:502C 37F5:101C  4122: #Q1:254 = F= #Q1:254
 33F4:5036 37F5:1026  4132: #Q2:260 = F= #Q2:260
 33F4:5040 37F5:1030  4142: #P3:247 = Color:844
 33F4:504A 37F5:103A  4152: #Q4:262 = F= #Q4:262
 33F4:5054 37F5:1044  4162: #P5:249 = fill@56:1067
 33F4:505E 37F5:104E  4172: #Q6:264 = F= #Q6:264
 33F4:5068 37F5:1058  4182: #Q7:265 = F= #Q7:265
 33F4:5072 37F5:1062  4192: SPAWN DRW_L:993(with 7 args)
 33F4:5078 37F5:1068  4198: WAITFORPROCESS DRW_L:993
 33F4:507E 37F5:106E  4204: #L0:145 = SetSize:2053 > #I7:129
 33F4:508C 37F5:107C  4218: IFnot (#L0:145) GOTO .+90 (goto 4308)
 33F4:5094 37F5:1084  4226: #Q1:254 = F= #Q1:254
 33F4:509E 37F5:108E  4236: #Q2:260 = F= #Q2:260
 33F4:50A8 37F5:1098  4246: #P3:247 = Color:844
 33F4:50B2 37F5:10A2  4256: #Q4:262 = F= #Q4:262
 33F4:50BC 37F5:10AC  4266: #P5:249 = fill@56:1067
 33F4:50C6 37F5:10B6  4276: #Q6:264 = F= #Q6:264
 33F4:50D0 37F5:10C0  4286: #Q7:265 = F= #Q7:265
 33F4:50DA 37F5:10CA  4296: SPAWN DRW_L:993(with 7 args)
 33F4:50E0 37F5:10D0  4302: WAITFORPROCESS DRW_L:993
 33F4:50E6 37F5:10D6  4308: #L0:145 = SetSize:2053 > #I8:133
 33F4:50F4 37F5:10E4  4322: IFnot (#L0:145) GOTO .+90 (goto 4412)
 33F4:50FC 37F5:10EC  4330: #Q1:254 = F= #Q1:254
 33F4:5106 37F5:10F6  4340: #Q2:260 = F= #Q2:260
 33F4:5110 37F5:1100  4350: #P3:247 = Color:844
 33F4:511A 37F5:110A  4360: #Q4:262 = F= #Q4:262
 33F4:5124 37F5:1114  4370: #P5:249 = fill@56:1067
 33F4:512E 37F5:111E  4380: #Q6:264 = F= #Q6:264
 33F4:5138 37F5:1128  4390: #Q7:265 = F= #Q7:265
 33F4:5142 37F5:1132  4400: SPAWN DRW_L:993(with 7 args)
 33F4:5148 37F5:1138  4406: WAITFORPROCESS DRW_L:993
 33F4:514E 37F5:113E  4412: #L0:145 = SetSize:2053 > #I9:140
 33F4:515C 37F5:114C  4426: IFnot (#L0:145) GOTO .+90 (goto 4516)
 33F4:5164 37F5:1154  4434: #Q1:254 = F= #Q1:254
 33F4:516E 37F5:115E  4444: #Q2:260 = F= #Q2:260
 33F4:5178 37F5:1168  4454: #P3:247 = Color:844
 33F4:5182 37F5:1172  4464: #Q4:262 = F= #Q4:262
 33F4:518C 37F5:117C  4474: #P5:249 = fill@56:1067
 33F4:5196 37F5:1186  4484: #Q6:264 = F= #Q6:264
 33F4:51A0 37F5:1190  4494: #Q7:265 = F= #Q7:265
 33F4:51AA 37F5:119A  4504: SPAWN DRW_L:993(with 7 args)
 33F4:51B0 37F5:11A0  4510: WAITFORPROCESS DRW_L:993
 33F4:51B6 37F5:11A6  4516: #L0:145 = SetSize:2053 > #I10:18
 33F4:51C4 37F5:11B4  4530: IFnot (#L0:145) GOTO .+90 (goto 4620)
 33F4:51CC 37F5:11BC  4538: #Q1:254 = F= #Q1:254
 33F4:51D6 37F5:11C6  4548: #Q2:260 = F= #Q2:260
 33F4:51E0 37F5:11D0  4558: #P3:247 = Color:844
 33F4:51EA 37F5:11DA  4568: #Q4:262 = F= #Q4:262
 33F4:51F4 37F5:11E4  4578: #P5:249 = fill@56:1067
 33F4:51FE 37F5:11EE  4588: #Q6:264 = F= #Q6:264
 33F4:5208 37F5:11F8  4598: #Q7:265 = F= #Q7:265
 33F4:5212 37F5:1202  4608: SPAWN DRW_L:993(with 7 args)
 33F4:5218 37F5:1208  4614: WAITFORPROCESS DRW_L:993
 33F4:521E 37F5:120E  4620: #L0:145 = SetSize:2053 > #I11:27
 33F4:522C 37F5:121C  4634: IFnot (#L0:145) GOTO .+90 (goto 4724)
 33F4:5234 37F5:1224  4642: #Q1:254 = F= #Q1:254
 33F4:523E 37F5:122E  4652: #Q2:260 = F= #Q2:260
 33F4:5248 37F5:1238  4662: #P3:247 = Color:844
 33F4:5252 37F5:1242  4672: #Q4:262 = F= #Q4:262
 33F4:525C 37F5:124C  4682: #P5:249 = fill@56:1067
 33F4:5266 37F5:1256  4692: #Q6:264 = F= #Q6:264
 33F4:5270 37F5:1260  4702: #Q7:265 = F= #Q7:265
 33F4:527A 37F5:126A  4712: SPAWN DRW_L:993(with 7 args)
 33F4:5280 37F5:1270  4718: WAITFORPROCESS DRW_L:993
 33F4:5286 37F5:1276  4724: #Q1:254 = F= #Q1:254
 33F4:5290 37F5:1280  4734: #Q2:260 = F= #Q2:260
 33F4:529A 37F5:128A  4744: #Q3:261 = F= #Q3:261
 33F4:52A4 37F5:1294  4754: #P4:248 = fixation_color@56:1126
 33F4:52AE 37F5:129E  4764: #P5:249 = fill@56:1067
 33F4:52B8 37F5:12A8  4774: #Q6:264 = F= #Q6:264
 33F4:52C2 37F5:12B2  4784: #Q7:265 = F= #Q7:265
 33F4:52CC 37F5:12BC  4794: SPAWN DRW_SQR:995(with 7 args)
 33F4:52D2 37F5:12C2  4800: WAITFORPROCESS DRW_SQR:995
 33F4:52D8 37F5:12C8  4806: #Q1:254 = F= #Q1:254
 33F4:52E2 37F5:12D2  4816: #Q2:260 = F= #Q2:260
 33F4:52EC 37F5:12DC  4826: #Q3:261 = F= #Q3:261
 33F4:52F6 37F5:12E6  4836: #P4:248 = #I15:41
 33F4:5300 37F5:12F0  4846: #P5:249 = fill@56:1067
 33F4:530A 37F5:12FA  4856: #Q6:264 = F= #Q6:264
 33F4:5314 37F5:1304  4866: #Q7:265 = F= #Q7:265
 33F4:531E 37F5:130E  4876: SPAWN DRW_SQR:995(with 7 args)
 33F4:5324 37F5:1314  4882: WAITFORPROCESS DRW_SQR:995
 33F4:532A 37F5:131A  4888: NEXTTICK1
 33F4:532C 37F5:131C  4890: #L0 = CALL3 dSendf(#S290:481,target_f@56:2243,target_f@56:2243)
 33F4:5338 37F5:1328  4902: #L0 = CALL1 dSendf(#S291:482)
 33F4:5340 37F5:1330  4910: #L0:145 = SetSize:2053 > #I0:16
 33F4:534E 37F5:133E  4924: IFnot (#L0:145) GOTO .+220 (goto 5144)
 33F4:5356 37F5:1346  4932: #L1:146 = Catch:821 == #I0:16
 33F4:5364 37F5:1354  4946: IFnot (#L1:146) GOTO .+94 (goto 5040)
 33F4:536C 37F5:135C  4954: #Q1:254 = F= #Q1:254
 33F4:5376 37F5:1366  4964: #Q2:260 = F= #Q2:260
 33F4:5380 37F5:1370  4974: #P3:247 = Color:844
 33F4:538A 37F5:137A  4984: #Q4:262 = F= #Q4:262
 33F4:5394 37F5:1384  4994: #P5:249 = fill@56:1067
 33F4:539E 37F5:138E  5004: #Q6:264 = F= #Q6:264
 33F4:53A8 37F5:1398  5014: #Q7:265 = F= #Q7:265
 33F4:53B2 37F5:13A2  5024: SPAWN DRW_T:996(with 7 args)
 33F4:53B8 37F5:13A8  5030: WAITFORPROCESS DRW_T:996
 33F4:53BE 37F5:13AE  5036: GOTO .+108 (goto 5144)
 33F4:53C2 37F5:13B2  5040: #L0:145 = Catch:821 == #I1:17
 33F4:53D0 37F5:13C0  5054: IFnot (#L0:145) GOTO .+90 (goto 5144)
 33F4:53D8 37F5:13C8  5062: #Q1:254 = F= #Q1:254
 33F4:53E2 37F5:13D2  5072: #Q2:260 = F= #Q2:260
 33F4:53EC 37F5:13DC  5082: #P3:247 = Color:844
 33F4:53F6 37F5:13E6  5092: #Q4:262 = F= #Q4:262
 33F4:5400 37F5:13F0  5102: #P5:249 = fill@56:1067
 33F4:540A 37F5:13FA  5112: #Q6:264 = F= #Q6:264
 33F4:5414 37F5:1404  5122: #Q7:265 = F= #Q7:265
 33F4:541E 37F5:140E  5132: SPAWN DRW_L:993(with 7 args)
 33F4:5424 37F5:1414  5138: WAITFORPROCESS DRW_L:993
 33F4:542A 37F5:141A  5144: #L0:145 = SetSize:2053 > #I1:17
 33F4:5438 37F5:1428  5158: IFnot (#L0:145) GOTO .+90 (goto 5248)
 33F4:5440 37F5:1430  5166: #Q1:254 = F= #Q1:254
 33F4:544A 37F5:143A  5176: #Q2:260 = F= #Q2:260
 33F4:5454 37F5:1444  5186: #P3:247 = d1color:913
 33F4:545E 37F5:144E  5196: #Q4:262 = F= #Q4:262
 33F4:5468 37F5:1458  5206: #P5:249 = fill@56:1067
 33F4:5472 37F5:1462  5216: #Q6:264 = F= #Q6:264
 33F4:547C 37F5:146C  5226: #Q7:265 = F= #Q7:265
 33F4:5486 37F5:1476  5236: SPAWN DRW_L:993(with 7 args)
 33F4:548C 37F5:147C  5242: WAITFORPROCESS DRW_L:993
 33F4:5492 37F5:1482  5248: #L0:145 = SetSize:2053 > #I2:53
 33F4:54A0 37F5:1490  5262: IFnot (#L0:145) GOTO .+90 (goto 5352)
 33F4:54A8 37F5:1498  5270: #Q1:254 = F= #Q1:254
 33F4:54B2 37F5:14A2  5280: #Q2:260 = F= #Q2:260
 33F4:54BC 37F5:14AC  5290: #P3:247 = Color:844
 33F4:54C6 37F5:14B6  5300: #Q4:262 = F= #Q4:262
 33F4:54D0 37F5:14C0  5310: #P5:249 = fill@56:1067
 33F4:54DA 37F5:14CA  5320: #Q6:264 = F= #Q6:264
 33F4:54E4 37F5:14D4  5330: #Q7:265 = F= #Q7:265
 33F4:54EE 37F5:14DE  5340: SPAWN DRW_L:993(with 7 args)
 33F4:54F4 37F5:14E4  5346: WAITFORPROCESS DRW_L:993
 33F4:54FA 37F5:14EA  5352: #L0:145 = SetSize:2053 > #I3:74
 33F4:5508 37F5:14F8  5366: IFnot (#L0:145) GOTO .+90 (goto 5456)
 33F4:5510 37F5:1500  5374: #Q1:254 = F= #Q1:254
 33F4:551A 37F5:150A  5384: #Q2:260 = F= #Q2:260
 33F4:5524 37F5:1514  5394: #P3:247 = Color:844
 33F4:552E 37F5:151E  5404: #Q4:262 = F= #Q4:262
 33F4:5538 37F5:1528  5414: #P5:249 = fill@56:1067
 33F4:5542 37F5:1532  5424: #Q6:264 = F= #Q6:264
 33F4:554C 37F5:153C  5434: #Q7:265 = F= #Q7:265
 33F4:5556 37F5:1546  5444: SPAWN DRW_L:993(with 7 args)
 33F4:555C 37F5:154C  5450: WAITFORPROCESS DRW_L:993
 33F4:5562 37F5:1552  5456: #L0:145 = SetSize:2053 > #I4:87
 33F4:5570 37F5:1560  5470: IFnot (#L0:145) GOTO .+90 (goto 5560)
 33F4:5578 37F5:1568  5478: #Q1:254 = F= #Q1:254
 33F4:5582 37F5:1572  5488: #Q2:260 = F= #Q2:260
 33F4:558C 37F5:157C  5498: #P3:247 = Color:844
 33F4:5596 37F5:1586  5508: #Q4:262 = F= #Q4:262
 33F4:55A0 37F5:1590  5518: #P5:249 = fill@56:1067
 33F4:55AA 37F5:159A  5528: #Q6:264 = F= #Q6:264
 33F4:55B4 37F5:15A4  5538: #Q7:265 = F= #Q7:265
 33F4:55BE 37F5:15AE  5548: SPAWN DRW_L:993(with 7 args)
 33F4:55C4 37F5:15B4  5554: WAITFORPROCESS DRW_L:993
 33F4:55CA 37F5:15BA  5560: #L0:145 = SetSize:2053 > #I5:111
 33F4:55D8 37F5:15C8  5574: IFnot (#L0:145) GOTO .+90 (goto 5664)
 33F4:55E0 37F5:15D0  5582: #Q1:254 = F= #Q1:254
 33F4:55EA 37F5:15DA  5592: #Q2:260 = F= #Q2:260
 33F4:55F4 37F5:15E4  5602: #P3:247 = Color:844
 33F4:55FE 37F5:15EE  5612: #Q4:262 = F= #Q4:262
 33F4:5608 37F5:15F8  5622: #P5:249 = fill@56:1067
 33F4:5612 37F5:1602  5632: #Q6:264 = F= #Q6:264
 33F4:561C 37F5:160C  5642: #Q7:265 = F= #Q7:265
 33F4:5626 37F5:1616  5652: SPAWN DRW_L:993(with 7 args)
 33F4:562C 37F5:161C  5658: WAITFORPROCESS DRW_L:993
 33F4:5632 37F5:1622  5664: #L0:145 = SetSize:2053 > #I6:120
 33F4:5640 37F5:1630  5678: IFnot (#L0:145) GOTO .+90 (goto 5768)
 33F4:5648 37F5:1638  5686: #Q1:254 = F= #Q1:254
 33F4:5652 37F5:1642  5696: #Q2:260 = F= #Q2:260
 33F4:565C 37F5:164C  5706: #P3:247 = Color:844
 33F4:5666 37F5:1656  5716: #Q4:262 = F= #Q4:262
 33F4:5670 37F5:1660  5726: #P5:249 = fill@56:1067
 33F4:567A 37F5:166A  5736: #Q6:264 = F= #Q6:264
 33F4:5684 37F5:1674  5746: #Q7:265 = F= #Q7:265
 33F4:568E 37F5:167E  5756: SPAWN DRW_L:993(with 7 args)
 33F4:5694 37F5:1684  5762: WAITFORPROCESS DRW_L:993
 33F4:569A 37F5:168A  5768: #L0:145 = SetSize:2053 > #I7:129
 33F4:56A8 37F5:1698  5782: IFnot (#L0:145) GOTO .+90 (goto 5872)
 33F4:56B0 37F5:16A0  5790: #Q1:254 = F= #Q1:254
 33F4:56BA 37F5:16AA  5800: #Q2:260 = F= #Q2:260
 33F4:56C4 37F5:16B4  5810: #P3:247 = Color:844
 33F4:56CE 37F5:16BE  5820: #Q4:262 = F= #Q4:262
 33F4:56D8 37F5:16C8  5830: #P5:249 = fill@56:1067
 33F4:56E2 37F5:16D2  5840: #Q6:264 = F= #Q6:264
 33F4:56EC 37F5:16DC  5850: #Q7:265 = F= #Q7:265
 33F4:56F6 37F5:16E6  5860: SPAWN DRW_L:993(with 7 args)
 33F4:56FC 37F5:16EC  5866: WAITFORPROCESS DRW_L:993
 33F4:5702 37F5:16F2  5872: #L0:145 = SetSize:2053 > #I8:133
 33F4:5710 37F5:1700  5886: IFnot (#L0:145) GOTO .+90 (goto 5976)
 33F4:5718 37F5:1708  5894: #Q1:254 = F= #Q1:254
 33F4:5722 37F5:1712  5904: #Q2:260 = F= #Q2:260
 33F4:572C 37F5:171C  5914: #P3:247 = Color:844
 33F4:5736 37F5:1726  5924: #Q4:262 = F= #Q4:262
 33F4:5740 37F5:1730  5934: #P5:249 = fill@56:1067
 33F4:574A 37F5:173A  5944: #Q6:264 = F= #Q6:264
 33F4:5754 37F5:1744  5954: #Q7:265 = F= #Q7:265
 33F4:575E 37F5:174E  5964: SPAWN DRW_L:993(with 7 args)
 33F4:5764 37F5:1754  5970: WAITFORPROCESS DRW_L:993
 33F4:576A 37F5:175A  5976: #L0:145 = SetSize:2053 > #I9:140
 33F4:5778 37F5:1768  5990: IFnot (#L0:145) GOTO .+90 (goto 6080)
 33F4:5780 37F5:1770  5998: #Q1:254 = F= #Q1:254
 33F4:578A 37F5:177A  6008: #Q2:260 = F= #Q2:260
 33F4:5794 37F5:1784  6018: #P3:247 = Color:844
 33F4:579E 37F5:178E  6028: #Q4:262 = F= #Q4:262
 33F4:57A8 37F5:1798  6038: #P5:249 = fill@56:1067
 33F4:57B2 37F5:17A2  6048: #Q6:264 = F= #Q6:264
 33F4:57BC 37F5:17AC  6058: #Q7:265 = F= #Q7:265
 33F4:57C6 37F5:17B6  6068: SPAWN DRW_L:993(with 7 args)
 33F4:57CC 37F5:17BC  6074: WAITFORPROCESS DRW_L:993
 33F4:57D2 37F5:17C2  6080: #L0:145 = SetSize:2053 > #I10:18
 33F4:57E0 37F5:17D0  6094: IFnot (#L0:145) GOTO .+90 (goto 6184)
 33F4:57E8 37F5:17D8  6102: #Q1:254 = F= #Q1:254
 33F4:57F2 37F5:17E2  6112: #Q2:260 = F= #Q2:260
 33F4:57FC 37F5:17EC  6122: #P3:247 = Color:844
 33F4:5806 37F5:17F6  6132: #Q4:262 = F= #Q4:262
 33F4:5810 37F5:1800  6142: #P5:249 = fill@56:1067
 33F4:581A 37F5:180A  6152: #Q6:264 = F= #Q6:264
 33F4:5824 37F5:1814  6162: #Q7:265 = F= #Q7:265
 33F4:582E 37F5:181E  6172: SPAWN DRW_L:993(with 7 args)
 33F4:5834 37F5:1824  6178: WAITFORPROCESS DRW_L:993
 33F4:583A 37F5:182A  6184: #L0:145 = SetSize:2053 > #I11:27
 33F4:5848 37F5:1838  6198: IFnot (#L0:145) GOTO .+90 (goto 6288)
 33F4:5850 37F5:1840  6206: #Q1:254 = F= #Q1:254
 33F4:585A 37F5:184A  6216: #Q2:260 = F= #Q2:260
 33F4:5864 37F5:1854  6226: #P3:247 = Color:844
 33F4:586E 37F5:185E  6236: #Q4:262 = F= #Q4:262
 33F4:5878 37F5:1868  6246: #P5:249 = fill@56:1067
 33F4:5882 37F5:1872  6256: #Q6:264 = F= #Q6:264
 33F4:588C 37F5:187C  6266: #Q7:265 = F= #Q7:265
 33F4:5896 37F5:1886  6276: SPAWN DRW_L:993(with 7 args)
 33F4:589C 37F5:188C  6282: WAITFORPROCESS DRW_L:993
 33F4:58A2 37F5:1892  6288: #Q1:254 = F= #Q1:254
 33F4:58AC 37F5:189C  6298: #Q2:260 = F= #Q2:260
 33F4:58B6 37F5:18A6  6308: #Q3:261 = F= #Q3:261
 33F4:58C0 37F5:18B0  6318: #P4:248 = fixation_color@56:1126
 33F4:58CA 37F5:18BA  6328: #P5:249 = fill@56:1067
 33F4:58D4 37F5:18C4  6338: #Q6:264 = F= #Q6:264
 33F4:58DE 37F5:18CE  6348: #Q7:265 = F= #Q7:265
 33F4:58E8 37F5:18D8  6358: SPAWN DRW_SQR:995(with 7 args)
 33F4:58EE 37F5:18DE  6364: WAITFORPROCESS DRW_SQR:995
 33F4:58F4 37F5:18E4  6370: NEXTTICK1
 33F4:58F6 37F5:18E6  6372: #L0 = CALL3 dSendf(#S292:483,target@56:2233,target@56:2233)
 33F4:5902 37F5:18F2  6384: #L0 = CALL1 dSendf(#S293:484)
 33F4:590A 37F5:18FA  6392: #L0:145 = SetSize:2053 > #I0:16
 33F4:5918 37F5:1908  6406: IFnot (#L0:145) GOTO .+220 (goto 6626)
 33F4:5920 37F5:1910  6414: #L1:146 = Catch:821 == #I0:16
 33F4:592E 37F5:191E  6428: IFnot (#L1:146) GOTO .+94 (goto 6522)
 33F4:5936 37F5:1926  6436: #Q1:254 = F= #Q1:254
 33F4:5940 37F5:1930  6446: #Q2:260 = F= #Q2:260
 33F4:594A 37F5:193A  6456: #P3:247 = Color:844
 33F4:5954 37F5:1944  6466: #Q4:262 = F= #Q4:262
 33F4:595E 37F5:194E  6476: #P5:249 = fill@56:1067
 33F4:5968 37F5:1958  6486: #Q6:264 = F= #Q6:264
 33F4:5972 37F5:1962  6496: #Q7:265 = F= #Q7:265
 33F4:597C 37F5:196C  6506: SPAWN DRW_T:996(with 7 args)
 33F4:5982 37F5:1972  6512: WAITFORPROCESS DRW_T:996
 33F4:5988 37F5:1978  6518: GOTO .+108 (goto 6626)
 33F4:598C 37F5:197C  6522: #L0:145 = Catch:821 == #I1:17
 33F4:599A 37F5:198A  6536: IFnot (#L0:145) GOTO .+90 (goto 6626)
 33F4:59A2 37F5:1992  6544: #Q1:254 = F= #Q1:254
 33F4:59AC 37F5:199C  6554: #Q2:260 = F= #Q2:260
 33F4:59B6 37F5:19A6  6564: #P3:247 = Color:844
 33F4:59C0 37F5:19B0  6574: #Q4:262 = F= #Q4:262
 33F4:59CA 37F5:19BA  6584: #P5:249 = fill@56:1067
 33F4:59D4 37F5:19C4  6594: #Q6:264 = F= #Q6:264
 33F4:59DE 37F5:19CE  6604: #Q7:265 = F= #Q7:265
 33F4:59E8 37F5:19D8  6614: SPAWN DRW_L:993(with 7 args)
 33F4:59EE 37F5:19DE  6620: WAITFORPROCESS DRW_L:993
 33F4:59F4 37F5:19E4  6626: #L0:145 = SetSize:2053 > #I1:17
 33F4:5A02 37F5:19F2  6640: IFnot (#L0:145) GOTO .+90 (goto 6730)
 33F4:5A0A 37F5:19FA  6648: #Q1:254 = F= #Q1:254
 33F4:5A14 37F5:1A04  6658: #Q2:260 = F= #Q2:260
 33F4:5A1E 37F5:1A0E  6668: #P3:247 = d1color:913
 33F4:5A28 37F5:1A18  6678: #Q4:262 = F= #Q4:262
 33F4:5A32 37F5:1A22  6688: #P5:249 = fill@56:1067
 33F4:5A3C 37F5:1A2C  6698: #Q6:264 = F= #Q6:264
 33F4:5A46 37F5:1A36  6708: #Q7:265 = F= #Q7:265
 33F4:5A50 37F5:1A40  6718: SPAWN DRW_L:993(with 7 args)
 33F4:5A56 37F5:1A46  6724: WAITFORPROCESS DRW_L:993
 33F4:5A5C 37F5:1A4C  6730: #L0:145 = SetSize:2053 > #I2:53
 33F4:5A6A 37F5:1A5A  6744: IFnot (#L0:145) GOTO .+90 (goto 6834)
 33F4:5A72 37F5:1A62  6752: #Q1:254 = F= #Q1:254
 33F4:5A7C 37F5:1A6C  6762: #Q2:260 = F= #Q2:260
 33F4:5A86 37F5:1A76  6772: #P3:247 = Color:844
 33F4:5A90 37F5:1A80  6782: #Q4:262 = F= #Q4:262
 33F4:5A9A 37F5:1A8A  6792: #P5:249 = fill@56:1067
 33F4:5AA4 37F5:1A94  6802: #Q6:264 = F= #Q6:264
 33F4:5AAE 37F5:1A9E  6812: #Q7:265 = F= #Q7:265
 33F4:5AB8 37F5:1AA8  6822: SPAWN DRW_L:993(with 7 args)
 33F4:5ABE 37F5:1AAE  6828: WAITFORPROCESS DRW_L:993
 33F4:5AC4 37F5:1AB4  6834: #L0:145 = SetSize:2053 > #I3:74
 33F4:5AD2 37F5:1AC2  6848: IFnot (#L0:145) GOTO .+90 (goto 6938)
 33F4:5ADA 37F5:1ACA  6856: #Q1:254 = F= #Q1:254
 33F4:5AE4 37F5:1AD4  6866: #Q2:260 = F= #Q2:260
 33F4:5AEE 37F5:1ADE  6876: #P3:247 = Color:844
 33F4:5AF8 37F5:1AE8  6886: #Q4:262 = F= #Q4:262
 33F4:5B02 37F5:1AF2  6896: #P5:249 = fill@56:1067
 33F4:5B0C 37F5:1AFC  6906: #Q6:264 = F= #Q6:264
 33F4:5B16 37F5:1B06  6916: #Q7:265 = F= #Q7:265
 33F4:5B20 37F5:1B10  6926: SPAWN DRW_L:993(with 7 args)
 33F4:5B26 37F5:1B16  6932: WAITFORPROCESS DRW_L:993
 33F4:5B2C 37F5:1B1C  6938: #L0:145 = SetSize:2053 > #I4:87
 33F4:5B3A 37F5:1B2A  6952: IFnot (#L0:145) GOTO .+90 (goto 7042)
 33F4:5B42 37F5:1B32  6960: #Q1:254 = F= #Q1:254
 33F4:5B4C 37F5:1B3C  6970: #Q2:260 = F= #Q2:260
 33F4:5B56 37F5:1B46  6980: #P3:247 = Color:844
 33F4:5B60 37F5:1B50  6990: #Q4:262 = F= #Q4:262
 33F4:5B6A 37F5:1B5A  7000: #P5:249 = fill@56:1067
 33F4:5B74 37F5:1B64  7010: #Q6:264 = F= #Q6:264
 33F4:5B7E 37F5:1B6E  7020: #Q7:265 = F= #Q7:265
 33F4:5B88 37F5:1B78  7030: SPAWN DRW_L:993(with 7 args)
 33F4:5B8E 37F5:1B7E  7036: WAITFORPROCESS DRW_L:993
 33F4:5B94 37F5:1B84  7042: #L0:145 = SetSize:2053 > #I5:111
 33F4:5BA2 37F5:1B92  7056: IFnot (#L0:145) GOTO .+90 (goto 7146)
 33F4:5BAA 37F5:1B9A  7064: #Q1:254 = F= #Q1:254
 33F4:5BB4 37F5:1BA4  7074: #Q2:260 = F= #Q2:260
 33F4:5BBE 37F5:1BAE  7084: #P3:247 = Color:844
 33F4:5BC8 37F5:1BB8  7094: #Q4:262 = F= #Q4:262
 33F4:5BD2 37F5:1BC2  7104: #P5:249 = fill@56:1067
 33F4:5BDC 37F5:1BCC  7114: #Q6:264 = F= #Q6:264
 33F4:5BE6 37F5:1BD6  7124: #Q7:265 = F= #Q7:265
 33F4:5BF0 37F5:1BE0  7134: SPAWN DRW_L:993(with 7 args)
 33F4:5BF6 37F5:1BE6  7140: WAITFORPROCESS DRW_L:993
 33F4:5BFC 37F5:1BEC  7146: #L0:145 = SetSize:2053 > #I6:120
 33F4:5C0A 37F5:1BFA  7160: IFnot (#L0:145) GOTO .+90 (goto 7250)
 33F4:5C12 37F5:1C02  7168: #Q1:254 = F= #Q1:254
 33F4:5C1C 37F5:1C0C  7178: #Q2:260 = F= #Q2:260
 33F4:5C26 37F5:1C16  7188: #P3:247 = Color:844
 33F4:5C30 37F5:1C20  7198: #Q4:262 = F= #Q4:262
 33F4:5C3A 37F5:1C2A  7208: #P5:249 = fill@56:1067
 33F4:5C44 37F5:1C34  7218: #Q6:264 = F= #Q6:264
 33F4:5C4E 37F5:1C3E  7228: #Q7:265 = F= #Q7:265
 33F4:5C58 37F5:1C48  7238: SPAWN DRW_L:993(with 7 args)
 33F4:5C5E 37F5:1C4E  7244: WAITFORPROCESS DRW_L:993
 33F4:5C64 37F5:1C54  7250: #L0:145 = SetSize:2053 > #I7:129
 33F4:5C72 37F5:1C62  7264: IFnot (#L0:145) GOTO .+90 (goto 7354)
 33F4:5C7A 37F5:1C6A  7272: #Q1:254 = F= #Q1:254
 33F4:5C84 37F5:1C74  7282: #Q2:260 = F= #Q2:260
 33F4:5C8E 37F5:1C7E  7292: #P3:247 = Color:844
 33F4:5C98 37F5:1C88  7302: #Q4:262 = F= #Q4:262
 33F4:5CA2 37F5:1C92  7312: #P5:249 = fill@56:1067
 33F4:5CAC 37F5:1C9C  7322: #Q6:264 = F= #Q6:264
 33F4:5CB6 37F5:1CA6  7332: #Q7:265 = F= #Q7:265
 33F4:5CC0 37F5:1CB0  7342: SPAWN DRW_L:993(with 7 args)
 33F4:5CC6 37F5:1CB6  7348: WAITFORPROCESS DRW_L:993
 33F4:5CCC 37F5:1CBC  7354: #L0:145 = SetSize:2053 > #I8:133
 33F4:5CDA 37F5:1CCA  7368: IFnot (#L0:145) GOTO .+90 (goto 7458)
 33F4:5CE2 37F5:1CD2  7376: #Q1:254 = F= #Q1:254
 33F4:5CEC 37F5:1CDC  7386: #Q2:260 = F= #Q2:260
 33F4:5CF6 37F5:1CE6  7396: #P3:247 = Color:844
 33F4:5D00 37F5:1CF0  7406: #Q4:262 = F= #Q4:262
 33F4:5D0A 37F5:1CFA  7416: #P5:249 = fill@56:1067
 33F4:5D14 37F5:1D04  7426: #Q6:264 = F= #Q6:264
 33F4:5D1E 37F5:1D0E  7436: #Q7:265 = F= #Q7:265
 33F4:5D28 37F5:1D18  7446: SPAWN DRW_L:993(with 7 args)
 33F4:5D2E 37F5:1D1E  7452: WAITFORPROCESS DRW_L:993
 33F4:5D34 37F5:1D24  7458: #L0:145 = SetSize:2053 > #I9:140
 33F4:5D42 37F5:1D32  7472: IFnot (#L0:145) GOTO .+90 (goto 7562)
 33F4:5D4A 37F5:1D3A  7480: #Q1:254 = F= #Q1:254
 33F4:5D54 37F5:1D44  7490: #Q2:260 = F= #Q2:260
 33F4:5D5E 37F5:1D4E  7500: #P3:247 = Color:844
 33F4:5D68 37F5:1D58  7510: #Q4:262 = F= #Q4:262
 33F4:5D72 37F5:1D62  7520: #P5:249 = fill@56:1067
 33F4:5D7C 37F5:1D6C  7530: #Q6:264 = F= #Q6:264
 33F4:5D86 37F5:1D76  7540: #Q7:265 = F= #Q7:265
 33F4:5D90 37F5:1D80  7550: SPAWN DRW_L:993(with 7 args)
 33F4:5D96 37F5:1D86  7556: WAITFORPROCESS DRW_L:993
 33F4:5D9C 37F5:1D8C  7562: #L0:145 = SetSize:2053 > #I10:18
 33F4:5DAA 37F5:1D9A  7576: IFnot (#L0:145) GOTO .+90 (goto 7666)
 33F4:5DB2 37F5:1DA2  7584: #Q1:254 = F= #Q1:254
 33F4:5DBC 37F5:1DAC  7594: #Q2:260 = F= #Q2:260
 33F4:5DC6 37F5:1DB6  7604: #P3:247 = Color:844
 33F4:5DD0 37F5:1DC0  7614: #Q4:262 = F= #Q4:262
 33F4:5DDA 37F5:1DCA  7624: #P5:249 = fill@56:1067
 33F4:5DE4 37F5:1DD4  7634: #Q6:264 = F= #Q6:264
 33F4:5DEE 37F5:1DDE  7644: #Q7:265 = F= #Q7:265
 33F4:5DF8 37F5:1DE8  7654: SPAWN DRW_L:993(with 7 args)
 33F4:5DFE 37F5:1DEE  7660: WAITFORPROCESS DRW_L:993
 33F4:5E04 37F5:1DF4  7666: #L0:145 = SetSize:2053 > #I11:27
 33F4:5E12 37F5:1E02  7680: IFnot (#L0:145) GOTO .+90 (goto 7770)
 33F4:5E1A 37F5:1E0A  7688: #Q1:254 = F= #Q1:254
 33F4:5E24 37F5:1E14  7698: #Q2:260 = F= #Q2:260
 33F4:5E2E 37F5:1E1E  7708: #P3:247 = Color:844
 33F4:5E38 37F5:1E28  7718: #Q4:262 = F= #Q4:262
 33F4:5E42 37F5:1E32  7728: #P5:249 = fill@56:1067
 33F4:5E4C 37F5:1E3C  7738: #Q6:264 = F= #Q6:264
 33F4:5E56 37F5:1E46  7748: #Q7:265 = F= #Q7:265
 33F4:5E60 37F5:1E50  7758: SPAWN DRW_L:993(with 7 args)
 33F4:5E66 37F5:1E56  7764: WAITFORPROCESS DRW_L:993
 33F4:5E6C 37F5:1E5C  7770: #L0:145 = soa_mode:2091 == #I1:17
 33F4:5E7A 37F5:1E6A  7784: IFnot (#L0:145) GOTO .+94 (goto 7878)
 33F4:5E82 37F5:1E72  7792: #Q1:254 = F= #Q1:254
 33F4:5E8C 37F5:1E7C  7802: #Q2:260 = F= #Q2:260
 33F4:5E96 37F5:1E86  7812: #Q3:261 = F= #Q3:261
 33F4:5EA0 37F5:1E90  7822: #P4:248 = fixation_color@56:1126
 33F4:5EAA 37F5:1E9A  7832: #P5:249 = open@56:1547
 33F4:5EB4 37F5:1EA4  7842: #Q6:264 = F= #Q6:264
 33F4:5EBE 37F5:1EAE  7852: #Q7:265 = F= #Q7:265
 33F4:5EC8 37F5:1EB8  7862: SPAWN DRW_SQR:995(with 7 args)
 33F4:5ECE 37F5:1EBE  7868: WAITFORPROCESS DRW_SQR:995
 33F4:5ED4 37F5:1EC4  7874: GOTO .+86 (goto 7960)
 33F4:5ED8 37F5:1EC8  7878: #Q1:254 = F= #Q1:254
 33F4:5EE2 37F5:1ED2  7888: #Q2:260 = F= #Q2:260
 33F4:5EEC 37F5:1EDC  7898: #Q3:261 = F= #Q3:261
 33F4:5EF6 37F5:1EE6  7908: #P4:248 = fixation_color@56:1126
 33F4:5F00 37F5:1EF0  7918: #P5:249 = fill@56:1067
 33F4:5F0A 37F5:1EFA  7928: #Q6:264 = F= #Q6:264
 33F4:5F14 37F5:1F04  7938: #Q7:265 = F= #Q7:265
 33F4:5F1E 37F5:1F0E  7948: SPAWN DRW_SQR:995(with 7 args)
 33F4:5F24 37F5:1F14  7954: WAITFORPROCESS DRW_SQR:995
 33F4:5F2A 37F5:1F1A  7960: NEXTTICK1
 33F4:5F2C 37F5:1F1C  7962: #L0 = CALL3 dSendf(#S294:485,blank@56:786,blank@56:786)
 33F4:5F38 37F5:1F28  7974: #L0 = CALL1 dSendf(#S295:486)

PROCESS  57: LSCH_PGS (Args=14 CtrlBlk=33F4:2630 Size=7982  iOp=2-7983 iCache=76130-84111) DISABLED
 33F4:4012 37F5:0002     0: curr_target@57:902 = #P1:241
 33F4:401C 37F5:000C    10: fixation_size@57:1150 = F= fixation_size@57:1150
 33F4:4026 37F5:0016    20: fixation_color@57:1127 = #P3:247
 33F4:4030 37F5:0020    30: sig_color@57:2061 = #P4:248
 33F4:403A 37F5:002A    40: scr_width@57:2028 = F= scr_width@57:2028
 33F4:4044 37F5:0034    50: scr_height@57:2013 = F= scr_height@57:2013
 33F4:404E 37F5:003E    60: pd_left@57:1592 = F= pd_left@57:1592
 33F4:4058 37F5:0048    70: pd_bottom@57:1577 = F= pd_bottom@57:1577
 33F4:4062 37F5:0052    80: pd_size@57:1600 = F= pd_size@57:1600
 33F4:406C 37F5:005C    90: deg2pix_X@57:965 = F= deg2pix_X@57:965
 33F4:4076 37F5:0066   100: deg2pix_Y@57:977 = F= deg2pix_Y@57:977
 33F4:4080 37F5:0070   110: unit2pix_X@57:2342 = F= unit2pix_X@57:2342
 33F4:408A 37F5:007A   120: unit2pix_Y@57:2350 = F= unit2pix_Y@57:2350
 33F4:4094 37F5:0084   130: object_targ@57:1521 = #P14:244
 33F4:409E 37F5:008E   140: Size:2078 = F= Size:2078
 33F4:40A8 37F5:0098   150: Color:844 = #I250:66
 33F4:40B2 37F5:00A2   160: Angle:736 = F= Angle:736
 33F4:40BC 37F5:00AC   170: Eccentricity:1005 = F= Eccentricity:1005
 33F4:40C6 37F5:00B6   180: #F0 = CALL1 cos(Angle:736)
 33F4:40CE 37F5:00BE   188: stim_ecc_x@57:2133 = #F0:1 F* Eccentricity:1005
 33F4:40DC 37F5:00CC   202: #F0 = CALL1 sin(Angle:736)
 33F4:40E4 37F5:00D4   210: #F1:2 = #F0:1 F* Eccentricity:1005
 33F4:40F2 37F5:00E2   224: stim_ecc_y@57:2145 = #F1:2 F* #I-1:7
 33F4:4100 37F5:00F0   238: #F0:1 = Size:2078 F* deg2pix_X@57:965
 33F4:410E 37F5:00FE   252: #L1:146 = Size:2078 F* deg2pix_Y@57:977
 33F4:411C 37F5:010C   266: #L2:156 = F= #L2:156
 33F4:4126 37F5:0116   276: #L0 = CALL4 oSetAttribute(object_targ@57:1521,aSIZE:760,#L2:156,#L1:146)
 33F4:4134 37F5:0124   290: #F0:1 = #I1:17 F* deg2pix_X@57:965
 33F4:4142 37F5:0132   304: #L1:146 = #I1:17 F* deg2pix_Y@57:977
 33F4:4150 37F5:0140   318: #L2:156 = F= #L2:156
 33F4:415A 37F5:014A   328: #L0 = CALL4 oSetAttribute(object_fix:1463,aSIZE:760,#L2:156,#L1:146)
 33F4:4168 37F5:0158   342: #F0:1 = scr_height@57:2013 F/ #I2:53
 33F4:4176 37F5:0166   356: opposite@57:1556 = #F0:1 F- pd_bottom@57:1577
 33F4:4184 37F5:0174   370: #F0:1 = scr_width@57:2028 F/ #I2:53
 33F4:4192 37F5:0182   384: adjacent@57:724 = #F0:1 F- pd_left@57:1592
 33F4:41A0 37F5:0190   398: #F0:1 = opposite@57:1556 F* opposite@57:1556
 33F4:41AE 37F5:019E   412: #F1:2 = adjacent@57:724 F* adjacent@57:724
 33F4:41BC 37F5:01AC   426: #F2:3 = #F0:1 F+ #F1:2
 33F4:41CA 37F5:01BA   440: pd_eccentricity = CALL1 sqrt(#F2:3)
 33F4:41D2 37F5:01C2   448: #F0:1 = opposite@57:1556 F/ adjacent@57:724
 33F4:41E0 37F5:01D0   462: #F1 = CALL1 atan(#F0:1)
 33F4:41E8 37F5:01D8   470: pd_angle = CALL1 rad2deg(#F1:2)
 33F4:41F0 37F5:01E0   478: pd_angle@57:1569 = pd_angle@57:1569 F+ #I180:50
 33F4:41FE 37F5:01EE   492: #L0 = CALL3 dSendf(#S296:487,fixation_pd@57:1141,fixation_pd@57:1141)
 33F4:420A 37F5:01FA   504: #L0 = CALL1 dSendf(#S297:488)
 33F4:4212 37F5:0202   512: #Q1:254 = F= #Q1:254
 33F4:421C 37F5:020C   522: #Q2:260 = F= #Q2:260
 33F4:4226 37F5:0216   532: #Q3:261 = F= #Q3:261
 33F4:4230 37F5:0220   542: #P4:248 = fixation_color@57:1127
 33F4:423A 37F5:022A   552: #P5:249 = fill@57:1068
 33F4:4244 37F5:0234   562: #Q6:264 = F= #Q6:264
 33F4:424E 37F5:023E   572: #Q7:265 = F= #Q7:265
 33F4:4258 37F5:0248   582: SPAWN DRW_SQR:995(with 7 args)
 33F4:425E 37F5:024E   588: WAITFORPROCESS DRW_SQR:995
 33F4:4264 37F5:0254   594: #Q1:254 = F= #Q1:254
 33F4:426E 37F5:025E   604: #Q2:260 = F= #Q2:260
 33F4:4278 37F5:0268   614: #Q3:261 = F= #Q3:261
 33F4:4282 37F5:0272   624: #P4:248 = #I15:41
 33F4:428C 37F5:027C   634: #P5:249 = fill@57:1068
 33F4:4296 37F5:0286   644: #Q6:264 = F= #Q6:264
 33F4:42A0 37F5:0290   654: #Q7:265 = F= #Q7:265
 33F4:42AA 37F5:029A   664: SPAWN DRW_SQR:995(with 7 args)
 33F4:42B0 37F5:02A0   670: WAITFORPROCESS DRW_SQR:995
 33F4:42B6 37F5:02A6   676: #L0 = CALL3 dSendf(#S298:489,fixation@57:1114,fixation@57:1114)
 33F4:42C2 37F5:02B2   688: #L0 = CALL1 dSendf(#S299:490)
 33F4:42CA 37F5:02BA   696: #Q1:254 = F= #Q1:254
 33F4:42D4 37F5:02C4   706: #Q2:260 = F= #Q2:260
 33F4:42DE 37F5:02CE   716: #Q3:261 = F= #Q3:261
 33F4:42E8 37F5:02D8   726: #P4:248 = fixation_color@57:1127
 33F4:42F2 37F5:02E2   736: #P5:249 = fill@57:1068
 33F4:42FC 37F5:02EC   746: #Q6:264 = F= #Q6:264
 33F4:4306 37F5:02F6   756: #Q7:265 = F= #Q7:265
 33F4:4310 37F5:0300   766: SPAWN DRW_SQR:995(with 7 args)
 33F4:4316 37F5:0306   772: WAITFORPROCESS DRW_SQR:995
 33F4:431C 37F5:030C   778: NEXTTICK1
 33F4:431E 37F5:030E   780: #L0 = CALL3 dSendf(#S300:493,plac_pd@57:1619,plac_pd@57:1619)
 33F4:432A 37F5:031A   792: #L0 = CALL1 dSendf(#S301:494)
 33F4:4332 37F5:0322   800: #Q1:254 = F= #Q1:254
 33F4:433C 37F5:032C   810: #Q2:260 = F= #Q2:260
 33F4:4346 37F5:0336   820: #Q3:261 = F= #Q3:261
 33F4:4350 37F5:0340   830: #P4:248 = fixation_color@57:1127
 33F4:435A 37F5:034A   840: #P5:249 = fill@57:1068
 33F4:4364 37F5:0354   850: #Q6:264 = F= #Q6:264
 33F4:436E 37F5:035E   860: #Q7:265 = F= #Q7:265
 33F4:4378 37F5:0368   870: SPAWN DRW_SQR:995(with 7 args)
 33F4:437E 37F5:036E   876: WAITFORPROCESS DRW_SQR:995
 33F4:4384 37F5:0374   882: #L0:145 = SetSize:2053 > #I0:16
 33F4:4392 37F5:0382   896: IFnot (#L0:145) GOTO .+80 (goto 976)
 33F4:439A 37F5:038A   904: #Q1:254 = F= #Q1:254
 33F4:43A4 37F5:0394   914: #Q2:260 = F= #Q2:260
 33F4:43AE 37F5:039E   924: #P3:247 = Color:844
 33F4:43B8 37F5:03A8   934: #P4:248 = fill@57:1068
 33F4:43C2 37F5:03B2   944: #Q5:263 = F= #Q5:263
 33F4:43CC 37F5:03BC   954: #Q6:264 = F= #Q6:264
 33F4:43D6 37F5:03C6   964: SPAWN DRW_PLAC:994(with 6 args)
 33F4:43DC 37F5:03CC   970: WAITFORPROCESS DRW_PLAC:994
 33F4:43E2 37F5:03D2   976: #L0:145 = SetSize:2053 > #I1:17
 33F4:43F0 37F5:03E0   990: IFnot (#L0:145) GOTO .+80 (goto 1070)
 33F4:43F8 37F5:03E8   998: #Q1:254 = F= #Q1:254
 33F4:4402 37F5:03F2  1008: #Q2:260 = F= #Q2:260
 33F4:440C 37F5:03FC  1018: #P3:247 = d1color:913
 33F4:4416 37F5:0406  1028: #P4:248 = fill@57:1068
 33F4:4420 37F5:0410  1038: #Q5:263 = F= #Q5:263
 33F4:442A 37F5:041A  1048: #Q6:264 = F= #Q6:264
 33F4:4434 37F5:0424  1058: SPAWN DRW_PLAC:994(with 6 args)
 33F4:443A 37F5:042A  1064: WAITFORPROCESS DRW_PLAC:994
 33F4:4440 37F5:0430  1070: #L0:145 = SetSize:2053 > #I2:53
 33F4:444E 37F5:043E  1084: IFnot (#L0:145) GOTO .+80 (goto 1164)
 33F4:4456 37F5:0446  1092: #Q1:254 = F= #Q1:254
 33F4:4460 37F5:0450  1102: #Q2:260 = F= #Q2:260
 33F4:446A 37F5:045A  1112: #P3:247 = Color:844
 33F4:4474 37F5:0464  1122: #P4:248 = fill@57:1068
 33F4:447E 37F5:046E  1132: #Q5:263 = F= #Q5:263
 33F4:4488 37F5:0478  1142: #Q6:264 = F= #Q6:264
 33F4:4492 37F5:0482  1152: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4498 37F5:0488  1158: WAITFORPROCESS DRW_PLAC:994
 33F4:449E 37F5:048E  1164: #L0:145 = SetSize:2053 > #I3:74
 33F4:44AC 37F5:049C  1178: IFnot (#L0:145) GOTO .+80 (goto 1258)
 33F4:44B4 37F5:04A4  1186: #Q1:254 = F= #Q1:254
 33F4:44BE 37F5:04AE  1196: #Q2:260 = F= #Q2:260
 33F4:44C8 37F5:04B8  1206: #P3:247 = Color:844
 33F4:44D2 37F5:04C2  1216: #P4:248 = fill@57:1068
 33F4:44DC 37F5:04CC  1226: #Q5:263 = F= #Q5:263
 33F4:44E6 37F5:04D6  1236: #Q6:264 = F= #Q6:264
 33F4:44F0 37F5:04E0  1246: SPAWN DRW_PLAC:994(with 6 args)
 33F4:44F6 37F5:04E6  1252: WAITFORPROCESS DRW_PLAC:994
 33F4:44FC 37F5:04EC  1258: #L0:145 = SetSize:2053 > #I4:87
 33F4:450A 37F5:04FA  1272: IFnot (#L0:145) GOTO .+80 (goto 1352)
 33F4:4512 37F5:0502  1280: #Q1:254 = F= #Q1:254
 33F4:451C 37F5:050C  1290: #Q2:260 = F= #Q2:260
 33F4:4526 37F5:0516  1300: #P3:247 = Color:844
 33F4:4530 37F5:0520  1310: #P4:248 = fill@57:1068
 33F4:453A 37F5:052A  1320: #Q5:263 = F= #Q5:263
 33F4:4544 37F5:0534  1330: #Q6:264 = F= #Q6:264
 33F4:454E 37F5:053E  1340: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4554 37F5:0544  1346: WAITFORPROCESS DRW_PLAC:994
 33F4:455A 37F5:054A  1352: #L0:145 = SetSize:2053 > #I5:111
 33F4:4568 37F5:0558  1366: IFnot (#L0:145) GOTO .+80 (goto 1446)
 33F4:4570 37F5:0560  1374: #Q1:254 = F= #Q1:254
 33F4:457A 37F5:056A  1384: #Q2:260 = F= #Q2:260
 33F4:4584 37F5:0574  1394: #P3:247 = Color:844
 33F4:458E 37F5:057E  1404: #P4:248 = fill@57:1068
 33F4:4598 37F5:0588  1414: #Q5:263 = F= #Q5:263
 33F4:45A2 37F5:0592  1424: #Q6:264 = F= #Q6:264
 33F4:45AC 37F5:059C  1434: SPAWN DRW_PLAC:994(with 6 args)
 33F4:45B2 37F5:05A2  1440: WAITFORPROCESS DRW_PLAC:994
 33F4:45B8 37F5:05A8  1446: #L0:145 = SetSize:2053 > #I6:120
 33F4:45C6 37F5:05B6  1460: IFnot (#L0:145) GOTO .+80 (goto 1540)
 33F4:45CE 37F5:05BE  1468: #Q1:254 = F= #Q1:254
 33F4:45D8 37F5:05C8  1478: #Q2:260 = F= #Q2:260
 33F4:45E2 37F5:05D2  1488: #P3:247 = Color:844
 33F4:45EC 37F5:05DC  1498: #P4:248 = fill@57:1068
 33F4:45F6 37F5:05E6  1508: #Q5:263 = F= #Q5:263
 33F4:4600 37F5:05F0  1518: #Q6:264 = F= #Q6:264
 33F4:460A 37F5:05FA  1528: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4610 37F5:0600  1534: WAITFORPROCESS DRW_PLAC:994
 33F4:4616 37F5:0606  1540: #L0:145 = SetSize:2053 > #I7:129
 33F4:4624 37F5:0614  1554: IFnot (#L0:145) GOTO .+80 (goto 1634)
 33F4:462C 37F5:061C  1562: #Q1:254 = F= #Q1:254
 33F4:4636 37F5:0626  1572: #Q2:260 = F= #Q2:260
 33F4:4640 37F5:0630  1582: #P3:247 = Color:844
 33F4:464A 37F5:063A  1592: #P4:248 = fill@57:1068
 33F4:4654 37F5:0644  1602: #Q5:263 = F= #Q5:263
 33F4:465E 37F5:064E  1612: #Q6:264 = F= #Q6:264
 33F4:4668 37F5:0658  1622: SPAWN DRW_PLAC:994(with 6 args)
 33F4:466E 37F5:065E  1628: WAITFORPROCESS DRW_PLAC:994
 33F4:4674 37F5:0664  1634: #L0:145 = SetSize:2053 > #I8:133
 33F4:4682 37F5:0672  1648: IFnot (#L0:145) GOTO .+80 (goto 1728)
 33F4:468A 37F5:067A  1656: #Q1:254 = F= #Q1:254
 33F4:4694 37F5:0684  1666: #Q2:260 = F= #Q2:260
 33F4:469E 37F5:068E  1676: #P3:247 = Color:844
 33F4:46A8 37F5:0698  1686: #P4:248 = fill@57:1068
 33F4:46B2 37F5:06A2  1696: #Q5:263 = F= #Q5:263
 33F4:46BC 37F5:06AC  1706: #Q6:264 = F= #Q6:264
 33F4:46C6 37F5:06B6  1716: SPAWN DRW_PLAC:994(with 6 args)
 33F4:46CC 37F5:06BC  1722: WAITFORPROCESS DRW_PLAC:994
 33F4:46D2 37F5:06C2  1728: #L0:145 = SetSize:2053 > #I9:140
 33F4:46E0 37F5:06D0  1742: IFnot (#L0:145) GOTO .+80 (goto 1822)
 33F4:46E8 37F5:06D8  1750: #Q1:254 = F= #Q1:254
 33F4:46F2 37F5:06E2  1760: #Q2:260 = F= #Q2:260
 33F4:46FC 37F5:06EC  1770: #P3:247 = Color:844
 33F4:4706 37F5:06F6  1780: #P4:248 = fill@57:1068
 33F4:4710 37F5:0700  1790: #Q5:263 = F= #Q5:263
 33F4:471A 37F5:070A  1800: #Q6:264 = F= #Q6:264
 33F4:4724 37F5:0714  1810: SPAWN DRW_PLAC:994(with 6 args)
 33F4:472A 37F5:071A  1816: WAITFORPROCESS DRW_PLAC:994
 33F4:4730 37F5:0720  1822: #L0:145 = SetSize:2053 > #I10:18
 33F4:473E 37F5:072E  1836: IFnot (#L0:145) GOTO .+80 (goto 1916)
 33F4:4746 37F5:0736  1844: #Q1:254 = F= #Q1:254
 33F4:4750 37F5:0740  1854: #Q2:260 = F= #Q2:260
 33F4:475A 37F5:074A  1864: #P3:247 = Color:844
 33F4:4764 37F5:0754  1874: #P4:248 = fill@57:1068
 33F4:476E 37F5:075E  1884: #Q5:263 = F= #Q5:263
 33F4:4778 37F5:0768  1894: #Q6:264 = F= #Q6:264
 33F4:4782 37F5:0772  1904: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4788 37F5:0778  1910: WAITFORPROCESS DRW_PLAC:994
 33F4:478E 37F5:077E  1916: #L0:145 = SetSize:2053 > #I11:27
 33F4:479C 37F5:078C  1930: IFnot (#L0:145) GOTO .+80 (goto 2010)
 33F4:47A4 37F5:0794  1938: #Q1:254 = F= #Q1:254
 33F4:47AE 37F5:079E  1948: #Q2:260 = F= #Q2:260
 33F4:47B8 37F5:07A8  1958: #P3:247 = Color:844
 33F4:47C2 37F5:07B2  1968: #P4:248 = fill@57:1068
 33F4:47CC 37F5:07BC  1978: #Q5:263 = F= #Q5:263
 33F4:47D6 37F5:07C6  1988: #Q6:264 = F= #Q6:264
 33F4:47E0 37F5:07D0  1998: SPAWN DRW_PLAC:994(with 6 args)
 33F4:47E6 37F5:07D6  2004: WAITFORPROCESS DRW_PLAC:994
 33F4:47EC 37F5:07DC  2010: #Q1:254 = F= #Q1:254
 33F4:47F6 37F5:07E6  2020: #Q2:260 = F= #Q2:260
 33F4:4800 37F5:07F0  2030: #Q3:261 = F= #Q3:261
 33F4:480A 37F5:07FA  2040: #P4:248 = #I15:41
 33F4:4814 37F5:0804  2050: #P5:249 = fill@57:1068
 33F4:481E 37F5:080E  2060: #Q6:264 = F= #Q6:264
 33F4:4828 37F5:0818  2070: #Q7:265 = F= #Q7:265
 33F4:4832 37F5:0822  2080: SPAWN DRW_SQR:995(with 7 args)
 33F4:4838 37F5:0828  2086: WAITFORPROCESS DRW_SQR:995
 33F4:483E 37F5:082E  2092: NEXTTICK1
 33F4:4840 37F5:0830  2094: #L0 = CALL3 dSendf(#S302:495,plac@57:1613,plac@57:1613)
 33F4:484C 37F5:083C  2106: #L0 = CALL1 dSendf(#S303:496)
 33F4:4854 37F5:0844  2114: #Q1:254 = F= #Q1:254
 33F4:485E 37F5:084E  2124: #Q2:260 = F= #Q2:260
 33F4:4868 37F5:0858  2134: #Q3:261 = F= #Q3:261
 33F4:4872 37F5:0862  2144: #P4:248 = fixation_color@57:1127
 33F4:487C 37F5:086C  2154: #P5:249 = fill@57:1068
 33F4:4886 37F5:0876  2164: #Q6:264 = F= #Q6:264
 33F4:4890 37F5:0880  2174: #Q7:265 = F= #Q7:265
 33F4:489A 37F5:088A  2184: SPAWN DRW_SQR:995(with 7 args)
 33F4:48A0 37F5:0890  2190: WAITFORPROCESS DRW_SQR:995
 33F4:48A6 37F5:0896  2196: #L0:145 = SetSize:2053 > #I0:16
 33F4:48B4 37F5:08A4  2210: IFnot (#L0:145) GOTO .+80 (goto 2290)
 33F4:48BC 37F5:08AC  2218: #Q1:254 = F= #Q1:254
 33F4:48C6 37F5:08B6  2228: #Q2:260 = F= #Q2:260
 33F4:48D0 37F5:08C0  2238: #P3:247 = Color:844
 33F4:48DA 37F5:08CA  2248: #P4:248 = fill@57:1068
 33F4:48E4 37F5:08D4  2258: #Q5:263 = F= #Q5:263
 33F4:48EE 37F5:08DE  2268: #Q6:264 = F= #Q6:264
 33F4:48F8 37F5:08E8  2278: SPAWN DRW_PLAC:994(with 6 args)
 33F4:48FE 37F5:08EE  2284: WAITFORPROCESS DRW_PLAC:994
 33F4:4904 37F5:08F4  2290: #L0:145 = SetSize:2053 > #I1:17
 33F4:4912 37F5:0902  2304: IFnot (#L0:145) GOTO .+80 (goto 2384)
 33F4:491A 37F5:090A  2312: #Q1:254 = F= #Q1:254
 33F4:4924 37F5:0914  2322: #Q2:260 = F= #Q2:260
 33F4:492E 37F5:091E  2332: #P3:247 = d1color:913
 33F4:4938 37F5:0928  2342: #P4:248 = fill@57:1068
 33F4:4942 37F5:0932  2352: #Q5:263 = F= #Q5:263
 33F4:494C 37F5:093C  2362: #Q6:264 = F= #Q6:264
 33F4:4956 37F5:0946  2372: SPAWN DRW_PLAC:994(with 6 args)
 33F4:495C 37F5:094C  2378: WAITFORPROCESS DRW_PLAC:994
 33F4:4962 37F5:0952  2384: #L0:145 = SetSize:2053 > #I2:53
 33F4:4970 37F5:0960  2398: IFnot (#L0:145) GOTO .+80 (goto 2478)
 33F4:4978 37F5:0968  2406: #Q1:254 = F= #Q1:254
 33F4:4982 37F5:0972  2416: #Q2:260 = F= #Q2:260
 33F4:498C 37F5:097C  2426: #P3:247 = Color:844
 33F4:4996 37F5:0986  2436: #P4:248 = fill@57:1068
 33F4:49A0 37F5:0990  2446: #Q5:263 = F= #Q5:263
 33F4:49AA 37F5:099A  2456: #Q6:264 = F= #Q6:264
 33F4:49B4 37F5:09A4  2466: SPAWN DRW_PLAC:994(with 6 args)
 33F4:49BA 37F5:09AA  2472: WAITFORPROCESS DRW_PLAC:994
 33F4:49C0 37F5:09B0  2478: #L0:145 = SetSize:2053 > #I3:74
 33F4:49CE 37F5:09BE  2492: IFnot (#L0:145) GOTO .+80 (goto 2572)
 33F4:49D6 37F5:09C6  2500: #Q1:254 = F= #Q1:254
 33F4:49E0 37F5:09D0  2510: #Q2:260 = F= #Q2:260
 33F4:49EA 37F5:09DA  2520: #P3:247 = Color:844
 33F4:49F4 37F5:09E4  2530: #P4:248 = fill@57:1068
 33F4:49FE 37F5:09EE  2540: #Q5:263 = F= #Q5:263
 33F4:4A08 37F5:09F8  2550: #Q6:264 = F= #Q6:264
 33F4:4A12 37F5:0A02  2560: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4A18 37F5:0A08  2566: WAITFORPROCESS DRW_PLAC:994
 33F4:4A1E 37F5:0A0E  2572: #L0:145 = SetSize:2053 > #I4:87
 33F4:4A2C 37F5:0A1C  2586: IFnot (#L0:145) GOTO .+80 (goto 2666)
 33F4:4A34 37F5:0A24  2594: #Q1:254 = F= #Q1:254
 33F4:4A3E 37F5:0A2E  2604: #Q2:260 = F= #Q2:260
 33F4:4A48 37F5:0A38  2614: #P3:247 = Color:844
 33F4:4A52 37F5:0A42  2624: #P4:248 = fill@57:1068
 33F4:4A5C 37F5:0A4C  2634: #Q5:263 = F= #Q5:263
 33F4:4A66 37F5:0A56  2644: #Q6:264 = F= #Q6:264
 33F4:4A70 37F5:0A60  2654: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4A76 37F5:0A66  2660: WAITFORPROCESS DRW_PLAC:994
 33F4:4A7C 37F5:0A6C  2666: #L0:145 = SetSize:2053 > #I5:111
 33F4:4A8A 37F5:0A7A  2680: IFnot (#L0:145) GOTO .+80 (goto 2760)
 33F4:4A92 37F5:0A82  2688: #Q1:254 = F= #Q1:254
 33F4:4A9C 37F5:0A8C  2698: #Q2:260 = F= #Q2:260
 33F4:4AA6 37F5:0A96  2708: #P3:247 = Color:844
 33F4:4AB0 37F5:0AA0  2718: #P4:248 = fill@57:1068
 33F4:4ABA 37F5:0AAA  2728: #Q5:263 = F= #Q5:263
 33F4:4AC4 37F5:0AB4  2738: #Q6:264 = F= #Q6:264
 33F4:4ACE 37F5:0ABE  2748: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4AD4 37F5:0AC4  2754: WAITFORPROCESS DRW_PLAC:994
 33F4:4ADA 37F5:0ACA  2760: #L0:145 = SetSize:2053 > #I6:120
 33F4:4AE8 37F5:0AD8  2774: IFnot (#L0:145) GOTO .+80 (goto 2854)
 33F4:4AF0 37F5:0AE0  2782: #Q1:254 = F= #Q1:254
 33F4:4AFA 37F5:0AEA  2792: #Q2:260 = F= #Q2:260
 33F4:4B04 37F5:0AF4  2802: #P3:247 = Color:844
 33F4:4B0E 37F5:0AFE  2812: #P4:248 = fill@57:1068
 33F4:4B18 37F5:0B08  2822: #Q5:263 = F= #Q5:263
 33F4:4B22 37F5:0B12  2832: #Q6:264 = F= #Q6:264
 33F4:4B2C 37F5:0B1C  2842: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4B32 37F5:0B22  2848: WAITFORPROCESS DRW_PLAC:994
 33F4:4B38 37F5:0B28  2854: #L0:145 = SetSize:2053 > #I7:129
 33F4:4B46 37F5:0B36  2868: IFnot (#L0:145) GOTO .+80 (goto 2948)
 33F4:4B4E 37F5:0B3E  2876: #Q1:254 = F= #Q1:254
 33F4:4B58 37F5:0B48  2886: #Q2:260 = F= #Q2:260
 33F4:4B62 37F5:0B52  2896: #P3:247 = Color:844
 33F4:4B6C 37F5:0B5C  2906: #P4:248 = fill@57:1068
 33F4:4B76 37F5:0B66  2916: #Q5:263 = F= #Q5:263
 33F4:4B80 37F5:0B70  2926: #Q6:264 = F= #Q6:264
 33F4:4B8A 37F5:0B7A  2936: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4B90 37F5:0B80  2942: WAITFORPROCESS DRW_PLAC:994
 33F4:4B96 37F5:0B86  2948: #L0:145 = SetSize:2053 > #I8:133
 33F4:4BA4 37F5:0B94  2962: IFnot (#L0:145) GOTO .+80 (goto 3042)
 33F4:4BAC 37F5:0B9C  2970: #Q1:254 = F= #Q1:254
 33F4:4BB6 37F5:0BA6  2980: #Q2:260 = F= #Q2:260
 33F4:4BC0 37F5:0BB0  2990: #P3:247 = Color:844
 33F4:4BCA 37F5:0BBA  3000: #P4:248 = fill@57:1068
 33F4:4BD4 37F5:0BC4  3010: #Q5:263 = F= #Q5:263
 33F4:4BDE 37F5:0BCE  3020: #Q6:264 = F= #Q6:264
 33F4:4BE8 37F5:0BD8  3030: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4BEE 37F5:0BDE  3036: WAITFORPROCESS DRW_PLAC:994
 33F4:4BF4 37F5:0BE4  3042: #L0:145 = SetSize:2053 > #I9:140
 33F4:4C02 37F5:0BF2  3056: IFnot (#L0:145) GOTO .+80 (goto 3136)
 33F4:4C0A 37F5:0BFA  3064: #Q1:254 = F= #Q1:254
 33F4:4C14 37F5:0C04  3074: #Q2:260 = F= #Q2:260
 33F4:4C1E 37F5:0C0E  3084: #P3:247 = Color:844
 33F4:4C28 37F5:0C18  3094: #P4:248 = fill@57:1068
 33F4:4C32 37F5:0C22  3104: #Q5:263 = F= #Q5:263
 33F4:4C3C 37F5:0C2C  3114: #Q6:264 = F= #Q6:264
 33F4:4C46 37F5:0C36  3124: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4C4C 37F5:0C3C  3130: WAITFORPROCESS DRW_PLAC:994
 33F4:4C52 37F5:0C42  3136: #L0:145 = SetSize:2053 > #I10:18
 33F4:4C60 37F5:0C50  3150: IFnot (#L0:145) GOTO .+80 (goto 3230)
 33F4:4C68 37F5:0C58  3158: #Q1:254 = F= #Q1:254
 33F4:4C72 37F5:0C62  3168: #Q2:260 = F= #Q2:260
 33F4:4C7C 37F5:0C6C  3178: #P3:247 = Color:844
 33F4:4C86 37F5:0C76  3188: #P4:248 = fill@57:1068
 33F4:4C90 37F5:0C80  3198: #Q5:263 = F= #Q5:263
 33F4:4C9A 37F5:0C8A  3208: #Q6:264 = F= #Q6:264
 33F4:4CA4 37F5:0C94  3218: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4CAA 37F5:0C9A  3224: WAITFORPROCESS DRW_PLAC:994
 33F4:4CB0 37F5:0CA0  3230: #L0:145 = SetSize:2053 > #I11:27
 33F4:4CBE 37F5:0CAE  3244: IFnot (#L0:145) GOTO .+80 (goto 3324)
 33F4:4CC6 37F5:0CB6  3252: #Q1:254 = F= #Q1:254
 33F4:4CD0 37F5:0CC0  3262: #Q2:260 = F= #Q2:260
 33F4:4CDA 37F5:0CCA  3272: #P3:247 = Color:844
 33F4:4CE4 37F5:0CD4  3282: #P4:248 = fill@57:1068
 33F4:4CEE 37F5:0CDE  3292: #Q5:263 = F= #Q5:263
 33F4:4CF8 37F5:0CE8  3302: #Q6:264 = F= #Q6:264
 33F4:4D02 37F5:0CF2  3312: SPAWN DRW_PLAC:994(with 6 args)
 33F4:4D08 37F5:0CF8  3318: WAITFORPROCESS DRW_PLAC:994
 33F4:4D0E 37F5:0CFE  3324: NEXTTICK1
 33F4:4D10 37F5:0D00  3326: #L0 = CALL3 dSendf(#S304:497,target_f_pd@57:2247,target_f_pd@57:2247)
 33F4:4D1C 37F5:0D0C  3338: #L0 = CALL1 dSendf(#S305:498)
 33F4:4D24 37F5:0D14  3346: #L0:145 = SetSize:2053 > #I0:16
 33F4:4D32 37F5:0D22  3360: IFnot (#L0:145) GOTO .+220 (goto 3580)
 33F4:4D3A 37F5:0D2A  3368: #L1:146 = Catch:821 == #I0:16
 33F4:4D48 37F5:0D38  3382: IFnot (#L1:146) GOTO .+94 (goto 3476)
 33F4:4D50 37F5:0D40  3390: #Q1:254 = F= #Q1:254
 33F4:4D5A 37F5:0D4A  3400: #Q2:260 = F= #Q2:260
 33F4:4D64 37F5:0D54  3410: #P3:247 = Color:844
 33F4:4D6E 37F5:0D5E  3420: #Q4:262 = F= #Q4:262
 33F4:4D78 37F5:0D68  3430: #P5:249 = fill@57:1068
 33F4:4D82 37F5:0D72  3440: #Q6:264 = F= #Q6:264
 33F4:4D8C 37F5:0D7C  3450: #Q7:265 = F= #Q7:265
 33F4:4D96 37F5:0D86  3460: SPAWN DRW_L:993(with 7 args)
 33F4:4D9C 37F5:0D8C  3466: WAITFORPROCESS DRW_L:993
 33F4:4DA2 37F5:0D92  3472: GOTO .+108 (goto 3580)
 33F4:4DA6 37F5:0D96  3476: #L0:145 = Catch:821 == #I1:17
 33F4:4DB4 37F5:0DA4  3490: IFnot (#L0:145) GOTO .+90 (goto 3580)
 33F4:4DBC 37F5:0DAC  3498: #Q1:254 = F= #Q1:254
 33F4:4DC6 37F5:0DB6  3508: #Q2:260 = F= #Q2:260
 33F4:4DD0 37F5:0DC0  3518: #P3:247 = Color:844
 33F4:4DDA 37F5:0DCA  3528: #Q4:262 = F= #Q4:262
 33F4:4DE4 37F5:0DD4  3538: #P5:249 = fill@57:1068
 33F4:4DEE 37F5:0DDE  3548: #Q6:264 = F= #Q6:264
 33F4:4DF8 37F5:0DE8  3558: #Q7:265 = F= #Q7:265
 33F4:4E02 37F5:0DF2  3568: SPAWN DRW_T:996(with 7 args)
 33F4:4E08 37F5:0DF8  3574: WAITFORPROCESS DRW_T:996
 33F4:4E0E 37F5:0DFE  3580: #L0:145 = SetSize:2053 > #I1:17
 33F4:4E1C 37F5:0E0C  3594: IFnot (#L0:145) GOTO .+90 (goto 3684)
 33F4:4E24 37F5:0E14  3602: #Q1:254 = F= #Q1:254
 33F4:4E2E 37F5:0E1E  3612: #Q2:260 = F= #Q2:260
 33F4:4E38 37F5:0E28  3622: #P3:247 = d1color:913
 33F4:4E42 37F5:0E32  3632: #Q4:262 = F= #Q4:262
 33F4:4E4C 37F5:0E3C  3642: #P5:249 = fill@57:1068
 33F4:4E56 37F5:0E46  3652: #Q6:264 = F= #Q6:264
 33F4:4E60 37F5:0E50  3662: #Q7:265 = F= #Q7:265
 33F4:4E6A 37F5:0E5A  3672: SPAWN DRW_T:996(with 7 args)
 33F4:4E70 37F5:0E60  3678: WAITFORPROCESS DRW_T:996
 33F4:4E76 37F5:0E66  3684: #L0:145 = SetSize:2053 > #I2:53
 33F4:4E84 37F5:0E74  3698: IFnot (#L0:145) GOTO .+90 (goto 3788)
 33F4:4E8C 37F5:0E7C  3706: #Q1:254 = F= #Q1:254
 33F4:4E96 37F5:0E86  3716: #Q2:260 = F= #Q2:260
 33F4:4EA0 37F5:0E90  3726: #P3:247 = Color:844
 33F4:4EAA 37F5:0E9A  3736: #Q4:262 = F= #Q4:262
 33F4:4EB4 37F5:0EA4  3746: #P5:249 = fill@57:1068
 33F4:4EBE 37F5:0EAE  3756: #Q6:264 = F= #Q6:264
 33F4:4EC8 37F5:0EB8  3766: #Q7:265 = F= #Q7:265
 33F4:4ED2 37F5:0EC2  3776: SPAWN DRW_T:996(with 7 args)
 33F4:4ED8 37F5:0EC8  3782: WAITFORPROCESS DRW_T:996
 33F4:4EDE 37F5:0ECE  3788: #L0:145 = SetSize:2053 > #I3:74
 33F4:4EEC 37F5:0EDC  3802: IFnot (#L0:145) GOTO .+90 (goto 3892)
 33F4:4EF4 37F5:0EE4  3810: #Q1:254 = F= #Q1:254
 33F4:4EFE 37F5:0EEE  3820: #Q2:260 = F= #Q2:260
 33F4:4F08 37F5:0EF8  3830: #P3:247 = Color:844
 33F4:4F12 37F5:0F02  3840: #Q4:262 = F= #Q4:262
 33F4:4F1C 37F5:0F0C  3850: #P5:249 = fill@57:1068
 33F4:4F26 37F5:0F16  3860: #Q6:264 = F= #Q6:264
 33F4:4F30 37F5:0F20  3870: #Q7:265 = F= #Q7:265
 33F4:4F3A 37F5:0F2A  3880: SPAWN DRW_T:996(with 7 args)
 33F4:4F40 37F5:0F30  3886: WAITFORPROCESS DRW_T:996
 33F4:4F46 37F5:0F36  3892: #L0:145 = SetSize:2053 > #I4:87
 33F4:4F54 37F5:0F44  3906: IFnot (#L0:145) GOTO .+90 (goto 3996)
 33F4:4F5C 37F5:0F4C  3914: #Q1:254 = F= #Q1:254
 33F4:4F66 37F5:0F56  3924: #Q2:260 = F= #Q2:260
 33F4:4F70 37F5:0F60  3934: #P3:247 = Color:844
 33F4:4F7A 37F5:0F6A  3944: #Q4:262 = F= #Q4:262
 33F4:4F84 37F5:0F74  3954: #P5:249 = fill@57:1068
 33F4:4F8E 37F5:0F7E  3964: #Q6:264 = F= #Q6:264
 33F4:4F98 37F5:0F88  3974: #Q7:265 = F= #Q7:265
 33F4:4FA2 37F5:0F92  3984: SPAWN DRW_T:996(with 7 args)
 33F4:4FA8 37F5:0F98  3990: WAITFORPROCESS DRW_T:996
 33F4:4FAE 37F5:0F9E  3996: #L0:145 = SetSize:2053 > #I5:111
 33F4:4FBC 37F5:0FAC  4010: IFnot (#L0:145) GOTO .+90 (goto 4100)
 33F4:4FC4 37F5:0FB4  4018: #Q1:254 = F= #Q1:254
 33F4:4FCE 37F5:0FBE  4028: #Q2:260 = F= #Q2:260
 33F4:4FD8 37F5:0FC8  4038: #P3:247 = Color:844
 33F4:4FE2 37F5:0FD2  4048: #Q4:262 = F= #Q4:262
 33F4:4FEC 37F5:0FDC  4058: #P5:249 = fill@57:1068
 33F4:4FF6 37F5:0FE6  4068: #Q6:264 = F= #Q6:264
 33F4:5000 37F5:0FF0  4078: #Q7:265 = F= #Q7:265
 33F4:500A 37F5:0FFA  4088: SPAWN DRW_T:996(with 7 args)
 33F4:5010 37F5:1000  4094: WAITFORPROCESS DRW_T:996
 33F4:5016 37F5:1006  4100: #L0:145 = SetSize:2053 > #I6:120
 33F4:5024 37F5:1014  4114: IFnot (#L0:145) GOTO .+90 (goto 4204)
 33F4:502C 37F5:101C  4122: #Q1:254 = F= #Q1:254
 33F4:5036 37F5:1026  4132: #Q2:260 = F= #Q2:260
 33F4:5040 37F5:1030  4142: #P3:247 = Color:844
 33F4:504A 37F5:103A  4152: #Q4:262 = F= #Q4:262
 33F4:5054 37F5:1044  4162: #P5:249 = fill@57:1068
 33F4:505E 37F5:104E  4172: #Q6:264 = F= #Q6:264
 33F4:5068 37F5:1058  4182: #Q7:265 = F= #Q7:265
 33F4:5072 37F5:1062  4192: SPAWN DRW_T:996(with 7 args)
 33F4:5078 37F5:1068  4198: WAITFORPROCESS DRW_T:996
 33F4:507E 37F5:106E  4204: #L0:145 = SetSize:2053 > #I7:129
 33F4:508C 37F5:107C  4218: IFnot (#L0:145) GOTO .+90 (goto 4308)
 33F4:5094 37F5:1084  4226: #Q1:254 = F= #Q1:254
 33F4:509E 37F5:108E  4236: #Q2:260 = F= #Q2:260
 33F4:50A8 37F5:1098  4246: #P3:247 = Color:844
 33F4:50B2 37F5:10A2  4256: #Q4:262 = F= #Q4:262
 33F4:50BC 37F5:10AC  4266: #P5:249 = fill@57:1068
 33F4:50C6 37F5:10B6  4276: #Q6:264 = F= #Q6:264
 33F4:50D0 37F5:10C0  4286: #Q7:265 = F= #Q7:265
 33F4:50DA 37F5:10CA  4296: SPAWN DRW_T:996(with 7 args)
 33F4:50E0 37F5:10D0  4302: WAITFORPROCESS DRW_T:996
 33F4:50E6 37F5:10D6  4308: #L0:145 = SetSize:2053 > #I8:133
 33F4:50F4 37F5:10E4  4322: IFnot (#L0:145) GOTO .+90 (goto 4412)
 33F4:50FC 37F5:10EC  4330: #Q1:254 = F= #Q1:254
 33F4:5106 37F5:10F6  4340: #Q2:260 = F= #Q2:260
 33F4:5110 37F5:1100  4350: #P3:247 = Color:844
 33F4:511A 37F5:110A  4360: #Q4:262 = F= #Q4:262
 33F4:5124 37F5:1114  4370: #P5:249 = fill@57:1068
 33F4:512E 37F5:111E  4380: #Q6:264 = F= #Q6:264
 33F4:5138 37F5:1128  4390: #Q7:265 = F= #Q7:265
 33F4:5142 37F5:1132  4400: SPAWN DRW_T:996(with 7 args)
 33F4:5148 37F5:1138  4406: WAITFORPROCESS DRW_T:996
 33F4:514E 37F5:113E  4412: #L0:145 = SetSize:2053 > #I9:140
 33F4:515C 37F5:114C  4426: IFnot (#L0:145) GOTO .+90 (goto 4516)
 33F4:5164 37F5:1154  4434: #Q1:254 = F= #Q1:254
 33F4:516E 37F5:115E  4444: #Q2:260 = F= #Q2:260
 33F4:5178 37F5:1168  4454: #P3:247 = Color:844
 33F4:5182 37F5:1172  4464: #Q4:262 = F= #Q4:262
 33F4:518C 37F5:117C  4474: #P5:249 = fill@57:1068
 33F4:5196 37F5:1186  4484: #Q6:264 = F= #Q6:264
 33F4:51A0 37F5:1190  4494: #Q7:265 = F= #Q7:265
 33F4:51AA 37F5:119A  4504: SPAWN DRW_T:996(with 7 args)
 33F4:51B0 37F5:11A0  4510: WAITFORPROCESS DRW_T:996
 33F4:51B6 37F5:11A6  4516: #L0:145 = SetSize:2053 > #I10:18
 33F4:51C4 37F5:11B4  4530: IFnot (#L0:145) GOTO .+90 (goto 4620)
 33F4:51CC 37F5:11BC  4538: #Q1:254 = F= #Q1:254
 33F4:51D6 37F5:11C6  4548: #Q2:260 = F= #Q2:260
 33F4:51E0 37F5:11D0  4558: #P3:247 = Color:844
 33F4:51EA 37F5:11DA  4568: #Q4:262 = F= #Q4:262
 33F4:51F4 37F5:11E4  4578: #P5:249 = fill@57:1068
 33F4:51FE 37F5:11EE  4588: #Q6:264 = F= #Q6:264
 33F4:5208 37F5:11F8  4598: #Q7:265 = F= #Q7:265
 33F4:5212 37F5:1202  4608: SPAWN DRW_T:996(with 7 args)
 33F4:5218 37F5:1208  4614: WAITFORPROCESS DRW_T:996
 33F4:521E 37F5:120E  4620: #L0:145 = SetSize:2053 > #I11:27
 33F4:522C 37F5:121C  4634: IFnot (#L0:145) GOTO .+90 (goto 4724)
 33F4:5234 37F5:1224  4642: #Q1:254 = F= #Q1:254
 33F4:523E 37F5:122E  4652: #Q2:260 = F= #Q2:260
 33F4:5248 37F5:1238  4662: #P3:247 = Color:844
 33F4:5252 37F5:1242  4672: #Q4:262 = F= #Q4:262
 33F4:525C 37F5:124C  4682: #P5:249 = fill@57:1068
 33F4:5266 37F5:1256  4692: #Q6:264 = F= #Q6:264
 33F4:5270 37F5:1260  4702: #Q7:265 = F= #Q7:265
 33F4:527A 37F5:126A  4712: SPAWN DRW_T:996(with 7 args)
 33F4:5280 37F5:1270  4718: WAITFORPROCESS DRW_T:996
 33F4:5286 37F5:1276  4724: #Q1:254 = F= #Q1:254
 33F4:5290 37F5:1280  4734: #Q2:260 = F= #Q2:260
 33F4:529A 37F5:128A  4744: #Q3:261 = F= #Q3:261
 33F4:52A4 37F5:1294  4754: #P4:248 = fixation_color@57:1127
 33F4:52AE 37F5:129E  4764: #P5:249 = fill@57:1068
 33F4:52B8 37F5:12A8  4774: #Q6:264 = F= #Q6:264
 33F4:52C2 37F5:12B2  4784: #Q7:265 = F= #Q7:265
 33F4:52CC 37F5:12BC  4794: SPAWN DRW_SQR:995(with 7 args)
 33F4:52D2 37F5:12C2  4800: WAITFORPROCESS DRW_SQR:995
 33F4:52D8 37F5:12C8  4806: #Q1:254 = F= #Q1:254
 33F4:52E2 37F5:12D2  4816: #Q2:260 = F= #Q2:260
 33F4:52EC 37F5:12DC  4826: #Q3:261 = F= #Q3:261
 33F4:52F6 37F5:12E6  4836: #P4:248 = #I15:41
 33F4:5300 37F5:12F0  4846: #P5:249 = fill@57:1068
 33F4:530A 37F5:12FA  4856: #Q6:264 = F= #Q6:264
 33F4:5314 37F5:1304  4866: #Q7:265 = F= #Q7:265
 33F4:531E 37F5:130E  4876: SPAWN DRW_SQR:995(with 7 args)
 33F4:5324 37F5:1314  4882: WAITFORPROCESS DRW_SQR:995
 33F4:532A 37F5:131A  4888: NEXTTICK1
 33F4:532C 37F5:131C  4890: #L0 = CALL3 dSendf(#S306:499,target_f@57:2244,target_f@57:2244)
 33F4:5338 37F5:1328  4902: #L0 = CALL1 dSendf(#S307:500)
 33F4:5340 37F5:1330  4910: #L0:145 = SetSize:2053 > #I0:16
 33F4:534E 37F5:133E  4924: IFnot (#L0:145) GOTO .+220 (goto 5144)
 33F4:5356 37F5:1346  4932: #L1:146 = Catch:821 == #I0:16
 33F4:5364 37F5:1354  4946: IFnot (#L1:146) GOTO .+94 (goto 5040)
 33F4:536C 37F5:135C  4954: #Q1:254 = F= #Q1:254
 33F4:5376 37F5:1366  4964: #Q2:260 = F= #Q2:260
 33F4:5380 37F5:1370  4974: #P3:247 = Color:844
 33F4:538A 37F5:137A  4984: #Q4:262 = F= #Q4:262
 33F4:5394 37F5:1384  4994: #P5:249 = fill@57:1068
 33F4:539E 37F5:138E  5004: #Q6:264 = F= #Q6:264
 33F4:53A8 37F5:1398  5014: #Q7:265 = F= #Q7:265
 33F4:53B2 37F5:13A2  5024: SPAWN DRW_L:993(with 7 args)
 33F4:53B8 37F5:13A8  5030: WAITFORPROCESS DRW_L:993
 33F4:53BE 37F5:13AE  5036: GOTO .+108 (goto 5144)
 33F4:53C2 37F5:13B2  5040: #L0:145 = Catch:821 == #I1:17
 33F4:53D0 37F5:13C0  5054: IFnot (#L0:145) GOTO .+90 (goto 5144)
 33F4:53D8 37F5:13C8  5062: #Q1:254 = F= #Q1:254
 33F4:53E2 37F5:13D2  5072: #Q2:260 = F= #Q2:260
 33F4:53EC 37F5:13DC  5082: #P3:247 = Color:844
 33F4:53F6 37F5:13E6  5092: #Q4:262 = F= #Q4:262
 33F4:5400 37F5:13F0  5102: #P5:249 = fill@57:1068
 33F4:540A 37F5:13FA  5112: #Q6:264 = F= #Q6:264
 33F4:5414 37F5:1404  5122: #Q7:265 = F= #Q7:265
 33F4:541E 37F5:140E  5132: SPAWN DRW_T:996(with 7 args)
 33F4:5424 37F5:1414  5138: WAITFORPROCESS DRW_T:996
 33F4:542A 37F5:141A  5144: #L0:145 = SetSize:2053 > #I1:17
 33F4:5438 37F5:1428  5158: IFnot (#L0:145) GOTO .+90 (goto 5248)
 33F4:5440 37F5:1430  5166: #Q1:254 = F= #Q1:254
 33F4:544A 37F5:143A  5176: #Q2:260 = F= #Q2:260
 33F4:5454 37F5:1444  5186: #P3:247 = d1color:913
 33F4:545E 37F5:144E  5196: #Q4:262 = F= #Q4:262
 33F4:5468 37F5:1458  5206: #P5:249 = fill@57:1068
 33F4:5472 37F5:1462  5216: #Q6:264 = F= #Q6:264
 33F4:547C 37F5:146C  5226: #Q7:265 = F= #Q7:265
 33F4:5486 37F5:1476  5236: SPAWN DRW_T:996(with 7 args)
 33F4:548C 37F5:147C  5242: WAITFORPROCESS DRW_T:996
 33F4:5492 37F5:1482  5248: #L0:145 = SetSize:2053 > #I2:53
 33F4:54A0 37F5:1490  5262: IFnot (#L0:145) GOTO .+90 (goto 5352)
 33F4:54A8 37F5:1498  5270: #Q1:254 = F= #Q1:254
 33F4:54B2 37F5:14A2  5280: #Q2:260 = F= #Q2:260
 33F4:54BC 37F5:14AC  5290: #P3:247 = Color:844
 33F4:54C6 37F5:14B6  5300: #Q4:262 = F= #Q4:262
 33F4:54D0 37F5:14C0  5310: #P5:249 = fill@57:1068
 33F4:54DA 37F5:14CA  5320: #Q6:264 = F= #Q6:264
 33F4:54E4 37F5:14D4  5330: #Q7:265 = F= #Q7:265
 33F4:54EE 37F5:14DE  5340: SPAWN DRW_T:996(with 7 args)
 33F4:54F4 37F5:14E4  5346: WAITFORPROCESS DRW_T:996
 33F4:54FA 37F5:14EA  5352: #L0:145 = SetSize:2053 > #I3:74
 33F4:5508 37F5:14F8  5366: IFnot (#L0:145) GOTO .+90 (goto 5456)
 33F4:5510 37F5:1500  5374: #Q1:254 = F= #Q1:254
 33F4:551A 37F5:150A  5384: #Q2:260 = F= #Q2:260
 33F4:5524 37F5:1514  5394: #P3:247 = Color:844
 33F4:552E 37F5:151E  5404: #Q4:262 = F= #Q4:262
 33F4:5538 37F5:1528  5414: #P5:249 = fill@57:1068
 33F4:5542 37F5:1532  5424: #Q6:264 = F= #Q6:264
 33F4:554C 37F5:153C  5434: #Q7:265 = F= #Q7:265
 33F4:5556 37F5:1546  5444: SPAWN DRW_T:996(with 7 args)
 33F4:555C 37F5:154C  5450: WAITFORPROCESS DRW_T:996
 33F4:5562 37F5:1552  5456: #L0:145 = SetSize:2053 > #I4:87
 33F4:5570 37F5:1560  5470: IFnot (#L0:145) GOTO .+90 (goto 5560)
 33F4:5578 37F5:1568  5478: #Q1:254 = F= #Q1:254
 33F4:5582 37F5:1572  5488: #Q2:260 = F= #Q2:260
 33F4:558C 37F5:157C  5498: #P3:247 = Color:844
 33F4:5596 37F5:1586  5508: #Q4:262 = F= #Q4:262
 33F4:55A0 37F5:1590  5518: #P5:249 = fill@57:1068
 33F4:55AA 37F5:159A  5528: #Q6:264 = F= #Q6:264
 33F4:55B4 37F5:15A4  5538: #Q7:265 = F= #Q7:265
 33F4:55BE 37F5:15AE  5548: SPAWN DRW_T:996(with 7 args)
 33F4:55C4 37F5:15B4  5554: WAITFORPROCESS DRW_T:996
 33F4:55CA 37F5:15BA  5560: #L0:145 = SetSize:2053 > #I5:111
 33F4:55D8 37F5:15C8  5574: IFnot (#L0:145) GOTO .+90 (goto 5664)
 33F4:55E0 37F5:15D0  5582: #Q1:254 = F= #Q1:254
 33F4:55EA 37F5:15DA  5592: #Q2:260 = F= #Q2:260
 33F4:55F4 37F5:15E4  5602: #P3:247 = Color:844
 33F4:55FE 37F5:15EE  5612: #Q4:262 = F= #Q4:262
 33F4:5608 37F5:15F8  5622: #P5:249 = fill@57:1068
 33F4:5612 37F5:1602  5632: #Q6:264 = F= #Q6:264
 33F4:561C 37F5:160C  5642: #Q7:265 = F= #Q7:265
 33F4:5626 37F5:1616  5652: SPAWN DRW_T:996(with 7 args)
 33F4:562C 37F5:161C  5658: WAITFORPROCESS DRW_T:996
 33F4:5632 37F5:1622  5664: #L0:145 = SetSize:2053 > #I6:120
 33F4:5640 37F5:1630  5678: IFnot (#L0:145) GOTO .+90 (goto 5768)
 33F4:5648 37F5:1638  5686: #Q1:254 = F= #Q1:254
 33F4:5652 37F5:1642  5696: #Q2:260 = F= #Q2:260
 33F4:565C 37F5:164C  5706: #P3:247 = Color:844
 33F4:5666 37F5:1656  5716: #Q4:262 = F= #Q4:262
 33F4:5670 37F5:1660  5726: #P5:249 = fill@57:1068
 33F4:567A 37F5:166A  5736: #Q6:264 = F= #Q6:264
 33F4:5684 37F5:1674  5746: #Q7:265 = F= #Q7:265
 33F4:568E 37F5:167E  5756: SPAWN DRW_T:996(with 7 args)
 33F4:5694 37F5:1684  5762: WAITFORPROCESS DRW_T:996
 33F4:569A 37F5:168A  5768: #L0:145 = SetSize:2053 > #I7:129
 33F4:56A8 37F5:1698  5782: IFnot (#L0:145) GOTO .+90 (goto 5872)
 33F4:56B0 37F5:16A0  5790: #Q1:254 = F= #Q1:254
 33F4:56BA 37F5:16AA  5800: #Q2:260 = F= #Q2:260
 33F4:56C4 37F5:16B4  5810: #P3:247 = Color:844
 33F4:56CE 37F5:16BE  5820: #Q4:262 = F= #Q4:262
 33F4:56D8 37F5:16C8  5830: #P5:249 = fill@57:1068
 33F4:56E2 37F5:16D2  5840: #Q6:264 = F= #Q6:264
 33F4:56EC 37F5:16DC  5850: #Q7:265 = F= #Q7:265
 33F4:56F6 37F5:16E6  5860: SPAWN DRW_T:996(with 7 args)
 33F4:56FC 37F5:16EC  5866: WAITFORPROCESS DRW_T:996
 33F4:5702 37F5:16F2  5872: #L0:145 = SetSize:2053 > #I8:133
 33F4:5710 37F5:1700  5886: IFnot (#L0:145) GOTO .+90 (goto 5976)
 33F4:5718 37F5:1708  5894: #Q1:254 = F= #Q1:254
 33F4:5722 37F5:1712  5904: #Q2:260 = F= #Q2:260
 33F4:572C 37F5:171C  5914: #P3:247 = Color:844
 33F4:5736 37F5:1726  5924: #Q4:262 = F= #Q4:262
 33F4:5740 37F5:1730  5934: #P5:249 = fill@57:1068
 33F4:574A 37F5:173A  5944: #Q6:264 = F= #Q6:264
 33F4:5754 37F5:1744  5954: #Q7:265 = F= #Q7:265
 33F4:575E 37F5:174E  5964: SPAWN DRW_T:996(with 7 args)
 33F4:5764 37F5:1754  5970: WAITFORPROCESS DRW_T:996
 33F4:576A 37F5:175A  5976: #L0:145 = SetSize:2053 > #I9:140
 33F4:5778 37F5:1768  5990: IFnot (#L0:145) GOTO .+90 (goto 6080)
 33F4:5780 37F5:1770  5998: #Q1:254 = F= #Q1:254
 33F4:578A 37F5:177A  6008: #Q2:260 = F= #Q2:260
 33F4:5794 37F5:1784  6018: #P3:247 = Color:844
 33F4:579E 37F5:178E  6028: #Q4:262 = F= #Q4:262
 33F4:57A8 37F5:1798  6038: #P5:249 = fill@57:1068
 33F4:57B2 37F5:17A2  6048: #Q6:264 = F= #Q6:264
 33F4:57BC 37F5:17AC  6058: #Q7:265 = F= #Q7:265
 33F4:57C6 37F5:17B6  6068: SPAWN DRW_T:996(with 7 args)
 33F4:57CC 37F5:17BC  6074: WAITFORPROCESS DRW_T:996
 33F4:57D2 37F5:17C2  6080: #L0:145 = SetSize:2053 > #I10:18
 33F4:57E0 37F5:17D0  6094: IFnot (#L0:145) GOTO .+90 (goto 6184)
 33F4:57E8 37F5:17D8  6102: #Q1:254 = F= #Q1:254
 33F4:57F2 37F5:17E2  6112: #Q2:260 = F= #Q2:260
 33F4:57FC 37F5:17EC  6122: #P3:247 = Color:844
 33F4:5806 37F5:17F6  6132: #Q4:262 = F= #Q4:262
 33F4:5810 37F5:1800  6142: #P5:249 = fill@57:1068
 33F4:581A 37F5:180A  6152: #Q6:264 = F= #Q6:264
 33F4:5824 37F5:1814  6162: #Q7:265 = F= #Q7:265
 33F4:582E 37F5:181E  6172: SPAWN DRW_T:996(with 7 args)
 33F4:5834 37F5:1824  6178: WAITFORPROCESS DRW_T:996
 33F4:583A 37F5:182A  6184: #L0:145 = SetSize:2053 > #I11:27
 33F4:5848 37F5:1838  6198: IFnot (#L0:145) GOTO .+90 (goto 6288)
 33F4:5850 37F5:1840  6206: #Q1:254 = F= #Q1:254
 33F4:585A 37F5:184A  6216: #Q2:260 = F= #Q2:260
 33F4:5864 37F5:1854  6226: #P3:247 = Color:844
 33F4:586E 37F5:185E  6236: #Q4:262 = F= #Q4:262
 33F4:5878 37F5:1868  6246: #P5:249 = fill@57:1068
 33F4:5882 37F5:1872  6256: #Q6:264 = F= #Q6:264
 33F4:588C 37F5:187C  6266: #Q7:265 = F= #Q7:265
 33F4:5896 37F5:1886  6276: SPAWN DRW_T:996(with 7 args)
 33F4:589C 37F5:188C  6282: WAITFORPROCESS DRW_T:996
 33F4:58A2 37F5:1892  6288: #Q1:254 = F= #Q1:254
 33F4:58AC 37F5:189C  6298: #Q2:260 = F= #Q2:260
 33F4:58B6 37F5:18A6  6308: #Q3:261 = F= #Q3:261
 33F4:58C0 37F5:18B0  6318: #P4:248 = fixation_color@57:1127
 33F4:58CA 37F5:18BA  6328: #P5:249 = fill@57:1068
 33F4:58D4 37F5:18C4  6338: #Q6:264 = F= #Q6:264
 33F4:58DE 37F5:18CE  6348: #Q7:265 = F= #Q7:265
 33F4:58E8 37F5:18D8  6358: SPAWN DRW_SQR:995(with 7 args)
 33F4:58EE 37F5:18DE  6364: WAITFORPROCESS DRW_SQR:995
 33F4:58F4 37F5:18E4  6370: NEXTTICK1
 33F4:58F6 37F5:18E6  6372: #L0 = CALL3 dSendf(#S308:501,target@57:2234,target@57:2234)
 33F4:5902 37F5:18F2  6384: #L0 = CALL1 dSendf(#S309:502)
 33F4:590A 37F5:18FA  6392: #L0:145 = SetSize:2053 > #I0:16
 33F4:5918 37F5:1908  6406: IFnot (#L0:145) GOTO .+220 (goto 6626)
 33F4:5920 37F5:1910  6414: #L1:146 = Catch:821 == #I0:16
 33F4:592E 37F5:191E  6428: IFnot (#L1:146) GOTO .+94 (goto 6522)
 33F4:5936 37F5:1926  6436: #Q1:254 = F= #Q1:254
 33F4:5940 37F5:1930  6446: #Q2:260 = F= #Q2:260
 33F4:594A 37F5:193A  6456: #P3:247 = Color:844
 33F4:5954 37F5:1944  6466: #Q4:262 = F= #Q4:262
 33F4:595E 37F5:194E  6476: #P5:249 = fill@57:1068
 33F4:5968 37F5:1958  6486: #Q6:264 = F= #Q6:264
 33F4:5972 37F5:1962  6496: #Q7:265 = F= #Q7:265
 33F4:597C 37F5:196C  6506: SPAWN DRW_L:993(with 7 args)
 33F4:5982 37F5:1972  6512: WAITFORPROCESS DRW_L:993
 33F4:5988 37F5:1978  6518: GOTO .+108 (goto 6626)
 33F4:598C 37F5:197C  6522: #L0:145 = Catch:821 == #I1:17
 33F4:599A 37F5:198A  6536: IFnot (#L0:145) GOTO .+90 (goto 6626)
 33F4:59A2 37F5:1992  6544: #Q1:254 = F= #Q1:254
 33F4:59AC 37F5:199C  6554: #Q2:260 = F= #Q2:260
 33F4:59B6 37F5:19A6  6564: #P3:247 = Color:844
 33F4:59C0 37F5:19B0  6574: #Q4:262 = F= #Q4:262
 33F4:59CA 37F5:19BA  6584: #P5:249 = fill@57:1068
 33F4:59D4 37F5:19C4  6594: #Q6:264 = F= #Q6:264
 33F4:59DE 37F5:19CE  6604: #Q7:265 = F= #Q7:265
 33F4:59E8 37F5:19D8  6614: SPAWN DRW_T:996(with 7 args)
 33F4:59EE 37F5:19DE  6620: WAITFORPROCESS DRW_T:996
 33F4:59F4 37F5:19E4  6626: #L0:145 = SetSize:2053 > #I1:17
 33F4:5A02 37F5:19F2  6640: IFnot (#L0:145) GOTO .+90 (goto 6730)
 33F4:5A0A 37F5:19FA  6648: #Q1:254 = F= #Q1:254
 33F4:5A14 37F5:1A04  6658: #Q2:260 = F= #Q2:260
 33F4:5A1E 37F5:1A0E  6668: #P3:247 = d1color:913
 33F4:5A28 37F5:1A18  6678: #Q4:262 = F= #Q4:262
 33F4:5A32 37F5:1A22  6688: #P5:249 = fill@57:1068
 33F4:5A3C 37F5:1A2C  6698: #Q6:264 = F= #Q6:264
 33F4:5A46 37F5:1A36  6708: #Q7:265 = F= #Q7:265
 33F4:5A50 37F5:1A40  6718: SPAWN DRW_T:996(with 7 args)
 33F4:5A56 37F5:1A46  6724: WAITFORPROCESS DRW_T:996
 33F4:5A5C 37F5:1A4C  6730: #L0:145 = SetSize:2053 > #I2:53
 33F4:5A6A 37F5:1A5A  6744: IFnot (#L0:145) GOTO .+90 (goto 6834)
 33F4:5A72 37F5:1A62  6752: #Q1:254 = F= #Q1:254
 33F4:5A7C 37F5:1A6C  6762: #Q2:260 = F= #Q2:260
 33F4:5A86 37F5:1A76  6772: #P3:247 = Color:844
 33F4:5A90 37F5:1A80  6782: #Q4:262 = F= #Q4:262
 33F4:5A9A 37F5:1A8A  6792: #P5:249 = fill@57:1068
 33F4:5AA4 37F5:1A94  6802: #Q6:264 = F= #Q6:264
 33F4:5AAE 37F5:1A9E  6812: #Q7:265 = F= #Q7:265
 33F4:5AB8 37F5:1AA8  6822: SPAWN DRW_T:996(with 7 args)
 33F4:5ABE 37F5:1AAE  6828: WAITFORPROCESS DRW_T:996
 33F4:5AC4 37F5:1AB4  6834: #L0:145 = SetSize:2053 > #I3:74
 33F4:5AD2 37F5:1AC2  6848: IFnot (#L0:145) GOTO .+90 (goto 6938)
 33F4:5ADA 37F5:1ACA  6856: #Q1:254 = F= #Q1:254
 33F4:5AE4 37F5:1AD4  6866: #Q2:260 = F= #Q2:260
 33F4:5AEE 37F5:1ADE  6876: #P3:247 = Color:844
 33F4:5AF8 37F5:1AE8  6886: #Q4:262 = F= #Q4:262
 33F4:5B02 37F5:1AF2  6896: #P5:249 = fill@57:1068
 33F4:5B0C 37F5:1AFC  6906: #Q6:264 = F= #Q6:264
 33F4:5B16 37F5:1B06  6916: #Q7:265 = F= #Q7:265
 33F4:5B20 37F5:1B10  6926: SPAWN DRW_T:996(with 7 args)
 33F4:5B26 37F5:1B16  6932: WAITFORPROCESS DRW_T:996
 33F4:5B2C 37F5:1B1C  6938: #L0:145 = SetSize:2053 > #I4:87
 33F4:5B3A 37F5:1B2A  6952: IFnot (#L0:145) GOTO .+90 (goto 7042)
 33F4:5B42 37F5:1B32  6960: #Q1:254 = F= #Q1:254
 33F4:5B4C 37F5:1B3C  6970: #Q2:260 = F= #Q2:260
 33F4:5B56 37F5:1B46  6980: #P3:247 = Color:844
 33F4:5B60 37F5:1B50  6990: #Q4:262 = F= #Q4:262
 33F4:5B6A 37F5:1B5A  7000: #P5:249 = fill@57:1068
 33F4:5B74 37F5:1B64  7010: #Q6:264 = F= #Q6:264
 33F4:5B7E 37F5:1B6E  7020: #Q7:265 = F= #Q7:265
 33F4:5B88 37F5:1B78  7030: SPAWN DRW_T:996(with 7 args)
 33F4:5B8E 37F5:1B7E  7036: WAITFORPROCESS DRW_T:996
 33F4:5B94 37F5:1B84  7042: #L0:145 = SetSize:2053 > #I5:111
 33F4:5BA2 37F5:1B92  7056: IFnot (#L0:145) GOTO .+90 (goto 7146)
 33F4:5BAA 37F5:1B9A  7064: #Q1:254 = F= #Q1:254
 33F4:5BB4 37F5:1BA4  7074: #Q2:260 = F= #Q2:260
 33F4:5BBE 37F5:1BAE  7084: #P3:247 = Color:844
 33F4:5BC8 37F5:1BB8  7094: #Q4:262 = F= #Q4:262
 33F4:5BD2 37F5:1BC2  7104: #P5:249 = fill@57:1068
 33F4:5BDC 37F5:1BCC  7114: #Q6:264 = F= #Q6:264
 33F4:5BE6 37F5:1BD6  7124: #Q7:265 = F= #Q7:265
 33F4:5BF0 37F5:1BE0  7134: SPAWN DRW_T:996(with 7 args)
 33F4:5BF6 37F5:1BE6  7140: WAITFORPROCESS DRW_T:996
 33F4:5BFC 37F5:1BEC  7146: #L0:145 = SetSize:2053 > #I6:120
 33F4:5C0A 37F5:1BFA  7160: IFnot (#L0:145) GOTO .+90 (goto 7250)
 33F4:5C12 37F5:1C02  7168: #Q1:254 = F= #Q1:254
 33F4:5C1C 37F5:1C0C  7178: #Q2:260 = F= #Q2:260
 33F4:5C26 37F5:1C16  7188: #P3:247 = Color:844
 33F4:5C30 37F5:1C20  7198: #Q4:262 = F= #Q4:262
 33F4:5C3A 37F5:1C2A  7208: #P5:249 = fill@57:1068
 33F4:5C44 37F5:1C34  7218: #Q6:264 = F= #Q6:264
 33F4:5C4E 37F5:1C3E  7228: #Q7:265 = F= #Q7:265
 33F4:5C58 37F5:1C48  7238: SPAWN DRW_T:996(with 7 args)
 33F4:5C5E 37F5:1C4E  7244: WAITFORPROCESS DRW_T:996
 33F4:5C64 37F5:1C54  7250: #L0:145 = SetSize:2053 > #I7:129
 33F4:5C72 37F5:1C62  7264: IFnot (#L0:145) GOTO .+90 (goto 7354)
 33F4:5C7A 37F5:1C6A  7272: #Q1:254 = F= #Q1:254
 33F4:5C84 37F5:1C74  7282: #Q2:260 = F= #Q2:260
 33F4:5C8E 37F5:1C7E  7292: #P3:247 = Color:844
 33F4:5C98 37F5:1C88  7302: #Q4:262 = F= #Q4:262
 33F4:5CA2 37F5:1C92  7312: #P5:249 = fill@57:1068
 33F4:5CAC 37F5:1C9C  7322: #Q6:264 = F= #Q6:264
 33F4:5CB6 37F5:1CA6  7332: #Q7:265 = F= #Q7:265
 33F4:5CC0 37F5:1CB0  7342: SPAWN DRW_T:996(with 7 args)
 33F4:5CC6 37F5:1CB6  7348: WAITFORPROCESS DRW_T:996
 33F4:5CCC 37F5:1CBC  7354: #L0:145 = SetSize:2053 > #I8:133
 33F4:5CDA 37F5:1CCA  7368: IFnot (#L0:145) GOTO .+90 (goto 7458)
 33F4:5CE2 37F5:1CD2  7376: #Q1:254 = F= #Q1:254
 33F4:5CEC 37F5:1CDC  7386: #Q2:260 = F= #Q2:260
 33F4:5CF6 37F5:1CE6  7396: #P3:247 = Color:844
 33F4:5D00 37F5:1CF0  7406: #Q4:262 = F= #Q4:262
 33F4:5D0A 37F5:1CFA  7416: #P5:249 = fill@57:1068
 33F4:5D14 37F5:1D04  7426: #Q6:264 = F= #Q6:264
 33F4:5D1E 37F5:1D0E  7436: #Q7:265 = F= #Q7:265
 33F4:5D28 37F5:1D18  7446: SPAWN DRW_T:996(with 7 args)
 33F4:5D2E 37F5:1D1E  7452: WAITFORPROCESS DRW_T:996
 33F4:5D34 37F5:1D24  7458: #L0:145 = SetSize:2053 > #I9:140
 33F4:5D42 37F5:1D32  7472: IFnot (#L0:145) GOTO .+90 (goto 7562)
 33F4:5D4A 37F5:1D3A  7480: #Q1:254 = F= #Q1:254
 33F4:5D54 37F5:1D44  7490: #Q2:260 = F= #Q2:260
 33F4:5D5E 37F5:1D4E  7500: #P3:247 = Color:844
 33F4:5D68 37F5:1D58  7510: #Q4:262 = F= #Q4:262
 33F4:5D72 37F5:1D62  7520: #P5:249 = fill@57:1068
 33F4:5D7C 37F5:1D6C  7530: #Q6:264 = F= #Q6:264
 33F4:5D86 37F5:1D76  7540: #Q7:265 = F= #Q7:265
 33F4:5D90 37F5:1D80  7550: SPAWN DRW_T:996(with 7 args)
 33F4:5D96 37F5:1D86  7556: WAITFORPROCESS DRW_T:996
 33F4:5D9C 37F5:1D8C  7562: #L0:145 = SetSize:2053 > #I10:18
 33F4:5DAA 37F5:1D9A  7576: IFnot (#L0:145) GOTO .+90 (goto 7666)
 33F4:5DB2 37F5:1DA2  7584: #Q1:254 = F= #Q1:254
 33F4:5DBC 37F5:1DAC  7594: #Q2:260 = F= #Q2:260
 33F4:5DC6 37F5:1DB6  7604: #P3:247 = Color:844
 33F4:5DD0 37F5:1DC0  7614: #Q4:262 = F= #Q4:262
 33F4:5DDA 37F5:1DCA  7624: #P5:249 = fill@57:1068
 33F4:5DE4 37F5:1DD4  7634: #Q6:264 = F= #Q6:264
 33F4:5DEE 37F5:1DDE  7644: #Q7:265 = F= #Q7:265
 33F4:5DF8 37F5:1DE8  7654: SPAWN DRW_T:996(with 7 args)
 33F4:5DFE 37F5:1DEE  7660: WAITFORPROCESS DRW_T:996
 33F4:5E04 37F5:1DF4  7666: #L0:145 = SetSize:2053 > #I11:27
 33F4:5E12 37F5:1E02  7680: IFnot (#L0:145) GOTO .+90 (goto 7770)
 33F4:5E1A 37F5:1E0A  7688: #Q1:254 = F= #Q1:254
 33F4:5E24 37F5:1E14  7698: #Q2:260 = F= #Q2:260
 33F4:5E2E 37F5:1E1E  7708: #P3:247 = Color:844
 33F4:5E38 37F5:1E28  7718: #Q4:262 = F= #Q4:262
 33F4:5E42 37F5:1E32  7728: #P5:249 = fill@57:1068
 33F4:5E4C 37F5:1E3C  7738: #Q6:264 = F= #Q6:264
 33F4:5E56 37F5:1E46  7748: #Q7:265 = F= #Q7:265
 33F4:5E60 37F5:1E50  7758: SPAWN DRW_T:996(with 7 args)
 33F4:5E66 37F5:1E56  7764: WAITFORPROCESS DRW_T:996
 33F4:5E6C 37F5:1E5C  7770: #L0:145 = soa_mode:2091 == #I1:17
 33F4:5E7A 37F5:1E6A  7784: IFnot (#L0:145) GOTO .+94 (goto 7878)
 33F4:5E82 37F5:1E72  7792: #Q1:254 = F= #Q1:254
 33F4:5E8C 37F5:1E7C  7802: #Q2:260 = F= #Q2:260
 33F4:5E96 37F5:1E86  7812: #Q3:261 = F= #Q3:261
 33F4:5EA0 37F5:1E90  7822: #P4:248 = fixation_color@57:1127
 33F4:5EAA 37F5:1E9A  7832: #P5:249 = open@57:1548
 33F4:5EB4 37F5:1EA4  7842: #Q6:264 = F= #Q6:264
 33F4:5EBE 37F5:1EAE  7852: #Q7:265 = F= #Q7:265
 33F4:5EC8 37F5:1EB8  7862: SPAWN DRW_SQR:995(with 7 args)
 33F4:5ECE 37F5:1EBE  7868: WAITFORPROCESS DRW_SQR:995
 33F4:5ED4 37F5:1EC4  7874: GOTO .+86 (goto 7960)
 33F4:5ED8 37F5:1EC8  7878: #Q1:254 = F= #Q1:254
 33F4:5EE2 37F5:1ED2  7888: #Q2:260 = F= #Q2:260
 33F4:5EEC 37F5:1EDC  7898: #Q3:261 = F= #Q3:261
 33F4:5EF6 37F5:1EE6  7908: #P4:248 = fixation_color@57:1127
 33F4:5F00 37F5:1EF0  7918: #P5:249 = fill@57:1068
 33F4:5F0A 37F5:1EFA  7928: #Q6:264 = F= #Q6:264
 33F4:5F14 37F5:1F04  7938: #Q7:265 = F= #Q7:265
 33F4:5F1E 37F5:1F0E  7948: SPAWN DRW_SQR:995(with 7 args)
 33F4:5F24 37F5:1F14  7954: WAITFORPROCESS DRW_SQR:995
 33F4:5F2A 37F5:1F1A  7960: NEXTTICK1
 33F4:5F2C 37F5:1F1C  7962: #L0 = CALL3 dSendf(#S310:504,blank@57:787,blank@57:787)
 33F4:5F38 37F5:1F28  7974: #L0 = CALL1 dSendf(#S311:505)

PROCESS  58: SETS_TRL (Args=9 CtrlBlk=33F4:265C Size=1622  iOp=2-1623 iCache=84112-85733) DISABLED
 33F4:4012 37F5:0002     0: n_targ_pos@58:1413 = #P1:241
 33F4:401C 37F5:000C    10: go_weight@58:1204 = F= go_weight@58:1204
 33F4:4026 37F5:0016    20: stop_weight@58:2174 = F= stop_weight@58:2174
 33F4:4030 37F5:0020    30: ignore_weight@58:1266 = F= ignore_weight@58:1266
 33F4:403A 37F5:002A    40: staircase@58:2112 = #P5:249
 33F4:4044 37F5:0034    50: n_SSDs@58:1406 = #P6:250
 33F4:404E 37F5:003E    60: min_holdtime@58:1378 = #P7:251
 33F4:4058 37F5:0048    70: max_holdtime@58:1343 = #P8:252
 33F4:4062 37F5:0052    80: expo_jitter@58:1027 = #P9:253
 33F4:406C 37F5:005C    90: #L0:145 = Comp_Trl_number:853 == Trls_per_block:2323
 33F4:407A 37F5:006A   104: IFnot (#L0:145) GOTO .+32 (goto 136)
 33F4:4082 37F5:0072   112: Block_number:792 = Block_number:792 + #I1:17
 33F4:4090 37F5:0080   126: Comp_Trl_number:853 = #I0:16
 33F4:409A 37F5:008A   136: #L0 = CALL1 random(#I100:19)
 33F4:40A2 37F5:0092   144: CatchNum@58:828 = F= CatchNum@58:828
 33F4:40AC 37F5:009C   154: #L0:145 = CatchNum@58:828 F> Perc_catch:1608
 33F4:40BA 37F5:00AA   168: IFnot (#L0:145) GOTO .+32 (goto 200)
 33F4:40C2 37F5:00B2   176: Catch:821 = #I0:16
 33F4:40CC 37F5:00BC   186: CatchCode:824 = #I500:113
 33F4:40D6 37F5:00C6   196: GOTO .+24 (goto 220)
 33F4:40DA 37F5:00CA   200: Catch:821 = #I1:17
 33F4:40E4 37F5:00D4   210: CatchCode:824 = #I501:115
 33F4:40EE 37F5:00DE   220: #L0:145 = SingMode:2077 == #I1:17
 33F4:40FC 37F5:00EC   234: IFnot (#L0:145) GOTO .+536 (goto 770)
 33F4:4104 37F5:00F4   242: #L1:146 = Block_number:792 == #I1:17
 33F4:4112 37F5:0102   256: #L2:156 = Block_number:792 == #I11:27
 33F4:4120 37F5:0110   270: #L3:157 = #L1:146 || #L2:156
 33F4:412E 37F5:011E   284: #L4:158 = Block_number:792 == #I21:58
 33F4:413C 37F5:012C   298: #L5:159 = #L3:157 || #L4:158
 33F4:414A 37F5:013A   312: IFnot (#L5:159) GOTO .+32 (goto 344)
 33F4:4152 37F5:0142   320: DistFix:987 = #I1:17
 33F4:415C 37F5:014C   330: SingCol:2074 = #I0:16
 33F4:4166 37F5:0156   340: GOTO .+430 (goto 770)
 33F4:416A 37F5:015A   344: #L0:145 = Block_number:792 == #I3:74
 33F4:4178 37F5:0168   358: #L1:146 = Block_number:792 == #I13:34
 33F4:4186 37F5:0176   372: #L2:156 = #L0:145 || #L1:146
 33F4:4194 37F5:0184   386: #L3:157 = Block_number:792 == #I23:63
 33F4:41A2 37F5:0192   400: #L4:158 = #L2:156 || #L3:157
 33F4:41B0 37F5:01A0   414: IFnot (#L4:158) GOTO .+32 (goto 446)
 33F4:41B8 37F5:01A8   422: DistFix:987 = #I1:17
 33F4:41C2 37F5:01B2   432: SingCol:2074 = #I1:17
 33F4:41CC 37F5:01BC   442: GOTO .+328 (goto 770)
 33F4:41D0 37F5:01C0   446: #L0:145 = Block_number:792 == #I5:111
 33F4:41DE 37F5:01CE   460: #L1:146 = Block_number:792 == #I15:41
 33F4:41EC 37F5:01DC   474: #L2:156 = #L0:145 || #L1:146
 33F4:41FA 37F5:01EA   488: #L3:157 = Block_number:792 == #I25:65
 33F4:4208 37F5:01F8   502: #L4:158 = #L2:156 || #L3:157
 33F4:4216 37F5:0206   516: IFnot (#L4:158) GOTO .+32 (goto 548)
 33F4:421E 37F5:020E   524: DistFix:987 = #I1:17
 33F4:4228 37F5:0218   534: SingCol:2074 = #I2:53
 33F4:4232 37F5:0222   544: GOTO .+226 (goto 770)
 33F4:4236 37F5:0226   548: #L0:145 = Block_number:792 == #I7:129
 33F4:4244 37F5:0234   562: #L1:146 = Block_number:792 == #I17:47
 33F4:4252 37F5:0242   576: #L2:156 = #L0:145 || #L1:146
 33F4:4260 37F5:0250   590: #L3:157 = Block_number:792 == #I27:69
 33F4:426E 37F5:025E   604: #L4:158 = #L2:156 || #L3:157
 33F4:427C 37F5:026C   618: IFnot (#L4:158) GOTO .+32 (goto 650)
 33F4:4284 37F5:0274   626: DistFix:987 = #I1:17
 33F4:428E 37F5:027E   636: SingCol:2074 = #I3:74
 33F4:4298 37F5:0288   646: GOTO .+124 (goto 770)
 33F4:429C 37F5:028C   650: #L0:145 = Block_number:792 == #I9:140
 33F4:42AA 37F5:029A   664: #L1:146 = Block_number:792 == #I19:52
 33F4:42B8 37F5:02A8   678: #L2:156 = #L0:145 || #L1:146
 33F4:42C6 37F5:02B6   692: #L3:157 = Block_number:792 == #I29:73
 33F4:42D4 37F5:02C4   706: #L4:158 = #L2:156 || #L3:157
 33F4:42E2 37F5:02D2   720: IFnot (#L4:158) GOTO .+32 (goto 752)
 33F4:42EA 37F5:02DA   728: DistFix:987 = #I1:17
 33F4:42F4 37F5:02E4   738: SingCol:2074 = #I4:87
 33F4:42FE 37F5:02EE   748: GOTO .+22 (goto 770)
 33F4:4302 37F5:02F2   752: DistFix:987 = #I2:53
 33F4:430C 37F5:02FC   762: SingCol = CALL1 random(#I5:111)
 33F4:4314 37F5:0304   770: #P1:241 = n_targ_pos@58:1413
 33F4:431E 37F5:030E   780: SPAWN SET_CLRS:2039(with 1 args)
 33F4:4324 37F5:0314   786: WAITFORPROCESS SET_CLRS:2039
 33F4:432A 37F5:031A   792: SPAWN RAND_ORT:1895(with 0 args)
 33F4:4330 37F5:0320   798: WAITFORPROCESS RAND_ORT:1895
 33F4:4336 37F5:0326   804: #L0:145 = ProbCue:1633 == #I0:16
 33F4:4344 37F5:0334   818: IFnot (#L0:145) GOTO .+24 (goto 842)
 33F4:434C 37F5:033C   826: SPAWN LOC_RAND:1321(with 0 args)
 33F4:4352 37F5:0342   832: WAITFORPROCESS LOC_RAND:1321
 33F4:4358 37F5:0348   838: GOTO .+38 (goto 876)
 33F4:435C 37F5:034C   842: #L0:145 = ProbCue:1633 == #I1:17
 33F4:436A 37F5:035A   856: IFnot (#L0:145) GOTO .+20 (goto 876)
 33F4:4372 37F5:0362   864: SPAWN LOC_ASYM:1320(with 0 args)
 33F4:4378 37F5:0368   870: WAITFORPROCESS LOC_ASYM:1320
 33F4:437E 37F5:036E   876: SPAWN SEL_LOCS:2034(with 0 args)
 33F4:4384 37F5:0374   882: WAITFORPROCESS SEL_LOCS:2034
 33F4:438A 37F5:037A   888: #L0:145 = TargetType:2255 == #I1:17
 33F4:4398 37F5:0388   902: IFnot (#L0:145) GOTO .+164 (goto 1066)
 33F4:43A0 37F5:0390   910: #P1:241 = Curr_target:894
 33F4:43AA 37F5:039A   920: #Q2:260 = F= #Q2:260
 33F4:43B4 37F5:03A4   930: #P3:247 = fixation_color@58:1128
 33F4:43BE 37F5:03AE   940: #P4:248 = Sig_color:2056
 33F4:43C8 37F5:03B8   950: #Q5:263 = F= #Q5:263
 33F4:43D2 37F5:03C2   960: #Q6:264 = F= #Q6:264
 33F4:43DC 37F5:03CC   970: #Q7:265 = F= #Q7:265
 33F4:43E6 37F5:03D6   980: #Q8:266 = F= #Q8:266
 33F4:43F0 37F5:03E0   990: #Q9:267 = F= #Q9:267
 33F4:43FA 37F5:03EA  1000: #Q10:255 = F= #Q10:255
 33F4:4404 37F5:03F4  1010: #Q11:256 = F= #Q11:256
 33F4:440E 37F5:03FE  1020: #Q12:257 = F= #Q12:257
 33F4:4418 37F5:0408  1030: #Q13:258 = F= #Q13:258
 33F4:4422 37F5:0412  1040: #P14:244 = object_targ:1513
 33F4:442C 37F5:041C  1050: SPAWN LSCH_PGS:1328(with 14 args)
 33F4:4432 37F5:0422  1056: WAITFORPROCESS LSCH_PGS:1328
 33F4:4438 37F5:0428  1062: GOTO .+178 (goto 1240)
 33F4:443C 37F5:042C  1066: #L0:145 = TargetType:2255 == #I2:53
 33F4:444A 37F5:043A  1080: IFnot (#L0:145) GOTO .+160 (goto 1240)
 33F4:4452 37F5:0442  1088: #P1:241 = Curr_target:894
 33F4:445C 37F5:044C  1098: #Q2:260 = F= #Q2:260
 33F4:4466 37F5:0456  1108: #P3:247 = fixation_color@58:1128
 33F4:4470 37F5:0460  1118: #P4:248 = Sig_color:2056
 33F4:447A 37F5:046A  1128: #Q5:263 = F= #Q5:263
 33F4:4484 37F5:0474  1138: #Q6:264 = F= #Q6:264
 33F4:448E 37F5:047E  1148: #Q7:265 = F= #Q7:265
 33F4:4498 37F5:0488  1158: #Q8:266 = F= #Q8:266
 33F4:44A2 37F5:0492  1168: #Q9:267 = F= #Q9:267
 33F4:44AC 37F5:049C  1178: #Q10:255 = F= #Q10:255
 33F4:44B6 37F5:04A6  1188: #Q11:256 = F= #Q11:256
 33F4:44C0 37F5:04B0  1198: #Q12:257 = F= #Q12:257
 33F4:44CA 37F5:04BA  1208: #Q13:258 = F= #Q13:258
 33F4:44D4 37F5:04C4  1218: #P14:244 = object_targ:1513
 33F4:44DE 37F5:04CE  1228: SPAWN TSCH_PGS:2324(with 14 args)
 33F4:44E4 37F5:04D4  1234: WAITFORPROCESS TSCH_PGS:2324
 33F4:44EA 37F5:04DA  1240: #P1:241 = Curr_target:894
 33F4:44F4 37F5:04E4  1250: #Q2:260 = F= #Q2:260
 33F4:44FE 37F5:04EE  1260: #Q3:261 = F= #Q3:261
 33F4:4508 37F5:04F8  1270: #P4:248 = object_fixwin:1469
 33F4:4512 37F5:0502  1280: #P5:249 = object_targwin:1523
 33F4:451C 37F5:050C  1290: #Q6:264 = F= #Q6:264
 33F4:4526 37F5:0516  1300: #Q7:265 = F= #Q7:265
 33F4:4530 37F5:0520  1310: SPAWN WINDOWS:2366(with 7 args)
 33F4:4536 37F5:0526  1316: WAITFORPROCESS WINDOWS:2366
 33F4:453C 37F5:052C  1322: #L0:145 = max_holdtime@58:1343 - min_holdtime@58:1378
 33F4:454A 37F5:053A  1336: holdtime_diff@58:1234 = F= holdtime_diff@58:1234
 33F4:4554 37F5:0544  1346: #L0 = CALL1 random(#I1001:23)
 33F4:455C 37F5:054C  1354: per_jitter@58:1605 = #L0:145 F/ #M447A0000:226
 33F4:456A 37F5:055A  1368: jitter@58:1296 = holdtime_diff@58:1234 F* per_jitter@58:1605
 33F4:4578 37F5:0568  1382: #L0:145 = FixJitter:1162 == #I0:16
 33F4:4586 37F5:0576  1396: IFnot (#L0:145) GOTO .+44 (goto 1440)
 33F4:458E 37F5:057E  1404: #F0:1 = min_holdtime@58:1378 F+ jitter@58:1296
 33F4:459C 37F5:058C  1418: #F1 = CALL1 round(#F0:1)
 33F4:45A4 37F5:0594  1426: Curr_holdtime:879 = F= Curr_holdtime:879
 33F4:45AE 37F5:059E  1436: GOTO .+36 (goto 1472)
 33F4:45B2 37F5:05A2  1440: #L0:145 = FixJitter:1162 == #I1:17
 33F4:45C0 37F5:05B0  1454: IFnot (#L0:145) GOTO .+18 (goto 1472)
 33F4:45C8 37F5:05B8  1462: Curr_holdtime:879 = #I500:113
 33F4:45D2 37F5:05C2  1472: #L0:145 = soa_mode:2091 == #I1:17
 33F4:45E0 37F5:05D0  1486: IFnot (#L0:145) GOTO .+58 (goto 1544)
 33F4:45E8 37F5:05D8  1494: #L1 = CALL1 random(#I4:87)
 33F4:45F0 37F5:05E0  1502: per_jitter@58:1605 = F= per_jitter@58:1605
 33F4:45FA 37F5:05EA  1512: #L0:145 = F= #L0:145
 33F4:4604 37F5:05F4  1522: #F0:1 = SOA_list:2090[#L0:145]
 33F4:460C 37F5:05FC  1530: search_fix_time:2030 = F= search_fix_time:2030
 33F4:4616 37F5:0606  1540: GOTO .+14 (goto 1554)
 33F4:461A 37F5:060A  1544: search_fix_time:2030 = F= search_fix_time:2030
 33F4:4624 37F5:0614  1554: plac_diff@58:1614 = max_plactime:1345 F- min_plactime:1379
 33F4:4632 37F5:0622  1568: plac_jitter@58:1616 = plac_diff@58:1614 F* per_jitter@58:1605
 33F4:4640 37F5:0630  1582: #F0:1 = min_plactime:1379 F+ plac_jitter@58:1616
 33F4:464E 37F5:063E  1596: plac_duration = CALL1 round(#F0:1)
 33F4:4656 37F5:0646  1604: StimTm:2151 = #I1:17
 33F4:4660 37F5:0650  1614: SelEcc = CALL1 random(#I3:74)

PROCESS  59: GNGTRIAL (Args=9 CtrlBlk=33F4:2688 Size=2780  iOp=2-2781 iCache=85734-88513) DISABLED
 33F4:4012 37F5:0002     0: allowed_fix_time@59:731 = #P1:241
 33F4:401C 37F5:000C    10: curr_holdtime@59:883 = #P2:246
 33F4:4026 37F5:0016    20: trl_type@59:2322 = #P3:247
 33F4:4030 37F5:0020    30: max_saccade_time@59:1356 = #P4:248
 33F4:403A 37F5:002A    40: curr_soa@59:887 = #P5:249
 33F4:4044 37F5:0034    50: cancl_time@59:819 = #P6:250
 33F4:404E 37F5:003E    60: max_sacc_duration@59:1350 = #P7:251
 33F4:4058 37F5:0048    70: targ_hold_time@59:2201 = #P8:252
 33F4:4062 37F5:0052    80: object_fix@59:1467 = #P9:253
 33F4:406C 37F5:005C    90: trl_running@59:2311 = #I1:17
 33F4:4076 37F5:0066   100: stage@59:2105 = need_fix@59:1417
 33F4:4080 37F5:0070   110: #L0 = CALL1 printf(#S312:506)
 33F4:4088 37F5:0078   118: #L0 = CALL2 printf(#S313:507,Trl_number:2305)
 33F4:4092 37F5:0082   128: #L0 = CALL2 printf(#S314:508,Comp_Trl_number:853)
 33F4:409C 37F5:008C   138: #L0 = CALL1 printf(#S315:509)
 33F4:40A4 37F5:0094   146: #L0:145 = trl_type@59:2322 == go_trl@59:1199
 33F4:40B2 37F5:00A2   160: IFnot (#L0:145) GOTO .+26 (goto 186)
 33F4:40BA 37F5:00AA   168: #L1 = CALL1 printf(#S316:510)
 33F4:40C2 37F5:00B2   176: #L0 = CALL2 printf(#S317:511,curr_holdtime@59:883)
 33F4:40CC 37F5:00BC   186: #L0:145 = trl_type@59:2322 == stop_trl@59:2169
 33F4:40DA 37F5:00CA   200: IFnot (#L0:145) GOTO .+36 (goto 236)
 33F4:40E2 37F5:00D2   208: #L1 = CALL1 printf(#S318:512)
 33F4:40EA 37F5:00DA   216: #L0 = CALL2 printf(#S319:513,curr_holdtime@59:883)
 33F4:40F4 37F5:00E4   226: #L0 = CALL2 printf(#S320:515,curr_soa@59:887)
 33F4:40FE 37F5:00EE   236: #L0:145 = trl_type@59:2322 == ignore_trl@59:1261
 33F4:410C 37F5:00FC   250: IFnot (#L0:145) GOTO .+36 (goto 286)
 33F4:4114 37F5:0104   258: #L1 = CALL1 printf(#S321:516)
 33F4:411C 37F5:010C   266: #L0 = CALL2 printf(#S322:517,curr_holdtime@59:883)
 33F4:4126 37F5:0116   276: #L0 = CALL2 printf(#S323:518,curr_soa@59:887)
 33F4:4130 37F5:0120   286: Event_fifo:1019[Set_event:2041] = TrialStart_:2299
 33F4:4138 37F5:0128   294: #L0:145 = Set_event:2041 + #I1:17
 33F4:4146 37F5:0136   308: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4154 37F5:0144   322: #L0 = CALL2 dSendf(#S324:519,fixation_pd@59:1142)
 33F4:415E 37F5:014E   332: #L0 = CALL0 time()
 33F4:4164 37F5:0154   338: fix_on_time@59:1080 = F= fix_on_time@59:1080
 33F4:416E 37F5:015E   348: Event_fifo:1019[Set_event:2041] = FixSpotOn_:1164
 33F4:4176 37F5:0166   356: #L0:145 = Set_event:2041 + #I1:17
 33F4:4184 37F5:0174   370: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4192 37F5:0182   384: #L0 = CALL1 dSendf(#S325:520)
 33F4:419A 37F5:018A   392: #L0 = CALL2 dSendf(#S326:521,fixation@59:1115)
 33F4:41A4 37F5:0194   402: #L0 = CALL2 oSetAttribute(object_fix@59:1467,aVISIBLE:769)
 33F4:41AE 37F5:019E   412: IFnot (trl_running@59:2311) GOTO .+2368 (goto 2780)
 33F4:41B6 37F5:01A6   420: #L0:145 = stage@59:2105 == need_fix@59:1417
 33F4:41C4 37F5:01B4   434: IFnot (#L0:145) GOTO .+198 (goto 632)
 33F4:41CC 37F5:01BC   442: IFnot (In_FixWin:1270) GOTO .+84 (goto 526)
 33F4:41D4 37F5:01C4   450: #L1 = CALL0 time()
 33F4:41DA 37F5:01CA   456: aquire_fix_time@59:749 = F= aquire_fix_time@59:749
 33F4:41E4 37F5:01D4   466: Trl_Start_Time:2315 = F= Trl_Start_Time:2315
 33F4:41EE 37F5:01DE   476: Event_fifo:1019[Set_event:2041] = Fixate_:1096
 33F4:41F6 37F5:01E6   484: #L0:145 = Set_event:2041 + #I1:17
 33F4:4204 37F5:01F4   498: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4212 37F5:0202   512: stage@59:2105 = fixating@59:1099
 33F4:421C 37F5:020C   522: GOTO .+106 (goto 628)
 33F4:4220 37F5:0210   526: #L0 = CALL0 time()
 33F4:4226 37F5:0216   532: #F0:1 = fix_on_time@59:1080 F+ allowed_fix_time@59:731
 33F4:4234 37F5:0224   546: #L1:146 = #L0:145 F> #F0:1
 33F4:4242 37F5:0232   560: IFnot (#L1:146) GOTO .+68 (goto 628)
 33F4:424A 37F5:023A   568: Trl_Outcome:2306 = no_fix@59:1429
 33F4:4254 37F5:0244   578: #L0 = CALL2 dSendf(#S327:522,blank@59:788)
 33F4:425E 37F5:024E   588: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4268 37F5:0258   598: #L0 = CALL2 oSetAttribute(object_fix@59:1467,aINVISIBLE:726)
 33F4:4272 37F5:0262   608: #L0 = CALL1 printf(#S328:523)
 33F4:427A 37F5:026A   616: trl_running@59:2311 = #I0:16
 33F4:4284 37F5:0274   626: NEXTTICK1
 33F4:4286 37F5:0276   628: GOTO .+2146 (goto 2774)
 33F4:428A 37F5:027A   632: #L0:145 = stage@59:2105 == fixating@59:1099
 33F4:4298 37F5:0288   646: IFnot (#L0:145) GOTO .+264 (goto 910)
 33F4:42A0 37F5:0290   654: #L1:146 = ! In_FixWin:1270
 33F4:42AE 37F5:029E   668: IFnot (#L1:146) GOTO .+82 (goto 750)
 33F4:42B6 37F5:02A6   676: Trl_Outcome:2306 = broke_fix@59:805
 33F4:42C0 37F5:02B0   686: #L0 = CALL2 dSendf(#S329:524,blank@59:788)
 33F4:42CA 37F5:02BA   696: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:42D4 37F5:02C4   706: #L0 = CALL2 oSetAttribute(object_fix@59:1467,aINVISIBLE:726)
 33F4:42DE 37F5:02CE   716: #L0 = CALL1 printf(#S330:526)
 33F4:42E6 37F5:02D6   724: stage@59:2105 = need_fix@59:1417
 33F4:42F0 37F5:02E0   734: trl_running@59:2311 = #I0:16
 33F4:42FA 37F5:02EA   744: NEXTTICK1
 33F4:42FC 37F5:02EC   746: GOTO .+160 (goto 906)
 33F4:4300 37F5:02F0   750: #L0 = CALL0 time()
 33F4:4306 37F5:02F6   756: #F0:1 = aquire_fix_time@59:749 F+ curr_holdtime@59:883
 33F4:4314 37F5:0304   770: #L1:146 = #L0:145 F> #F0:1
 33F4:4322 37F5:0312   784: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:4330 37F5:0320   798: IFnot (#L2:156) GOTO .+108 (goto 906)
 33F4:4338 37F5:0328   806: #L3 = CALL2 dSendf(#S331:527,fixation_target_pd@59:1156)
 33F4:4342 37F5:0332   816: #L0 = CALL0 time()
 33F4:4348 37F5:0338   822: targ_time@59:2212 = F= targ_time@59:2212
 33F4:4352 37F5:0342   832: #L0 = CALL1 dSendf(#S332:528)
 33F4:435A 37F5:034A   840: #L0 = CALL2 dSendf(#S333:529,fixation@59:1115)
 33F4:4364 37F5:0354   850: Event_fifo:1019[Set_event:2041] = Target_:2238
 33F4:436C 37F5:035C   858: #L0:145 = Set_event:2041 + #I1:17
 33F4:437A 37F5:036A   872: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4388 37F5:0378   886: #L0 = CALL2 oSetAttribute(object_targ:1513,aVISIBLE:769)
 33F4:4392 37F5:0382   896: stage@59:2105 = targ_on@59:2206
 33F4:439C 37F5:038C   906: GOTO .+1868 (goto 2774)
 33F4:43A0 37F5:0390   910: #L0:145 = stage@59:2105 == targ_on@59:2206
 33F4:43AE 37F5:039E   924: IFnot (#L0:145) GOTO .+460 (goto 1384)
 33F4:43B6 37F5:03A6   932: #L1:146 = ! In_FixWin:1270
 33F4:43C4 37F5:03B4   946: IFnot (#L1:146) GOTO .+82 (goto 1028)
 33F4:43CC 37F5:03BC   954: Trl_Outcome:2306 = early_sacc@59:1001
 33F4:43D6 37F5:03C6   964: #L0 = CALL2 dSendf(#S334:530,blank@59:788)
 33F4:43E0 37F5:03D0   974: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:43EA 37F5:03DA   984: #L0 = CALL2 oSetAttribute(object_fix@59:1467,aINVISIBLE:726)
 33F4:43F4 37F5:03E4   994: #L0 = CALL1 printf(#S335:531)
 33F4:43FC 37F5:03EC  1002: stage@59:2105 = need_fix@59:1417
 33F4:4406 37F5:03F6  1012: trl_running@59:2311 = #I0:16
 33F4:4410 37F5:0400  1022: NEXTTICK1
 33F4:4412 37F5:0402  1024: GOTO .+356 (goto 1380)
 33F4:4416 37F5:0406  1028: #L0 = CALL0 time()
 33F4:441C 37F5:040C  1034: #F0:1 = targ_time@59:2212 F+ curr_soa@59:887
 33F4:442A 37F5:041A  1048: #L1:146 = #L0:145 F> #F0:1
 33F4:4438 37F5:0428  1062: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:4446 37F5:0436  1076: #L3:157 = trl_type@59:2322 == ignore_trl@59:1261
 33F4:4454 37F5:0444  1090: #L4:158 = #L2:156 && #L3:157
 33F4:4462 37F5:0452  1104: IFnot (#L4:158) GOTO .+102 (goto 1206)
 33F4:446A 37F5:045A  1112: #L5 = CALL2 dSendf(#S336:532,signal_pd_T@59:2073)
 33F4:4474 37F5:0464  1122: #L0 = CALL0 time()
 33F4:447A 37F5:046A  1128: fix_off_time@59:1078 = F= fix_off_time@59:1078
 33F4:4484 37F5:0474  1138: Event_fifo:1019[Set_event:2041] = FixSpotOff_:1163
 33F4:448C 37F5:047C  1146: #L0:145 = Set_event:2041 + #I1:17
 33F4:449A 37F5:048A  1160: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:44A8 37F5:0498  1174: #L0 = CALL1 dSendf(#S337:533)
 33F4:44B0 37F5:04A0  1182: #L0 = CALL2 dSendf(#S338:534,target@59:2235)
 33F4:44BA 37F5:04AA  1192: stage@59:2105 = fix_off@59:1074
 33F4:44C4 37F5:04B4  1202: GOTO .+178 (goto 1380)
 33F4:44C8 37F5:04B8  1206: #L0 = CALL0 time()
 33F4:44CE 37F5:04BE  1212: #F0:1 = targ_time@59:2212 F+ curr_soa@59:887
 33F4:44DC 37F5:04CC  1226: #L1:146 = #L0:145 F> #F0:1
 33F4:44EA 37F5:04DA  1240: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:44F8 37F5:04E8  1254: #L3:157 = trl_type@59:2322 == stop_trl@59:2169
 33F4:4506 37F5:04F6  1268: #L4:158 = #L2:156 && #L3:157
 33F4:4514 37F5:0504  1282: IFnot (#L4:158) GOTO .+98 (goto 1380)
 33F4:451C 37F5:050C  1290: #L5 = CALL2 dSendf(#S339:535,signal_pd_S@59:2071)
 33F4:4526 37F5:0516  1300: #L0 = CALL0 time()
 33F4:452C 37F5:051C  1306: fix_off_time@59:1078 = F= fix_off_time@59:1078
 33F4:4536 37F5:0526  1316: Event_fifo:1019[Set_event:2041] = FixSpotOff_:1163
 33F4:453E 37F5:052E  1324: #L0:145 = Set_event:2041 + #I1:17
 33F4:454C 37F5:053C  1338: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:455A 37F5:054A  1352: #L0 = CALL1 dSendf(#S340:537)
 33F4:4562 37F5:0552  1360: #L0 = CALL2 dSendf(#S341:538,signal_pd_S@59:2071)
 33F4:456C 37F5:055C  1370: stage@59:2105 = fix_off@59:1074
 33F4:4576 37F5:0566  1380: GOTO .+1394 (goto 2774)
 33F4:457A 37F5:056A  1384: #L0:145 = stage@59:2105 == fix_off@59:1074
 33F4:4588 37F5:0578  1398: IFnot (#L0:145) GOTO .+540 (goto 1938)
 33F4:4590 37F5:0580  1406: #L1:146 = ! In_FixWin:1270
 33F4:459E 37F5:058E  1420: IFnot (#L1:146) GOTO .+98 (goto 1518)
 33F4:45A6 37F5:0596  1428: #L2 = CALL0 time()
 33F4:45AC 37F5:059C  1434: saccade_time@59:2000 = F= saccade_time@59:2000
 33F4:45B6 37F5:05A6  1444: Event_fifo:1019[Set_event:2041] = Saccade_:1996
 33F4:45BE 37F5:05AE  1452: #L0:145 = Set_event:2041 + #I1:17
 33F4:45CC 37F5:05BC  1466: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:45DA 37F5:05CA  1480: #F0:1 = saccade_time@59:2000 F- fix_off_time@59:1078
 33F4:45E8 37F5:05D8  1494: #L0 = CALL2 printf(#S342:539,#F0:1)
 33F4:45F2 37F5:05E2  1504: stage@59:2105 = in_flight@59:1274
 33F4:45FC 37F5:05EC  1514: GOTO .+420 (goto 1934)
 33F4:4600 37F5:05F0  1518: #L0 = CALL0 time()
 33F4:4606 37F5:05F6  1524: #F0:1 = fix_off_time@59:1078 F+ max_saccade_time@59:1356
 33F4:4614 37F5:0604  1538: #L1:146 = #L0:145 F> #F0:1
 33F4:4622 37F5:0612  1552: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:4630 37F5:0620  1566: #L3:157 = trl_type@59:2322 == go_trl@59:1199
 33F4:463E 37F5:062E  1580: #L4:158 = trl_type@59:2322 == ignore_trl@59:1261
 33F4:464C 37F5:063C  1594: #L5:159 = #L3:157 || #L4:158
 33F4:465A 37F5:064A  1608: #L6:160 = #L2:156 && #L5:159
 33F4:4668 37F5:0658  1622: IFnot (#L6:160) GOTO .+98 (goto 1720)
 33F4:4670 37F5:0660  1630: Trl_Outcome:2306 = go_wrong@59:1207
 33F4:467A 37F5:066A  1640: LastStopOutcome:1308 = no_change@59:1425
 33F4:4684 37F5:0674  1650: #L0 = CALL2 dSendf(#S343:540,blank@59:788)
 33F4:468E 37F5:067E  1660: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4698 37F5:0688  1670: #L0 = CALL2 oSetAttribute(object_fix@59:1467,aINVISIBLE:726)
 33F4:46A2 37F5:0692  1680: #L0 = CALL1 printf(#S344:541)
 33F4:46AA 37F5:069A  1688: SPAWN SVR_BELL:2194(with 0 args)
 33F4:46B0 37F5:06A0  1694: stage@59:2105 = need_fix@59:1417
 33F4:46BA 37F5:06AA  1704: trl_running@59:2311 = #I0:16
 33F4:46C4 37F5:06B4  1714: NEXTTICK1
 33F4:46C6 37F5:06B6  1716: GOTO .+218 (goto 1934)
 33F4:46CA 37F5:06BA  1720: #L0 = CALL0 time()
 33F4:46D0 37F5:06C0  1726: #F0:1 = fix_off_time@59:1078 F+ cancl_time@59:819
 33F4:46DE 37F5:06CE  1740: #L1:146 = #L0:145 F> #F0:1
 33F4:46EC 37F5:06DC  1754: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:46FA 37F5:06EA  1768: #L3:157 = trl_type@59:2322 == stop_trl@59:2169
 33F4:4708 37F5:06F8  1782: #L4:158 = #L2:156 && #L3:157
 33F4:4716 37F5:0706  1796: IFnot (#L4:158) GOTO .+138 (goto 1934)
 33F4:471E 37F5:070E  1804: Trl_Outcome:2306 = nogo_correct@59:1443
 33F4:4728 37F5:0718  1814: LastStopOutcome:1308 = no_change@59:1425
 33F4:4732 37F5:0722  1824: #L0 = CALL2 dSendf(#S345:542,blank@59:788)
 33F4:473C 37F5:072C  1834: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4746 37F5:0736  1844: #L0 = CALL2 oSetAttribute(object_fix@59:1467,aINVISIBLE:726)
 33F4:4750 37F5:0740  1854: Event_fifo:1019[Set_event:2041] = Correct_:864
 33F4:4758 37F5:0748  1862: #L0:145 = Set_event:2041 + #I1:17
 33F4:4766 37F5:0756  1876: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4774 37F5:0764  1890: #L0 = CALL1 printf(#S346:543)
 33F4:477C 37F5:076C  1898: IFnot (Canc_alert:814) GOTO .+14 (goto 1912)
 33F4:4784 37F5:0774  1906: SPAWN SVR_BEL2:2193(with 0 args)
 33F4:478A 37F5:077A  1912: stage@59:2105 = need_fix@59:1417
 33F4:4794 37F5:0784  1922: trl_running@59:2311 = #I0:16
 33F4:479E 37F5:078E  1932: NEXTTICK1
 33F4:47A0 37F5:0790  1934: GOTO .+840 (goto 2774)
 33F4:47A4 37F5:0794  1938: #L0:145 = stage@59:2105 == in_flight@59:1274
 33F4:47B2 37F5:07A2  1952: IFnot (#L0:145) GOTO .+382 (goto 2334)
 33F4:47BA 37F5:07AA  1960: IFnot (In_TargWin:1276) GOTO .+212 (goto 2172)
 33F4:47C2 37F5:07B2  1968: #L1 = CALL0 time()
 33F4:47C8 37F5:07B8  1974: aquire_targ_time@59:754 = F= aquire_targ_time@59:754
 33F4:47D2 37F5:07C2  1984: #L0:145 = trl_type@59:2322 == ignore_trl@59:1261
 33F4:47E0 37F5:07D0  1998: IFnot (#L0:145) GOTO .+26 (goto 2024)
 33F4:47E8 37F5:07D8  2006: #L1 = CALL1 dSendf(#S347:544)
 33F4:47F0 37F5:07E0  2014: #L0 = CALL2 dSendf(#S348:545,atarget@59:762)
 33F4:47FA 37F5:07EA  2024: Event_fifo:1019[Set_event:2041] = Decide_:939
 33F4:4802 37F5:07F2  2032: #L0:145 = Set_event:2041 + #I1:17
 33F4:4810 37F5:0800  2046: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:481E 37F5:080E  2060: stage@59:2105 = on_target@59:1540
 33F4:4828 37F5:0818  2070: #L0:145 = trl_type@59:2322 == stop_trl@59:2169
 33F4:4836 37F5:0826  2084: IFnot (#L0:145) GOTO .+48 (goto 2132)
 33F4:483E 37F5:082E  2092: Event_fifo:1019[Set_event:2041] = Error_sacc:1017
 33F4:4846 37F5:0836  2100: #L0:145 = Set_event:2041 + #I1:17
 33F4:4854 37F5:0844  2114: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4862 37F5:0852  2128: GOTO .+40 (goto 2168)
 33F4:4866 37F5:0856  2132: Event_fifo:1019[Set_event:2041] = Correct_sacc:865
 33F4:486E 37F5:085E  2140: #L0:145 = Set_event:2041 + #I1:17
 33F4:487C 37F5:086C  2154: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:488A 37F5:087A  2168: GOTO .+162 (goto 2330)
 33F4:488E 37F5:087E  2172: #L0 = CALL0 time()
 33F4:4894 37F5:0884  2178: #F0:1 = saccade_time@59:2000 F+ max_sacc_duration@59:1350
 33F4:48A2 37F5:0892  2192: #L1:146 = #L0:145 F> #F0:1
 33F4:48B0 37F5:08A0  2206: IFnot (#L1:146) GOTO .+124 (goto 2330)
 33F4:48B8 37F5:08A8  2214: Trl_Outcome:2306 = sacc_out@59:1993
 33F4:48C2 37F5:08B2  2224: #L0:145 = trl_type@59:2322 == stop_trl@59:2169
 33F4:48D0 37F5:08C0  2238: IFnot (#L0:145) GOTO .+22 (goto 2260)
 33F4:48D8 37F5:08C8  2246: LastStopOutcome:1308 = no_change@59:1425
 33F4:48E2 37F5:08D2  2256: GOTO .+14 (goto 2270)
 33F4:48E6 37F5:08D6  2260: LastStopOutcome:1308 = no_change@59:1425
 33F4:48F0 37F5:08E0  2270: #L0 = CALL2 dSendf(#S349:546,blank@59:788)
 33F4:48FA 37F5:08EA  2280: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4904 37F5:08F4  2290: #L0 = CALL2 oSetAttribute(object_fix@59:1467,aINVISIBLE:726)
 33F4:490E 37F5:08FE  2300: #L0 = CALL1 printf(#S350:548)
 33F4:4916 37F5:0906  2308: stage@59:2105 = need_fix@59:1417
 33F4:4920 37F5:0910  2318: trl_running@59:2311 = #I0:16
 33F4:492A 37F5:091A  2328: NEXTTICK1
 33F4:492C 37F5:091C  2330: GOTO .+444 (goto 2774)
 33F4:4930 37F5:0920  2334: #L0:145 = stage@59:2105 == on_target@59:1540
 33F4:493E 37F5:092E  2348: IFnot (#L0:145) GOTO .+426 (goto 2774)
 33F4:4946 37F5:0936  2356: #L1:146 = ! In_TargWin:1276
 33F4:4954 37F5:0944  2370: IFnot (#L1:146) GOTO .+128 (goto 2498)
 33F4:495C 37F5:094C  2378: Trl_Outcome:2306 = broke_targ@59:811
 33F4:4966 37F5:0956  2388: #L0:145 = trl_type@59:2322 == stop_trl@59:2169
 33F4:4974 37F5:0964  2402: IFnot (#L0:145) GOTO .+22 (goto 2424)
 33F4:497C 37F5:096C  2410: LastStopOutcome:1308 = no_change@59:1425
 33F4:4986 37F5:0976  2420: GOTO .+14 (goto 2434)
 33F4:498A 37F5:097A  2424: LastStopOutcome:1308 = no_change@59:1425
 33F4:4994 37F5:0984  2434: #L0 = CALL2 dSendf(#S351:549,blank@59:788)
 33F4:499E 37F5:098E  2444: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:49A8 37F5:0998  2454: #L0 = CALL2 oSetAttribute(object_fix@59:1467,aINVISIBLE:726)
 33F4:49B2 37F5:09A2  2464: #L0 = CALL1 printf(#S352:550)
 33F4:49BA 37F5:09AA  2472: stage@59:2105 = need_fix@59:1417
 33F4:49C4 37F5:09B4  2482: trl_running@59:2311 = #I0:16
 33F4:49CE 37F5:09BE  2492: NEXTTICK1
 33F4:49D0 37F5:09C0  2494: GOTO .+280 (goto 2774)
 33F4:49D4 37F5:09C4  2498: #L0 = CALL0 time()
 33F4:49DA 37F5:09CA  2504: #F0:1 = aquire_targ_time@59:754 F+ targ_hold_time@59:2201
 33F4:49E8 37F5:09D8  2518: #L1:146 = #L0:145 F> #F0:1
 33F4:49F6 37F5:09E6  2532: #L2:156 = In_TargWin:1276 && #L1:146
 33F4:4A04 37F5:09F4  2546: IFnot (#L2:156) GOTO .+228 (goto 2774)
 33F4:4A0C 37F5:09FC  2554: #L3:157 = trl_type@59:2322 == go_trl@59:1199
 33F4:4A1A 37F5:0A0A  2568: #L4:158 = trl_type@59:2322 == ignore_trl@59:1261
 33F4:4A28 37F5:0A18  2582: #L5:159 = #L3:157 || #L4:158
 33F4:4A36 37F5:0A26  2596: IFnot (#L5:159) GOTO .+76 (goto 2672)
 33F4:4A3E 37F5:0A2E  2604: Trl_Outcome:2306 = go_correct@59:1191
 33F4:4A48 37F5:0A38  2614: LastStopOutcome:1308 = no_change@59:1425
 33F4:4A52 37F5:0A42  2624: Event_fifo:1019[Set_event:2041] = Correct_:864
 33F4:4A5A 37F5:0A4A  2632: #L0:145 = Set_event:2041 + #I1:17
 33F4:4A68 37F5:0A58  2646: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4A76 37F5:0A66  2660: #L0 = CALL1 printf(#S353:551)
 33F4:4A7E 37F5:0A6E  2668: GOTO .+54 (goto 2722)
 33F4:4A82 37F5:0A72  2672: #L0:145 = trl_type@59:2322 == stop_trl@59:2169
 33F4:4A90 37F5:0A80  2686: IFnot (#L0:145) GOTO .+36 (goto 2722)
 33F4:4A98 37F5:0A88  2694: Trl_Outcome:2306 = nogo_wrong@59:1450
 33F4:4AA2 37F5:0A92  2704: LastStopOutcome:1308 = no_change@59:1425
 33F4:4AAC 37F5:0A9C  2714: #L0 = CALL1 printf(#S354:552)
 33F4:4AB4 37F5:0AA4  2722: #L0 = CALL2 dSendf(#S355:553,blank@59:788)
 33F4:4ABE 37F5:0AAE  2732: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4AC8 37F5:0AB8  2742: #L0 = CALL2 oSetAttribute(object_fix@59:1467,aINVISIBLE:726)
 33F4:4AD2 37F5:0AC2  2752: stage@59:2105 = need_fix@59:1417
 33F4:4ADC 37F5:0ACC  2762: trl_running@59:2311 = #I0:16
 33F4:4AE6 37F5:0AD6  2772: NEXTTICK1
 33F4:4AE8 37F5:0AD8  2774: NEXTTICK1
 33F4:4AEA 37F5:0ADA  2776: GOTO .-2364 (goto 412)

PROCESS  60: DELTRIAL (Args=7 CtrlBlk=33F4:26B4 Size=1726  iOp=2-1727 iCache=88514-90239) DISABLED
 33F4:4012 37F5:0002     0: allowed_fix_time@60:732 = #P1:241
 33F4:401C 37F5:000C    10: curr_holdtime@60:884 = #P2:246
 33F4:4026 37F5:0016    20: curr_soa@60:888 = #P3:247
 33F4:4030 37F5:0020    30: max_saccade_time@60:1357 = #P4:248
 33F4:403A 37F5:002A    40: max_sacc_duration@60:1351 = #P5:249
 33F4:4044 37F5:0034    50: targ_hold_time@60:2202 = #P6:250
 33F4:404E 37F5:003E    60: object_fix@60:1468 = #P7:251
 33F4:4058 37F5:0048    70: trl_running@60:2312 = #I1:17
 33F4:4062 37F5:0052    80: stage@60:2106 = need_fix@60:1418
 33F4:406C 37F5:005C    90: #L0 = CALL1 printf(#S356:554)
 33F4:4074 37F5:0064    98: #L0 = CALL2 printf(#S357:555,Trl_number:2305)
 33F4:407E 37F5:006E   108: #L0 = CALL2 printf(#S358:556,Comp_Trl_number:853)
 33F4:4088 37F5:0078   118: #L0 = CALL1 printf(#S359:557)
 33F4:4090 37F5:0080   126: Event_fifo:1019[Set_event:2041] = TrialStart_:2299
 33F4:4098 37F5:0088   134: #L0:145 = Set_event:2041 + #I1:17
 33F4:40A6 37F5:0096   148: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:40B4 37F5:00A4   162: #L0 = CALL2 dSendf(#S360:559,fixation_pd@60:1143)
 33F4:40BE 37F5:00AE   172: #L0 = CALL0 time()
 33F4:40C4 37F5:00B4   178: fix_on_time@60:1081 = F= fix_on_time@60:1081
 33F4:40CE 37F5:00BE   188: Event_fifo:1019[Set_event:2041] = FixSpotOn_:1164
 33F4:40D6 37F5:00C6   196: #L0:145 = Set_event:2041 + #I1:17
 33F4:40E4 37F5:00D4   210: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:40F2 37F5:00E2   224: #L0 = CALL1 dSendf(#S361:560)
 33F4:40FA 37F5:00EA   232: #L0 = CALL2 dSendf(#S362:561,fixation@60:1116)
 33F4:4104 37F5:00F4   242: #L0 = CALL2 oSetAttribute(object_fix@60:1468,aVISIBLE:769)
 33F4:410E 37F5:00FE   252: IFnot (trl_running@60:2312) GOTO .+1474 (goto 1726)
 33F4:4116 37F5:0106   260: #L0:145 = stage@60:2106 == need_fix@60:1418
 33F4:4124 37F5:0114   274: IFnot (#L0:145) GOTO .+196 (goto 470)
 33F4:412C 37F5:011C   282: IFnot (In_FixWin:1270) GOTO .+84 (goto 366)
 33F4:4134 37F5:0124   290: #L1 = CALL0 time()
 33F4:413A 37F5:012A   296: aquire_fix_time@60:750 = F= aquire_fix_time@60:750
 33F4:4144 37F5:0134   306: Trl_Start_Time:2315 = F= Trl_Start_Time:2315
 33F4:414E 37F5:013E   316: Event_fifo:1019[Set_event:2041] = Fixate_:1096
 33F4:4156 37F5:0146   324: #L0:145 = Set_event:2041 + #I1:17
 33F4:4164 37F5:0154   338: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4172 37F5:0162   352: stage@60:2106 = fixating@60:1100
 33F4:417C 37F5:016C   362: GOTO .+104 (goto 466)
 33F4:4180 37F5:0170   366: #L0 = CALL0 time()
 33F4:4186 37F5:0176   372: #F0:1 = fix_on_time@60:1081 F+ allowed_fix_time@60:732
 33F4:4194 37F5:0184   386: #L1:146 = #L0:145 F> #F0:1
 33F4:41A2 37F5:0192   400: IFnot (#L1:146) GOTO .+66 (goto 466)
 33F4:41AA 37F5:019A   408: Trl_Outcome:2306 = no_fix@60:1430
 33F4:41B4 37F5:01A4   418: #L0 = CALL2 dSendf(#S363:562,blank@60:789)
 33F4:41BE 37F5:01AE   428: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:41C8 37F5:01B8   438: #L0 = CALL2 oSetAttribute(object_fix@60:1468,aINVISIBLE:726)
 33F4:41D2 37F5:01C2   448: #L0 = CALL1 printf(#S364:563)
 33F4:41DA 37F5:01CA   456: trl_running@60:2312 = #I0:16
 33F4:41E4 37F5:01D4   466: GOTO .+1254 (goto 1720)
 33F4:41E8 37F5:01D8   470: #L0:145 = stage@60:2106 == fixating@60:1100
 33F4:41F6 37F5:01E6   484: IFnot (#L0:145) GOTO .+252 (goto 736)
 33F4:41FE 37F5:01EE   492: #L1:146 = ! In_FixWin:1270
 33F4:420C 37F5:01FC   506: IFnot (#L1:146) GOTO .+70 (goto 576)
 33F4:4214 37F5:0204   514: Trl_Outcome:2306 = broke_fix@60:806
 33F4:421E 37F5:020E   524: #L0 = CALL2 dSendf(#S365:564,blank@60:789)
 33F4:4228 37F5:0218   534: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4232 37F5:0222   544: #L0 = CALL2 oSetAttribute(object_fix@60:1468,aINVISIBLE:726)
 33F4:423C 37F5:022C   554: #L0 = CALL1 printf(#S366:565)
 33F4:4244 37F5:0234   562: trl_running@60:2312 = #I0:16
 33F4:424E 37F5:023E   572: GOTO .+160 (goto 732)
 33F4:4252 37F5:0242   576: #L0 = CALL0 time()
 33F4:4258 37F5:0248   582: #F0:1 = aquire_fix_time@60:750 F+ curr_holdtime@60:884
 33F4:4266 37F5:0256   596: #L1:146 = #L0:145 F> #F0:1
 33F4:4274 37F5:0264   610: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:4282 37F5:0272   624: IFnot (#L2:156) GOTO .+108 (goto 732)
 33F4:428A 37F5:027A   632: #L3 = CALL2 dSendf(#S367:566,fixation_target_pd@60:1157)
 33F4:4294 37F5:0284   642: #L0 = CALL0 time()
 33F4:429A 37F5:028A   648: targ_time@60:2213 = F= targ_time@60:2213
 33F4:42A4 37F5:0294   658: #L0 = CALL1 dSendf(#S368:567)
 33F4:42AC 37F5:029C   666: #L0 = CALL2 dSendf(#S369:568,fixation_target@60:1153)
 33F4:42B6 37F5:02A6   676: Event_fifo:1019[Set_event:2041] = Target_:2238
 33F4:42BE 37F5:02AE   684: #L0:145 = Set_event:2041 + #I1:17
 33F4:42CC 37F5:02BC   698: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:42DA 37F5:02CA   712: #L0 = CALL2 oSetAttribute(object_targ:1513,aVISIBLE:769)
 33F4:42E4 37F5:02D4   722: stage@60:2106 = targ_on@60:2207
 33F4:42EE 37F5:02DE   732: GOTO .+988 (goto 1720)
 33F4:42F2 37F5:02E2   736: #L0:145 = stage@60:2106 == targ_on@60:2207
 33F4:4300 37F5:02F0   750: IFnot (#L0:145) GOTO .+262 (goto 1012)
 33F4:4308 37F5:02F8   758: #L1:146 = ! In_FixWin:1270
 33F4:4316 37F5:0306   772: IFnot (#L1:146) GOTO .+70 (goto 842)
 33F4:431E 37F5:030E   780: Trl_Outcome:2306 = early_sacc@60:1002
 33F4:4328 37F5:0318   790: #L0 = CALL2 dSendf(#S370:570,blank@60:789)
 33F4:4332 37F5:0322   800: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:433C 37F5:032C   810: #L0 = CALL2 oSetAttribute(object_fix@60:1468,aINVISIBLE:726)
 33F4:4346 37F5:0336   820: #L0 = CALL1 printf(#S371:571)
 33F4:434E 37F5:033E   828: trl_running@60:2312 = #I0:16
 33F4:4358 37F5:0348   838: GOTO .+170 (goto 1008)
 33F4:435C 37F5:034C   842: #L0 = CALL0 time()
 33F4:4362 37F5:0352   848: #F0:1 = targ_time@60:2213 F+ curr_soa@60:888
 33F4:4370 37F5:0360   862: #L1:146 = #L0:145 F> #F0:1
 33F4:437E 37F5:036E   876: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:438C 37F5:037C   890: IFnot (#L2:156) GOTO .+118 (goto 1008)
 33F4:4394 37F5:0384   898: #L3 = CALL2 printf(#S372:572,curr_soa@60:888)
 33F4:439E 37F5:038E   908: #L0 = CALL2 dSendf(#S373:573,target_pd@60:2253)
 33F4:43A8 37F5:0398   918: #L0 = CALL1 dSendf(#S374:574)
 33F4:43B0 37F5:03A0   926: #L0 = CALL2 dSendf(#S375:575,target@60:2236)
 33F4:43BA 37F5:03AA   936: #L0 = CALL0 time()
 33F4:43C0 37F5:03B0   942: fix_off_time@60:1079 = F= fix_off_time@60:1079
 33F4:43CA 37F5:03BA   952: Event_fifo:1019[Set_event:2041] = FixSpotOff_:1163
 33F4:43D2 37F5:03C2   960: #L0:145 = Set_event:2041 + #I1:17
 33F4:43E0 37F5:03D0   974: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:43EE 37F5:03DE   988: #L0 = CALL2 oSetAttribute(object_fix@60:1468,aINVISIBLE:726)
 33F4:43F8 37F5:03E8   998: stage@60:2106 = fix_off@60:1075
 33F4:4402 37F5:03F2  1008: GOTO .+712 (goto 1720)
 33F4:4406 37F5:03F6  1012: #L0:145 = stage@60:2106 == fix_off@60:1075
 33F4:4414 37F5:0404  1026: IFnot (#L0:145) GOTO .+238 (goto 1264)
 33F4:441C 37F5:040C  1034: #L1:146 = ! In_FixWin:1270
 33F4:442A 37F5:041A  1048: IFnot (#L1:146) GOTO .+98 (goto 1146)
 33F4:4432 37F5:0422  1056: #L2 = CALL0 time()
 33F4:4438 37F5:0428  1062: saccade_time@60:2001 = F= saccade_time@60:2001
 33F4:4442 37F5:0432  1072: Event_fifo:1019[Set_event:2041] = Saccade_:1996
 33F4:444A 37F5:043A  1080: #L0:145 = Set_event:2041 + #I1:17
 33F4:4458 37F5:0448  1094: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4466 37F5:0456  1108: ReactionTime:1912 = saccade_time@60:2001 F- fix_off_time@60:1079
 33F4:4474 37F5:0464  1122: #L0 = CALL2 printf(#S376:576,ReactionTime:1912)
 33F4:447E 37F5:046E  1132: stage@60:2106 = in_flight@60:1275
 33F4:4488 37F5:0478  1142: GOTO .+118 (goto 1260)
 33F4:448C 37F5:047C  1146: #L0 = CALL0 time()
 33F4:4492 37F5:0482  1152: #F0:1 = fix_off_time@60:1079 F+ max_saccade_time@60:1357
 33F4:44A0 37F5:0490  1166: #L1:146 = #L0:145 F> #F0:1
 33F4:44AE 37F5:049E  1180: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:44BC 37F5:04AC  1194: IFnot (#L2:156) GOTO .+66 (goto 1260)
 33F4:44C4 37F5:04B4  1202: Trl_Outcome:2306 = no_sacc@60:1434
 33F4:44CE 37F5:04BE  1212: #L0 = CALL2 dSendf(#S377:577,blank@60:789)
 33F4:44D8 37F5:04C8  1222: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:44E2 37F5:04D2  1232: #L0 = CALL2 oSetAttribute(object_fix@60:1468,aINVISIBLE:726)
 33F4:44EC 37F5:04DC  1242: #L0 = CALL1 printf(#S378:578)
 33F4:44F4 37F5:04E4  1250: trl_running@60:2312 = #I0:16
 33F4:44FE 37F5:04EE  1260: GOTO .+460 (goto 1720)
 33F4:4502 37F5:04F2  1264: #L0:145 = stage@60:2106 == in_flight@60:1275
 33F4:4510 37F5:0500  1278: IFnot (#L0:145) GOTO .+186 (goto 1464)
 33F4:4518 37F5:0508  1286: IFnot (In_TargWin:1276) GOTO .+74 (goto 1360)
 33F4:4520 37F5:0510  1294: #L1 = CALL0 time()
 33F4:4526 37F5:0516  1300: aquire_targ_time@60:755 = F= aquire_targ_time@60:755
 33F4:4530 37F5:0520  1310: Event_fifo:1019[Set_event:2041] = Decide_:939
 33F4:4538 37F5:0528  1318: #L0:145 = Set_event:2041 + #I1:17
 33F4:4546 37F5:0536  1332: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4554 37F5:0544  1346: stage@60:2106 = on_target@60:1541
 33F4:455E 37F5:054E  1356: GOTO .+104 (goto 1460)
 33F4:4562 37F5:0552  1360: #L0 = CALL0 time()
 33F4:4568 37F5:0558  1366: #F0:1 = saccade_time@60:2001 F+ max_sacc_duration@60:1351
 33F4:4576 37F5:0566  1380: #L1:146 = #L0:145 F> #F0:1
 33F4:4584 37F5:0574  1394: IFnot (#L1:146) GOTO .+66 (goto 1460)
 33F4:458C 37F5:057C  1402: Trl_Outcome:2306 = sacc_out@60:1994
 33F4:4596 37F5:0586  1412: #L0 = CALL2 dSendf(#S379:579,blank@60:789)
 33F4:45A0 37F5:0590  1422: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:45AA 37F5:059A  1432: #L0 = CALL2 oSetAttribute(object_fix@60:1468,aINVISIBLE:726)
 33F4:45B4 37F5:05A4  1442: #L0 = CALL1 printf(#S380:581)
 33F4:45BC 37F5:05AC  1450: trl_running@60:2312 = #I0:16
 33F4:45C6 37F5:05B6  1460: GOTO .+260 (goto 1720)
 33F4:45CA 37F5:05BA  1464: #L0:145 = stage@60:2106 == on_target@60:1541
 33F4:45D8 37F5:05C8  1478: IFnot (#L0:145) GOTO .+242 (goto 1720)
 33F4:45E0 37F5:05D0  1486: #L1:146 = ! In_TargWin:1276
 33F4:45EE 37F5:05DE  1500: IFnot (#L1:146) GOTO .+70 (goto 1570)
 33F4:45F6 37F5:05E6  1508: Trl_Outcome:2306 = broke_targ@60:812
 33F4:4600 37F5:05F0  1518: #L0 = CALL2 dSendf(#S381:582,blank@60:789)
 33F4:460A 37F5:05FA  1528: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:4614 37F5:0604  1538: #L0 = CALL2 oSetAttribute(object_fix@60:1468,aINVISIBLE:726)
 33F4:461E 37F5:060E  1548: #L0 = CALL1 printf(#S382:583)
 33F4:4626 37F5:0616  1556: trl_running@60:2312 = #I0:16
 33F4:4630 37F5:0620  1566: GOTO .+154 (goto 1720)
 33F4:4634 37F5:0624  1570: #L0 = CALL0 time()
 33F4:463A 37F5:062A  1576: #F0:1 = aquire_targ_time@60:755 F+ targ_hold_time@60:2202
 33F4:4648 37F5:0638  1590: #L1:146 = #L0:145 F> #F0:1
 33F4:4656 37F5:0646  1604: #L2:156 = In_TargWin:1276 && #L1:146
 33F4:4664 37F5:0654  1618: IFnot (#L2:156) GOTO .+102 (goto 1720)
 33F4:466C 37F5:065C  1626: Trl_Outcome:2306 = correct_sacc@60:867
 33F4:4676 37F5:0666  1636: Event_fifo:1019[Set_event:2041] = Correct_:864
 33F4:467E 37F5:066E  1644: #L0:145 = Set_event:2041 + #I1:17
 33F4:468C 37F5:067C  1658: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:469A 37F5:068A  1672: #L0 = CALL1 printf(#S383:584)
 33F4:46A2 37F5:0692  1680: #L0 = CALL2 dSendf(#S384:585,blank@60:789)
 33F4:46AC 37F5:069C  1690: #L0 = CALL2 oSetAttribute(object_targ:1513,aINVISIBLE:726)
 33F4:46B6 37F5:06A6  1700: #L0 = CALL2 oSetAttribute(object_fix@60:1468,aINVISIBLE:726)
 33F4:46C0 37F5:06B0  1710: trl_running@60:2312 = #I0:16
 33F4:46CA 37F5:06BA  1720: NEXTTICK1
 33F4:46CC 37F5:06BC  1722: GOTO .-1470 (goto 252)

PROCESS  61: UPD8_INH (Args=3 CtrlBlk=33F4:26E0 Size=1976  iOp=2-1977 iCache=90240-92215) DISABLED
 33F4:4012 37F5:0002     0: curr_ssd@61:893 = #P1:241
 33F4:401C 37F5:000C    10: laststopoutcome@61:1310 = #P2:246
 33F4:4026 37F5:0016    20: decide_ssd@61:947 = #P3:247
 33F4:4030 37F5:0020    30: ct@61:871 = #I0:16
 33F4:403A 37F5:002A    40: #L0:145 = FirstStopTrial:1071 == #I1:17
 33F4:4048 37F5:0038    54: IFnot (#L0:145) GOTO .+74 (goto 128)
 33F4:4050 37F5:0040    62: #L1:146 = ct@61:871 < #I20:54
 33F4:405E 37F5:004E    76: IFnot (#L1:146) GOTO .+52 (goto 128)
 33F4:4066 37F5:0056    84: position_y@61:1631[ct@61:871] = #M00000000:164
 33F4:406E 37F5:005E    92: ct_ssd@61:874[ct@61:871] = #M00000000:164
 33F4:4076 37F5:0066   100: ct@61:871 = ct@61:871 + #I1:17
 33F4:4084 37F5:0074   114: FirstStopTrial:1071 = #I0:16
 33F4:408E 37F5:007E   124: GOTO .-62 (goto 62)
 33F4:4092 37F5:0082   128: #L0:145 = laststopoutcome@61:1310 == success@61:2185
 33F4:40A0 37F5:0090   142: IFnot (#L0:145) GOTO .+22 (goto 164)
 33F4:40A8 37F5:0098   150: change_value@61:830 = F= change_value@61:830
 33F4:40B2 37F5:00A2   160: GOTO .+36 (goto 196)
 33F4:40B6 37F5:00A6   164: #L0:145 = laststopoutcome@61:1310 == failure@61:1048
 33F4:40C4 37F5:00B4   178: IFnot (#L0:145) GOTO .+18 (goto 196)
 33F4:40CC 37F5:00BC   186: change_value@61:830 = F= change_value@61:830
 33F4:40D6 37F5:00C6   196: #F0:1 = curr_ssd@61:893 F* #M447A0000:226
 33F4:40E4 37F5:00D4   210: #F1:2 = #F0:1 F/ Refresh_rate:1913
 33F4:40F2 37F5:00E2   224: position_x@61:1629 = #F1:2 F* #I1000:20
 33F4:4100 37F5:00F0   238: #F0:1 = ct_ssd@61:874[decide_ssd@61:947]
 33F4:4108 37F5:00F8   246: #F1:2 = #F0:1 F+ #M3F800000:167
 33F4:4116 37F5:0106   260: weight@61:2364 = #M3F800000:167 F/ #F1:2
 33F4:4124 37F5:0114   274: #F0:1 = #I1:17 F- weight@61:2364
 33F4:4132 37F5:0122   288: #F1:2 = position_y@61:1631[decide_ssd@61:947]
 33F4:413A 37F5:012A   296: #F2:3 = #F0:1 F* #F1:2
 33F4:4148 37F5:0138   310: #F3:4 = change_value@61:830 F* weight@61:2364
 33F4:4156 37F5:0146   324: #F4:5 = #F2:3 F+ #F3:4
 33F4:4164 37F5:0154   338: position_y@61:1631[decide_ssd@61:947] = #F4:5
 33F4:416C 37F5:015C   346: #F0:1 = ct_ssd@61:874[decide_ssd@61:947]
 33F4:4174 37F5:0164   354: #F1:2 = #F0:1 F+ #I1:17
 33F4:4182 37F5:0172   368: ct_ssd@61:874[decide_ssd@61:947] = #F1:2
 33F4:418A 37F5:017A   376: #F0:1 = SSD_list:2100[#I0:16]
 33F4:4192 37F5:0182   384: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:41A0 37F5:0190   398: IFnot (#L0:145) GOTO .+58 (goto 456)
 33F4:41A8 37F5:0198   406: #L1 = CALL2 oSetAttribute(object_ssd0:1493,aFILLED:725)
 33F4:41B2 37F5:01A2   416: #L0 = CALL2 oSetAttribute(object_ssd0:1493,aVISIBLE:769)
 33F4:41BC 37F5:01AC   426: #F0:1 = position_y@61:1631[#I0:16]
 33F4:41C4 37F5:01B4   434: #L1:146 = F= #L1:146
 33F4:41CE 37F5:01BE   444: #L0 = CALL3 oMove(object_ssd0:1493,position_x@61:1629,#L1:146)
 33F4:41DA 37F5:01CA   456: #F0:1 = SSD_list:2100[#I1:17]
 33F4:41E2 37F5:01D2   464: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:41F0 37F5:01E0   478: IFnot (#L0:145) GOTO .+58 (goto 536)
 33F4:41F8 37F5:01E8   486: #L1 = CALL2 oSetAttribute(object_ssd1:1494,aFILLED:725)
 33F4:4202 37F5:01F2   496: #L0 = CALL2 oSetAttribute(object_ssd1:1494,aVISIBLE:769)
 33F4:420C 37F5:01FC   506: #F0:1 = position_y@61:1631[#I1:17]
 33F4:4214 37F5:0204   514: #L1:146 = F= #L1:146
 33F4:421E 37F5:020E   524: #L0 = CALL3 oMove(object_ssd1:1494,position_x@61:1629,#L1:146)
 33F4:422A 37F5:021A   536: #F0:1 = SSD_list:2100[#I2:53]
 33F4:4232 37F5:0222   544: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4240 37F5:0230   558: IFnot (#L0:145) GOTO .+58 (goto 616)
 33F4:4248 37F5:0238   566: #L1 = CALL2 oSetAttribute(object_ssd2:1505,aFILLED:725)
 33F4:4252 37F5:0242   576: #L0 = CALL2 oSetAttribute(object_ssd2:1505,aVISIBLE:769)
 33F4:425C 37F5:024C   586: #F0:1 = position_y@61:1631[#I2:53]
 33F4:4264 37F5:0254   594: #L1:146 = F= #L1:146
 33F4:426E 37F5:025E   604: #L0 = CALL3 oMove(object_ssd2:1505,position_x@61:1629,#L1:146)
 33F4:427A 37F5:026A   616: #F0:1 = SSD_list:2100[#I3:74]
 33F4:4282 37F5:0272   624: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4290 37F5:0280   638: IFnot (#L0:145) GOTO .+58 (goto 696)
 33F4:4298 37F5:0288   646: #L1 = CALL2 oSetAttribute(object_ssd3:1506,aFILLED:725)
 33F4:42A2 37F5:0292   656: #L0 = CALL2 oSetAttribute(object_ssd3:1506,aVISIBLE:769)
 33F4:42AC 37F5:029C   666: #F0:1 = position_y@61:1631[#I3:74]
 33F4:42B4 37F5:02A4   674: #L1:146 = F= #L1:146
 33F4:42BE 37F5:02AE   684: #L0 = CALL3 oMove(object_ssd3:1506,position_x@61:1629,#L1:146)
 33F4:42CA 37F5:02BA   696: #F0:1 = SSD_list:2100[#I4:87]
 33F4:42D2 37F5:02C2   704: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:42E0 37F5:02D0   718: IFnot (#L0:145) GOTO .+58 (goto 776)
 33F4:42E8 37F5:02D8   726: #L1 = CALL2 oSetAttribute(object_ssd4:1507,aFILLED:725)
 33F4:42F2 37F5:02E2   736: #L0 = CALL2 oSetAttribute(object_ssd4:1507,aVISIBLE:769)
 33F4:42FC 37F5:02EC   746: #F0:1 = position_y@61:1631[#I4:87]
 33F4:4304 37F5:02F4   754: #L1:146 = F= #L1:146
 33F4:430E 37F5:02FE   764: #L0 = CALL3 oMove(object_ssd4:1507,position_x@61:1629,#L1:146)
 33F4:431A 37F5:030A   776: #F0:1 = SSD_list:2100[#I5:111]
 33F4:4322 37F5:0312   784: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4330 37F5:0320   798: IFnot (#L0:145) GOTO .+58 (goto 856)
 33F4:4338 37F5:0328   806: #L1 = CALL2 oSetAttribute(object_ssd5:1508,aFILLED:725)
 33F4:4342 37F5:0332   816: #L0 = CALL2 oSetAttribute(object_ssd5:1508,aVISIBLE:769)
 33F4:434C 37F5:033C   826: #F0:1 = position_y@61:1631[#I5:111]
 33F4:4354 37F5:0344   834: #L1:146 = F= #L1:146
 33F4:435E 37F5:034E   844: #L0 = CALL3 oMove(object_ssd5:1508,position_x@61:1629,#L1:146)
 33F4:436A 37F5:035A   856: #F0:1 = SSD_list:2100[#I6:120]
 33F4:4372 37F5:0362   864: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4380 37F5:0370   878: IFnot (#L0:145) GOTO .+58 (goto 936)
 33F4:4388 37F5:0378   886: #L1 = CALL2 oSetAttribute(object_ssd6:1509,aFILLED:725)
 33F4:4392 37F5:0382   896: #L0 = CALL2 oSetAttribute(object_ssd6:1509,aVISIBLE:769)
 33F4:439C 37F5:038C   906: #F0:1 = position_y@61:1631[#I6:120]
 33F4:43A4 37F5:0394   914: #L1:146 = F= #L1:146
 33F4:43AE 37F5:039E   924: #L0 = CALL3 oMove(object_ssd6:1509,position_x@61:1629,#L1:146)
 33F4:43BA 37F5:03AA   936: #F0:1 = SSD_list:2100[#I7:129]
 33F4:43C2 37F5:03B2   944: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:43D0 37F5:03C0   958: IFnot (#L0:145) GOTO .+58 (goto 1016)
 33F4:43D8 37F5:03C8   966: #L1 = CALL2 oSetAttribute(object_ssd7:1510,aFILLED:725)
 33F4:43E2 37F5:03D2   976: #L0 = CALL2 oSetAttribute(object_ssd7:1510,aVISIBLE:769)
 33F4:43EC 37F5:03DC   986: #F0:1 = position_y@61:1631[#I7:129]
 33F4:43F4 37F5:03E4   994: #L1:146 = F= #L1:146
 33F4:43FE 37F5:03EE  1004: #L0 = CALL3 oMove(object_ssd7:1510,position_x@61:1629,#L1:146)
 33F4:440A 37F5:03FA  1016: #F0:1 = SSD_list:2100[#I8:133]
 33F4:4412 37F5:0402  1024: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4420 37F5:0410  1038: IFnot (#L0:145) GOTO .+58 (goto 1096)
 33F4:4428 37F5:0418  1046: #L1 = CALL2 oSetAttribute(object_ssd8:1511,aFILLED:725)
 33F4:4432 37F5:0422  1056: #L0 = CALL2 oSetAttribute(object_ssd8:1511,aVISIBLE:769)
 33F4:443C 37F5:042C  1066: #F0:1 = position_y@61:1631[#I8:133]
 33F4:4444 37F5:0434  1074: #L1:146 = F= #L1:146
 33F4:444E 37F5:043E  1084: #L0 = CALL3 oMove(object_ssd8:1511,position_x@61:1629,#L1:146)
 33F4:445A 37F5:044A  1096: #F0:1 = SSD_list:2100[#I9:140]
 33F4:4462 37F5:0452  1104: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4470 37F5:0460  1118: IFnot (#L0:145) GOTO .+58 (goto 1176)
 33F4:4478 37F5:0468  1126: #L1 = CALL2 oSetAttribute(object_ssd9:1512,aFILLED:725)
 33F4:4482 37F5:0472  1136: #L0 = CALL2 oSetAttribute(object_ssd9:1512,aVISIBLE:769)
 33F4:448C 37F5:047C  1146: #F0:1 = position_y@61:1631[#I9:140]
 33F4:4494 37F5:0484  1154: #L1:146 = F= #L1:146
 33F4:449E 37F5:048E  1164: #L0 = CALL3 oMove(object_ssd9:1512,position_x@61:1629,#L1:146)
 33F4:44AA 37F5:049A  1176: #F0:1 = SSD_list:2100[#I10:18]
 33F4:44B2 37F5:04A2  1184: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:44C0 37F5:04B0  1198: IFnot (#L0:145) GOTO .+58 (goto 1256)
 33F4:44C8 37F5:04B8  1206: #L1 = CALL2 oSetAttribute(object_ssd10:1495,aFILLED:725)
 33F4:44D2 37F5:04C2  1216: #L0 = CALL2 oSetAttribute(object_ssd10:1495,aVISIBLE:769)
 33F4:44DC 37F5:04CC  1226: #F0:1 = position_y@61:1631[#I10:18]
 33F4:44E4 37F5:04D4  1234: #L1:146 = F= #L1:146
 33F4:44EE 37F5:04DE  1244: #L0 = CALL3 oMove(object_ssd10:1495,position_x@61:1629,#L1:146)
 33F4:44FA 37F5:04EA  1256: #F0:1 = SSD_list:2100[#I11:27]
 33F4:4502 37F5:04F2  1264: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4510 37F5:0500  1278: IFnot (#L0:145) GOTO .+58 (goto 1336)
 33F4:4518 37F5:0508  1286: #L1 = CALL2 oSetAttribute(object_ssd11:1496,aFILLED:725)
 33F4:4522 37F5:0512  1296: #L0 = CALL2 oSetAttribute(object_ssd11:1496,aVISIBLE:769)
 33F4:452C 37F5:051C  1306: #F0:1 = position_y@61:1631[#I11:27]
 33F4:4534 37F5:0524  1314: #L1:146 = F= #L1:146
 33F4:453E 37F5:052E  1324: #L0 = CALL3 oMove(object_ssd11:1496,position_x@61:1629,#L1:146)
 33F4:454A 37F5:053A  1336: #F0:1 = SSD_list:2100[#I12:30]
 33F4:4552 37F5:0542  1344: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4560 37F5:0550  1358: IFnot (#L0:145) GOTO .+58 (goto 1416)
 33F4:4568 37F5:0558  1366: #L1 = CALL2 oSetAttribute(object_ssd12:1497,aFILLED:725)
 33F4:4572 37F5:0562  1376: #L0 = CALL2 oSetAttribute(object_ssd12:1497,aVISIBLE:769)
 33F4:457C 37F5:056C  1386: #F0:1 = position_y@61:1631[#I12:30]
 33F4:4584 37F5:0574  1394: #L1:146 = F= #L1:146
 33F4:458E 37F5:057E  1404: #L0 = CALL3 oMove(object_ssd12:1497,position_x@61:1629,#L1:146)
 33F4:459A 37F5:058A  1416: #F0:1 = SSD_list:2100[#I13:34]
 33F4:45A2 37F5:0592  1424: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:45B0 37F5:05A0  1438: IFnot (#L0:145) GOTO .+58 (goto 1496)
 33F4:45B8 37F5:05A8  1446: #L1 = CALL2 oSetAttribute(object_ssd13:1498,aFILLED:725)
 33F4:45C2 37F5:05B2  1456: #L0 = CALL2 oSetAttribute(object_ssd13:1498,aVISIBLE:769)
 33F4:45CC 37F5:05BC  1466: #F0:1 = position_y@61:1631[#I13:34]
 33F4:45D4 37F5:05C4  1474: #L1:146 = F= #L1:146
 33F4:45DE 37F5:05CE  1484: #L0 = CALL3 oMove(object_ssd13:1498,position_x@61:1629,#L1:146)
 33F4:45EA 37F5:05DA  1496: #F0:1 = SSD_list:2100[#I14:38]
 33F4:45F2 37F5:05E2  1504: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4600 37F5:05F0  1518: IFnot (#L0:145) GOTO .+58 (goto 1576)
 33F4:4608 37F5:05F8  1526: #L1 = CALL2 oSetAttribute(object_ssd14:1499,aFILLED:725)
 33F4:4612 37F5:0602  1536: #L0 = CALL2 oSetAttribute(object_ssd14:1499,aVISIBLE:769)
 33F4:461C 37F5:060C  1546: #F0:1 = position_y@61:1631[#I14:38]
 33F4:4624 37F5:0614  1554: #L1:146 = F= #L1:146
 33F4:462E 37F5:061E  1564: #L0 = CALL3 oMove(object_ssd14:1499,position_x@61:1629,#L1:146)
 33F4:463A 37F5:062A  1576: #F0:1 = SSD_list:2100[#I15:41]
 33F4:4642 37F5:0632  1584: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4650 37F5:0640  1598: IFnot (#L0:145) GOTO .+58 (goto 1656)
 33F4:4658 37F5:0648  1606: #L1 = CALL2 oSetAttribute(object_ssd15:1500,aFILLED:725)
 33F4:4662 37F5:0652  1616: #L0 = CALL2 oSetAttribute(object_ssd15:1500,aVISIBLE:769)
 33F4:466C 37F5:065C  1626: #F0:1 = position_y@61:1631[#I15:41]
 33F4:4674 37F5:0664  1634: #L1:146 = F= #L1:146
 33F4:467E 37F5:066E  1644: #L0 = CALL3 oMove(object_ssd15:1500,position_x@61:1629,#L1:146)
 33F4:468A 37F5:067A  1656: #F0:1 = SSD_list:2100[#I16:44]
 33F4:4692 37F5:0682  1664: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:46A0 37F5:0690  1678: IFnot (#L0:145) GOTO .+58 (goto 1736)
 33F4:46A8 37F5:0698  1686: #L1 = CALL2 oSetAttribute(object_ssd16:1501,aFILLED:725)
 33F4:46B2 37F5:06A2  1696: #L0 = CALL2 oSetAttribute(object_ssd16:1501,aVISIBLE:769)
 33F4:46BC 37F5:06AC  1706: #F0:1 = position_y@61:1631[#I16:44]
 33F4:46C4 37F5:06B4  1714: #L1:146 = F= #L1:146
 33F4:46CE 37F5:06BE  1724: #L0 = CALL3 oMove(object_ssd16:1501,position_x@61:1629,#L1:146)
 33F4:46DA 37F5:06CA  1736: #F0:1 = SSD_list:2100[#I17:47]
 33F4:46E2 37F5:06D2  1744: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:46F0 37F5:06E0  1758: IFnot (#L0:145) GOTO .+58 (goto 1816)
 33F4:46F8 37F5:06E8  1766: #L1 = CALL2 oSetAttribute(object_ssd17:1502,aFILLED:725)
 33F4:4702 37F5:06F2  1776: #L0 = CALL2 oSetAttribute(object_ssd17:1502,aVISIBLE:769)
 33F4:470C 37F5:06FC  1786: #F0:1 = position_y@61:1631[#I17:47]
 33F4:4714 37F5:0704  1794: #L1:146 = F= #L1:146
 33F4:471E 37F5:070E  1804: #L0 = CALL3 oMove(object_ssd17:1502,position_x@61:1629,#L1:146)
 33F4:472A 37F5:071A  1816: #F0:1 = SSD_list:2100[#I18:49]
 33F4:4732 37F5:0722  1824: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4740 37F5:0730  1838: IFnot (#L0:145) GOTO .+58 (goto 1896)
 33F4:4748 37F5:0738  1846: #L1 = CALL2 oSetAttribute(object_ssd18:1503,aFILLED:725)
 33F4:4752 37F5:0742  1856: #L0 = CALL2 oSetAttribute(object_ssd18:1503,aVISIBLE:769)
 33F4:475C 37F5:074C  1866: #F0:1 = position_y@61:1631[#I18:49]
 33F4:4764 37F5:0754  1874: #L1:146 = F= #L1:146
 33F4:476E 37F5:075E  1884: #L0 = CALL3 oMove(object_ssd18:1503,position_x@61:1629,#L1:146)
 33F4:477A 37F5:076A  1896: #F0:1 = SSD_list:2100[#I19:52]
 33F4:4782 37F5:0772  1904: #L0:145 = curr_ssd@61:893 F== #F0:1
 33F4:4790 37F5:0780  1918: IFnot (#L0:145) GOTO .+58 (goto 1976)
 33F4:4798 37F5:0788  1926: #L1 = CALL2 oSetAttribute(object_ssd19:1504,aFILLED:725)
 33F4:47A2 37F5:0792  1936: #L0 = CALL2 oSetAttribute(object_ssd19:1504,aVISIBLE:769)
 33F4:47AC 37F5:079C  1946: #F0:1 = position_y@61:1631[#I19:52]
 33F4:47B4 37F5:07A4  1954: #L1:146 = F= #L1:146
 33F4:47BE 37F5:07AE  1964: #L0 = CALL3 oMove(object_ssd19:1504,position_x@61:1629,#L1:146)

PROCESS  62: UPD8_SOA (Args=3 CtrlBlk=33F4:270C Size=1952  iOp=2-1953 iCache=92216-94167) DISABLED
 33F4:4012 37F5:0002     0: curr_soa@62:889 = #P1:241
 33F4:401C 37F5:000C    10: laststopoutcome@62:1311 = #P2:246
 33F4:4026 37F5:0016    20: per_jitter@62:1606 = #P3:247
 33F4:4030 37F5:0020    30: ct@62:872 = #I0:16
 33F4:403A 37F5:002A    40: #L0:145 = FirstSOATrial:1070 == #I1:17
 33F4:4048 37F5:0038    54: IFnot (#L0:145) GOTO .+82 (goto 136)
 33F4:4050 37F5:0040    62: #L1:146 = ct@62:872 < #I20:54
 33F4:405E 37F5:004E    76: IFnot (#L1:146) GOTO .+60 (goto 136)
 33F4:4066 37F5:0056    84: position_y@62:1632[ct@62:872] = #M00000000:164
 33F4:406E 37F5:005E    92: ct_soa@62:873[ct@62:872] = #M00000000:164
 33F4:4076 37F5:0066   100: rts@62:1939[ct@62:872] = #M00000000:164
 33F4:407E 37F5:006E   108: ct@62:872 = ct@62:872 + #I1:17
 33F4:408C 37F5:007C   122: FirstSOATrial:1070 = #I0:16
 33F4:4096 37F5:0086   132: GOTO .-70 (goto 62)
 33F4:409A 37F5:008A   136: #L0:145 = laststopoutcome@62:1311 == success@62:2186
 33F4:40A8 37F5:0098   150: IFnot (#L0:145) GOTO .+22 (goto 172)
 33F4:40B0 37F5:00A0   158: change_value@62:831 = F= change_value@62:831
 33F4:40BA 37F5:00AA   168: GOTO .+36 (goto 204)
 33F4:40BE 37F5:00AE   172: #L0:145 = laststopoutcome@62:1311 == failure@62:1049
 33F4:40CC 37F5:00BC   186: IFnot (#L0:145) GOTO .+18 (goto 204)
 33F4:40D4 37F5:00C4   194: change_value@62:831 = F= change_value@62:831
 33F4:40DE 37F5:00CE   204: #F0:1 = curr_soa@62:889 F* #M41649249:182
 33F4:40EC 37F5:00DC   218: #F1 = CALL1 round(#F0:1)
 33F4:40F4 37F5:00E4   226: position_x@62:1630 = F= position_x@62:1630
 33F4:40FE 37F5:00EE   236: #F0:1 = ct_soa@62:873[per_jitter@62:1606]
 33F4:4106 37F5:00F6   244: #F1:2 = #F0:1 F+ #I1:17
 33F4:4114 37F5:0104   258: ct_soa@62:873[per_jitter@62:1606] = #F1:2
 33F4:411C 37F5:010C   266: #F0:1 = rts@62:1939[per_jitter@62:1606]
 33F4:4124 37F5:0114   274: #F1:2 = #F0:1 F+ ReactionTime:1912
 33F4:4132 37F5:0122   288: rts@62:1939[per_jitter@62:1606] = #F1:2
 33F4:413A 37F5:012A   296: #F0:1 = rts@62:1939[per_jitter@62:1606]
 33F4:4142 37F5:0132   304: #F1:2 = ct_soa@62:873[per_jitter@62:1606]
 33F4:414A 37F5:013A   312: #F2:3 = #F0:1 F/ #F1:2
 33F4:4158 37F5:0148   326: position_y@62:1632[per_jitter@62:1606] = #F2:3
 33F4:4160 37F5:0150   334: #F0:1 = position_y@62:1632[per_jitter@62:1606]
 33F4:4168 37F5:0158   342: #L0 = CALL2 printf(#S385:586,#F0:1)
 33F4:4172 37F5:0162   352: #F0:1 = SOA_list:2090[#I0:16]
 33F4:417A 37F5:016A   360: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4188 37F5:0178   374: IFnot (#L0:145) GOTO .+58 (goto 432)
 33F4:4190 37F5:0180   382: #L1 = CALL2 oSetAttribute(object_soa0:1473,aFILLED:725)
 33F4:419A 37F5:018A   392: #L0 = CALL2 oSetAttribute(object_soa0:1473,aVISIBLE:769)
 33F4:41A4 37F5:0194   402: #F0:1 = position_y@62:1632[#I0:16]
 33F4:41AC 37F5:019C   410: #L1:146 = F= #L1:146
 33F4:41B6 37F5:01A6   420: #L0 = CALL3 oMove(object_soa0:1473,position_x@62:1630,#L1:146)
 33F4:41C2 37F5:01B2   432: #F0:1 = SOA_list:2090[#I1:17]
 33F4:41CA 37F5:01BA   440: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:41D8 37F5:01C8   454: IFnot (#L0:145) GOTO .+58 (goto 512)
 33F4:41E0 37F5:01D0   462: #L1 = CALL2 oSetAttribute(object_soa1:1474,aFILLED:725)
 33F4:41EA 37F5:01DA   472: #L0 = CALL2 oSetAttribute(object_soa1:1474,aVISIBLE:769)
 33F4:41F4 37F5:01E4   482: #F0:1 = position_y@62:1632[#I1:17]
 33F4:41FC 37F5:01EC   490: #L1:146 = F= #L1:146
 33F4:4206 37F5:01F6   500: #L0 = CALL3 oMove(object_soa1:1474,position_x@62:1630,#L1:146)
 33F4:4212 37F5:0202   512: #F0:1 = SOA_list:2090[#I2:53]
 33F4:421A 37F5:020A   520: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4228 37F5:0218   534: IFnot (#L0:145) GOTO .+58 (goto 592)
 33F4:4230 37F5:0220   542: #L1 = CALL2 oSetAttribute(object_soa2:1485,aFILLED:725)
 33F4:423A 37F5:022A   552: #L0 = CALL2 oSetAttribute(object_soa2:1485,aVISIBLE:769)
 33F4:4244 37F5:0234   562: #F0:1 = position_y@62:1632[#I2:53]
 33F4:424C 37F5:023C   570: #L1:146 = F= #L1:146
 33F4:4256 37F5:0246   580: #L0 = CALL3 oMove(object_soa2:1485,position_x@62:1630,#L1:146)
 33F4:4262 37F5:0252   592: #F0:1 = SOA_list:2090[#I3:74]
 33F4:426A 37F5:025A   600: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4278 37F5:0268   614: IFnot (#L0:145) GOTO .+58 (goto 672)
 33F4:4280 37F5:0270   622: #L1 = CALL2 oSetAttribute(object_soa3:1486,aFILLED:725)
 33F4:428A 37F5:027A   632: #L0 = CALL2 oSetAttribute(object_soa3:1486,aVISIBLE:769)
 33F4:4294 37F5:0284   642: #F0:1 = position_y@62:1632[#I3:74]
 33F4:429C 37F5:028C   650: #L1:146 = F= #L1:146
 33F4:42A6 37F5:0296   660: #L0 = CALL3 oMove(object_soa3:1486,position_x@62:1630,#L1:146)
 33F4:42B2 37F5:02A2   672: #F0:1 = SOA_list:2090[#I4:87]
 33F4:42BA 37F5:02AA   680: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:42C8 37F5:02B8   694: IFnot (#L0:145) GOTO .+58 (goto 752)
 33F4:42D0 37F5:02C0   702: #L1 = CALL2 oSetAttribute(object_soa4:1487,aFILLED:725)
 33F4:42DA 37F5:02CA   712: #L0 = CALL2 oSetAttribute(object_soa4:1487,aVISIBLE:769)
 33F4:42E4 37F5:02D4   722: #F0:1 = position_y@62:1632[#I4:87]
 33F4:42EC 37F5:02DC   730: #L1:146 = F= #L1:146
 33F4:42F6 37F5:02E6   740: #L0 = CALL3 oMove(object_soa4:1487,position_x@62:1630,#L1:146)
 33F4:4302 37F5:02F2   752: #F0:1 = SOA_list:2090[#I5:111]
 33F4:430A 37F5:02FA   760: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4318 37F5:0308   774: IFnot (#L0:145) GOTO .+58 (goto 832)
 33F4:4320 37F5:0310   782: #L1 = CALL2 oSetAttribute(object_soa5:1488,aFILLED:725)
 33F4:432A 37F5:031A   792: #L0 = CALL2 oSetAttribute(object_soa5:1488,aVISIBLE:769)
 33F4:4334 37F5:0324   802: #F0:1 = position_y@62:1632[#I5:111]
 33F4:433C 37F5:032C   810: #L1:146 = F= #L1:146
 33F4:4346 37F5:0336   820: #L0 = CALL3 oMove(object_soa5:1488,position_x@62:1630,#L1:146)
 33F4:4352 37F5:0342   832: #F0:1 = SOA_list:2090[#I6:120]
 33F4:435A 37F5:034A   840: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4368 37F5:0358   854: IFnot (#L0:145) GOTO .+58 (goto 912)
 33F4:4370 37F5:0360   862: #L1 = CALL2 oSetAttribute(object_soa6:1489,aFILLED:725)
 33F4:437A 37F5:036A   872: #L0 = CALL2 oSetAttribute(object_soa6:1489,aVISIBLE:769)
 33F4:4384 37F5:0374   882: #F0:1 = position_y@62:1632[#I6:120]
 33F4:438C 37F5:037C   890: #L1:146 = F= #L1:146
 33F4:4396 37F5:0386   900: #L0 = CALL3 oMove(object_soa6:1489,position_x@62:1630,#L1:146)
 33F4:43A2 37F5:0392   912: #F0:1 = SOA_list:2090[#I7:129]
 33F4:43AA 37F5:039A   920: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:43B8 37F5:03A8   934: IFnot (#L0:145) GOTO .+58 (goto 992)
 33F4:43C0 37F5:03B0   942: #L1 = CALL2 oSetAttribute(object_soa7:1490,aFILLED:725)
 33F4:43CA 37F5:03BA   952: #L0 = CALL2 oSetAttribute(object_soa7:1490,aVISIBLE:769)
 33F4:43D4 37F5:03C4   962: #F0:1 = position_y@62:1632[#I7:129]
 33F4:43DC 37F5:03CC   970: #L1:146 = F= #L1:146
 33F4:43E6 37F5:03D6   980: #L0 = CALL3 oMove(object_soa7:1490,position_x@62:1630,#L1:146)
 33F4:43F2 37F5:03E2   992: #F0:1 = SOA_list:2090[#I8:133]
 33F4:43FA 37F5:03EA  1000: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4408 37F5:03F8  1014: IFnot (#L0:145) GOTO .+58 (goto 1072)
 33F4:4410 37F5:0400  1022: #L1 = CALL2 oSetAttribute(object_soa8:1491,aFILLED:725)
 33F4:441A 37F5:040A  1032: #L0 = CALL2 oSetAttribute(object_soa8:1491,aVISIBLE:769)
 33F4:4424 37F5:0414  1042: #F0:1 = position_y@62:1632[#I8:133]
 33F4:442C 37F5:041C  1050: #L1:146 = F= #L1:146
 33F4:4436 37F5:0426  1060: #L0 = CALL3 oMove(object_soa8:1491,position_x@62:1630,#L1:146)
 33F4:4442 37F5:0432  1072: #F0:1 = SOA_list:2090[#I9:140]
 33F4:444A 37F5:043A  1080: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4458 37F5:0448  1094: IFnot (#L0:145) GOTO .+58 (goto 1152)
 33F4:4460 37F5:0450  1102: #L1 = CALL2 oSetAttribute(object_soa9:1492,aFILLED:725)
 33F4:446A 37F5:045A  1112: #L0 = CALL2 oSetAttribute(object_soa9:1492,aVISIBLE:769)
 33F4:4474 37F5:0464  1122: #F0:1 = position_y@62:1632[#I9:140]
 33F4:447C 37F5:046C  1130: #L1:146 = F= #L1:146
 33F4:4486 37F5:0476  1140: #L0 = CALL3 oMove(object_soa9:1492,position_x@62:1630,#L1:146)
 33F4:4492 37F5:0482  1152: #F0:1 = SOA_list:2090[#I10:18]
 33F4:449A 37F5:048A  1160: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:44A8 37F5:0498  1174: IFnot (#L0:145) GOTO .+58 (goto 1232)
 33F4:44B0 37F5:04A0  1182: #L1 = CALL2 oSetAttribute(object_soa10:1475,aFILLED:725)
 33F4:44BA 37F5:04AA  1192: #L0 = CALL2 oSetAttribute(object_soa10:1475,aVISIBLE:769)
 33F4:44C4 37F5:04B4  1202: #F0:1 = position_y@62:1632[#I10:18]
 33F4:44CC 37F5:04BC  1210: #L1:146 = F= #L1:146
 33F4:44D6 37F5:04C6  1220: #L0 = CALL3 oMove(object_soa10:1475,position_x@62:1630,#L1:146)
 33F4:44E2 37F5:04D2  1232: #F0:1 = SOA_list:2090[#I11:27]
 33F4:44EA 37F5:04DA  1240: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:44F8 37F5:04E8  1254: IFnot (#L0:145) GOTO .+58 (goto 1312)
 33F4:4500 37F5:04F0  1262: #L1 = CALL2 oSetAttribute(object_soa11:1476,aFILLED:725)
 33F4:450A 37F5:04FA  1272: #L0 = CALL2 oSetAttribute(object_soa11:1476,aVISIBLE:769)
 33F4:4514 37F5:0504  1282: #F0:1 = position_y@62:1632[#I11:27]
 33F4:451C 37F5:050C  1290: #L1:146 = F= #L1:146
 33F4:4526 37F5:0516  1300: #L0 = CALL3 oMove(object_soa11:1476,position_x@62:1630,#L1:146)
 33F4:4532 37F5:0522  1312: #F0:1 = SOA_list:2090[#I12:30]
 33F4:453A 37F5:052A  1320: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4548 37F5:0538  1334: IFnot (#L0:145) GOTO .+58 (goto 1392)
 33F4:4550 37F5:0540  1342: #L1 = CALL2 oSetAttribute(object_soa12:1477,aFILLED:725)
 33F4:455A 37F5:054A  1352: #L0 = CALL2 oSetAttribute(object_soa12:1477,aVISIBLE:769)
 33F4:4564 37F5:0554  1362: #F0:1 = position_y@62:1632[#I12:30]
 33F4:456C 37F5:055C  1370: #L1:146 = F= #L1:146
 33F4:4576 37F5:0566  1380: #L0 = CALL3 oMove(object_soa12:1477,position_x@62:1630,#L1:146)
 33F4:4582 37F5:0572  1392: #F0:1 = SOA_list:2090[#I13:34]
 33F4:458A 37F5:057A  1400: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4598 37F5:0588  1414: IFnot (#L0:145) GOTO .+58 (goto 1472)
 33F4:45A0 37F5:0590  1422: #L1 = CALL2 oSetAttribute(object_soa13:1478,aFILLED:725)
 33F4:45AA 37F5:059A  1432: #L0 = CALL2 oSetAttribute(object_soa13:1478,aVISIBLE:769)
 33F4:45B4 37F5:05A4  1442: #F0:1 = position_y@62:1632[#I13:34]
 33F4:45BC 37F5:05AC  1450: #L1:146 = F= #L1:146
 33F4:45C6 37F5:05B6  1460: #L0 = CALL3 oMove(object_soa13:1478,position_x@62:1630,#L1:146)
 33F4:45D2 37F5:05C2  1472: #F0:1 = SOA_list:2090[#I14:38]
 33F4:45DA 37F5:05CA  1480: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:45E8 37F5:05D8  1494: IFnot (#L0:145) GOTO .+58 (goto 1552)
 33F4:45F0 37F5:05E0  1502: #L1 = CALL2 oSetAttribute(object_soa14:1479,aFILLED:725)
 33F4:45FA 37F5:05EA  1512: #L0 = CALL2 oSetAttribute(object_soa14:1479,aVISIBLE:769)
 33F4:4604 37F5:05F4  1522: #F0:1 = position_y@62:1632[#I14:38]
 33F4:460C 37F5:05FC  1530: #L1:146 = F= #L1:146
 33F4:4616 37F5:0606  1540: #L0 = CALL3 oMove(object_soa14:1479,position_x@62:1630,#L1:146)
 33F4:4622 37F5:0612  1552: #F0:1 = SOA_list:2090[#I15:41]
 33F4:462A 37F5:061A  1560: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4638 37F5:0628  1574: IFnot (#L0:145) GOTO .+58 (goto 1632)
 33F4:4640 37F5:0630  1582: #L1 = CALL2 oSetAttribute(object_soa15:1480,aFILLED:725)
 33F4:464A 37F5:063A  1592: #L0 = CALL2 oSetAttribute(object_soa15:1480,aVISIBLE:769)
 33F4:4654 37F5:0644  1602: #F0:1 = position_y@62:1632[#I15:41]
 33F4:465C 37F5:064C  1610: #L1:146 = F= #L1:146
 33F4:4666 37F5:0656  1620: #L0 = CALL3 oMove(object_soa15:1480,position_x@62:1630,#L1:146)
 33F4:4672 37F5:0662  1632: #F0:1 = SOA_list:2090[#I16:44]
 33F4:467A 37F5:066A  1640: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4688 37F5:0678  1654: IFnot (#L0:145) GOTO .+58 (goto 1712)
 33F4:4690 37F5:0680  1662: #L1 = CALL2 oSetAttribute(object_soa16:1481,aFILLED:725)
 33F4:469A 37F5:068A  1672: #L0 = CALL2 oSetAttribute(object_soa16:1481,aVISIBLE:769)
 33F4:46A4 37F5:0694  1682: #F0:1 = position_y@62:1632[#I16:44]
 33F4:46AC 37F5:069C  1690: #L1:146 = F= #L1:146
 33F4:46B6 37F5:06A6  1700: #L0 = CALL3 oMove(object_soa16:1481,position_x@62:1630,#L1:146)
 33F4:46C2 37F5:06B2  1712: #F0:1 = SOA_list:2090[#I17:47]
 33F4:46CA 37F5:06BA  1720: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:46D8 37F5:06C8  1734: IFnot (#L0:145) GOTO .+58 (goto 1792)
 33F4:46E0 37F5:06D0  1742: #L1 = CALL2 oSetAttribute(object_soa17:1482,aFILLED:725)
 33F4:46EA 37F5:06DA  1752: #L0 = CALL2 oSetAttribute(object_soa17:1482,aVISIBLE:769)
 33F4:46F4 37F5:06E4  1762: #F0:1 = position_y@62:1632[#I17:47]
 33F4:46FC 37F5:06EC  1770: #L1:146 = F= #L1:146
 33F4:4706 37F5:06F6  1780: #L0 = CALL3 oMove(object_soa17:1482,position_x@62:1630,#L1:146)
 33F4:4712 37F5:0702  1792: #F0:1 = SOA_list:2090[#I18:49]
 33F4:471A 37F5:070A  1800: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4728 37F5:0718  1814: IFnot (#L0:145) GOTO .+58 (goto 1872)
 33F4:4730 37F5:0720  1822: #L1 = CALL2 oSetAttribute(object_soa18:1483,aFILLED:725)
 33F4:473A 37F5:072A  1832: #L0 = CALL2 oSetAttribute(object_soa18:1483,aVISIBLE:769)
 33F4:4744 37F5:0734  1842: #F0:1 = position_y@62:1632[#I18:49]
 33F4:474C 37F5:073C  1850: #L1:146 = F= #L1:146
 33F4:4756 37F5:0746  1860: #L0 = CALL3 oMove(object_soa18:1483,position_x@62:1630,#L1:146)
 33F4:4762 37F5:0752  1872: #F0:1 = SOA_list:2090[#I19:52]
 33F4:476A 37F5:075A  1880: #L0:145 = curr_soa@62:889 F== #F0:1
 33F4:4778 37F5:0768  1894: IFnot (#L0:145) GOTO .+58 (goto 1952)
 33F4:4780 37F5:0770  1902: #L1 = CALL2 oSetAttribute(object_soa19:1484,aFILLED:725)
 33F4:478A 37F5:077A  1912: #L0 = CALL2 oSetAttribute(object_soa19:1484,aVISIBLE:769)
 33F4:4794 37F5:0784  1922: #F0:1 = position_y@62:1632[#I19:52]
 33F4:479C 37F5:078C  1930: #L1:146 = F= #L1:146
 33F4:47A6 37F5:0796  1940: #L0 = CALL3 oMove(object_soa19:1484,position_x@62:1630,#L1:146)

PROCESS  63: UPD8_SCH (Args=0 CtrlBlk=33F4:2738 Size=792  iOp=2-793 iCache=94168-94959) DISABLED
 33F4:4012 37F5:0002     0: #L0:145 = FirstSearchTrial:1069 == #I1:17
 33F4:4020 37F5:0010    14: IFnot (#L0:145) GOTO .+118 (goto 132)
 33F4:4028 37F5:0018    22: repeat_position_y@63:1926 = F= repeat_position_y@63:1926
 33F4:4032 37F5:0022    32: random_position_y@63:1901 = F= random_position_y@63:1901
 33F4:403C 37F5:002C    42: FirstSearchTrial:1069 = #I0:16
 33F4:4046 37F5:0036    52: cum_rep_rt:878 = F= cum_rep_rt:878
 33F4:4050 37F5:0040    62: cum_rand_rt:875 = F= cum_rand_rt:875
 33F4:405A 37F5:004A    72: avg_rep_rt:768 = F= avg_rep_rt:768
 33F4:4064 37F5:0054    82: avg_rand_rt:765 = F= avg_rand_rt:765
 33F4:406E 37F5:005E    92: graph_rep_rt:1217 = F= graph_rep_rt:1217
 33F4:4078 37F5:0068   102: graph_rand_rt:1216 = F= graph_rand_rt:1216
 33F4:4082 37F5:0072   112: rand_inacc_sacc:1892 = F= rand_inacc_sacc:1892
 33F4:408C 37F5:007C   122: rep_inacc_sacc:1922 = F= rep_inacc_sacc:1922
 33F4:4096 37F5:0086   132: #L0:145 = SingMode:2077 == #I0:16
 33F4:40A4 37F5:0094   146: IFnot (#L0:145) GOTO .+318 (goto 464)
 33F4:40AC 37F5:009C   154: #L1:146 = TrialTp:2300 == #I1:17
 33F4:40BA 37F5:00AA   168: IFnot (#L1:146) GOTO .+152 (goto 320)
 33F4:40C2 37F5:00B2   176: #L2:156 = LastSearchOutcome:1306 == success@63:2187
 33F4:40D0 37F5:00C0   190: #L3:157 = #L2:156 || nogo_success@63:1446
 33F4:40DE 37F5:00CE   204: IFnot (#L3:157) GOTO .+112 (goto 316)
 33F4:40E6 37F5:00D6   212: cum_rand_rt:875 = cum_rand_rt:875 F+ current_rt:903
 33F4:40F4 37F5:00E4   226: avg_rand_rt:765 = cum_rand_rt:875 F/ Rand_Comp_Trl_number:1860
 33F4:4102 37F5:00F2   240: graph_rand_rt:1216 = #I1000:20 F- avg_rand_rt:765
 33F4:4110 37F5:0100   254: random_position_x@63:1900 = #I-300:13
 33F4:411A 37F5:010A   264: random_position_y@63:1901 = F= random_position_y@63:1901
 33F4:4124 37F5:0114   274: #L0 = CALL2 oSetAttribute(object_random:1471,aFILLED:725)
 33F4:412E 37F5:011E   284: #L0 = CALL2 oSetAttribute(object_random:1471,aVISIBLE:769)
 33F4:4138 37F5:0128   294: #L1:146 = F= #L1:146
 33F4:4142 37F5:0132   304: #L0 = CALL3 oMove(object_random:1471,random_position_x@63:1900,#L1:146)
 33F4:414E 37F5:013E   316: GOTO .+144 (goto 460)
 33F4:4152 37F5:0142   320: #L0:145 = LastSearchOutcome:1306 == success@63:2187
 33F4:4160 37F5:0150   334: #L1:146 = #L0:145 || nogo_success@63:1446
 33F4:416E 37F5:015E   348: IFnot (#L1:146) GOTO .+112 (goto 460)
 33F4:4176 37F5:0166   356: cum_rep_rt:878 = cum_rep_rt:878 F+ current_rt:903
 33F4:4184 37F5:0174   370: avg_rep_rt:768 = cum_rep_rt:878 F/ Rep_Comp_Trl_number:1921
 33F4:4192 37F5:0182   384: graph_rep_rt:1217 = #I1000:20 F- avg_rep_rt:768
 33F4:41A0 37F5:0190   398: repeat_position_x@63:1925 = #I300:76
 33F4:41AA 37F5:019A   408: repeat_position_y@63:1926 = F= repeat_position_y@63:1926
 33F4:41B4 37F5:01A4   418: #L0 = CALL2 oSetAttribute(object_repeat:1472,aFILLED:725)
 33F4:41BE 37F5:01AE   428: #L0 = CALL2 oSetAttribute(object_repeat:1472,aVISIBLE:769)
 33F4:41C8 37F5:01B8   438: #L1:146 = F= #L1:146
 33F4:41D2 37F5:01C2   448: #L0 = CALL3 oMove(object_repeat:1472,repeat_position_x@63:1925,#L1:146)
 33F4:41DE 37F5:01CE   460: GOTO .+332 (goto 792)
 33F4:41E2 37F5:01D2   464: #L0:145 = SingMode:2077 == #I1:17
 33F4:41F0 37F5:01E0   478: IFnot (#L0:145) GOTO .+314 (goto 792)
 33F4:41F8 37F5:01E8   486: #L1:146 = DistPres:990 == #I1111:29
 33F4:4206 37F5:01F6   500: IFnot (#L1:146) GOTO .+152 (goto 652)
 33F4:420E 37F5:01FE   508: #L2:156 = LastSearchOutcome:1306 == success@63:2187
 33F4:421C 37F5:020C   522: #L3:157 = #L2:156 || nogo_success@63:1446
 33F4:422A 37F5:021A   536: IFnot (#L3:157) GOTO .+112 (goto 648)
 33F4:4232 37F5:0222   544: cum_rand_rt_DA:876 = cum_rand_rt_DA:876 F+ current_rt:903
 33F4:4240 37F5:0230   558: avg_rand_rt_DA:766 = cum_rand_rt_DA:876 F/ Rand_Comp_Trl_DA:1858
 33F4:424E 37F5:023E   572: graph_rand_rt:1216 = #I1000:20 F- avg_rand_rt_DA:766
 33F4:425C 37F5:024C   586: random_position_x@63:1900 = #I-300:13
 33F4:4266 37F5:0256   596: random_position_y@63:1901 = F= random_position_y@63:1901
 33F4:4270 37F5:0260   606: #L0 = CALL2 oSetAttribute(object_random:1471,aFILLED:725)
 33F4:427A 37F5:026A   616: #L0 = CALL2 oSetAttribute(object_random:1471,aVISIBLE:769)
 33F4:4284 37F5:0274   626: #L1:146 = F= #L1:146
 33F4:428E 37F5:027E   636: #L0 = CALL3 oMove(object_random:1471,random_position_x@63:1900,#L1:146)
 33F4:429A 37F5:028A   648: GOTO .+144 (goto 792)
 33F4:429E 37F5:028E   652: #L0:145 = LastSearchOutcome:1306 == success@63:2187
 33F4:42AC 37F5:029C   666: #L1:146 = #L0:145 || nogo_success@63:1446
 33F4:42BA 37F5:02AA   680: IFnot (#L1:146) GOTO .+112 (goto 792)
 33F4:42C2 37F5:02B2   688: cum_rand_rt_DP:877 = cum_rand_rt_DP:877 F+ current_rt:903
 33F4:42D0 37F5:02C0   702: avg_rand_rt_DP:767 = cum_rand_rt_DP:877 F/ Rand_Comp_Trl_DP:1859
 33F4:42DE 37F5:02CE   716: graph_rand_rt:1216 = #I1000:20 F- avg_rand_rt_DP:767
 33F4:42EC 37F5:02DC   730: repeat_position_x@63:1925 = #I300:76
 33F4:42F6 37F5:02E6   740: repeat_position_y@63:1926 = F= repeat_position_y@63:1926
 33F4:4300 37F5:02F0   750: #L0 = CALL2 oSetAttribute(object_repeat:1472,aFILLED:725)
 33F4:430A 37F5:02FA   760: #L0 = CALL2 oSetAttribute(object_repeat:1472,aVISIBLE:769)
 33F4:4314 37F5:0304   770: #L1:146 = F= #L1:146
 33F4:431E 37F5:030E   780: #L0 = CALL3 oMove(object_repeat:1472,repeat_position_x@63:1925,#L1:146)

PROCESS  64: INFOS (Args=0 CtrlBlk=33F4:2764 Size=4358  iOp=2-4359 iCache=94960-99317) DISABLED
 33F4:4012 37F5:0002     0: #L0:145 = State:2116 == run_search_sess:1982
 33F4:4020 37F5:0010    14: IFnot (#L0:145) GOTO .+2004 (goto 2018)
 33F4:4028 37F5:0018    22: Event_fifo:1019[Set_event:2041] = StartInfos_:2115
 33F4:4030 37F5:0020    30: #L0:145 = Set_event:2041 + #I1:17
 33F4:403E 37F5:002E    44: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:404C 37F5:003C    58: #L0:145 = InfosZero:1278 F+ #I999:143
 33F4:405A 37F5:004A    72: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4062 37F5:0052    80: #L0:145 = Set_event:2041 + #I1:17
 33F4:4070 37F5:0060    94: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:407E 37F5:006E   108: #L0:145 = ArrStruct:759 + #I4001:91
 33F4:408C 37F5:007C   122: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4094 37F5:0084   130: #L0:145 = Set_event:2041 + #I1:17
 33F4:40A2 37F5:0092   144: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:40B0 37F5:00A0   158: #L0:145 = SearchType:2033 + #I4050:92
 33F4:40BE 37F5:00AE   172: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:40C6 37F5:00B6   180: #L0:145 = Set_event:2041 + #I1:17
 33F4:40D4 37F5:00C4   194: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:40E2 37F5:00D2   208: #L0:145 = SingMode:2077 + #I4060:93
 33F4:40F0 37F5:00E0   222: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:40F8 37F5:00E8   230: #L0:145 = Set_event:2041 + #I1:17
 33F4:4106 37F5:00F6   244: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4114 37F5:0104   258: #L0:145 = SetSize:2053 + #I4100:94
 33F4:4122 37F5:0112   272: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:412A 37F5:011A   280: #L0:145 = Set_event:2041 + #I1:17
 33F4:4138 37F5:0128   294: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4146 37F5:0136   308: #L0:145 = TargetType:2255 + #I4150:95
 33F4:4154 37F5:0144   322: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:415C 37F5:014C   330: #L0:145 = Set_event:2041 + #I1:17
 33F4:416A 37F5:015A   344: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4178 37F5:0168   358: #L0:145 = TrialTp:2300 + #I4200:96
 33F4:4186 37F5:0176   372: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:418E 37F5:017E   380: #L0:145 = Set_event:2041 + #I1:17
 33F4:419C 37F5:018C   394: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41AA 37F5:019A   408: #L0:145 = SearchEcc:2031 + #I4250:97
 33F4:41B8 37F5:01A8   422: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:41C0 37F5:01B0   430: #L0:145 = Set_event:2041 + #I1:17
 33F4:41CE 37F5:01BE   444: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41DC 37F5:01CC   458: Event_fifo:1019[Set_event:2041] = DistPres:990
 33F4:41E4 37F5:01D4   466: #L0:145 = Set_event:2041 + #I1:17
 33F4:41F2 37F5:01E2   480: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4200 37F5:01F0   494: Event_fifo:1019[Set_event:2041] = THemi:2275
 33F4:4208 37F5:01F8   502: #L0:145 = Set_event:2041 + #I1:17
 33F4:4216 37F5:0206   516: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4224 37F5:0214   530: Event_fifo:1019[Set_event:2041] = DHemi:984
 33F4:422C 37F5:021C   538: #L0:145 = Set_event:2041 + #I1:17
 33F4:423A 37F5:022A   552: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4248 37F5:0238   566: #L0:145 = Rand_targ_angle:1896 + #I5000:114
 33F4:4256 37F5:0246   580: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:425E 37F5:024E   588: #L0:145 = Set_event:2041 + #I1:17
 33F4:426C 37F5:025C   602: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:427A 37F5:026A   616: #L0:145 = Rand_d1_angle:1867 + #I5500:118
 33F4:4288 37F5:0278   630: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4290 37F5:0280   638: #L0:145 = Set_event:2041 + #I1:17
 33F4:429E 37F5:028E   652: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:42AC 37F5:029C   666: #L0:145 = CatchCode:824 + #I3800:86
 33F4:42BA 37F5:02AA   680: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:42C2 37F5:02B2   688: #L0:145 = Set_event:2041 + #I1:17
 33F4:42D0 37F5:02C0   702: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:42DE 37F5:02CE   716: #L0:145 = SingCol:2074 + #I4650:101
 33F4:42EC 37F5:02DC   730: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:42F4 37F5:02E4   738: #L0:145 = Set_event:2041 + #I1:17
 33F4:4302 37F5:02F2   752: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4310 37F5:0300   766: #L0:145 = DistOrt:989 + #I4660:102
 33F4:431E 37F5:030E   780: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4326 37F5:0316   788: #L0:145 = Set_event:2041 + #I1:17
 33F4:4334 37F5:0324   802: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4342 37F5:0332   816: #L0:145 = TargOrt:2258 + #I4670:103
 33F4:4350 37F5:0340   830: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4358 37F5:0348   838: #L0:145 = Set_event:2041 + #I1:17
 33F4:4366 37F5:0356   852: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4374 37F5:0364   866: #L0:145 = PercSingTrl:1609 + #I4700:106
 33F4:4382 37F5:0372   880: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:438A 37F5:037A   888: #L0:145 = Set_event:2041 + #I1:17
 33F4:4398 37F5:0388   902: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:43A6 37F5:0396   916: #L0:145 = Perc_catch:1608 F+ #I4800:109
 33F4:43B4 37F5:03A4   930: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:43BC 37F5:03AC   938: #L0:145 = Set_event:2041 + #I1:17
 33F4:43CA 37F5:03BA   952: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:43D8 37F5:03C8   966: #L0:145 = Block_number:792 + #I4900:110
 33F4:43E6 37F5:03D6   980: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:43EE 37F5:03DE   988: #L0:145 = Set_event:2041 + #I1:17
 33F4:43FC 37F5:03EC  1002: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:440A 37F5:03FA  1016: #L0:145 = Curr_soa:885 + #I6000:123
 33F4:4418 37F5:0408  1030: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4420 37F5:0410  1038: #L0:145 = Set_event:2041 + #I1:17
 33F4:442E 37F5:041E  1052: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:443C 37F5:042C  1066: #L0:145 = InfosZero:1278 F+ Trl_Outcome:2306
 33F4:444A 37F5:043A  1080: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4452 37F5:0442  1088: #L0:145 = Set_event:2041 + #I1:17
 33F4:4460 37F5:0450  1102: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:446E 37F5:045E  1116: #L0:145 = InfosZero:1278 F+ Max_sacc_duration:1346
 33F4:447C 37F5:046C  1130: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4484 37F5:0474  1138: #L0:145 = Set_event:2041 + #I1:17
 33F4:4492 37F5:0482  1152: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:44A0 37F5:0490  1166: #L0:145 = InfosZero:1278 F+ Max_saccade_time:1352
 33F4:44AE 37F5:049E  1180: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:44B6 37F5:04A6  1188: #L0:145 = Set_event:2041 + #I1:17
 33F4:44C4 37F5:04B4  1202: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:44D2 37F5:04C2  1216: #L0:145 = InfosZero:1278 F+ Punish_time:1636
 33F4:44E0 37F5:04D0  1230: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:44E8 37F5:04D8  1238: #L0:145 = Set_event:2041 + #I1:17
 33F4:44F6 37F5:04E6  1252: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4504 37F5:04F4  1266: #L0:145 = InfosZero:1278 F+ Reward_duration:1931
 33F4:4512 37F5:0502  1280: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:451A 37F5:050A  1288: #L0:145 = Set_event:2041 + #I1:17
 33F4:4528 37F5:0518  1302: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4536 37F5:0526  1316: #L0:145 = InfosZero:1278 F+ Reward_Offset:1932
 33F4:4544 37F5:0534  1330: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:454C 37F5:053C  1338: #L0:145 = Set_event:2041 + #I1:17
 33F4:455A 37F5:054A  1352: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4568 37F5:0558  1366: #L0:145 = InfosZero:1278 F+ Targ_hold_time:2197
 33F4:4576 37F5:0566  1380: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:457E 37F5:056E  1388: #L0:145 = Set_event:2041 + #I1:17
 33F4:458C 37F5:057C  1402: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:459A 37F5:058A  1416: #L0:145 = InfosZero:1278 F+ Tone_Duration:2282
 33F4:45A8 37F5:0598  1430: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:45B0 37F5:05A0  1438: #L0:145 = Set_event:2041 + #I1:17
 33F4:45BE 37F5:05AE  1452: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:45CC 37F5:05BC  1466: #F0:1 = X_Gain:2367 F* #I100:19
 33F4:45DA 37F5:05CA  1480: #F1:2 = InfosZero:1278 F+ #F0:1
 33F4:45E8 37F5:05D8  1494: #L0:145 = #F1:2 F+ #I1000:20
 33F4:45F6 37F5:05E6  1508: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:45FE 37F5:05EE  1516: #L0:145 = Set_event:2041 + #I1:17
 33F4:460C 37F5:05FC  1530: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:461A 37F5:060A  1544: #F0:1 = X_Offset:2368 F* #I100:19
 33F4:4628 37F5:0618  1558: #F1:2 = InfosZero:1278 F+ #F0:1
 33F4:4636 37F5:0626  1572: #L0:145 = #F1:2 F+ #I1000:20
 33F4:4644 37F5:0634  1586: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:464C 37F5:063C  1594: #L0:145 = Set_event:2041 + #I1:17
 33F4:465A 37F5:064A  1608: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4668 37F5:0658  1622: #F0:1 = Y_Gain:2370 F* #I100:19
 33F4:4676 37F5:0666  1636: #F1:2 = InfosZero:1278 F+ #F0:1
 33F4:4684 37F5:0674  1650: #L0:145 = #F1:2 F+ #I1000:20
 33F4:4692 37F5:0682  1664: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:469A 37F5:068A  1672: #L0:145 = Set_event:2041 + #I1:17
 33F4:46A8 37F5:0698  1686: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:46B6 37F5:06A6  1700: #F0:1 = Y_Offset:2371 F* #I100:19
 33F4:46C4 37F5:06B4  1714: #F1:2 = InfosZero:1278 F+ #F0:1
 33F4:46D2 37F5:06C2  1728: #L0:145 = #F1:2 F+ #I1000:20
 33F4:46E0 37F5:06D0  1742: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:46E8 37F5:06D8  1750: #L0:145 = Set_event:2041 + #I1:17
 33F4:46F6 37F5:06E6  1764: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4704 37F5:06F4  1778: #L0:145 = DistFix:987 + #I4680:104
 33F4:4712 37F5:0702  1792: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:471A 37F5:070A  1800: #L0:145 = Set_event:2041 + #I1:17
 33F4:4728 37F5:0718  1814: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4736 37F5:0726  1828: #L0:145 = ProbCue:1633 + #I4690:105
 33F4:4744 37F5:0734  1842: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:474C 37F5:073C  1850: #L0:145 = Set_event:2041 + #I1:17
 33F4:475A 37F5:074A  1864: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4768 37F5:0758  1878: #L0:145 = ProbSide:1634 + #I4790:107
 33F4:4776 37F5:0766  1892: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:477E 37F5:076E  1900: #L0:145 = Set_event:2041 + #I1:17
 33F4:478C 37F5:077C  1914: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:479A 37F5:078A  1928: #L0:145 = StimTm:2151 + #I5100:116
 33F4:47A8 37F5:0798  1942: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:47B0 37F5:07A0  1950: #L0:145 = Set_event:2041 + #I1:17
 33F4:47BE 37F5:07AE  1964: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:47CC 37F5:07BC  1978: Event_fifo:1019[Set_event:2041] = EndInfos_:1014
 33F4:47D4 37F5:07C4  1986: #L0:145 = Set_event:2041 + #I1:17
 33F4:47E2 37F5:07D2  2000: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:47F0 37F5:07E0  2014: GOTO .+2344 (goto 4358)
 33F4:47F4 37F5:07E4  2018: #L0:145 = Stop_sig_color:2153[#I0:16]
 33F4:47FC 37F5:07EC  2026: stop_sig_color_r:2159 = #L0:145
 33F4:4806 37F5:07F6  2036: #L0:145 = Stop_sig_color:2153[#I1:17]
 33F4:480E 37F5:07FE  2044: stop_sig_color_g:2158 = #L0:145
 33F4:4818 37F5:0808  2054: #L0:145 = Stop_sig_color:2153[#I2:53]
 33F4:4820 37F5:0810  2062: stop_sig_color_b:2157 = #L0:145
 33F4:482A 37F5:081A  2072: #L0:145 = Ignore_sig_color:1248[#I0:16]
 33F4:4832 37F5:0822  2080: ignore_sig_color_r:1254 = #L0:145
 33F4:483C 37F5:082C  2090: #L0:145 = Ignore_sig_color:1248[#I1:17]
 33F4:4844 37F5:0834  2098: ignore_sig_color_g:1253 = #L0:145
 33F4:484E 37F5:083E  2108: #L0:145 = Ignore_sig_color:1248[#I2:53]
 33F4:4856 37F5:0846  2116: ignore_sig_color_b:1252 = #L0:145
 33F4:4860 37F5:0850  2126: #L0:145 = Fixation_color:1117[#I0:16]
 33F4:4868 37F5:0858  2134: fixation_color_r:1131 = #L0:145
 33F4:4872 37F5:0862  2144: #L0:145 = Fixation_color:1117[#I1:17]
 33F4:487A 37F5:086A  2152: fixation_color_g:1130 = #L0:145
 33F4:4884 37F5:0874  2162: #L0:145 = Fixation_color:1117[#I2:53]
 33F4:488C 37F5:087C  2170: fixation_color_b:1129 = #L0:145
 33F4:4896 37F5:0886  2180: #L0:145 = Color_list:850[Curr_target:894,#I0:16]
 33F4:48A0 37F5:0890  2190: target_color_r:2241 = #L0:145
 33F4:48AA 37F5:089A  2200: #L0:145 = Color_list:850[Curr_target:894,#I1:17]
 33F4:48B4 37F5:08A4  2210: target_color_g:2240 = #L0:145
 33F4:48BE 37F5:08AE  2220: #L0:145 = Color_list:850[Curr_target:894,#I2:53]
 33F4:48C8 37F5:08B8  2230: target_color_b:2239 = #L0:145
 33F4:48D2 37F5:08C2  2240: Event_fifo:1019[Set_event:2041] = StartInfos_:2115
 33F4:48DA 37F5:08CA  2248: #L0:145 = Set_event:2041 + #I1:17
 33F4:48E8 37F5:08D8  2262: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:48F6 37F5:08E6  2276: #L0:145 = InfosZero:1278 F+ Fixed_trl_length:1158
 33F4:4904 37F5:08F4  2290: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:490C 37F5:08FC  2298: #L0:145 = Set_event:2041 + #I1:17
 33F4:491A 37F5:090A  2312: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4928 37F5:0918  2326: #F0:1 = Ignore_weight:1263 F* #I100:19
 33F4:4936 37F5:0926  2340: #L0:145 = InfosZero:1278 F+ #F0:1
 33F4:4944 37F5:0934  2354: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:494C 37F5:093C  2362: #L0:145 = Set_event:2041 + #I1:17
 33F4:495A 37F5:094A  2376: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4968 37F5:0958  2390: #L0:145 = InfosZero:1278 F+ Inter_trl_int:1282
 33F4:4976 37F5:0966  2404: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:497E 37F5:096E  2412: #L0:145 = Set_event:2041 + #I1:17
 33F4:498C 37F5:097C  2426: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:499A 37F5:098A  2440: #L0:145 = InfosZero:1278 F+ Max_Holdtime:1338
 33F4:49A8 37F5:0998  2454: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:49B0 37F5:09A0  2462: #L0:145 = Set_event:2041 + #I1:17
 33F4:49BE 37F5:09AE  2476: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:49CC 37F5:09BC  2490: #L0:145 = InfosZero:1278 F+ Max_sacc_duration:1346
 33F4:49DA 37F5:09CA  2504: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:49E2 37F5:09D2  2512: #L0:145 = Set_event:2041 + #I1:17
 33F4:49F0 37F5:09E0  2526: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:49FE 37F5:09EE  2540: #L0:145 = InfosZero:1278 F+ Max_saccade_time:1352
 33F4:4A0C 37F5:09FC  2554: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4A14 37F5:0A04  2562: #L0:145 = Set_event:2041 + #I1:17
 33F4:4A22 37F5:0A12  2576: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4A30 37F5:0A20  2590: #L0:145 = InfosZero:1278 F+ Min_Holdtime:1373
 33F4:4A3E 37F5:0A2E  2604: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4A46 37F5:0A36  2612: #L0:145 = Set_event:2041 + #I1:17
 33F4:4A54 37F5:0A44  2626: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4A62 37F5:0A52  2640: #L0:145 = InfosZero:1278 F+ N_SSDs:1402
 33F4:4A70 37F5:0A60  2654: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4A78 37F5:0A68  2662: #L0:145 = Set_event:2041 + #I1:17
 33F4:4A86 37F5:0A76  2676: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4A94 37F5:0A84  2690: #L0:145 = InfosZero:1278 F+ Punish_time:1636
 33F4:4AA2 37F5:0A92  2704: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4AAA 37F5:0A9A  2712: #L0:145 = Set_event:2041 + #I1:17
 33F4:4AB8 37F5:0AA8  2726: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4AC6 37F5:0AB6  2740: #L0:145 = InfosZero:1278 F+ Reward_duration:1931
 33F4:4AD4 37F5:0AC4  2754: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4ADC 37F5:0ACC  2762: #L0:145 = Set_event:2041 + #I1:17
 33F4:4AEA 37F5:0ADA  2776: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4AF8 37F5:0AE8  2790: #L0:145 = InfosZero:1278 F+ Reward_Offset:1932
 33F4:4B06 37F5:0AF6  2804: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4B0E 37F5:0AFE  2812: #L0:145 = Set_event:2041 + #I1:17
 33F4:4B1C 37F5:0B0C  2826: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4B2A 37F5:0B1A  2840: #L0:145 = InfosZero:1278 F+ Staircase:2110
 33F4:4B38 37F5:0B28  2854: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4B40 37F5:0B30  2862: #L0:145 = Set_event:2041 + #I1:17
 33F4:4B4E 37F5:0B3E  2876: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4B5C 37F5:0B4C  2890: #L0:145 = InfosZero:1278 F+ stop_sig_color_b:2157
 33F4:4B6A 37F5:0B5A  2904: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4B72 37F5:0B62  2912: #L0:145 = Set_event:2041 + #I1:17
 33F4:4B80 37F5:0B70  2926: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4B8E 37F5:0B7E  2940: #L0:145 = InfosZero:1278 F+ stop_sig_color_g:2158
 33F4:4B9C 37F5:0B8C  2954: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4BA4 37F5:0B94  2962: #L0:145 = Set_event:2041 + #I1:17
 33F4:4BB2 37F5:0BA2  2976: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4BC0 37F5:0BB0  2990: #L0:145 = InfosZero:1278 F+ stop_sig_color_r:2159
 33F4:4BCE 37F5:0BBE  3004: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4BD6 37F5:0BC6  3012: #L0:145 = Set_event:2041 + #I1:17
 33F4:4BE4 37F5:0BD4  3026: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4BF2 37F5:0BE2  3040: #F0:1 = Stop_weight:2171 F* #I100:19
 33F4:4C00 37F5:0BF0  3054: #L0:145 = InfosZero:1278 F+ #F0:1
 33F4:4C0E 37F5:0BFE  3068: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4C16 37F5:0C06  3076: #L0:145 = Set_event:2041 + #I1:17
 33F4:4C24 37F5:0C14  3090: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4C32 37F5:0C22  3104: #L0:145 = InfosZero:1278 F+ Success_tone:2188
 33F4:4C40 37F5:0C30  3118: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4C48 37F5:0C38  3126: #L0:145 = Set_event:2041 + #I1:17
 33F4:4C56 37F5:0C46  3140: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4C64 37F5:0C54  3154: #F0:1 = Targ_win_size:2221 F* #I100:19
 33F4:4C72 37F5:0C62  3168: #L0:145 = InfosZero:1278 F+ #F0:1
 33F4:4C80 37F5:0C70  3182: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4C88 37F5:0C78  3190: #L0:145 = Set_event:2041 + #I1:17
 33F4:4C96 37F5:0C86  3204: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4CA4 37F5:0C94  3218: #L0:145 = InfosZero:1278 F+ Angle:736
 33F4:4CB2 37F5:0CA2  3232: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4CBA 37F5:0CAA  3240: #L0:145 = Set_event:2041 + #I1:17
 33F4:4CC8 37F5:0CB8  3254: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4CD6 37F5:0CC6  3268: #L0:145 = InfosZero:1278 F+ Color:844
 33F4:4CE4 37F5:0CD4  3282: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4CEC 37F5:0CDC  3290: #L0:145 = Set_event:2041 + #I1:17
 33F4:4CFA 37F5:0CEA  3304: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4D08 37F5:0CF8  3318: #L0:145 = InfosZero:1278 F+ target_color_b:2239
 33F4:4D16 37F5:0D06  3332: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4D1E 37F5:0D0E  3340: #L0:145 = Set_event:2041 + #I1:17
 33F4:4D2C 37F5:0D1C  3354: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4D3A 37F5:0D2A  3368: #L0:145 = InfosZero:1278 F+ target_color_g:2240
 33F4:4D48 37F5:0D38  3382: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4D50 37F5:0D40  3390: #L0:145 = Set_event:2041 + #I1:17
 33F4:4D5E 37F5:0D4E  3404: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4D6C 37F5:0D5C  3418: #L0:145 = InfosZero:1278 F+ target_color_r:2241
 33F4:4D7A 37F5:0D6A  3432: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4D82 37F5:0D72  3440: #L0:145 = Set_event:2041 + #I1:17
 33F4:4D90 37F5:0D80  3454: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4D9E 37F5:0D8E  3468: #F0:1 = Eccentricity:1005 F* #I100:19
 33F4:4DAC 37F5:0D9C  3482: #L0:145 = InfosZero:1278 F+ #F0:1
 33F4:4DBA 37F5:0DAA  3496: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4DC2 37F5:0DB2  3504: #L0:145 = Set_event:2041 + #I1:17
 33F4:4DD0 37F5:0DC0  3518: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4DDE 37F5:0DCE  3532: #L0:145 = InfosZero:1278 F+ Targ_hold_time:2197
 33F4:4DEC 37F5:0DDC  3546: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4DF4 37F5:0DE4  3554: #L0:145 = Set_event:2041 + #I1:17
 33F4:4E02 37F5:0DF2  3568: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4E10 37F5:0E00  3582: #F0:1 = Size:2078 F* #I100:19
 33F4:4E1E 37F5:0E0E  3596: #L0:145 = InfosZero:1278 F+ #F0:1
 33F4:4E2C 37F5:0E1C  3610: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4E34 37F5:0E24  3618: #L0:145 = Set_event:2041 + #I1:17
 33F4:4E42 37F5:0E32  3632: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4E50 37F5:0E40  3646: #L0:145 = InfosZero:1278 F+ Tone_Duration:2282
 33F4:4E5E 37F5:0E4E  3660: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4E66 37F5:0E56  3668: #L0:145 = Set_event:2041 + #I1:17
 33F4:4E74 37F5:0E64  3682: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4E82 37F5:0E72  3696: #L0:145 = InfosZero:1278 F+ Trial_length:2295
 33F4:4E90 37F5:0E80  3710: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4E98 37F5:0E88  3718: #L0:145 = Set_event:2041 + #I1:17
 33F4:4EA6 37F5:0E96  3732: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4EB4 37F5:0EA4  3746: #L0:145 = InfosZero:1278 F+ Trl_Outcome:2306
 33F4:4EC2 37F5:0EB2  3760: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4ECA 37F5:0EBA  3768: #L0:145 = Set_event:2041 + #I1:17
 33F4:4ED8 37F5:0EC8  3782: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4EE6 37F5:0ED6  3796: #L0:145 = InfosZero:1278 F+ Trl_type:2318
 33F4:4EF4 37F5:0EE4  3810: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4EFC 37F5:0EEC  3818: #L0:145 = Set_event:2041 + #I1:17
 33F4:4F0A 37F5:0EFA  3832: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4F18 37F5:0F08  3846: #F0:1 = X_Gain:2367 F* #I100:19
 33F4:4F26 37F5:0F16  3860: #F1:2 = InfosZero:1278 F+ #F0:1
 33F4:4F34 37F5:0F24  3874: #L0:145 = #F1:2 F+ #I1000:20
 33F4:4F42 37F5:0F32  3888: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4F4A 37F5:0F3A  3896: #L0:145 = Set_event:2041 + #I1:17
 33F4:4F58 37F5:0F48  3910: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4F66 37F5:0F56  3924: #F0:1 = X_Offset:2368 F* #I100:19
 33F4:4F74 37F5:0F64  3938: #F1:2 = InfosZero:1278 F+ #F0:1
 33F4:4F82 37F5:0F72  3952: #L0:145 = #F1:2 F+ #I1000:20
 33F4:4F90 37F5:0F80  3966: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4F98 37F5:0F88  3974: #L0:145 = Set_event:2041 + #I1:17
 33F4:4FA6 37F5:0F96  3988: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4FB4 37F5:0FA4  4002: #F0:1 = Y_Gain:2370 F* #I100:19
 33F4:4FC2 37F5:0FB2  4016: #F1:2 = InfosZero:1278 F+ #F0:1
 33F4:4FD0 37F5:0FC0  4030: #L0:145 = #F1:2 F+ #I1000:20
 33F4:4FDE 37F5:0FCE  4044: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:4FE6 37F5:0FD6  4052: #L0:145 = Set_event:2041 + #I1:17
 33F4:4FF4 37F5:0FE4  4066: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:5002 37F5:0FF2  4080: #F0:1 = Y_Offset:2371 F* #I100:19
 33F4:5010 37F5:1000  4094: #F1:2 = InfosZero:1278 F+ #F0:1
 33F4:501E 37F5:100E  4108: #L0:145 = #F1:2 F+ #I1000:20
 33F4:502C 37F5:101C  4122: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:5034 37F5:1024  4130: #L0:145 = Set_event:2041 + #I1:17
 33F4:5042 37F5:1032  4144: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:5050 37F5:1040  4158: #L0:145 = InfosZero:1278 F+ Curr_soa:885
 33F4:505E 37F5:104E  4172: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:5066 37F5:1056  4180: #L0:145 = Set_event:2041 + #I1:17
 33F4:5074 37F5:1064  4194: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:5082 37F5:1072  4208: #L0:145 = InfosZero:1278 F+ Block_number:792
 33F4:5090 37F5:1080  4222: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:5098 37F5:1088  4230: #L0:145 = Set_event:2041 + #I1:17
 33F4:50A6 37F5:1096  4244: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:50B4 37F5:10A4  4258: #F0:1 = InfosZero:1278 F+ StimTm:2151
 33F4:50C2 37F5:10B2  4272: #L0:145 = #F0:1 F+ #I1000:20
 33F4:50D0 37F5:10C0  4286: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:50D8 37F5:10C8  4294: #L0:145 = Set_event:2041 + #I1:17
 33F4:50E6 37F5:10D6  4308: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:50F4 37F5:10E4  4322: Event_fifo:1019[Set_event:2041] = EndInfos_:1014
 33F4:50FC 37F5:10EC  4330: #L0:145 = Set_event:2041 + #I1:17
 33F4:510A 37F5:10FA  4344: Set_event:2041 = #L0:145 % Event_fifo_N:1020

PROCESS  65: ABORT (Args=0 CtrlBlk=33F4:2790 Size=688  iOp=2-689 iCache=99318-100005) DISABLED
 33F4:4012 37F5:0002     0: Event_fifo:1019[Set_event:2041] = Abort_:716
 33F4:401A 37F5:000A     8: #L0:145 = Set_event:2041 + #I1:17
 33F4:4028 37F5:0018    22: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4036 37F5:0026    36: Event_fifo:1019[Set_event:2041] = Eot_:1016
 33F4:403E 37F5:002E    44: #L0:145 = Set_event:2041 + #I1:17
 33F4:404C 37F5:003C    58: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:405A 37F5:004A    72: SPAWN INFOS:1277(with 0 args)
 33F4:4060 37F5:0050    78: WAITFORPROCESS INFOS:1277
 33F4:4066 37F5:0056    84: NEXTTICK #I10:18
 33F4:406A 37F5:005A    88: #L0:145 = State:2116 == run_cmd_sess@65:1942
 33F4:4078 37F5:0068   102: IFnot (#L0:145) GOTO .+114 (goto 216)
 33F4:4080 37F5:0070   110: #P1:241 = N_targ_pos:1407
 33F4:408A 37F5:007A   120: #Q2:260 = F= #Q2:260
 33F4:4094 37F5:0084   130: #Q3:261 = F= #Q3:261
 33F4:409E 37F5:008E   140: #Q4:262 = F= #Q4:262
 33F4:40A8 37F5:0098   150: #P5:249 = Staircase:2110
 33F4:40B2 37F5:00A2   160: #P6:250 = N_SSDs:1402
 33F4:40BC 37F5:00AC   170: #P7:251 = Min_Holdtime:1373
 33F4:40C6 37F5:00B6   180: #P8:252 = Max_Holdtime:1338
 33F4:40D0 37F5:00C0   190: #P9:253 = Expo_Jitter:1022
 33F4:40DA 37F5:00CA   200: SPAWN SETC_TRL:2047(with 9 args)
 33F4:40E0 37F5:00D0   206: WAITFORPROCESS SETC_TRL:2047
 33F4:40E6 37F5:00D6   212: GOTO .+472 (goto 684)
 33F4:40EA 37F5:00DA   216: #L0:145 = State:2116 == run_search_sess@65:1984
 33F4:40F8 37F5:00E8   230: IFnot (#L0:145) GOTO .+114 (goto 344)
 33F4:4100 37F5:00F0   238: #P1:241 = N_targ_pos:1407
 33F4:410A 37F5:00FA   248: #Q2:260 = F= #Q2:260
 33F4:4114 37F5:0104   258: #Q3:261 = F= #Q3:261
 33F4:411E 37F5:010E   268: #Q4:262 = F= #Q4:262
 33F4:4128 37F5:0118   278: #P5:249 = Staircase:2110
 33F4:4132 37F5:0122   288: #P6:250 = N_SSDs:1402
 33F4:413C 37F5:012C   298: #P7:251 = Min_Holdtime:1373
 33F4:4146 37F5:0136   308: #P8:252 = Max_Holdtime:1338
 33F4:4150 37F5:0140   318: #P9:253 = Expo_Jitter:1022
 33F4:415A 37F5:014A   328: SPAWN SETS_TRL:2052(with 9 args)
 33F4:4160 37F5:0150   334: WAITFORPROCESS SETS_TRL:2052
 33F4:4166 37F5:0156   340: GOTO .+344 (goto 684)
 33F4:416A 37F5:015A   344: #L0:145 = State:2116 == run_mg_sess@65:1977
 33F4:4178 37F5:0168   358: IFnot (#L0:145) GOTO .+114 (goto 472)
 33F4:4180 37F5:0170   366: #P1:241 = N_targ_pos:1407
 33F4:418A 37F5:017A   376: #Q2:260 = F= #Q2:260
 33F4:4194 37F5:0184   386: #Q3:261 = F= #Q3:261
 33F4:419E 37F5:018E   396: #Q4:262 = F= #Q4:262
 33F4:41A8 37F5:0198   406: #P5:249 = N_SOAs:1399
 33F4:41B2 37F5:01A2   416: #P6:250 = Min_Holdtime:1373
 33F4:41BC 37F5:01AC   426: #P7:251 = Max_Holdtime:1338
 33F4:41C6 37F5:01B6   436: #P8:252 = Expo_Jitter:1022
 33F4:41D0 37F5:01C0   446: #P9:253 = Expo_Jitter_SOA:1028
 33F4:41DA 37F5:01CA   456: SPAWN SETMGTRL:2050(with 9 args)
 33F4:41E0 37F5:01D0   462: WAITFORPROCESS SETMGTRL:2050
 33F4:41E6 37F5:01D6   468: GOTO .+216 (goto 684)
 33F4:41EA 37F5:01DA   472: #L0:145 = State:2116 == run_gonogo_sess@65:1963
 33F4:41F8 37F5:01E8   486: IFnot (#L0:145) GOTO .+94 (goto 580)
 33F4:4200 37F5:01F0   494: #P1:241 = N_targ_pos:1407
 33F4:420A 37F5:01FA   504: #P2:246 = Min_Holdtime:1373
 33F4:4214 37F5:0204   514: #P3:247 = Max_Holdtime:1338
 33F4:421E 37F5:020E   524: #P4:248 = Expo_Jitter:1022
 33F4:4228 37F5:0218   534: #P5:249 = Min_SOA:1381
 33F4:4232 37F5:0222   544: #P6:250 = Max_SOA:1359
 33F4:423C 37F5:022C   554: #P7:251 = Expo_Jitter_SOA:1028
 33F4:4246 37F5:0236   564: SPAWN SETG_TRL:2049(with 7 args)
 33F4:424C 37F5:023C   570: WAITFORPROCESS SETG_TRL:2049
 33F4:4252 37F5:0242   576: GOTO .+108 (goto 684)
 33F4:4256 37F5:0246   580: #L0:145 = State:2116 == run_delayed_sess@65:1949
 33F4:4264 37F5:0254   594: IFnot (#L0:145) GOTO .+90 (goto 684)
 33F4:426C 37F5:025C   602: #P1:241 = N_targ_pos:1407
 33F4:4276 37F5:0266   612: #P2:246 = Min_Holdtime:1373
 33F4:4280 37F5:0270   622: #P3:247 = Max_Holdtime:1338
 33F4:428A 37F5:027A   632: #P4:248 = Expo_Jitter:1022
 33F4:4294 37F5:0284   642: #P5:249 = Min_SOA:1381
 33F4:429E 37F5:028E   652: #P6:250 = Max_SOA:1359
 33F4:42A8 37F5:0298   662: #P7:251 = Expo_Jitter_SOA:1028
 33F4:42B2 37F5:02A2   672: SPAWN SETD_TRL:2048(with 7 args)
 33F4:42B8 37F5:02A8   678: WAITFORPROCESS SETD_TRL:2048
 33F4:42BE 37F5:02AE   684: NEXTTICK #I50:112

PROCESS  66: JUICE (Args=2 CtrlBlk=33F4:27BC Size= 44  iOp=2-45 iCache=100006-100049) DISABLED
 33F4:4012 37F5:0002     0: channel@66:833 = #P1:241
 33F4:401C 37F5:000C    10: duration@66:998 = #P2:246
 33F4:4026 37F5:0016    20: #L0 = CALL2 mio_dig_set(channel@66:833,open@66:1549)
 33F4:4030 37F5:0020    30: WAIT duration:998
 33F4:4034 37F5:0024    34: #L0 = CALL2 mio_dig_set(channel@66:833,closed@66:839)

PROCESS  67: SUCCESS (Args=7 CtrlBlk=33F4:27E8 Size=1202  iOp=2-1203 iCache=100050-101251) DISABLED
 33F4:4012 37F5:0002     0: trial_length@67:2296 = #P1:241
 33F4:401C 37F5:000C    10: inter_trl_int@67:1283 = #P2:246
 33F4:4026 37F5:0016    20: trl_start_time@67:2316 = #P3:247
 33F4:4030 37F5:0020    30: fixed_trl_length@67:1159 = #P4:248
 33F4:403A 37F5:002A    40: success_tone@67:2189 = #P5:249
 33F4:4044 37F5:0034    50: tone_duration@67:2283 = #P6:250
 33F4:404E 37F5:003E    60: reward_offset@67:1933 = #P7:251
 33F4:4058 37F5:0048    70: #P1:241 = success_tone@67:2189
 33F4:4062 37F5:0052    80: #P2:246 = tone_duration@67:2283
 33F4:406C 37F5:005C    90: SPAWN TONE:2280(with 2 args)
 33F4:4072 37F5:0062    96: tone_time = CALL0 time()
 33F4:4078 37F5:0068   102: Event_fifo:1019[Set_event:2041] = Tone_:2281
 33F4:4080 37F5:0070   110: #L0:145 = Set_event:2041 + #I1:17
 33F4:408E 37F5:007E   124: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:409C 37F5:008C   138: Event_fifo:1019[Set_event:2041] = Reward_tone:1934
 33F4:40A4 37F5:0094   146: #L0:145 = Set_event:2041 + #I1:17
 33F4:40B2 37F5:00A2   160: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:40C0 37F5:00B0   174: #L0 = CALL0 time()
 33F4:40C6 37F5:00B6   180: #L1:146 = tone_time@67:2286 + reward_offset@67:1933
 33F4:40D4 37F5:00C4   194: #L2:156 = #L0:145 < #L1:146
 33F4:40E2 37F5:00D2   208: IFnot (#L2:156) GOTO .+14 (goto 222)
 33F4:40EA 37F5:00DA   216: NEXTTICK1
 33F4:40EC 37F5:00DC   218: GOTO .-44 (goto 174)
 33F4:40F0 37F5:00E0   222: #L0:145 = State:2116 == run_search_sess@67:1985
 33F4:40FE 37F5:00EE   236: IFnot (#L0:145) GOTO .+138 (goto 374)
 33F4:4106 37F5:00F6   244: #L1:146 = Consec_corr:854 F> Consec_trl:855
 33F4:4114 37F5:0104   258: IFnot (#L1:146) GOTO .+112 (goto 370)
 33F4:411C 37F5:010C   266: #P1:241 = Juice_channel:1298
 33F4:4126 37F5:0116   276: #P2:246 = Reward_duration:1931
 33F4:4130 37F5:0120   286: SPAWN JUICE:1297(with 2 args)
 33F4:4136 37F5:0126   292: trl_end_time = CALL0 time()
 33F4:413C 37F5:012C   298: Event_fifo:1019[Set_event:2041] = Reward_:1930
 33F4:4144 37F5:0134   306: #L0:145 = Set_event:2041 + #I1:17
 33F4:4152 37F5:0142   320: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4160 37F5:0150   334: Event_fifo:1019[Set_event:2041] = Eot_:1016
 33F4:4168 37F5:0158   342: #L0:145 = Set_event:2041 + #I1:17
 33F4:4176 37F5:0166   356: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4184 37F5:0174   370: GOTO .+108 (goto 478)
 33F4:4188 37F5:0178   374: #P1:241 = Juice_channel:1298
 33F4:4192 37F5:0182   384: #P2:246 = Reward_duration:1931
 33F4:419C 37F5:018C   394: SPAWN JUICE:1297(with 2 args)
 33F4:41A2 37F5:0192   400: trl_end_time = CALL0 time()
 33F4:41A8 37F5:0198   406: Event_fifo:1019[Set_event:2041] = Reward_:1930
 33F4:41B0 37F5:01A0   414: #L0:145 = Set_event:2041 + #I1:17
 33F4:41BE 37F5:01AE   428: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41CC 37F5:01BC   442: Event_fifo:1019[Set_event:2041] = Eot_:1016
 33F4:41D4 37F5:01C4   450: #L0:145 = Set_event:2041 + #I1:17
 33F4:41E2 37F5:01D2   464: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41F0 37F5:01E0   478: SPAWN INFOS:1277(with 0 args)
 33F4:41F6 37F5:01E6   484: WAITFORPROCESS INFOS:1277
 33F4:41FC 37F5:01EC   490: NEXTTICK #I10:18
 33F4:4200 37F5:01F0   494: #L0:145 = State:2116 == run_cmd_sess@67:1943
 33F4:420E 37F5:01FE   508: IFnot (#L0:145) GOTO .+108 (goto 616)
 33F4:4216 37F5:0206   516: #P1:241 = N_targ_pos:1407
 33F4:4220 37F5:0210   526: #Q2:260 = F= #Q2:260
 33F4:422A 37F5:021A   536: #Q3:261 = F= #Q3:261
 33F4:4234 37F5:0224   546: #Q4:262 = F= #Q4:262
 33F4:423E 37F5:022E   556: #P5:249 = Staircase:2110
 33F4:4248 37F5:0238   566: #P6:250 = N_SSDs:1402
 33F4:4252 37F5:0242   576: #P7:251 = Min_Holdtime:1373
 33F4:425C 37F5:024C   586: #P8:252 = Max_Holdtime:1338
 33F4:4266 37F5:0256   596: #P9:253 = Expo_Jitter:1022
 33F4:4270 37F5:0260   606: SPAWN SETC_TRL:2047(with 9 args)
 33F4:4276 37F5:0266   612: GOTO .+454 (goto 1066)
 33F4:427A 37F5:026A   616: #L0:145 = State:2116 == run_search_sess@67:1985
 33F4:4288 37F5:0278   630: IFnot (#L0:145) GOTO .+114 (goto 744)
 33F4:4290 37F5:0280   638: #P1:241 = N_targ_pos:1407
 33F4:429A 37F5:028A   648: #Q2:260 = F= #Q2:260
 33F4:42A4 37F5:0294   658: #Q3:261 = F= #Q3:261
 33F4:42AE 37F5:029E   668: #Q4:262 = F= #Q4:262
 33F4:42B8 37F5:02A8   678: #P5:249 = Staircase:2110
 33F4:42C2 37F5:02B2   688: #P6:250 = N_SSDs:1402
 33F4:42CC 37F5:02BC   698: #P7:251 = Min_Holdtime:1373
 33F4:42D6 37F5:02C6   708: #P8:252 = Max_Holdtime:1338
 33F4:42E0 37F5:02D0   718: #P9:253 = Expo_Jitter:1022
 33F4:42EA 37F5:02DA   728: SPAWN SETS_TRL:2052(with 9 args)
 33F4:42F0 37F5:02E0   734: WAITFORPROCESS SETS_TRL:2052
 33F4:42F6 37F5:02E6   740: GOTO .+326 (goto 1066)
 33F4:42FA 37F5:02EA   744: #L0:145 = State:2116 == run_mg_sess@67:1978
 33F4:4308 37F5:02F8   758: IFnot (#L0:145) GOTO .+108 (goto 866)
 33F4:4310 37F5:0300   766: #P1:241 = N_targ_pos:1407
 33F4:431A 37F5:030A   776: #Q2:260 = F= #Q2:260
 33F4:4324 37F5:0314   786: #Q3:261 = F= #Q3:261
 33F4:432E 37F5:031E   796: #Q4:262 = F= #Q4:262
 33F4:4338 37F5:0328   806: #P5:249 = N_SOAs:1399
 33F4:4342 37F5:0332   816: #P6:250 = Min_Holdtime:1373
 33F4:434C 37F5:033C   826: #P7:251 = Max_Holdtime:1338
 33F4:4356 37F5:0346   836: #P8:252 = Expo_Jitter:1022
 33F4:4360 37F5:0350   846: #P9:253 = Expo_Jitter_SOA:1028
 33F4:436A 37F5:035A   856: SPAWN SETMGTRL:2050(with 9 args)
 33F4:4370 37F5:0360   862: GOTO .+204 (goto 1066)
 33F4:4374 37F5:0364   866: #L0:145 = State:2116 == run_gonogo_sess@67:1964
 33F4:4382 37F5:0372   880: IFnot (#L0:145) GOTO .+88 (goto 968)
 33F4:438A 37F5:037A   888: #P1:241 = N_targ_pos:1407
 33F4:4394 37F5:0384   898: #P2:246 = Min_Holdtime:1373
 33F4:439E 37F5:038E   908: #P3:247 = Max_Holdtime:1338
 33F4:43A8 37F5:0398   918: #P4:248 = Expo_Jitter:1022
 33F4:43B2 37F5:03A2   928: #P5:249 = Min_SOA:1381
 33F4:43BC 37F5:03AC   938: #P6:250 = Max_SOA:1359
 33F4:43C6 37F5:03B6   948: #P7:251 = Expo_Jitter_SOA:1028
 33F4:43D0 37F5:03C0   958: SPAWN SETG_TRL:2049(with 7 args)
 33F4:43D6 37F5:03C6   964: GOTO .+102 (goto 1066)
 33F4:43DA 37F5:03CA   968: #L0:145 = State:2116 == run_delayed_sess@67:1950
 33F4:43E8 37F5:03D8   982: IFnot (#L0:145) GOTO .+84 (goto 1066)
 33F4:43F0 37F5:03E0   990: #P1:241 = N_targ_pos:1407
 33F4:43FA 37F5:03EA  1000: #P2:246 = Min_Holdtime:1373
 33F4:4404 37F5:03F4  1010: #P3:247 = Max_Holdtime:1338
 33F4:440E 37F5:03FE  1020: #P4:248 = Expo_Jitter:1022
 33F4:4418 37F5:0408  1030: #P5:249 = Min_SOA:1381
 33F4:4422 37F5:0412  1040: #P6:250 = Max_SOA:1359
 33F4:442C 37F5:041C  1050: #P7:251 = Expo_Jitter_SOA:1028
 33F4:4436 37F5:0426  1060: SPAWN SETD_TRL:2048(with 7 args)
 33F4:443C 37F5:042C  1066: #L0:145 = State:2116 == run_search_sess@67:1985
 33F4:444A 37F5:043A  1080: IFnot (#L0:145) GOTO .+14 (goto 1094)
 33F4:4452 37F5:0442  1088: SPAWN UPD8_SCH:2353(with 0 args)
 33F4:4458 37F5:0448  1094: IFnot (fixed_trl_length@67:1159) GOTO .+60 (goto 1154)
 33F4:4460 37F5:0450  1102: #L0 = CALL0 time()
 33F4:4466 37F5:0456  1108: #L1:146 = trl_start_time@67:2316 + trial_length@67:2296
 33F4:4474 37F5:0464  1122: #L2:156 = #L0:145 < #L1:146
 33F4:4482 37F5:0472  1136: IFnot (#L2:156) GOTO .+14 (goto 1150)
 33F4:448A 37F5:047A  1144: NEXTTICK1
 33F4:448C 37F5:047C  1146: GOTO .-44 (goto 1102)
 33F4:4490 37F5:0480  1150: GOTO .+52 (goto 1202)
 33F4:4494 37F5:0484  1154: #L0 = CALL0 time()
 33F4:449A 37F5:048A  1160: #L1:146 = trl_end_time@67:2303 + inter_trl_int@67:1283
 33F4:44A8 37F5:0498  1174: #L2:156 = #L0:145 < #L1:146
 33F4:44B6 37F5:04A6  1188: IFnot (#L2:156) GOTO .+14 (goto 1202)
 33F4:44BE 37F5:04AE  1196: NEXTTICK1
 33F4:44C0 37F5:04B0  1198: GOTO .-44 (goto 1154)

PROCESS  68: FAILURE (Args=6 CtrlBlk=33F4:2814 Size=992  iOp=2-993 iCache=101252-102243) DISABLED
 33F4:4012 37F5:0002     0: trial_length@68:2297 = #P1:241
 33F4:401C 37F5:000C    10: inter_trl_int@68:1284 = #P2:246
 33F4:4026 37F5:0016    20: trl_start_time@68:2317 = #P3:247
 33F4:4030 37F5:0020    30: fixed_trl_length@68:1160 = #P4:248
 33F4:403A 37F5:002A    40: failure_tone@68:1052 = #P5:249
 33F4:4044 37F5:0034    50: punish_time@68:1637 = #P6:250
 33F4:404E 37F5:003E    60: #P1:241 = failure_tone@68:1052
 33F4:4058 37F5:0048    70: #P2:246 = Tone_Duration:2282
 33F4:4062 37F5:0052    80: SPAWN TONE:2280(with 2 args)
 33F4:4068 37F5:0058    86: Event_fifo:1019[Set_event:2041] = Tone_:2281
 33F4:4070 37F5:0060    94: #L0:145 = Set_event:2041 + #I1:17
 33F4:407E 37F5:006E   108: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:408C 37F5:007C   122: Event_fifo:1019[Set_event:2041] = Error_tone:1018
 33F4:4094 37F5:0084   130: #L0:145 = Set_event:2041 + #I1:17
 33F4:40A2 37F5:0092   144: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:40B0 37F5:00A0   158: trl_end_time = CALL0 time()
 33F4:40B6 37F5:00A6   164: Event_fifo:1019[Set_event:2041] = Eot_:1016
 33F4:40BE 37F5:00AE   172: #L0:145 = Set_event:2041 + #I1:17
 33F4:40CC 37F5:00BC   186: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:40DA 37F5:00CA   200: SPAWN INFOS:1277(with 0 args)
 33F4:40E0 37F5:00D0   206: WAITFORPROCESS INFOS:1277
 33F4:40E6 37F5:00D6   212: NEXTTICK #I10:18
 33F4:40EA 37F5:00DA   216: #L0:145 = State:2116 == run_cmd_sess@68:1944
 33F4:40F8 37F5:00E8   230: IFnot (#L0:145) GOTO .+108 (goto 338)
 33F4:4100 37F5:00F0   238: #P1:241 = N_targ_pos:1407
 33F4:410A 37F5:00FA   248: #Q2:260 = F= #Q2:260
 33F4:4114 37F5:0104   258: #Q3:261 = F= #Q3:261
 33F4:411E 37F5:010E   268: #Q4:262 = F= #Q4:262
 33F4:4128 37F5:0118   278: #P5:249 = Staircase:2110
 33F4:4132 37F5:0122   288: #P6:250 = N_SSDs:1402
 33F4:413C 37F5:012C   298: #P7:251 = Min_Holdtime:1373
 33F4:4146 37F5:0136   308: #P8:252 = Max_Holdtime:1338
 33F4:4150 37F5:0140   318: #P9:253 = Expo_Jitter:1022
 33F4:415A 37F5:014A   328: SPAWN SETC_TRL:2047(with 9 args)
 33F4:4160 37F5:0150   334: GOTO .+464 (goto 798)
 33F4:4164 37F5:0154   338: #L0:145 = State:2116 == run_search_sess@68:1986
 33F4:4172 37F5:0162   352: IFnot (#L0:145) GOTO .+124 (goto 476)
 33F4:417A 37F5:016A   360: Consec_corr:854 = F= Consec_corr:854
 33F4:4184 37F5:0174   370: #P1:241 = N_targ_pos:1407
 33F4:418E 37F5:017E   380: #Q2:260 = F= #Q2:260
 33F4:4198 37F5:0188   390: #Q3:261 = F= #Q3:261
 33F4:41A2 37F5:0192   400: #Q4:262 = F= #Q4:262
 33F4:41AC 37F5:019C   410: #P5:249 = Staircase:2110
 33F4:41B6 37F5:01A6   420: #P6:250 = N_SSDs:1402
 33F4:41C0 37F5:01B0   430: #P7:251 = Min_Holdtime:1373
 33F4:41CA 37F5:01BA   440: #P8:252 = Max_Holdtime:1338
 33F4:41D4 37F5:01C4   450: #P9:253 = Expo_Jitter:1022
 33F4:41DE 37F5:01CE   460: SPAWN SETS_TRL:2052(with 9 args)
 33F4:41E4 37F5:01D4   466: WAITFORPROCESS SETS_TRL:2052
 33F4:41EA 37F5:01DA   472: GOTO .+326 (goto 798)
 33F4:41EE 37F5:01DE   476: #L0:145 = State:2116 == run_mg_sess@68:1979
 33F4:41FC 37F5:01EC   490: IFnot (#L0:145) GOTO .+108 (goto 598)
 33F4:4204 37F5:01F4   498: #P1:241 = N_targ_pos:1407
 33F4:420E 37F5:01FE   508: #Q2:260 = F= #Q2:260
 33F4:4218 37F5:0208   518: #Q3:261 = F= #Q3:261
 33F4:4222 37F5:0212   528: #Q4:262 = F= #Q4:262
 33F4:422C 37F5:021C   538: #P5:249 = N_SOAs:1399
 33F4:4236 37F5:0226   548: #P6:250 = Min_Holdtime:1373
 33F4:4240 37F5:0230   558: #P7:251 = Max_Holdtime:1338
 33F4:424A 37F5:023A   568: #P8:252 = Expo_Jitter:1022
 33F4:4254 37F5:0244   578: #P9:253 = Expo_Jitter_SOA:1028
 33F4:425E 37F5:024E   588: SPAWN SETMGTRL:2050(with 9 args)
 33F4:4264 37F5:0254   594: GOTO .+204 (goto 798)
 33F4:4268 37F5:0258   598: #L0:145 = State:2116 == run_gonogo_sess@68:1965
 33F4:4276 37F5:0266   612: IFnot (#L0:145) GOTO .+88 (goto 700)
 33F4:427E 37F5:026E   620: #P1:241 = N_targ_pos:1407
 33F4:4288 37F5:0278   630: #P2:246 = Min_Holdtime:1373
 33F4:4292 37F5:0282   640: #P3:247 = Max_Holdtime:1338
 33F4:429C 37F5:028C   650: #P4:248 = Expo_Jitter:1022
 33F4:42A6 37F5:0296   660: #P5:249 = Min_SOA:1381
 33F4:42B0 37F5:02A0   670: #P6:250 = Max_SOA:1359
 33F4:42BA 37F5:02AA   680: #P7:251 = Expo_Jitter_SOA:1028
 33F4:42C4 37F5:02B4   690: SPAWN SETG_TRL:2049(with 7 args)
 33F4:42CA 37F5:02BA   696: GOTO .+102 (goto 798)
 33F4:42CE 37F5:02BE   700: #L0:145 = State:2116 == run_delayed_sess@68:1951
 33F4:42DC 37F5:02CC   714: IFnot (#L0:145) GOTO .+84 (goto 798)
 33F4:42E4 37F5:02D4   722: #P1:241 = N_targ_pos:1407
 33F4:42EE 37F5:02DE   732: #P2:246 = Min_Holdtime:1373
 33F4:42F8 37F5:02E8   742: #P3:247 = Max_Holdtime:1338
 33F4:4302 37F5:02F2   752: #P4:248 = Expo_Jitter:1022
 33F4:430C 37F5:02FC   762: #P5:249 = Min_SOA:1381
 33F4:4316 37F5:0306   772: #P6:250 = Max_SOA:1359
 33F4:4320 37F5:0310   782: #P7:251 = Expo_Jitter_SOA:1028
 33F4:432A 37F5:031A   792: SPAWN SETD_TRL:2048(with 7 args)
 33F4:4330 37F5:0320   798: #L0:145 = LastStopOutcome:1308 != #I2:53
 33F4:433E 37F5:032E   812: IFnot (#L0:145) GOTO .+44 (goto 856)
 33F4:4346 37F5:0336   820: #P1:241 = Curr_SSD:890
 33F4:4350 37F5:0340   830: #P2:246 = LastStopOutcome:1308
 33F4:435A 37F5:034A   840: #P3:247 = Decide_SSD:946
 33F4:4364 37F5:0354   850: SPAWN UPD8_INH:2352(with 3 args)
 33F4:436A 37F5:035A   856: IFnot (fixed_trl_length@68:1160) GOTO .+74 (goto 930)
 33F4:4372 37F5:0362   864: #L0 = CALL0 time()
 33F4:4378 37F5:0368   870: #L1:146 = trl_start_time@68:2317 + trial_length@68:2297
 33F4:4386 37F5:0376   884: #L2:156 = #L1:146 + punish_time@68:1637
 33F4:4394 37F5:0384   898: #L3:157 = #L0:145 < #L2:156
 33F4:43A2 37F5:0392   912: IFnot (#L3:157) GOTO .+14 (goto 926)
 33F4:43AA 37F5:039A   920: NEXTTICK1
 33F4:43AC 37F5:039C   922: GOTO .-58 (goto 864)
 33F4:43B0 37F5:03A0   926: GOTO .+66 (goto 992)
 33F4:43B4 37F5:03A4   930: #L0 = CALL0 time()
 33F4:43BA 37F5:03AA   936: #L1:146 = trl_end_time@68:2304 + inter_trl_int@68:1284
 33F4:43C8 37F5:03B8   950: #L2:156 = #L1:146 + punish_time@68:1637
 33F4:43D6 37F5:03C6   964: #L3:157 = #L0:145 < #L2:156
 33F4:43E4 37F5:03D4   978: IFnot (#L3:157) GOTO .+14 (goto 992)
 33F4:43EC 37F5:03DC   986: NEXTTICK1
 33F4:43EE 37F5:03DE   988: GOTO .-58 (goto 930)

PROCESS  69: END_TRL (Args=1 CtrlBlk=33F4:2840 Size=1636  iOp=2-1637 iCache=102244-103879) DISABLED
 33F4:4012 37F5:0002     0: trl_outcome@69:2307 = #P1:241
 33F4:401C 37F5:000C    10: #L0:145 = Catch:821 == #I1:17
 33F4:402A 37F5:001A    24: IFnot (#L0:145) GOTO .+56 (goto 80)
 33F4:4032 37F5:0022    32: Reward_duration:1931 = Base_Reward_time:774 / Catch_Rew:823
 33F4:4040 37F5:0030    46: Success_tone:2188 = Success_Tone_medR:2191
 33F4:404A 37F5:003A    56: Punish_time:1636 = Base_Punish_time:773
 33F4:4054 37F5:0044    66: Failure_tone:1051 = Failure_Tone_medP:1054
 33F4:405E 37F5:004E    76: GOTO .+66 (goto 142)
 33F4:4062 37F5:0052    80: #L0:145 = Catch:821 == #I0:16
 33F4:4070 37F5:0060    94: IFnot (#L0:145) GOTO .+48 (goto 142)
 33F4:4078 37F5:0068   102: Reward_duration:1931 = Base_Reward_time:774
 33F4:4082 37F5:0072   112: Success_tone:2188 = Success_Tone_medR:2191
 33F4:408C 37F5:007C   122: Punish_time:1636 = Base_Punish_time:773
 33F4:4096 37F5:0086   132: Failure_tone:1051 = Failure_Tone_medP:1054
 33F4:40A0 37F5:0090   142: #L0:145 = Block_number:792 + #I2730:71
 33F4:40AE 37F5:009E   156: Event_fifo:1019[Set_event:2041] = #L0:145
 33F4:40B6 37F5:00A6   164: #L0:145 = Set_event:2041 + #I1:17
 33F4:40C4 37F5:00B4   178: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:40D2 37F5:00C2   192: #L0:145 = trl_outcome@69:2307 == no_fix@69:1431
 33F4:40E0 37F5:00D0   206: #L1:146 = trl_outcome@69:2307 == broke_fix@69:807
 33F4:40EE 37F5:00DE   220: #L2:156 = #L0:145 || #L1:146
 33F4:40FC 37F5:00EC   234: #L3:157 = trl_outcome@69:2307 == body_move@69:798
 33F4:410A 37F5:00FA   248: #L4:158 = #L2:156 || #L3:157
 33F4:4118 37F5:0108   262: IFnot (#L4:158) GOTO .+24 (goto 286)
 33F4:4120 37F5:0110   270: SPAWN ABORT:715(with 0 args)
 33F4:4126 37F5:0116   276: WAITFORPROCESS ABORT:715
 33F4:412C 37F5:011C   282: GOTO .+988 (goto 1270)
 33F4:4130 37F5:0120   286: #L0:145 = trl_outcome@69:2307 == go_correct@69:1192
 33F4:413E 37F5:012E   300: #L1:146 = trl_outcome@69:2307 == nogo_correct@69:1444
 33F4:414C 37F5:013C   314: #L2:156 = #L0:145 || #L1:146
 33F4:415A 37F5:014A   328: #L3:157 = trl_outcome@69:2307 == correct_sacc@69:868
 33F4:4168 37F5:0158   342: #L4:158 = #L2:156 || #L3:157
 33F4:4176 37F5:0166   356: #L5:159 = play_the_odds@69:1622 F< Bonus_weight:799
 33F4:4184 37F5:0174   370: #L6:160 = #L4:158 || #L5:159
 33F4:4192 37F5:0182   384: IFnot (#L6:160) GOTO .+340 (goto 724)
 33F4:419A 37F5:018A   392: #L7:161 = State:2116 == run_search_sess:1982
 33F4:41A8 37F5:0198   406: IFnot (#L7:161) GOTO .+218 (goto 624)
 33F4:41B0 37F5:01A0   414: Comp_Trl_number:853 = Comp_Trl_number:853 + #I1:17
 33F4:41BE 37F5:01AE   428: Consec_corr:854 = Consec_corr:854 F+ #I1:17
 33F4:41CC 37F5:01BC   442: #L0:145 = TrialTp:2300 == #I1:17
 33F4:41DA 37F5:01CA   456: IFnot (#L0:145) GOTO .+150 (goto 606)
 33F4:41E2 37F5:01D2   464: #L1:146 = SingMode:2077 == #I0:16
 33F4:41F0 37F5:01E0   478: IFnot (#L1:146) GOTO .+26 (goto 504)
 33F4:41F8 37F5:01E8   486: Rand_Comp_Trl_number:1860 = Rand_Comp_Trl_number:1860 F+ #I1:17
 33F4:4206 37F5:01F6   500: GOTO .+102 (goto 602)
 33F4:420A 37F5:01FA   504: #L0:145 = SingMode:2077 == #I1:17
 33F4:4218 37F5:0208   518: IFnot (#L0:145) GOTO .+84 (goto 602)
 33F4:4220 37F5:0210   526: #L1:146 = DistPres:990 == #I1111:29
 33F4:422E 37F5:021E   540: IFnot (#L1:146) GOTO .+26 (goto 566)
 33F4:4236 37F5:0226   548: Rand_Comp_Trl_DA:1858 = Rand_Comp_Trl_DA:1858 F+ #I1:17
 33F4:4244 37F5:0234   562: GOTO .+40 (goto 602)
 33F4:4248 37F5:0238   566: #L0:145 = DistPres:990 == #I2222:61
 33F4:4256 37F5:0246   580: IFnot (#L0:145) GOTO .+22 (goto 602)
 33F4:425E 37F5:024E   588: Rand_Comp_Trl_DP:1859 = Rand_Comp_Trl_DP:1859 F+ #I1:17
 33F4:426C 37F5:025C   602: GOTO .+18 (goto 620)
 33F4:4270 37F5:0260   606: Rep_Comp_Trl_number:1921 = Rep_Comp_Trl_number:1921 F+ #I1:17
 33F4:427E 37F5:026E   620: GOTO .+18 (goto 638)
 33F4:4282 37F5:0272   624: Comp_Trl_number:853 = Comp_Trl_number:853 + #I1:17
 33F4:4290 37F5:0280   638: #P1:241 = Trial_length:2295
 33F4:429A 37F5:028A   648: #P2:246 = Inter_trl_int:1282
 33F4:42A4 37F5:0294   658: #P3:247 = Trl_Start_Time:2315
 33F4:42AE 37F5:029E   668: #P4:248 = Fixed_trl_length:1158
 33F4:42B8 37F5:02A8   678: #P5:249 = Success_tone:2188
 33F4:42C2 37F5:02B2   688: #P6:250 = Tone_Duration:2282
 33F4:42CC 37F5:02BC   698: #P7:251 = Reward_Offset:1932
 33F4:42D6 37F5:02C6   708: SPAWN SUCCESS:2179(with 7 args)
 33F4:42DC 37F5:02CC   714: WAITFORPROCESS SUCCESS:2179
 33F4:42E2 37F5:02D2   720: GOTO .+550 (goto 1270)
 33F4:42E6 37F5:02D6   724: #L0:145 = trl_outcome@69:2307 == go_wrong@69:1208
 33F4:42F4 37F5:02E4   738: #L1:146 = trl_outcome@69:2307 == no_sacc@69:1435
 33F4:4302 37F5:02F2   752: #L2:156 = #L0:145 || #L1:146
 33F4:4310 37F5:0300   766: #L3:157 = trl_outcome@69:2307 == sacc_out@69:1995
 33F4:431E 37F5:030E   780: #L4:158 = #L2:156 || #L3:157
 33F4:432C 37F5:031C   794: #L5:159 = trl_outcome@69:2307 == broke_targ@69:813
 33F4:433A 37F5:032A   808: #L6:160 = #L4:158 || #L5:159
 33F4:4348 37F5:0338   822: #L7:161 = trl_outcome@69:2307 == nogo_wrong@69:1451
 33F4:4356 37F5:0346   836: #L8:162 = #L6:160 || #L7:161
 33F4:4364 37F5:0354   850: #L9:163 = trl_outcome@69:2307 == early_sacc@69:1003
 33F4:4372 37F5:0362   864: #L10:147 = #L8:162 || #L9:163
 33F4:4380 37F5:0370   878: #L11:148 = trl_outcome@69:2307 == anticip_sacc@69:745
 33F4:438E 37F5:037E   892: #L12:149 = #L10:147 || #L11:148
 33F4:439C 37F5:038C   906: #L13:150 = trl_outcome@69:2307 == too_fast@69:2291
 33F4:43AA 37F5:039A   920: #L14:151 = #L12:149 || #L13:150
 33F4:43B8 37F5:03A8   934: #L15:152 = play_the_odds@69:1622 F< Dealer_wins_weight:938
 33F4:43C6 37F5:03B6   948: #L16:153 = #L14:151 || #L15:152
 33F4:43D4 37F5:03C4   962: IFnot (#L16:153) GOTO .+308 (goto 1270)
 33F4:43DC 37F5:03CC   970: #L17:154 = State:2116 == run_search_sess:1982
 33F4:43EA 37F5:03DA   984: IFnot (#L17:154) GOTO .+204 (goto 1188)
 33F4:43F2 37F5:03E2   992: Comp_Trl_number:853 = Comp_Trl_number:853 + #I1:17
 33F4:4400 37F5:03F0  1006: #L0:145 = TrialTp:2300 == #I1:17
 33F4:440E 37F5:03FE  1020: IFnot (#L0:145) GOTO .+150 (goto 1170)
 33F4:4416 37F5:0406  1028: #L1:146 = SingMode:2077 == #I0:16
 33F4:4424 37F5:0414  1042: IFnot (#L1:146) GOTO .+26 (goto 1068)
 33F4:442C 37F5:041C  1050: rand_inacc_sacc:1892 = rand_inacc_sacc:1892 F+ #I1:17
 33F4:443A 37F5:042A  1064: GOTO .+102 (goto 1166)
 33F4:443E 37F5:042E  1068: #L0:145 = SingMode:2077 == #I1:17
 33F4:444C 37F5:043C  1082: IFnot (#L0:145) GOTO .+84 (goto 1166)
 33F4:4454 37F5:0444  1090: #L1:146 = DistPres:990 == #I1111:29
 33F4:4462 37F5:0452  1104: IFnot (#L1:146) GOTO .+26 (goto 1130)
 33F4:446A 37F5:045A  1112: rand_inacc_sacc_DA:1893 = rand_inacc_sacc_DA:1893 F+ #I1:17
 33F4:4478 37F5:0468  1126: GOTO .+40 (goto 1166)
 33F4:447C 37F5:046C  1130: #L0:145 = DistPres:990 == #I2222:61
 33F4:448A 37F5:047A  1144: IFnot (#L0:145) GOTO .+22 (goto 1166)
 33F4:4492 37F5:0482  1152: rand_inacc_sacc_DP:1894 = rand_inacc_sacc_DP:1894 F+ #I1:17
 33F4:44A0 37F5:0490  1166: GOTO .+18 (goto 1184)
 33F4:44A4 37F5:0494  1170: rep_inacc_sacc:1922 = rep_inacc_sacc:1922 F+ #I1:17
 33F4:44B2 37F5:04A2  1184: GOTO .+14 (goto 1198)
 33F4:44B6 37F5:04A6  1188: Comp_Trl_number:853 = Comp_Trl_number:853
 33F4:44C0 37F5:04B0  1198: #P1:241 = Trial_length:2295
 33F4:44CA 37F5:04BA  1208: #P2:246 = Inter_trl_int:1282
 33F4:44D4 37F5:04C4  1218: #P3:247 = Trl_Start_Time:2315
 33F4:44DE 37F5:04CE  1228: #P4:248 = Fixed_trl_length:1158
 33F4:44E8 37F5:04D8  1238: #P5:249 = Failure_tone:1051
 33F4:44F2 37F5:04E2  1248: #P6:250 = Punish_time:1636
 33F4:44FC 37F5:04EC  1258: SPAWN FAILURE:1042(with 6 args)
 33F4:4502 37F5:04F2  1264: WAITFORPROCESS FAILURE:1042
 33F4:4508 37F5:04F8  1270: #L0:145 = SingMode:2077 == #I0:16
 33F4:4516 37F5:0506  1284: IFnot (#L0:145) GOTO .+96 (goto 1380)
 33F4:451E 37F5:050E  1292: #F0:1 = Rand_Comp_Trl_number:1860 F+ rand_inacc_sacc:1892
 33F4:452C 37F5:051C  1306: #F1:2 = Rand_Comp_Trl_number:1860 F/ #F0:1
 33F4:453A 37F5:052A  1320: RandPerAcc:1908 = #F1:2 F* #I100:19
 33F4:4548 37F5:0538  1334: #F0:1 = Rep_Comp_Trl_number:1921 F+ rep_inacc_sacc:1922
 33F4:4556 37F5:0546  1348: #F1:2 = Rep_Comp_Trl_number:1921 F/ #F0:1
 33F4:4564 37F5:0554  1362: RepPerAcc:1927 = #F1:2 F* #I100:19
 33F4:4572 37F5:0562  1376: GOTO .+152 (goto 1528)
 33F4:4576 37F5:0566  1380: #L0:145 = SingMode:2077 == #I1:17
 33F4:4584 37F5:0574  1394: IFnot (#L0:145) GOTO .+134 (goto 1528)
 33F4:458C 37F5:057C  1402: #F0:1 = Rand_Comp_Trl_DA:1858 F+ rand_inacc_sacc_DA:1893
 33F4:459A 37F5:058A  1416: #F1:2 = Rand_Comp_Trl_DA:1858 F/ #F0:1
 33F4:45A8 37F5:0598  1430: RandPerAcc_DA:1909 = #F1:2 F* #I100:19
 33F4:45B6 37F5:05A6  1444: #F0:1 = Rand_Comp_Trl_DP:1859 F+ rand_inacc_sacc_DP:1894
 33F4:45C4 37F5:05B4  1458: #F1:2 = Rand_Comp_Trl_DP:1859 F/ #F0:1
 33F4:45D2 37F5:05C2  1472: RandPerAcc_DP:1910 = #F1:2 F* #I100:19
 33F4:45E0 37F5:05D0  1486: #F0:1 = Rep_Comp_Trl_number:1921 F+ rep_inacc_sacc:1922
 33F4:45EE 37F5:05DE  1500: #F1:2 = Rep_Comp_Trl_number:1921 F/ #F0:1
 33F4:45FC 37F5:05EC  1514: RepPerAcc:1927 = #F1:2 F* #I100:19
 33F4:460A 37F5:05FA  1528: #L0:145 = Move_ct:1396 > #I0:16
 33F4:4618 37F5:0608  1542: IFnot (#L0:145) GOTO .+80 (goto 1622)
 33F4:4620 37F5:0610  1550: now = CALL0 time()
 33F4:4626 37F5:0616  1556: #L0 = CALL0 time()
 33F4:462C 37F5:061C  1562: #L1:146 = now@69:1456 + Bmove_tout:793
 33F4:463A 37F5:062A  1576: #L2:156 = #L0:145 < #L1:146
 33F4:4648 37F5:0638  1590: IFnot (#L2:156) GOTO .+14 (goto 1604)
 33F4:4650 37F5:0640  1598: NEXTTICK1
 33F4:4652 37F5:0642  1600: GOTO .-44 (goto 1556)
 33F4:4656 37F5:0646  1604: Move_ct:1396 = Move_ct:1396 - #I1:17
 33F4:4664 37F5:0654  1618: GOTO .-90 (goto 1528)
 33F4:4668 37F5:0658  1622: Trl_number:2305 = Trl_number:2305 + #I1:17

PROCESS  70: KEY_REWD (Args=0 CtrlBlk=33F4:286C Size=190  iOp=2-191 iCache=103880-104069) DISABLED
 33F4:4012 37F5:0002     0: #L0:145 = Base_Reward_time:774 == #I0:16
 33F4:4020 37F5:0010    14: IFnot (#L0:145) GOTO .+22 (goto 36)
 33F4:4028 37F5:0018    22: juice_duration@70:1299 = #I80:134
 33F4:4032 37F5:0022    32: GOTO .+14 (goto 46)
 33F4:4036 37F5:0026    36: juice_duration@70:1299 = Base_Reward_time:774
 33F4:4040 37F5:0030    46: #L0:145 = Success_Tone_medR:2191 == #I0:16
 33F4:404E 37F5:003E    60: IFnot (#L0:145) GOTO .+22 (goto 82)
 33F4:4056 37F5:0046    68: tone_freq@70:2285 = #I600:122
 33F4:4060 37F5:0050    78: GOTO .+14 (goto 92)
 33F4:4064 37F5:0054    82: tone_freq@70:2285 = Success_Tone_medR:2191
 33F4:406E 37F5:005E    92: #L0:145 = Tone_Duration:2282 == #I0:16
 33F4:407C 37F5:006C   106: IFnot (#L0:145) GOTO .+22 (goto 128)
 33F4:4084 37F5:0074   114: tone_durr@70:2284 = #I30:75
 33F4:408E 37F5:007E   124: GOTO .+14 (goto 138)
 33F4:4092 37F5:0082   128: tone_durr@70:2284 = Tone_Duration:2282
 33F4:409C 37F5:008C   138: #P1:241 = Juice_channel:1298
 33F4:40A6 37F5:0096   148: #P2:246 = juice_duration@70:1299
 33F4:40B0 37F5:00A0   158: SPAWN JUICE:1297(with 2 args)
 33F4:40B6 37F5:00A6   164: #P1:241 = tone_freq@70:2285
 33F4:40C0 37F5:00B0   174: #P2:246 = tone_durr@70:2284
 33F4:40CA 37F5:00BA   184: SPAWN TONE:2280(with 2 args)

PROCESS  71: KEY_T_UP (Args=0 CtrlBlk=33F4:2898 Size= 50  iOp=2-51 iCache=104070-104119) DISABLED
 33F4:4012 37F5:0002     0: #L0:145 = State:2116 == #I2:53
 33F4:4020 37F5:0010    14: IFnot (#L0:145) GOTO .+36 (goto 50)
 33F4:4028 37F5:0018    22: #L1:146 = Fixation_Target:1151 + #I1:17
 33F4:4036 37F5:0026    36: Fixation_Target:1151 = #L1:146 % #I9:140

PROCESS  72: KEY_T_DN (Args=0 CtrlBlk=33F4:28C4 Size= 68  iOp=2-69 iCache=104120-104187) DISABLED
 33F4:4012 37F5:0002     0: #L0:145 = State:2116 == #I2:53
 33F4:4020 37F5:0010    14: IFnot (#L0:145) GOTO .+54 (goto 68)
 33F4:4028 37F5:0018    22: Fixation_Target:1151 = Fixation_Target:1151 - #I1:17
 33F4:4036 37F5:0026    36: #L0:145 = Fixation_Target:1151 == #I-1:7
 33F4:4044 37F5:0034    50: IFnot (#L0:145) GOTO .+18 (goto 68)
 33F4:404C 37F5:003C    58: Fixation_Target:1151 = #I8:133

PROCESS  73: FIXTRIAL (Args=4 CtrlBlk=33F4:28F0 Size=470  iOp=2-471 iCache=104188-104657) DISABLED
 33F4:4012 37F5:0002     0: allowed_fix_time@73:733 = #P1:241
 33F4:401C 37F5:000C    10: max_saccade_time@73:1358 = #P2:246
 33F4:4026 37F5:0016    20: targ_hold_time@73:2203 = #P3:247
 33F4:4030 37F5:0020    30: object_targ@73:1522 = #P4:248
 33F4:403A 37F5:002A    40: trl_running@73:2313 = #I1:17
 33F4:4044 37F5:0034    50: stage@73:2107 = need_targ@73:1420
 33F4:404E 37F5:003E    60: #L0 = CALL2 dSendf(#S386:587,target@73:2237)
 33F4:4058 37F5:0048    70: #L0 = CALL0 time()
 33F4:405E 37F5:004E    76: targ_time@73:2214 = F= targ_time@73:2214
 33F4:4068 37F5:0058    86: #L0 = CALL2 oSetAttribute(object_targ@73:1522,aVISIBLE:769)
 33F4:4072 37F5:0062    96: IFnot (trl_running@73:2313) GOTO .+374 (goto 470)
 33F4:407A 37F5:006A   104: #L0:145 = stage@73:2107 == need_targ@73:1420
 33F4:4088 37F5:0078   118: IFnot (#L0:145) GOTO .+122 (goto 240)
 33F4:4090 37F5:0080   126: IFnot (In_TargWin:1276) GOTO .+38 (goto 164)
 33F4:4098 37F5:0088   134: #L1 = CALL0 time()
 33F4:409E 37F5:008E   140: aquire_targ_time@73:756 = F= aquire_targ_time@73:756
 33F4:40A8 37F5:0098   150: stage@73:2107 = fixating@73:1101
 33F4:40B2 37F5:00A2   160: GOTO .+76 (goto 236)
 33F4:40B6 37F5:00A6   164: #L0 = CALL0 time()
 33F4:40BC 37F5:00AC   170: #F0:1 = targ_time@73:2214 F+ max_saccade_time@73:1358
 33F4:40CA 37F5:00BA   184: #L1:146 = #L0:145 F> #F0:1
 33F4:40D8 37F5:00C8   198: IFnot (#L1:146) GOTO .+38 (goto 236)
 33F4:40E0 37F5:00D0   206: #L2 = CALL2 dSendf(#S387:588,blank@73:790)
 33F4:40EA 37F5:00DA   216: #L0 = CALL2 oSetAttribute(object_targ@73:1522,aINVISIBLE:726)
 33F4:40F4 37F5:00E4   226: trl_running@73:2313 = #I0:16
 33F4:40FE 37F5:00EE   236: GOTO .+228 (goto 464)
 33F4:4102 37F5:00F2   240: #L0:145 = stage@73:2107 == fixating@73:1101
 33F4:4110 37F5:0100   254: IFnot (#L0:145) GOTO .+210 (goto 464)
 33F4:4118 37F5:0108   262: #L1:146 = ! In_TargWin:1276
 33F4:4126 37F5:0116   276: IFnot (#L1:146) GOTO .+50 (goto 326)
 33F4:412E 37F5:011E   284: #L2 = CALL2 dSendf(#S388:589,blank@73:790)
 33F4:4138 37F5:0128   294: #L0 = CALL2 oSetAttribute(object_targ@73:1522,aINVISIBLE:726)
 33F4:4142 37F5:0132   304: #L0 = CALL1 print(#S389:590)
 33F4:414A 37F5:013A   312: trl_running@73:2313 = #I0:16
 33F4:4154 37F5:0144   322: GOTO .+142 (goto 464)
 33F4:4158 37F5:0148   326: #L0 = CALL0 time()
 33F4:415E 37F5:014E   332: #F0:1 = aquire_targ_time@73:756 F+ targ_hold_time@73:2203
 33F4:416C 37F5:015C   346: #L1:146 = #L0:145 F> #F0:1
 33F4:417A 37F5:016A   360: #L2:156 = In_TargWin:1276 && #L1:146
 33F4:4188 37F5:0178   374: IFnot (#L2:156) GOTO .+90 (goto 464)
 33F4:4190 37F5:0180   382: #L3 = CALL2 dSendf(#S390:592,blank@73:790)
 33F4:419A 37F5:018A   392: #L0 = CALL2 oSetAttribute(object_targ@73:1522,aINVISIBLE:726)
 33F4:41A4 37F5:0194   402: #P1:241 = Success_Tone_medR:2191
 33F4:41AE 37F5:019E   412: #P2:246 = Tone_Duration:2282
 33F4:41B8 37F5:01A8   422: SPAWN TONE:2280(with 2 args)
 33F4:41BE 37F5:01AE   428: #P1:241 = Juice_channel:1298
 33F4:41C8 37F5:01B8   438: #P2:246 = Base_Reward_time:774
 33F4:41D2 37F5:01C2   448: SPAWN JUICE:1297(with 2 args)
 33F4:41D8 37F5:01C8   454: trl_running@73:2313 = #I0:16
 33F4:41E2 37F5:01D2   464: NEXTTICK1
 33F4:41E4 37F5:01D4   466: GOTO .-370 (goto 96)

PROCESS  74: FIXATION (Args=0 CtrlBlk=33F4:291C Size=1032  iOp=2-1033 iCache=104658-105689) DISABLED
 33F4:4012 37F5:0002     0: #L0:145 = Last_task:1305 != run_fix_sess@74:1956
 33F4:4020 37F5:0010    14: IFnot (#L0:145) GOTO .+68 (goto 82)
 33F4:4028 37F5:0018    22: #L1 = CALL1 system(#S391:593)
 33F4:4030 37F5:0020    30: #P1:241 = State:2116
 33F4:403A 37F5:002A    40: #P2:246 = Monkey:1387
 33F4:4044 37F5:0034    50: #P3:247 = Room:1937
 33F4:404E 37F5:003E    60: SPAWN DEFAULT:953(with 3 args)
 33F4:4054 37F5:0044    66: WAITFORPROCESS DEFAULT:953
 33F4:405A 37F5:004A    72: Last_task:1305 = run_fix_sess@74:1956
 33F4:4064 37F5:0054    82: #L0:145 = ! OK:1530
 33F4:4072 37F5:0062    96: IFnot (#L0:145) GOTO .+74 (goto 170)
 33F4:407A 37F5:006A   104: NEXTTICK1
 33F4:407C 37F5:006C   106: IFnot (Set_monkey:2043) GOTO .+60 (goto 166)
 33F4:4084 37F5:0074   114: #P1:241 = State:2116
 33F4:408E 37F5:007E   124: #P2:246 = Monkey:1387
 33F4:4098 37F5:0088   134: #P3:247 = Room:1937
 33F4:40A2 37F5:0092   144: SPAWN DEFAULT:953(with 3 args)
 33F4:40A8 37F5:0098   150: WAITFORPROCESS DEFAULT:953
 33F4:40AE 37F5:009E   156: Set_monkey:2043 = #I0:16
 33F4:40B8 37F5:00A8   166: GOTO .-84 (goto 82)
 33F4:40BC 37F5:00AC   170: #L0:145 = fix_manual:1072 == #I1:17
 33F4:40CA 37F5:00BA   184: IFnot (#L0:145) GOTO .+442 (goto 626)
 33F4:40D2 37F5:00C2   192: Trl_number:2305 = #I1:17
 33F4:40DC 37F5:00CC   202: #L0 = CALL1 system(#S392:594)
 33F4:40E4 37F5:00D4   210: #L0 = CALL1 system(#S393:595)
 33F4:40EC 37F5:00DC   218: #L0 = CALL1 system(#S394:596)
 33F4:40F4 37F5:00E4   226: #L0 = CALL1 system(#S395:597)
 33F4:40FC 37F5:00EC   234: #P1:241 = State:2116
 33F4:4106 37F5:00F6   244: SPAWN GOODVARS:1213(with 1 args)
 33F4:410C 37F5:00FC   250: WAITFORPROCESS GOODVARS:1213
 33F4:4112 37F5:0102   256: #P1:241 = N_targ_pos:1407
 33F4:411C 37F5:010C   266: SPAWN SET_CLRS:2039(with 1 args)
 33F4:4122 37F5:0112   272: WAITFORPROCESS SET_CLRS:2039
 33F4:4128 37F5:0118   278: NEXTTICK #I10:18
 33F4:412C 37F5:011C   282: #L0:145 = State:2116 == run_fix_sess@74:1956
 33F4:413A 37F5:012A   296: IFnot (#L0:145) GOTO .+228 (goto 524)
 33F4:4142 37F5:0132   304: #P1:241 = Fixation_Target:1151
 33F4:414C 37F5:013C   314: #Q2:260 = F= #Q2:260
 33F4:4156 37F5:0146   324: #Q3:261 = F= #Q3:261
 33F4:4160 37F5:0150   334: #P4:248 = object_fixwin:1469
 33F4:416A 37F5:015A   344: #P5:249 = object_targwin:1523
 33F4:4174 37F5:0164   354: #Q6:264 = F= #Q6:264
 33F4:417E 37F5:016E   364: #Q7:265 = F= #Q7:265
 33F4:4188 37F5:0178   374: SPAWN WINDOWS:2366(with 7 args)
 33F4:418E 37F5:017E   380: WAITFORPROCESS WINDOWS:2366
 33F4:4194 37F5:0184   386: #L0 = CALL2 oSetAttribute(object_fixwin:1469,aINVISIBLE:726)
 33F4:419E 37F5:018E   396: #P1:241 = Fixation_Target:1151
 33F4:41A8 37F5:0198   406: #Q2:260 = F= #Q2:260
 33F4:41B2 37F5:01A2   416: #Q3:261 = F= #Q3:261
 33F4:41BC 37F5:01AC   426: #P4:248 = object_targ:1513
 33F4:41C6 37F5:01B6   436: SPAWN FIX_PGS:1082(with 4 args)
 33F4:41CC 37F5:01BC   442: WAITFORPROCESS FIX_PGS:1082
 33F4:41D2 37F5:01C2   448: #P1:241 = Allowed_fix_time:727
 33F4:41DC 37F5:01CC   458: #P2:246 = Max_saccade_time:1352
 33F4:41E6 37F5:01D6   468: #P3:247 = Targ_hold_time:2197
 33F4:41F0 37F5:01E0   478: #P4:248 = object_targ:1513
 33F4:41FA 37F5:01EA   488: SPAWN FIXTRIAL:1165(with 4 args)
 33F4:4200 37F5:01F0   494: WAITFORPROCESS FIXTRIAL:1165
 33F4:4206 37F5:01F6   500: Trl_number:2305 = Trl_number:2305 + #I1:17
 33F4:4214 37F5:0204   514: NEXTTICK1
 33F4:4216 37F5:0206   516: WAIT Inter_trl_int:1282
 33F4:421A 37F5:020A   520: GOTO .-238 (goto 282)
 33F4:421E 37F5:020E   524: State:2116 = run_idle@74:1968
 33F4:4228 37F5:0218   534: #L0 = CALL1 oDestroy(object_fixwin:1469)
 33F4:4230 37F5:0220   542: #L0 = CALL1 oDestroy(object_targwin:1523)
 33F4:4238 37F5:0228   550: #L0 = CALL1 oDestroy(object_fix:1463)
 33F4:4240 37F5:0230   558: #L0 = CALL1 oDestroy(object_targ:1513)
 33F4:4248 37F5:0238   566: #L0 = CALL1 oDestroy(object_eye:1462)
 33F4:4250 37F5:0240   574: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:425A 37F5:024A   584: #L0 = CALL1 system(#S396:598)
 33F4:4262 37F5:0252   592: #L0 = CALL1 system(#S397:599)
 33F4:426A 37F5:025A   600: #L0 = CALL1 system(#S398:600)
 33F4:4272 37F5:0262   608: #L0 = CALL1 system(#S399:601)
 33F4:427A 37F5:026A   616: SPAWN IDLE:1245(with 0 args)
 33F4:4280 37F5:0270   622: GOTO .+410 (goto 1032)
 33F4:4284 37F5:0274   626: #L0:145 = fix_manual:1072 == #I0:16
 33F4:4292 37F5:0282   640: IFnot (#L0:145) GOTO .+392 (goto 1032)
 33F4:429A 37F5:028A   648: Trl_number:2305 = #I1:17
 33F4:42A4 37F5:0294   658: Inter_trl_int:1282 = #I1500:43
 33F4:42AE 37F5:029E   668: #P1:241 = State:2116
 33F4:42B8 37F5:02A8   678: SPAWN GOODVARS:1213(with 1 args)
 33F4:42BE 37F5:02AE   684: WAITFORPROCESS GOODVARS:1213
 33F4:42C4 37F5:02B4   690: #P1:241 = N_targ_pos:1407
 33F4:42CE 37F5:02BE   700: SPAWN SET_CLRS:2039(with 1 args)
 33F4:42D4 37F5:02C4   706: WAITFORPROCESS SET_CLRS:2039
 33F4:42DA 37F5:02CA   712: NEXTTICK #I10:18
 33F4:42DE 37F5:02CE   716: #L0:145 = State:2116 == run_fix_sess@74:1956
 33F4:42EC 37F5:02DC   730: IFnot (#L0:145) GOTO .+236 (goto 966)
 33F4:42F4 37F5:02E4   738: Fixation_Target = CALL1 random(#I9:140)
 33F4:42FC 37F5:02EC   746: #P1:241 = Fixation_Target:1151
 33F4:4306 37F5:02F6   756: #Q2:260 = F= #Q2:260
 33F4:4310 37F5:0300   766: #Q3:261 = F= #Q3:261
 33F4:431A 37F5:030A   776: #P4:248 = object_fixwin:1469
 33F4:4324 37F5:0314   786: #P5:249 = object_targwin:1523
 33F4:432E 37F5:031E   796: #Q6:264 = F= #Q6:264
 33F4:4338 37F5:0328   806: #Q7:265 = F= #Q7:265
 33F4:4342 37F5:0332   816: SPAWN WINDOWS:2366(with 7 args)
 33F4:4348 37F5:0338   822: WAITFORPROCESS WINDOWS:2366
 33F4:434E 37F5:033E   828: #L0 = CALL2 oSetAttribute(object_fixwin:1469,aINVISIBLE:726)
 33F4:4358 37F5:0348   838: #P1:241 = Fixation_Target:1151
 33F4:4362 37F5:0352   848: #Q2:260 = F= #Q2:260
 33F4:436C 37F5:035C   858: #Q3:261 = F= #Q3:261
 33F4:4376 37F5:0366   868: #P4:248 = object_targ:1513
 33F4:4380 37F5:0370   878: SPAWN FIX_PGS:1082(with 4 args)
 33F4:4386 37F5:0376   884: WAITFORPROCESS FIX_PGS:1082
 33F4:438C 37F5:037C   890: #P1:241 = Allowed_fix_time:727
 33F4:4396 37F5:0386   900: #P2:246 = Max_saccade_time:1352
 33F4:43A0 37F5:0390   910: #P3:247 = Targ_hold_time:2197
 33F4:43AA 37F5:039A   920: #P4:248 = object_targ:1513
 33F4:43B4 37F5:03A4   930: SPAWN FIXTRIAL:1165(with 4 args)
 33F4:43BA 37F5:03AA   936: WAITFORPROCESS FIXTRIAL:1165
 33F4:43C0 37F5:03B0   942: Trl_number:2305 = Trl_number:2305 + #I1:17
 33F4:43CE 37F5:03BE   956: NEXTTICK1
 33F4:43D0 37F5:03C0   958: WAIT Inter_trl_int:1282
 33F4:43D4 37F5:03C4   962: GOTO .-246 (goto 716)
 33F4:43D8 37F5:03C8   966: State:2116 = run_idle@74:1968
 33F4:43E2 37F5:03D2   976: #L0 = CALL1 oDestroy(object_fixwin:1469)
 33F4:43EA 37F5:03DA   984: #L0 = CALL1 oDestroy(object_targwin:1523)
 33F4:43F2 37F5:03E2   992: #L0 = CALL1 oDestroy(object_fix:1463)
 33F4:43FA 37F5:03EA  1000: #L0 = CALL1 oDestroy(object_targ:1513)
 33F4:4402 37F5:03F2  1008: #L0 = CALL1 oDestroy(object_eye:1462)
 33F4:440A 37F5:03FA  1016: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:4414 37F5:0404  1026: SPAWN IDLE:1245(with 0 args)

PROCESS  75: CMANDING (Args=0 CtrlBlk=33F4:2948 Size=990  iOp=2-991 iCache=105690-106679) DISABLED
 33F4:4012 37F5:0002     0: Trl_number:2305 = #I1:17
 33F4:401C 37F5:000C    10: Comp_Trl_number:853 = #I0:16
 33F4:4026 37F5:0016    20: Block_number:792 = #I1:17
 33F4:4030 37F5:0020    30: #L0:145 = Last_task:1305 != run_cmd_sess@75:1945
 33F4:403E 37F5:002E    44: IFnot (#L0:145) GOTO .+68 (goto 112)
 33F4:4046 37F5:0036    52: #L1 = CALL1 system(#S400:604)
 33F4:404E 37F5:003E    60: #P1:241 = State:2116
 33F4:4058 37F5:0048    70: #P2:246 = Monkey:1387
 33F4:4062 37F5:0052    80: #P3:247 = Room:1937
 33F4:406C 37F5:005C    90: SPAWN DEFAULT:953(with 3 args)
 33F4:4072 37F5:0062    96: WAITFORPROCESS DEFAULT:953
 33F4:4078 37F5:0068   102: Last_task:1305 = run_cmd_sess@75:1945
 33F4:4082 37F5:0072   112: #L0 = CALL1 dSend(#S401:605)
 33F4:408A 37F5:007A   120: IFnot (#I0:16) GOTO .+22 (goto 142)
 33F4:4092 37F5:0082   128: #L0 = CALL2 dSendf(#S402:606,#I1:17)
 33F4:409C 37F5:008C   138: GOTO .+14 (goto 152)
 33F4:40A0 37F5:0090   142: #L0 = CALL2 dSendf(#S403:607,#I2:53)
 33F4:40AA 37F5:009A   152: #L0 = CALL1 dSend(#S404:608)
 33F4:40B2 37F5:00A2   160: #L0:145 = ! OK:1530
 33F4:40C0 37F5:00B0   174: IFnot (#L0:145) GOTO .+74 (goto 248)
 33F4:40C8 37F5:00B8   182: NEXTTICK1
 33F4:40CA 37F5:00BA   184: IFnot (Set_monkey:2043) GOTO .+60 (goto 244)
 33F4:40D2 37F5:00C2   192: #P1:241 = State:2116
 33F4:40DC 37F5:00CC   202: #P2:246 = Monkey:1387
 33F4:40E6 37F5:00D6   212: #P3:247 = Room:1937
 33F4:40F0 37F5:00E0   222: SPAWN DEFAULT:953(with 3 args)
 33F4:40F6 37F5:00E6   228: WAITFORPROCESS DEFAULT:953
 33F4:40FC 37F5:00EC   234: Set_monkey:2043 = #I0:16
 33F4:4106 37F5:00F6   244: GOTO .-84 (goto 160)
 33F4:410A 37F5:00FA   248: #P1:241 = State:2116
 33F4:4114 37F5:0104   258: SPAWN GOODVARS:1213(with 1 args)
 33F4:411A 37F5:010A   264: WAITFORPROCESS GOODVARS:1213
 33F4:4120 37F5:0110   270: #P1:241 = Max_SSD:1363
 33F4:412A 37F5:011A   280: #P2:246 = Min_SSD:1385
 33F4:4134 37F5:0124   290: #P3:247 = N_SSDs:1402
 33F4:413E 37F5:012E   300: SPAWN SET_INH:2042(with 3 args)
 33F4:4144 37F5:0134   306: WAITFORPROCESS SET_INH:2042
 33F4:414A 37F5:013A   312: #P1:241 = N_targ_pos:1407
 33F4:4154 37F5:0144   322: SPAWN SET_CLRS:2039(with 1 args)
 33F4:415A 37F5:014A   328: WAITFORPROCESS SET_CLRS:2039
 33F4:4160 37F5:0150   334: #P1:241 = N_targ_pos:1407
 33F4:416A 37F5:015A   344: #Q2:260 = F= #Q2:260
 33F4:4174 37F5:0164   354: #Q3:261 = F= #Q3:261
 33F4:417E 37F5:016E   364: #Q4:262 = F= #Q4:262
 33F4:4188 37F5:0178   374: #P5:249 = Staircase:2110
 33F4:4192 37F5:0182   384: #P6:250 = N_SSDs:1402
 33F4:419C 37F5:018C   394: #P7:251 = Min_Holdtime:1373
 33F4:41A6 37F5:0196   404: #P8:252 = Max_Holdtime:1338
 33F4:41B0 37F5:01A0   414: #P9:253 = Expo_Jitter:1022
 33F4:41BA 37F5:01AA   424: SPAWN SETC_TRL:2047(with 9 args)
 33F4:41C0 37F5:01B0   430: WAITFORPROCESS SETC_TRL:2047
 33F4:41C6 37F5:01B6   436: Event_fifo:1019[Set_event:2041] = CmanHeader_:841
 33F4:41CE 37F5:01BE   444: #L0:145 = Set_event:2041 + #I1:17
 33F4:41DC 37F5:01CC   458: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41EA 37F5:01DA   472: Event_fifo:1019[Set_event:2041] = Identify_Room_:1244
 33F4:41F2 37F5:01E2   480: #L0:145 = Set_event:2041 + #I1:17
 33F4:4200 37F5:01F0   494: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:420E 37F5:01FE   508: Event_fifo:1019[Set_event:2041] = Room:1937
 33F4:4216 37F5:0206   516: #L0:145 = Set_event:2041 + #I1:17
 33F4:4224 37F5:0214   530: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4232 37F5:0222   544: NEXTTICK #I10:18
 33F4:4236 37F5:0226   548: CheckMotion:835 = #I1:17
 33F4:4240 37F5:0230   558: SPAWN WATCHMTH:2363(with 0 args)
 33F4:4246 37F5:0236   564: SPAWN WATCHBOD:2361(with 0 args)
 33F4:424C 37F5:023C   570: #L0:145 = State:2116 == run_cmd_sess@75:1945
 33F4:425A 37F5:024A   584: IFnot (#L0:145) GOTO .+152 (goto 736)
 33F4:4262 37F5:0252   592: #P1:241 = Allowed_fix_time:727
 33F4:426C 37F5:025C   602: #P2:246 = Curr_holdtime:879
 33F4:4276 37F5:0266   612: #P3:247 = Trl_type:2318
 33F4:4280 37F5:0270   622: #P4:248 = Max_saccade_time:1352
 33F4:428A 37F5:027A   632: #P5:249 = Curr_SSD:890
 33F4:4294 37F5:0284   642: #P6:250 = Cancl_time:815
 33F4:429E 37F5:028E   652: #P7:251 = Max_sacc_duration:1346
 33F4:42A8 37F5:0298   662: #P8:252 = Targ_hold_time:2197
 33F4:42B2 37F5:02A2   672: #P9:253 = object_fix:1463
 33F4:42BC 37F5:02AC   682: SPAWN CMDTRIAL:843(with 9 args)
 33F4:42C2 37F5:02B2   688: WAITFORPROCESS CMDTRIAL:843
 33F4:42C8 37F5:02B8   694: #P1:241 = Trl_Outcome:2306
 33F4:42D2 37F5:02C2   704: SPAWN END_TRL:1013(with 1 args)
 33F4:42D8 37F5:02C8   710: WAITFORPROCESS END_TRL:1013
 33F4:42DE 37F5:02CE   716: NEXTTICK1
 33F4:42E0 37F5:02D0   718: IFnot (Pause:1561) GOTO .+14 (goto 732)
 33F4:42E8 37F5:02D8   726: NEXTTICK1
 33F4:42EA 37F5:02DA   728: GOTO .-10 (goto 718)
 33F4:42EE 37F5:02DE   732: GOTO .-162 (goto 570)
 33F4:42F2 37F5:02E2   736: State:2116 = run_idle@75:1969
 33F4:42FC 37F5:02EC   746: CheckMotion:835 = #I0:16
 33F4:4306 37F5:02F6   756: #L0 = CALL1 oDestroy(object_fixwin:1469)
 33F4:430E 37F5:02FE   764: #L0 = CALL1 oDestroy(object_targwin:1523)
 33F4:4316 37F5:0306   772: #L0 = CALL1 oDestroy(object_fix:1463)
 33F4:431E 37F5:030E   780: #L0 = CALL1 oDestroy(object_targ:1513)
 33F4:4326 37F5:0316   788: #L0 = CALL1 oDestroy(object_eye:1462)
 33F4:432E 37F5:031E   796: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:4338 37F5:0328   806: #L0 = CALL1 oDestroy(object_ssd0:1493)
 33F4:4340 37F5:0330   814: #L0 = CALL1 oDestroy(object_ssd1:1494)
 33F4:4348 37F5:0338   822: #L0 = CALL1 oDestroy(object_ssd2:1505)
 33F4:4350 37F5:0340   830: #L0 = CALL1 oDestroy(object_ssd3:1506)
 33F4:4358 37F5:0348   838: #L0 = CALL1 oDestroy(object_ssd4:1507)
 33F4:4360 37F5:0350   846: #L0 = CALL1 oDestroy(object_ssd5:1508)
 33F4:4368 37F5:0358   854: #L0 = CALL1 oDestroy(object_ssd6:1509)
 33F4:4370 37F5:0360   862: #L0 = CALL1 oDestroy(object_ssd7:1510)
 33F4:4378 37F5:0368   870: #L0 = CALL1 oDestroy(object_ssd8:1511)
 33F4:4380 37F5:0370   878: #L0 = CALL1 oDestroy(object_ssd9:1512)
 33F4:4388 37F5:0378   886: #L0 = CALL1 oDestroy(object_ssd10:1495)
 33F4:4390 37F5:0380   894: #L0 = CALL1 oDestroy(object_ssd11:1496)
 33F4:4398 37F5:0388   902: #L0 = CALL1 oDestroy(object_ssd12:1497)
 33F4:43A0 37F5:0390   910: #L0 = CALL1 oDestroy(object_ssd13:1498)
 33F4:43A8 37F5:0398   918: #L0 = CALL1 oDestroy(object_ssd14:1499)
 33F4:43B0 37F5:03A0   926: #L0 = CALL1 oDestroy(object_ssd15:1500)
 33F4:43B8 37F5:03A8   934: #L0 = CALL1 oDestroy(object_ssd16:1501)
 33F4:43C0 37F5:03B0   942: #L0 = CALL1 oDestroy(object_ssd17:1502)
 33F4:43C8 37F5:03B8   950: #L0 = CALL1 oDestroy(object_ssd18:1503)
 33F4:43D0 37F5:03C0   958: #L0 = CALL1 oDestroy(object_ssd19:1504)
 33F4:43D8 37F5:03C8   966: #L0 = CALL1 oDestroy(object_30_70:1461)
 33F4:43E0 37F5:03D0   974: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:43EA 37F5:03DA   984: SPAWN IDLE:1245(with 0 args)

PROCESS  76: MGUIDE (Args=0 CtrlBlk=33F4:2974 Size=938  iOp=2-939 iCache=106680-107617) DISABLED
 33F4:4012 37F5:0002     0: Trl_number:2305 = #I1:17
 33F4:401C 37F5:000C    10: Comp_Trl_number:853 = #I0:16
 33F4:4026 37F5:0016    20: Block_number:792 = #I1:17
 33F4:4030 37F5:0020    30: #L0:145 = Last_task:1305 != run_mg_sess@76:1980
 33F4:403E 37F5:002E    44: IFnot (#L0:145) GOTO .+68 (goto 112)
 33F4:4046 37F5:0036    52: #L1 = CALL1 system(#S405:609)
 33F4:404E 37F5:003E    60: #P1:241 = State:2116
 33F4:4058 37F5:0048    70: #P2:246 = Monkey:1387
 33F4:4062 37F5:0052    80: #P3:247 = Room:1937
 33F4:406C 37F5:005C    90: SPAWN DEFAULT:953(with 3 args)
 33F4:4072 37F5:0062    96: WAITFORPROCESS DEFAULT:953
 33F4:4078 37F5:0068   102: Last_task:1305 = run_mg_sess@76:1980
 33F4:4082 37F5:0072   112: #L0 = CALL1 dSend(#S406:610)
 33F4:408A 37F5:007A   120: IFnot (#I0:16) GOTO .+22 (goto 142)
 33F4:4092 37F5:0082   128: #L0 = CALL2 dSendf(#S407:611,#I1:17)
 33F4:409C 37F5:008C   138: GOTO .+14 (goto 152)
 33F4:40A0 37F5:0090   142: #L0 = CALL2 dSendf(#S408:612,#I2:53)
 33F4:40AA 37F5:009A   152: #L0 = CALL1 dSend(#S409:613)
 33F4:40B2 37F5:00A2   160: #L0:145 = ! OK:1530
 33F4:40C0 37F5:00B0   174: IFnot (#L0:145) GOTO .+74 (goto 248)
 33F4:40C8 37F5:00B8   182: NEXTTICK1
 33F4:40CA 37F5:00BA   184: IFnot (Set_monkey:2043) GOTO .+60 (goto 244)
 33F4:40D2 37F5:00C2   192: #P1:241 = State:2116
 33F4:40DC 37F5:00CC   202: #P2:246 = Monkey:1387
 33F4:40E6 37F5:00D6   212: #P3:247 = Room:1937
 33F4:40F0 37F5:00E0   222: SPAWN DEFAULT:953(with 3 args)
 33F4:40F6 37F5:00E6   228: WAITFORPROCESS DEFAULT:953
 33F4:40FC 37F5:00EC   234: Set_monkey:2043 = #I0:16
 33F4:4106 37F5:00F6   244: GOTO .-84 (goto 160)
 33F4:410A 37F5:00FA   248: #P1:241 = Max_SOA:1359
 33F4:4114 37F5:0104   258: #P2:246 = Min_SOA:1381
 33F4:411E 37F5:010E   268: #P3:247 = N_SOAs:1399
 33F4:4128 37F5:0118   278: SPAWN SET_SOA:2045(with 3 args)
 33F4:412E 37F5:011E   284: WAITFORPROCESS SET_SOA:2045
 33F4:4134 37F5:0124   290: #P1:241 = N_targ_pos:1407
 33F4:413E 37F5:012E   300: SPAWN SET_CLRS:2039(with 1 args)
 33F4:4144 37F5:0134   306: WAITFORPROCESS SET_CLRS:2039
 33F4:414A 37F5:013A   312: #P1:241 = N_targ_pos:1407
 33F4:4154 37F5:0144   322: #Q2:260 = F= #Q2:260
 33F4:415E 37F5:014E   332: #Q3:261 = F= #Q3:261
 33F4:4168 37F5:0158   342: #Q4:262 = F= #Q4:262
 33F4:4172 37F5:0162   352: #P5:249 = N_SOAs:1399
 33F4:417C 37F5:016C   362: #P6:250 = Min_Holdtime:1373
 33F4:4186 37F5:0176   372: #P7:251 = Max_Holdtime:1338
 33F4:4190 37F5:0180   382: #P8:252 = Expo_Jitter:1022
 33F4:419A 37F5:018A   392: #P9:253 = Expo_Jitter_SOA:1028
 33F4:41A4 37F5:0194   402: SPAWN SETMGTRL:2050(with 9 args)
 33F4:41AA 37F5:019A   408: WAITFORPROCESS SETMGTRL:2050
 33F4:41B0 37F5:01A0   414: Event_fifo:1019[Set_event:2041] = MemHeader_:1369
 33F4:41B8 37F5:01A8   422: #L0:145 = Set_event:2041 + #I1:17
 33F4:41C6 37F5:01B6   436: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41D4 37F5:01C4   450: Event_fifo:1019[Set_event:2041] = Identify_Room_:1244
 33F4:41DC 37F5:01CC   458: #L0:145 = Set_event:2041 + #I1:17
 33F4:41EA 37F5:01DA   472: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41F8 37F5:01E8   486: Event_fifo:1019[Set_event:2041] = Room:1937
 33F4:4200 37F5:01F0   494: #L0:145 = Set_event:2041 + #I1:17
 33F4:420E 37F5:01FE   508: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:421C 37F5:020C   522: NEXTTICK #I10:18
 33F4:4220 37F5:0210   526: #L0:145 = State:2116 == run_mg_sess@76:1980
 33F4:422E 37F5:021E   540: IFnot (#L0:145) GOTO .+152 (goto 692)
 33F4:4236 37F5:0226   548: #P1:241 = Allowed_fix_time:727
 33F4:4240 37F5:0230   558: #P2:246 = Curr_holdtime:879
 33F4:424A 37F5:023A   568: #P3:247 = Trl_type:2318
 33F4:4254 37F5:0244   578: #P4:248 = Max_saccade_time:1352
 33F4:425E 37F5:024E   588: #P5:249 = Curr_soa:885
 33F4:4268 37F5:0258   598: #P6:250 = Cancl_time:815
 33F4:4272 37F5:0262   608: #P7:251 = Max_sacc_duration:1346
 33F4:427C 37F5:026C   618: #P8:252 = Targ_hold_time:2197
 33F4:4286 37F5:0276   628: #P9:253 = object_fix:1463
 33F4:4290 37F5:0280   638: SPAWN MGTRIAL:1371(with 9 args)
 33F4:4296 37F5:0286   644: WAITFORPROCESS MGTRIAL:1371
 33F4:429C 37F5:028C   650: #P1:241 = Trl_Outcome:2306
 33F4:42A6 37F5:0296   660: SPAWN END_TRL:1013(with 1 args)
 33F4:42AC 37F5:029C   666: WAITFORPROCESS END_TRL:1013
 33F4:42B2 37F5:02A2   672: NEXTTICK1
 33F4:42B4 37F5:02A4   674: IFnot (Pause:1561) GOTO .+14 (goto 688)
 33F4:42BC 37F5:02AC   682: NEXTTICK1
 33F4:42BE 37F5:02AE   684: GOTO .-10 (goto 674)
 33F4:42C2 37F5:02B2   688: GOTO .-162 (goto 526)
 33F4:42C6 37F5:02B6   692: State:2116 = run_idle@76:1970
 33F4:42D0 37F5:02C0   702: CheckMotion:835 = #I0:16
 33F4:42DA 37F5:02CA   712: #L0 = CALL1 oDestroy(object_fixwin:1469)
 33F4:42E2 37F5:02D2   720: #L0 = CALL1 oDestroy(object_targwin:1523)
 33F4:42EA 37F5:02DA   728: #L0 = CALL1 oDestroy(object_fix:1463)
 33F4:42F2 37F5:02E2   736: #L0 = CALL1 oDestroy(object_targ:1513)
 33F4:42FA 37F5:02EA   744: #L0 = CALL1 oDestroy(object_eye:1462)
 33F4:4302 37F5:02F2   752: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:430C 37F5:02FC   762: #L0 = CALL1 oDestroy(object_soa0:1473)
 33F4:4314 37F5:0304   770: #L0 = CALL1 oDestroy(object_soa1:1474)
 33F4:431C 37F5:030C   778: #L0 = CALL1 oDestroy(object_soa2:1485)
 33F4:4324 37F5:0314   786: #L0 = CALL1 oDestroy(object_soa3:1486)
 33F4:432C 37F5:031C   794: #L0 = CALL1 oDestroy(object_soa4:1487)
 33F4:4334 37F5:0324   802: #L0 = CALL1 oDestroy(object_soa5:1488)
 33F4:433C 37F5:032C   810: #L0 = CALL1 oDestroy(object_soa6:1489)
 33F4:4344 37F5:0334   818: #L0 = CALL1 oDestroy(object_soa7:1490)
 33F4:434C 37F5:033C   826: #L0 = CALL1 oDestroy(object_soa8:1491)
 33F4:4354 37F5:0344   834: #L0 = CALL1 oDestroy(object_soa9:1492)
 33F4:435C 37F5:034C   842: #L0 = CALL1 oDestroy(object_soa10:1475)
 33F4:4364 37F5:0354   850: #L0 = CALL1 oDestroy(object_soa11:1476)
 33F4:436C 37F5:035C   858: #L0 = CALL1 oDestroy(object_soa12:1477)
 33F4:4374 37F5:0364   866: #L0 = CALL1 oDestroy(object_soa13:1478)
 33F4:437C 37F5:036C   874: #L0 = CALL1 oDestroy(object_soa14:1479)
 33F4:4384 37F5:0374   882: #L0 = CALL1 oDestroy(object_soa15:1480)
 33F4:438C 37F5:037C   890: #L0 = CALL1 oDestroy(object_soa16:1481)
 33F4:4394 37F5:0384   898: #L0 = CALL1 oDestroy(object_soa17:1482)
 33F4:439C 37F5:038C   906: #L0 = CALL1 oDestroy(object_soa18:1483)
 33F4:43A4 37F5:0394   914: #L0 = CALL1 oDestroy(object_soa19:1484)
 33F4:43AC 37F5:039C   922: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:43B6 37F5:03A6   932: SPAWN IDLE:1245(with 0 args)

PROCESS  77: GONOGO (Args=0 CtrlBlk=33F4:29A0 Size=822  iOp=2-823 iCache=107618-108439) DISABLED
 33F4:4012 37F5:0002     0: Trl_number:2305 = #I1:17
 33F4:401C 37F5:000C    10: Block_number:792 = #I0:16
 33F4:4026 37F5:0016    20: LastStopOutcome:1308 = #I2:53
 33F4:4030 37F5:0020    30: #L0:145 = Last_task:1305 != run_gonogo_sess@77:1966
 33F4:403E 37F5:002E    44: IFnot (#L0:145) GOTO .+68 (goto 112)
 33F4:4046 37F5:0036    52: #L1 = CALL1 system(#S410:615)
 33F4:404E 37F5:003E    60: #P1:241 = State:2116
 33F4:4058 37F5:0048    70: #P2:246 = Monkey:1387
 33F4:4062 37F5:0052    80: #P3:247 = Room:1937
 33F4:406C 37F5:005C    90: SPAWN DEFAULT:953(with 3 args)
 33F4:4072 37F5:0062    96: WAITFORPROCESS DEFAULT:953
 33F4:4078 37F5:0068   102: Last_task:1305 = run_gonogo_sess@77:1966
 33F4:4082 37F5:0072   112: #L0 = CALL1 dSend(#S411:616)
 33F4:408A 37F5:007A   120: IFnot (#I0:16) GOTO .+22 (goto 142)
 33F4:4092 37F5:0082   128: #L0 = CALL2 dSendf(#S412:617,#I1:17)
 33F4:409C 37F5:008C   138: GOTO .+14 (goto 152)
 33F4:40A0 37F5:0090   142: #L0 = CALL2 dSendf(#S413:618,#I2:53)
 33F4:40AA 37F5:009A   152: #L0 = CALL1 dSend(#S414:619)
 33F4:40B2 37F5:00A2   160: #L0:145 = ! OK:1530
 33F4:40C0 37F5:00B0   174: IFnot (#L0:145) GOTO .+74 (goto 248)
 33F4:40C8 37F5:00B8   182: NEXTTICK1
 33F4:40CA 37F5:00BA   184: IFnot (Set_monkey:2043) GOTO .+60 (goto 244)
 33F4:40D2 37F5:00C2   192: #P1:241 = State:2116
 33F4:40DC 37F5:00CC   202: #P2:246 = Monkey:1387
 33F4:40E6 37F5:00D6   212: #P3:247 = Room:1937
 33F4:40F0 37F5:00E0   222: SPAWN DEFAULT:953(with 3 args)
 33F4:40F6 37F5:00E6   228: WAITFORPROCESS DEFAULT:953
 33F4:40FC 37F5:00EC   234: Set_monkey:2043 = #I0:16
 33F4:4106 37F5:00F6   244: GOTO .-84 (goto 160)
 33F4:410A 37F5:00FA   248: #P1:241 = State:2116
 33F4:4114 37F5:0104   258: SPAWN GOODVARS:1213(with 1 args)
 33F4:411A 37F5:010A   264: WAITFORPROCESS GOODVARS:1213
 33F4:4120 37F5:0110   270: #P1:241 = N_targ_pos:1407
 33F4:412A 37F5:011A   280: SPAWN SET_CLRS:2039(with 1 args)
 33F4:4130 37F5:0120   286: WAITFORPROCESS SET_CLRS:2039
 33F4:4136 37F5:0126   292: #P1:241 = N_targ_pos:1407
 33F4:4140 37F5:0130   302: #P2:246 = Min_Holdtime:1373
 33F4:414A 37F5:013A   312: #P3:247 = Max_Holdtime:1338
 33F4:4154 37F5:0144   322: #P4:248 = Expo_Jitter:1022
 33F4:415E 37F5:014E   332: #P5:249 = Min_SOA:1381
 33F4:4168 37F5:0158   342: #P6:250 = Max_SOA:1359
 33F4:4172 37F5:0162   352: #P7:251 = Expo_Jitter_SOA:1028
 33F4:417C 37F5:016C   362: SPAWN SETG_TRL:2049(with 7 args)
 33F4:4182 37F5:0172   368: WAITFORPROCESS SETG_TRL:2049
 33F4:4188 37F5:0178   374: Event_fifo:1019[Set_event:2041] = MemHeader_:1369
 33F4:4190 37F5:0180   382: #L0:145 = Set_event:2041 + #I1:17
 33F4:419E 37F5:018E   396: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41AC 37F5:019C   410: Event_fifo:1019[Set_event:2041] = Identify_Room_:1244
 33F4:41B4 37F5:01A4   418: #L0:145 = Set_event:2041 + #I1:17
 33F4:41C2 37F5:01B2   432: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41D0 37F5:01C0   446: Event_fifo:1019[Set_event:2041] = Room:1937
 33F4:41D8 37F5:01C8   454: #L0:145 = Set_event:2041 + #I1:17
 33F4:41E6 37F5:01D6   468: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41F4 37F5:01E4   482: Event_fifo:1019[Set_event:2041] = Min_SOA:1381
 33F4:41FC 37F5:01EC   490: #L0:145 = Set_event:2041 + #I1:17
 33F4:420A 37F5:01FA   504: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4218 37F5:0208   518: Event_fifo:1019[Set_event:2041] = Max_SOA:1359
 33F4:4220 37F5:0210   526: #L0:145 = Set_event:2041 + #I1:17
 33F4:422E 37F5:021E   540: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:423C 37F5:022C   554: NEXTTICK #I10:18
 33F4:4240 37F5:0230   558: CheckMotion:835 = #I0:16
 33F4:424A 37F5:023A   568: SPAWN WATCHMTH:2363(with 0 args)
 33F4:4250 37F5:0240   574: SPAWN WATCHBOD:2361(with 0 args)
 33F4:4256 37F5:0246   580: #L0:145 = State:2116 == run_gonogo_sess@77:1966
 33F4:4264 37F5:0254   594: IFnot (#L0:145) GOTO .+152 (goto 746)
 33F4:426C 37F5:025C   602: #P1:241 = Allowed_fix_time:727
 33F4:4276 37F5:0266   612: #P2:246 = Curr_holdtime:879
 33F4:4280 37F5:0270   622: #P3:247 = Trl_type:2318
 33F4:428A 37F5:027A   632: #P4:248 = Max_saccade_time:1352
 33F4:4294 37F5:0284   642: #P5:249 = Curr_soa:885
 33F4:429E 37F5:028E   652: #P6:250 = Cancl_time:815
 33F4:42A8 37F5:0298   662: #P7:251 = Max_sacc_duration:1346
 33F4:42B2 37F5:02A2   672: #P8:252 = Targ_hold_time:2197
 33F4:42BC 37F5:02AC   682: #P9:253 = object_fix:1463
 33F4:42C6 37F5:02B6   692: SPAWN GNGTRIAL:1184(with 9 args)
 33F4:42CC 37F5:02BC   698: WAITFORPROCESS GNGTRIAL:1184
 33F4:42D2 37F5:02C2   704: #P1:241 = Trl_Outcome:2306
 33F4:42DC 37F5:02CC   714: SPAWN END_TRL:1013(with 1 args)
 33F4:42E2 37F5:02D2   720: WAITFORPROCESS END_TRL:1013
 33F4:42E8 37F5:02D8   726: NEXTTICK1
 33F4:42EA 37F5:02DA   728: IFnot (Pause:1561) GOTO .+14 (goto 742)
 33F4:42F2 37F5:02E2   736: NEXTTICK1
 33F4:42F4 37F5:02E4   738: GOTO .-10 (goto 728)
 33F4:42F8 37F5:02E8   742: GOTO .-162 (goto 580)
 33F4:42FC 37F5:02EC   746: State:2116 = run_idle@77:1971
 33F4:4306 37F5:02F6   756: CheckMotion:835 = #I0:16
 33F4:4310 37F5:0300   766: #L0 = CALL1 oDestroy(object_fixwin:1469)
 33F4:4318 37F5:0308   774: #L0 = CALL1 oDestroy(object_targwin:1523)
 33F4:4320 37F5:0310   782: #L0 = CALL1 oDestroy(object_fix:1463)
 33F4:4328 37F5:0318   790: #L0 = CALL1 oDestroy(object_targ:1513)
 33F4:4330 37F5:0320   798: #L0 = CALL1 oDestroy(object_eye:1462)
 33F4:4338 37F5:0328   806: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:4342 37F5:0332   816: SPAWN IDLE:1245(with 0 args)

PROCESS  78: DELAYED (Args=0 CtrlBlk=33F4:29CC Size=802  iOp=2-803 iCache=108440-109241) DISABLED
 33F4:4012 37F5:0002     0: Trl_number:2305 = #I1:17
 33F4:401C 37F5:000C    10: Block_number:792 = #I1:17
 33F4:4026 37F5:0016    20: LastStopOutcome:1308 = #I2:53
 33F4:4030 37F5:0020    30: Comp_Trl_number:853 = #I0:16
 33F4:403A 37F5:002A    40: #L0:145 = Last_task:1305 != run_delayed_sess@78:1952
 33F4:4048 37F5:0038    54: IFnot (#L0:145) GOTO .+68 (goto 122)
 33F4:4050 37F5:0040    62: #L1 = CALL1 system(#S415:620)
 33F4:4058 37F5:0048    70: #P1:241 = State:2116
 33F4:4062 37F5:0052    80: #P2:246 = Monkey:1387
 33F4:406C 37F5:005C    90: #P3:247 = Room:1937
 33F4:4076 37F5:0066   100: SPAWN DEFAULT:953(with 3 args)
 33F4:407C 37F5:006C   106: WAITFORPROCESS DEFAULT:953
 33F4:4082 37F5:0072   112: Last_task:1305 = run_delayed_sess@78:1952
 33F4:408C 37F5:007C   122: #L0 = CALL1 dSend(#S416:621)
 33F4:4094 37F5:0084   130: IFnot (#I0:16) GOTO .+22 (goto 152)
 33F4:409C 37F5:008C   138: #L0 = CALL2 dSendf(#S417:622,#I1:17)
 33F4:40A6 37F5:0096   148: GOTO .+14 (goto 162)
 33F4:40AA 37F5:009A   152: #L0 = CALL2 dSendf(#S418:623,#I2:53)
 33F4:40B4 37F5:00A4   162: #L0 = CALL1 dSend(#S419:624)
 33F4:40BC 37F5:00AC   170: #L0:145 = ! OK:1530
 33F4:40CA 37F5:00BA   184: IFnot (#L0:145) GOTO .+74 (goto 258)
 33F4:40D2 37F5:00C2   192: NEXTTICK1
 33F4:40D4 37F5:00C4   194: IFnot (Set_monkey:2043) GOTO .+60 (goto 254)
 33F4:40DC 37F5:00CC   202: #P1:241 = State:2116
 33F4:40E6 37F5:00D6   212: #P2:246 = Monkey:1387
 33F4:40F0 37F5:00E0   222: #P3:247 = Room:1937
 33F4:40FA 37F5:00EA   232: SPAWN DEFAULT:953(with 3 args)
 33F4:4100 37F5:00F0   238: WAITFORPROCESS DEFAULT:953
 33F4:4106 37F5:00F6   244: Set_monkey:2043 = #I0:16
 33F4:4110 37F5:0100   254: GOTO .-84 (goto 170)
 33F4:4114 37F5:0104   258: #P1:241 = State:2116
 33F4:411E 37F5:010E   268: SPAWN GOODVARS:1213(with 1 args)
 33F4:4124 37F5:0114   274: WAITFORPROCESS GOODVARS:1213
 33F4:412A 37F5:011A   280: #P1:241 = N_targ_pos:1407
 33F4:4134 37F5:0124   290: SPAWN SET_CLRS:2039(with 1 args)
 33F4:413A 37F5:012A   296: WAITFORPROCESS SET_CLRS:2039
 33F4:4140 37F5:0130   302: #P1:241 = N_targ_pos:1407
 33F4:414A 37F5:013A   312: #P2:246 = Min_Holdtime:1373
 33F4:4154 37F5:0144   322: #P3:247 = Max_Holdtime:1338
 33F4:415E 37F5:014E   332: #P4:248 = Expo_Jitter:1022
 33F4:4168 37F5:0158   342: #P5:249 = Min_SOA:1381
 33F4:4172 37F5:0162   352: #P6:250 = Max_SOA:1359
 33F4:417C 37F5:016C   362: #P7:251 = Expo_Jitter_SOA:1028
 33F4:4186 37F5:0176   372: SPAWN SETD_TRL:2048(with 7 args)
 33F4:418C 37F5:017C   378: WAITFORPROCESS SETD_TRL:2048
 33F4:4192 37F5:0182   384: Event_fifo:1019[Set_event:2041] = DelayedHeader_:982
 33F4:419A 37F5:018A   392: #L0:145 = Set_event:2041 + #I1:17
 33F4:41A8 37F5:0198   406: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41B6 37F5:01A6   420: Event_fifo:1019[Set_event:2041] = Identify_Room_:1244
 33F4:41BE 37F5:01AE   428: #L0:145 = Set_event:2041 + #I1:17
 33F4:41CC 37F5:01BC   442: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41DA 37F5:01CA   456: Event_fifo:1019[Set_event:2041] = Room:1937
 33F4:41E2 37F5:01D2   464: #L0:145 = Set_event:2041 + #I1:17
 33F4:41F0 37F5:01E0   478: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:41FE 37F5:01EE   492: Event_fifo:1019[Set_event:2041] = Min_SOA:1381
 33F4:4206 37F5:01F6   500: #L0:145 = Set_event:2041 + #I1:17
 33F4:4214 37F5:0204   514: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4222 37F5:0212   528: Event_fifo:1019[Set_event:2041] = Max_SOA:1359
 33F4:422A 37F5:021A   536: #L0:145 = Set_event:2041 + #I1:17
 33F4:4238 37F5:0228   550: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4246 37F5:0236   564: NEXTTICK #I10:18
 33F4:424A 37F5:023A   568: CheckMotion:835 = #I1:17
 33F4:4254 37F5:0244   578: SPAWN WATCHMTH:2363(with 0 args)
 33F4:425A 37F5:024A   584: SPAWN WATCHBOD:2361(with 0 args)
 33F4:4260 37F5:0250   590: #L0:145 = State:2116 == run_delayed_sess@78:1952
 33F4:426E 37F5:025E   604: IFnot (#L0:145) GOTO .+132 (goto 736)
 33F4:4276 37F5:0266   612: #P1:241 = Allowed_fix_time:727
 33F4:4280 37F5:0270   622: #P2:246 = Curr_holdtime:879
 33F4:428A 37F5:027A   632: #P3:247 = Curr_soa:885
 33F4:4294 37F5:0284   642: #P4:248 = Max_saccade_time:1352
 33F4:429E 37F5:028E   652: #P5:249 = Max_sacc_duration:1346
 33F4:42A8 37F5:0298   662: #P6:250 = Targ_hold_time:2197
 33F4:42B2 37F5:02A2   672: #P7:251 = object_fix:1463
 33F4:42BC 37F5:02AC   682: SPAWN DELTRIAL:983(with 7 args)
 33F4:42C2 37F5:02B2   688: WAITFORPROCESS DELTRIAL:983
 33F4:42C8 37F5:02B8   694: #P1:241 = Trl_Outcome:2306
 33F4:42D2 37F5:02C2   704: SPAWN END_TRL:1013(with 1 args)
 33F4:42D8 37F5:02C8   710: WAITFORPROCESS END_TRL:1013
 33F4:42DE 37F5:02CE   716: NEXTTICK1
 33F4:42E0 37F5:02D0   718: IFnot (Pause:1561) GOTO .+14 (goto 732)
 33F4:42E8 37F5:02D8   726: NEXTTICK1
 33F4:42EA 37F5:02DA   728: GOTO .-10 (goto 718)
 33F4:42EE 37F5:02DE   732: GOTO .-142 (goto 590)
 33F4:42F2 37F5:02E2   736: State:2116 = run_idle@78:1972
 33F4:42FC 37F5:02EC   746: #L0 = CALL1 oDestroy(object_fixwin:1469)
 33F4:4304 37F5:02F4   754: #L0 = CALL1 oDestroy(object_targwin:1523)
 33F4:430C 37F5:02FC   762: #L0 = CALL1 oDestroy(object_fix:1463)
 33F4:4314 37F5:0304   770: #L0 = CALL1 oDestroy(object_targ:1513)
 33F4:431C 37F5:030C   778: #L0 = CALL1 oDestroy(object_eye:1462)
 33F4:4324 37F5:0314   786: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:432E 37F5:031E   796: SPAWN IDLE:1245(with 0 args)

PROCESS  79: SEARCH (Args=0 CtrlBlk=33F4:29F8 Size=1110  iOp=2-1111 iCache=109242-110351) DISABLED
 33F4:4012 37F5:0002     0: LastStim:1307 = #I0:16
 33F4:401C 37F5:000C    10: Trl_number:2305 = #I1:17
 33F4:4026 37F5:0016    20: Rand_Comp_Trl_number:1860 = F= Rand_Comp_Trl_number:1860
 33F4:4030 37F5:0020    30: Rep_Comp_Trl_number:1921 = F= Rep_Comp_Trl_number:1921
 33F4:403A 37F5:002A    40: Rand_Comp_Trl_DP:1859 = F= Rand_Comp_Trl_DP:1859
 33F4:4044 37F5:0034    50: Rand_Comp_Trl_DA:1858 = F= Rand_Comp_Trl_DA:1858
 33F4:404E 37F5:003E    60: Block_number:792 = #I1:17
 33F4:4058 37F5:0048    70: rand_inacc_sacc:1892 = F= rand_inacc_sacc:1892
 33F4:4062 37F5:0052    80: rep_inacc_sacc:1922 = F= rep_inacc_sacc:1922
 33F4:406C 37F5:005C    90: RandPerAcc:1908 = #I0:16
 33F4:4076 37F5:0066   100: RepPerAcc:1927 = #I0:16
 33F4:4080 37F5:0070   110: Correct_trls:869 = #I0:16
 33F4:408A 37F5:007A   120: Consec_corr:854 = F= Consec_corr:854
 33F4:4094 37F5:0084   130: #L0:145 = Last_task:1305 != run_search_sess@79:1987
 33F4:40A2 37F5:0092   144: IFnot (#L0:145) GOTO .+68 (goto 212)
 33F4:40AA 37F5:009A   152: #L1 = CALL1 system(#S420:626)
 33F4:40B2 37F5:00A2   160: #P1:241 = State:2116
 33F4:40BC 37F5:00AC   170: #P2:246 = Monkey:1387
 33F4:40C6 37F5:00B6   180: #P3:247 = Room:1937
 33F4:40D0 37F5:00C0   190: SPAWN DEFAULT:953(with 3 args)
 33F4:40D6 37F5:00C6   196: WAITFORPROCESS DEFAULT:953
 33F4:40DC 37F5:00CC   202: Last_task:1305 = run_search_sess@79:1987
 33F4:40E6 37F5:00D6   212: #L0 = CALL1 dSend(#S421:627)
 33F4:40EE 37F5:00DE   220: IFnot (#I0:16) GOTO .+22 (goto 242)
 33F4:40F6 37F5:00E6   228: #L0 = CALL2 dSendf(#S422:628,#I1:17)
 33F4:4100 37F5:00F0   238: GOTO .+14 (goto 252)
 33F4:4104 37F5:00F4   242: #L0 = CALL2 dSendf(#S423:629,#I2:53)
 33F4:410E 37F5:00FE   252: #L0 = CALL1 dSend(#S424:630)
 33F4:4116 37F5:0106   260: #L0:145 = ! OK:1530
 33F4:4124 37F5:0114   274: IFnot (#L0:145) GOTO .+74 (goto 348)
 33F4:412C 37F5:011C   282: NEXTTICK1
 33F4:412E 37F5:011E   284: IFnot (Set_monkey:2043) GOTO .+60 (goto 344)
 33F4:4136 37F5:0126   292: #P1:241 = State:2116
 33F4:4140 37F5:0130   302: #P2:246 = Monkey:1387
 33F4:414A 37F5:013A   312: #P3:247 = Room:1937
 33F4:4154 37F5:0144   322: SPAWN DEFAULT:953(with 3 args)
 33F4:415A 37F5:014A   328: WAITFORPROCESS DEFAULT:953
 33F4:4160 37F5:0150   334: Set_monkey:2043 = #I0:16
 33F4:416A 37F5:015A   344: GOTO .-84 (goto 260)
 33F4:416E 37F5:015E   348: SPAWN SET_SCH:2044(with 0 args)
 33F4:4174 37F5:0164   354: WAITFORPROCESS SET_SCH:2044
 33F4:417A 37F5:016A   360: #P1:241 = N_targ_pos:1407
 33F4:4184 37F5:0174   370: SPAWN SET_CLRS:2039(with 1 args)
 33F4:418A 37F5:017A   376: WAITFORPROCESS SET_CLRS:2039
 33F4:4190 37F5:0180   382: #P1:241 = N_targ_pos:1407
 33F4:419A 37F5:018A   392: #Q2:260 = F= #Q2:260
 33F4:41A4 37F5:0194   402: #Q3:261 = F= #Q3:261
 33F4:41AE 37F5:019E   412: #Q4:262 = F= #Q4:262
 33F4:41B8 37F5:01A8   422: #P5:249 = Staircase:2110
 33F4:41C2 37F5:01B2   432: #P6:250 = N_SSDs:1402
 33F4:41CC 37F5:01BC   442: #P7:251 = Min_Holdtime:1373
 33F4:41D6 37F5:01C6   452: #P8:252 = Max_Holdtime:1338
 33F4:41E0 37F5:01D0   462: #P9:253 = Expo_Jitter:1022
 33F4:41EA 37F5:01DA   472: SPAWN SETS_TRL:2052(with 9 args)
 33F4:41F0 37F5:01E0   478: WAITFORPROCESS SETS_TRL:2052
 33F4:41F6 37F5:01E6   484: Event_fifo:1019[Set_event:2041] = SearchHeader_:2032
 33F4:41FE 37F5:01EE   492: #L0:145 = Set_event:2041 + #I1:17
 33F4:420C 37F5:01FC   506: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:421A 37F5:020A   520: Event_fifo:1019[Set_event:2041] = Room:1937
 33F4:4222 37F5:0212   528: #L0:145 = Set_event:2041 + #I1:17
 33F4:4230 37F5:0220   542: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:423E 37F5:022E   556: NEXTTICK #I10:18
 33F4:4242 37F5:0232   560: CheckMotion:835 = #I1:17
 33F4:424C 37F5:023C   570: SPAWN WATCHMTH:2363(with 0 args)
 33F4:4252 37F5:0242   576: SPAWN WATCHBOD:2361(with 0 args)
 33F4:4258 37F5:0248   582: #L0:145 = State:2116 == run_search_sess@79:1987
 33F4:4266 37F5:0256   596: IFnot (#L0:145) GOTO .+412 (goto 1008)
 33F4:426E 37F5:025E   604: #L1 = CALL0 time()
 33F4:4274 37F5:0264   610: #L2:156 = LastStim:1307 + StimInterval:2150
 33F4:4282 37F5:0272   624: #L3:157 = #L1:146 > #L2:156
 33F4:4290 37F5:0280   638: IFnot (#L3:157) GOTO .+224 (goto 862)
 33F4:4298 37F5:0288   646: LastStim = CALL0 time()
 33F4:429E 37F5:028E   652: #L0:145 = StimCond:2146 == #I1:17
 33F4:42AC 37F5:029C   666: IFnot (#L0:145) GOTO .+94 (goto 760)
 33F4:42B4 37F5:02A4   674: Event_fifo:1019[Set_event:2041] = ShamStim_:2054
 33F4:42BC 37F5:02AC   682: #L0:145 = Set_event:2041 + #I1:17
 33F4:42CA 37F5:02BA   696: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:42D8 37F5:02C8   710: StimCond:2146 = #I0:16
 33F4:42E2 37F5:02D2   720: Event_fifo:1019[Set_event:2041] = EndStim_:1015
 33F4:42EA 37F5:02DA   728: #L0:145 = Set_event:2041 + #I1:17
 33F4:42F8 37F5:02E8   742: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4306 37F5:02F6   756: GOTO .+106 (goto 862)
 33F4:430A 37F5:02FA   760: Event_fifo:1019[Set_event:2041] = Stimulation_:2152
 33F4:4312 37F5:0302   768: #L0:145 = Set_event:2041 + #I1:17
 33F4:4320 37F5:0310   782: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:432E 37F5:031E   796: StimCond:2146 = #I1:17
 33F4:4338 37F5:0328   806: pcnt@79:1562 = #I0:16
 33F4:4342 37F5:0332   816: #L0 = CALL2 printf(#S425:631,StimTm:2151)
 33F4:434C 37F5:033C   826: Event_fifo:1019[Set_event:2041] = EndStim_:1015
 33F4:4354 37F5:0344   834: #L0:145 = Set_event:2041 + #I1:17
 33F4:4362 37F5:0352   848: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4370 37F5:0360   862: #P1:241 = Allowed_fix_time:727
 33F4:437A 37F5:036A   872: #P2:246 = Curr_holdtime:879
 33F4:4384 37F5:0374   882: #P3:247 = Trl_type:2318
 33F4:438E 37F5:037E   892: #P4:248 = Max_saccade_time:1352
 33F4:4398 37F5:0388   902: #P5:249 = Curr_SSD:890
 33F4:43A2 37F5:0392   912: #P6:250 = Cancl_time:815
 33F4:43AC 37F5:039C   922: #P7:251 = Max_sacc_duration:1346
 33F4:43B6 37F5:03A6   932: #P8:252 = Targ_hold_time:2197
 33F4:43C0 37F5:03B0   942: #P9:253 = object_fix:1463
 33F4:43CA 37F5:03BA   952: SPAWN SCHTRIAL:2004(with 9 args)
 33F4:43D0 37F5:03C0   958: WAITFORPROCESS SCHTRIAL:2004
 33F4:43D6 37F5:03C6   964: #P1:241 = Trl_Outcome:2306
 33F4:43E0 37F5:03D0   974: SPAWN END_TRL:1013(with 1 args)
 33F4:43E6 37F5:03D6   980: WAITFORPROCESS END_TRL:1013
 33F4:43EC 37F5:03DC   986: NEXTTICK #I5:111
 33F4:43F0 37F5:03E0   990: IFnot (Pause:1561) GOTO .+14 (goto 1004)
 33F4:43F8 37F5:03E8   998: NEXTTICK1
 33F4:43FA 37F5:03EA  1000: GOTO .-10 (goto 990)
 33F4:43FE 37F5:03EE  1004: GOTO .-422 (goto 582)
 33F4:4402 37F5:03F2  1008: State:2116 = run_idle@79:1973
 33F4:440C 37F5:03FC  1018: CheckMotion:835 = #I0:16
 33F4:4416 37F5:0406  1028: #L0 = CALL1 oDestroy(object_fixwin:1469)
 33F4:441E 37F5:040E  1036: #L0 = CALL1 oDestroy(object_targwin:1523)
 33F4:4426 37F5:0416  1044: #L0 = CALL1 oDestroy(object_fix:1463)
 33F4:442E 37F5:041E  1052: #L0 = CALL1 oDestroy(object_targ:1513)
 33F4:4436 37F5:0426  1060: #L0 = CALL1 oDestroy(object_eye:1462)
 33F4:443E 37F5:042E  1068: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:4448 37F5:0438  1078: #L0 = CALL1 oDestroy(object_repeat:1472)
 33F4:4450 37F5:0440  1086: #L0 = CALL1 oDestroy(object_random:1471)
 33F4:4458 37F5:0448  1094: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:4462 37F5:0452  1104: SPAWN IDLE:1245(with 0 args)

PROCESS  80: FLSHSCRN (Args=0 CtrlBlk=33F4:2A24 Size=1162  iOp=2-1163 iCache=110352-111513) DISABLED
 33F4:4012 37F5:0002     0: trl_ct@80:2302 = #I0:16
 33F4:401C 37F5:000C    10: #L0 = CALL1 dSend(#S426:632)
 33F4:4024 37F5:0014    18: IFnot (#I0:16) GOTO .+22 (goto 40)
 33F4:402C 37F5:001C    26: #L0 = CALL2 dSendf(#S427:633,#I1:17)
 33F4:4036 37F5:0026    36: GOTO .+14 (goto 50)
 33F4:403A 37F5:002A    40: #L0 = CALL2 dSendf(#S428:634,#I2:53)
 33F4:4044 37F5:0034    50: #L0 = CALL1 dSend(#S429:635)
 33F4:404C 37F5:003C    58: #L0:145 = Last_task:1305 != run_flash_sess@80:1959
 33F4:405A 37F5:004A    72: IFnot (#L0:145) GOTO .+68 (goto 140)
 33F4:4062 37F5:0052    80: #L1 = CALL1 system(#S430:637)
 33F4:406A 37F5:005A    88: #P1:241 = State:2116
 33F4:4074 37F5:0064    98: #P2:246 = Monkey:1387
 33F4:407E 37F5:006E   108: #P3:247 = Room:1937
 33F4:4088 37F5:0078   118: SPAWN DEFAULT:953(with 3 args)
 33F4:408E 37F5:007E   124: WAITFORPROCESS DEFAULT:953
 33F4:4094 37F5:0084   130: Last_task:1305 = run_flash_sess@80:1959
 33F4:409E 37F5:008E   140: #L0:145 = ! OK:1530
 33F4:40AC 37F5:009C   154: IFnot (#L0:145) GOTO .+74 (goto 228)
 33F4:40B4 37F5:00A4   162: NEXTTICK1
 33F4:40B6 37F5:00A6   164: IFnot (Set_monkey:2043) GOTO .+60 (goto 224)
 33F4:40BE 37F5:00AE   172: #P1:241 = State:2116
 33F4:40C8 37F5:00B8   182: #P2:246 = Monkey:1387
 33F4:40D2 37F5:00C2   192: #P3:247 = Room:1937
 33F4:40DC 37F5:00CC   202: SPAWN DEFAULT:953(with 3 args)
 33F4:40E2 37F5:00D2   208: WAITFORPROCESS DEFAULT:953
 33F4:40E8 37F5:00D8   214: Set_monkey:2043 = #I0:16
 33F4:40F2 37F5:00E2   224: GOTO .-84 (goto 140)
 33F4:40F6 37F5:00E6   228: NEXTTICK #I10:18
 33F4:40FA 37F5:00EA   232: Event_fifo:1019[Set_event:2041] = flashSessStart@80:1172
 33F4:4102 37F5:00F2   240: #L0:145 = Set_event:2041 + #I1:17
 33F4:4110 37F5:0100   254: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:411E 37F5:010E   268: #L0:145 = State:2116 == run_flash_sess@80:1959
 33F4:412C 37F5:011C   282: IFnot (#L0:145) GOTO .+746 (goto 1028)
 33F4:4134 37F5:0124   290: #P1:241 = Fixation_Target:1151
 33F4:413E 37F5:012E   300: #Q2:260 = F= #Q2:260
 33F4:4148 37F5:0138   310: #Q3:261 = F= #Q3:261
 33F4:4152 37F5:0142   320: #P4:248 = object_fixwin:1469
 33F4:415C 37F5:014C   330: #P5:249 = object_targwin:1523
 33F4:4166 37F5:0156   340: #Q6:264 = F= #Q6:264
 33F4:4170 37F5:0160   350: #Q7:265 = F= #Q7:265
 33F4:417A 37F5:016A   360: SPAWN WINDOWS:2366(with 7 args)
 33F4:4180 37F5:0170   366: WAITFORPROCESS WINDOWS:2366
 33F4:4186 37F5:0176   372: #L0 = CALL2 oSetAttribute(object_targwin:1523,aINVISIBLE:726)
 33F4:4190 37F5:0180   382: #Q1:254 = F= #Q1:254
 33F4:419A 37F5:018A   392: #Q2:260 = F= #Q2:260
 33F4:41A4 37F5:0194   402: #Q3:261 = F= #Q3:261
 33F4:41AE 37F5:019E   412: #Q4:262 = F= #Q4:262
 33F4:41B8 37F5:01A8   422: #Q5:263 = F= #Q5:263
 33F4:41C2 37F5:01B2   432: #Q6:264 = F= #Q6:264
 33F4:41CC 37F5:01BC   442: #Q7:265 = F= #Q7:265
 33F4:41D6 37F5:01C6   452: #Q8:266 = F= #Q8:266
 33F4:41E0 37F5:01D0   462: #Q9:267 = F= #Q9:267
 33F4:41EA 37F5:01DA   472: #P10:242 = object_targ:1513
 33F4:41F4 37F5:01E4   482: SPAWN FLS_PGS:1176(with 10 args)
 33F4:41FA 37F5:01EA   488: WAITFORPROCESS FLS_PGS:1176
 33F4:4200 37F5:01F0   494: trl_running@80:2314 = #I1:17
 33F4:420A 37F5:01FA   504: stage@80:2108 = need_fix@80:1419
 33F4:4214 37F5:0204   514: IFnot (trl_running@80:2314) GOTO .+496 (goto 1010)
 33F4:421C 37F5:020C   522: #L0:145 = stage@80:2108 == need_fix@80:1419
 33F4:422A 37F5:021A   536: IFnot (#L0:145) GOTO .+88 (goto 624)
 33F4:4232 37F5:0222   544: IFnot (In_FixWin:1270) GOTO .+80 (goto 624)
 33F4:423A 37F5:022A   552: Event_fifo:1019[Set_event:2041] = flashOnEv@80:1170
 33F4:4242 37F5:0232   560: #L0:145 = Set_event:2041 + #I1:17
 33F4:4250 37F5:0240   574: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:425E 37F5:024E   588: #L0 = CALL2 dSendf(#S431:638,flash@80:1168)
 33F4:4268 37F5:0258   598: #L0 = CALL0 time()
 33F4:426E 37F5:025E   604: flashStart@80:1173 = F= flashStart@80:1173
 33F4:4278 37F5:0268   614: stage@80:2108 = wait_flash@80:2358
 33F4:4282 37F5:0272   624: #L0:145 = stage@80:2108 == wait_flash@80:2358
 33F4:4290 37F5:0280   638: IFnot (#L0:145) GOTO .+292 (goto 930)
 33F4:4298 37F5:0288   646: #L1:146 = ! In_FixWin:1270
 33F4:42A6 37F5:0296   660: IFnot (#L1:146) GOTO .+86 (goto 746)
 33F4:42AE 37F5:029E   668: Event_fifo:1019[Set_event:2041] = flashFailEv@80:1169
 33F4:42B6 37F5:02A6   676: #L0:145 = Set_event:2041 + #I1:17
 33F4:42C4 37F5:02B4   690: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:42D2 37F5:02C2   704: #L0 = CALL2 dSendf(#S432:639,blank@80:791)
 33F4:42DC 37F5:02CC   714: stage@80:2108 = need_fix@80:1419
 33F4:42E6 37F5:02D6   724: #L0 = CALL1 printf(#S433:640)
 33F4:42EE 37F5:02DE   732: trl_running@80:2314 = #I0:16
 33F4:42F8 37F5:02E8   742: GOTO .+188 (goto 930)
 33F4:42FC 37F5:02EC   746: #L0 = CALL0 time()
 33F4:4302 37F5:02F2   752: #F0:1 = flashStart@80:1173 F+ flashTime:1175
 33F4:4310 37F5:0300   766: #L1:146 = #L0:145 F> #F0:1
 33F4:431E 37F5:030E   780: #L2:156 = In_FixWin:1270 && #L1:146
 33F4:432C 37F5:031C   794: IFnot (#L2:156) GOTO .+136 (goto 930)
 33F4:4334 37F5:0324   802: #L3 = CALL1 dSendf(#S434:641)
 33F4:433C 37F5:032C   810: #L0 = CALL2 dSendf(#S435:642,blank@80:791)
 33F4:4346 37F5:0336   820: #L0 = CALL0 time()
 33F4:434C 37F5:033C   826: offTime@80:1529 = F= offTime@80:1529
 33F4:4356 37F5:0346   836: stage@80:2108 = waitIFI@80:2360
 33F4:4360 37F5:0350   846: Event_fifo:1019[Set_event:2041] = flashSuccEv@80:1174
 33F4:4368 37F5:0358   854: #L0:145 = Set_event:2041 + #I1:17
 33F4:4376 37F5:0366   868: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:4384 37F5:0374   882: #P1:241 = Juice_channel:1298
 33F4:438E 37F5:037E   892: #P2:246 = Base_Reward_time:774
 33F4:4398 37F5:0388   902: SPAWN JUICE:1297(with 2 args)
 33F4:439E 37F5:038E   908: trl_ct@80:2302 = trl_ct@80:2302 + #I1:17
 33F4:43AC 37F5:039C   922: #L0 = CALL1 print(trl_ct@80:2302)
 33F4:43B4 37F5:03A4   930: #L0:145 = stage@80:2108 == waitIFI@80:2360
 33F4:43C2 37F5:03B2   944: IFnot (#L0:145) GOTO .+60 (goto 1004)
 33F4:43CA 37F5:03BA   952: #L1 = CALL0 time()
 33F4:43D0 37F5:03C0   958: #F0:1 = offTime@80:1529 F+ IFI:1247
 33F4:43DE 37F5:03CE   972: #L2:156 = #L1:146 F> #F0:1
 33F4:43EC 37F5:03DC   986: IFnot (#L2:156) GOTO .+18 (goto 1004)
 33F4:43F4 37F5:03E4   994: trl_running@80:2314 = #I0:16
 33F4:43FE 37F5:03EE  1004: NEXTTICK1
 33F4:4400 37F5:03F0  1006: GOTO .-492 (goto 514)
 33F4:4404 37F5:03F4  1010: IFnot (Pause:1561) GOTO .+14 (goto 1024)
 33F4:440C 37F5:03FC  1018: NEXTTICK1
 33F4:440E 37F5:03FE  1020: GOTO .-10 (goto 1010)
 33F4:4412 37F5:0402  1024: GOTO .-756 (goto 268)
 33F4:4416 37F5:0406  1028: Event_fifo:1019[Set_event:2041] = flashSessEnd@80:1171
 33F4:441E 37F5:040E  1036: #L0:145 = Set_event:2041 + #I1:17
 33F4:442C 37F5:041C  1050: Set_event:2041 = #L0:145 % Event_fifo_N:1020
 33F4:443A 37F5:042A  1064: State:2116 = run_idle@80:1974
 33F4:4444 37F5:0434  1074: #L0 = CALL1 oDestroy(object_fixwin:1469)
 33F4:444C 37F5:043C  1082: #L0 = CALL1 oDestroy(object_targwin:1523)
 33F4:4454 37F5:0444  1090: #L0 = CALL1 oDestroy(object_fix:1463)
 33F4:445C 37F5:044C  1098: #L0 = CALL1 oDestroy(object_targ:1513)
 33F4:4464 37F5:0454  1106: #L0 = CALL1 oDestroy(object_eye:1462)
 33F4:446C 37F5:045C  1114: #L0 = CALL2 oSetGraph(gLEFT:1182,aCLEAR:717)
 33F4:4476 37F5:0466  1124: #L0 = CALL1 system(#S436:643)
 33F4:447E 37F5:046E  1132: #L0 = CALL1 system(#S437:644)
 33F4:4486 37F5:0476  1140: #L0 = CALL1 system(#S438:645)
 33F4:448E 37F5:047E  1148: #L0 = CALL1 system(#S439:646)
 33F4:4496 37F5:0486  1156: SPAWN IDLE:1245(with 0 args)

PROCESS  81: WAIT_MU (Args=1 CtrlBlk=33F4:2A50 Size=100  iOp=2-101 iCache=111514-111613) DISABLED
 33F4:4012 37F5:0002     0: u_sec@81:2330 = #P1:241
 33F4:401C 37F5:000C    10: clock_cycles@81:838 = u_sec@81:2330 F* #M3F989375:168
 33F4:402A 37F5:001A    24: start = CALL0 timeus()
 33F4:4030 37F5:0020    30: duration@81:999 = #I0:16
 33F4:403A 37F5:002A    40: #L0:145 = duration@81:999 < clock_cycles@81:838
 33F4:4048 37F5:0038    54: IFnot (#L0:145) GOTO .+46 (goto 100)
 33F4:4050 37F5:0040    62: #L1 = CALL0 timeus()
 33F4:4056 37F5:0046    68: #L2:156 = #L1:146 - start@81:2114
 33F4:4064 37F5:0054    82: duration@81:999 = #L2:156 & #I65535:128
 33F4:4072 37F5:0062    96: GOTO .-56 (goto 40)

PROCESS  82: SEND_TTL (Args=1 CtrlBlk=33F4:2A7C Size=138  iOp=2-139 iCache=111614-111751) DISABLED
 33F4:4012 37F5:0002     0: value@82:2355 = #P1:241
 33F4:401C 37F5:000C    10: #L0 = CALL2 dioSetMode(output@82:1560,#I7:129)
 33F4:4026 37F5:0016    20: shiftVal@82:2055 = value@82:2355 << #I1:17
 33F4:4034 37F5:0024    34: #L0:145 = shiftVal@82:2055 & #I255:68
 33F4:4042 37F5:0032    48: #L1 = CALL2 dioSetA(output@82:1560,#L0:145)
 33F4:404C 37F5:003C    58: #L0:145 = shiftVal@82:2055 >> #I8:133
 33F4:405A 37F5:004A    72: #L1:146 = #L0:145 | #I128:33
 33F4:4068 37F5:0058    86: #L2 = CALL2 dioSetB(output@82:1560,#L1:146)
 33F4:4072 37F5:0062    96: #P1:241 = #I100:19
 33F4:407C 37F5:006C   106: SPAWN WAIT_MU:2359(with 1 args)
 33F4:4082 37F5:0072   112: WAITFORPROCESS WAIT_MU:2359
 33F4:4088 37F5:0078   118: #L0 = CALL2 dioSetA(output@82:1560,#I-256:12)
 33F4:4092 37F5:0082   128: #L0 = CALL2 dioSetB(output@82:1560,#I-256:12)

PROCESS  83: QUE_TTL (Args=0 CtrlBlk=33F4:2AA8 Size=150  iOp=2-151 iCache=111752-111901) DISABLED
 33F4:4012 37F5:0002     0: IFnot (#I1:17) GOTO .+150 (goto 150)
 33F4:401A 37F5:000A     8: n_evs_sent@83:1398 = #I0:16
 33F4:4024 37F5:0014    18: #L0:145 = n_evs_sent@83:1398 < #I5:111
 33F4:4032 37F5:0022    32: #L1:146 = send_event@83:2036 != Set_event:2041
 33F4:4040 37F5:0030    46: #L2:156 = #L0:145 && #L1:146
 33F4:404E 37F5:003E    60: IFnot (#L2:156) GOTO .+84 (goto 144)
 33F4:4056 37F5:0046    68: #L3:157 = Event_fifo:1019[send_event@83:2036]
 33F4:405E 37F5:004E    76: #P1:241 = #L3:157
 33F4:4068 37F5:0058    86: SPAWN SEND_TTL:2037(with 1 args)
 33F4:406E 37F5:005E    92: WAITFORPROCESS SEND_TTL:2037
 33F4:4074 37F5:0064    98: #L0:145 = send_event@83:2036 + #I1:17
 33F4:4082 37F5:0072   112: send_event@83:2036 = #L0:145 % Event_fifo_N:1020
 33F4:4090 37F5:0080   126: n_evs_sent@83:1398 = n_evs_sent@83:1398 + #I1:17
 33F4:409E 37F5:008E   140: GOTO .-122 (goto 18)
 33F4:40A2 37F5:0092   144: NEXTTICK1
 33F4:40A4 37F5:0094   146: GOTO .-146 (goto 0)

PROCESS  84: IDLE (Args=0 CtrlBlk=33F4:2AD4 Size=628  iOp=2-629 iCache=111902-112529) ENABLED 
 33F4:4012 37F5:0002     0: #L0 = CALL0 timeus()
 33F4:4018 37F5:0008     6: #L1 = CALL1 seed1(#L0:145)
 33F4:4020 37F5:0010    14: #L0 = CALL1 normal(#I1:17)
 33F4:4028 37F5:0018    22: idling@84:1246 = #I1:17
 33F4:4032 37F5:0022    32: #L0 = CALL2 dioSetMode(#I0:16,#I7:129)
 33F4:403C 37F5:002C    42: #L0 = CALL2 mio_dig_set(Juice_channel:1298,off@84:1528)
 33F4:4046 37F5:0036    52: #L0 = CALL1 mio_fout(off@84:1528)
 33F4:404E 37F5:003E    60: #L0 = CALL1 dSend(#S440:648)
 33F4:4056 37F5:0046    68: #L0 = CALL1 dSend(#S441:649)
 33F4:405E 37F5:004E    76: #Q1:254 = F= #Q1:254
 33F4:4068 37F5:0058    86: #Q2:260 = F= #Q2:260
 33F4:4072 37F5:0062    96: #Q3:261 = F= #Q3:261
 33F4:407C 37F5:006C   106: #P4:248 = Scr_pixX:2014
 33F4:4086 37F5:0076   116: #P5:249 = Scr_pixY:2017
 33F4:4090 37F5:0080   126: SPAWN SET_COOR:2040(with 5 args)
 33F4:4096 37F5:0086   132: #P1:241 = Scr_pixX:2014
 33F4:40A0 37F5:0090   142: #P2:246 = Scr_pixY:2017
 33F4:40AA 37F5:009A   152: #Q3:261 = F= #Q3:261
 33F4:40B4 37F5:00A4   162: #Q4:262 = F= #Q4:262
 33F4:40BE 37F5:00AE   172: SPAWN GRAPHS:1218(with 4 args)
 33F4:40C4 37F5:00B4   178: #P1:241 = Eye_X_channel:1036
 33F4:40CE 37F5:00BE   188: #P2:246 = Eye_Y_channel:1040
 33F4:40D8 37F5:00C8   198: #Q3:261 = F= #Q3:261
 33F4:40E2 37F5:00D2   208: #Q4:262 = F= #Q4:262
 33F4:40EC 37F5:00DC   218: #Q5:263 = F= #Q5:263
 33F4:40F6 37F5:00E6   228: #Q6:264 = F= #Q6:264
 33F4:4100 37F5:00F0   238: SPAWN WATCHEYE:2362(with 6 args)
 33F4:4106 37F5:00F6   244: SPAWN QUE_TTL:1638(with 0 args)
 33F4:410C 37F5:00FC   250: #L0 = CALL1 printf(#S442:650)
 33F4:4114 37F5:0104   258: WAIT #I5000:114
 33F4:4118 37F5:0108   262: #L0 = CALL1 printf(#S443:651)
 33F4:4120 37F5:0110   270: #L0 = CALL1 system(#S444:652)
 33F4:4128 37F5:0118   278: IFnot (idling@84:1246) GOTO .+350 (goto 628)
 33F4:4130 37F5:0120   286: #L0:145 = State:2116 == run_cmd_sess@84:1946
 33F4:413E 37F5:012E   300: IFnot (#L0:145) GOTO .+34 (goto 334)
 33F4:4146 37F5:0136   308: OK:1530 = #I0:16
 33F4:4150 37F5:0140   318: SPAWN CMANDING:840(with 0 args)
 33F4:4156 37F5:0146   324: idling@84:1246 = #I0:16
 33F4:4160 37F5:0150   334: #L0:145 = State:2116 == run_fix_sess@84:1957
 33F4:416E 37F5:015E   348: IFnot (#L0:145) GOTO .+34 (goto 382)
 33F4:4176 37F5:0166   356: OK:1530 = #I0:16
 33F4:4180 37F5:0170   366: SPAWN FIXATION:1105(with 0 args)
 33F4:4186 37F5:0176   372: idling@84:1246 = #I0:16
 33F4:4190 37F5:0180   382: #L0:145 = State:2116 == run_mg_sess@84:1981
 33F4:419E 37F5:018E   396: IFnot (#L0:145) GOTO .+34 (goto 430)
 33F4:41A6 37F5:0196   404: OK:1530 = #I0:16
 33F4:41B0 37F5:01A0   414: SPAWN MGUIDE:1372(with 0 args)
 33F4:41B6 37F5:01A6   420: idling@84:1246 = #I0:16
 33F4:41C0 37F5:01B0   430: #L0:145 = State:2116 == run_gonogo_sess@84:1967
 33F4:41CE 37F5:01BE   444: IFnot (#L0:145) GOTO .+34 (goto 478)
 33F4:41D6 37F5:01C6   452: OK:1530 = #I0:16
 33F4:41E0 37F5:01D0   462: SPAWN GONOGO:1211(with 0 args)
 33F4:41E6 37F5:01D6   468: idling@84:1246 = #I0:16
 33F4:41F0 37F5:01E0   478: #L0:145 = State:2116 == run_flash_sess@84:1960
 33F4:41FE 37F5:01EE   492: IFnot (#L0:145) GOTO .+34 (goto 526)
 33F4:4206 37F5:01F6   500: OK:1530 = #I0:16
 33F4:4210 37F5:0200   510: SPAWN FLSHSCRN:1177(with 0 args)
 33F4:4216 37F5:0206   516: idling@84:1246 = #I0:16
 33F4:4220 37F5:0210   526: #L0:145 = State:2116 == run_delayed_sess@84:1953
 33F4:422E 37F5:021E   540: IFnot (#L0:145) GOTO .+34 (goto 574)
 33F4:4236 37F5:0226   548: OK:1530 = #I0:16
 33F4:4240 37F5:0230   558: SPAWN DELAYED:981(with 0 args)
 33F4:4246 37F5:0236   564: idling@84:1246 = #I0:16
 33F4:4250 37F5:0240   574: #L0:145 = State:2116 == run_search_sess@84:1988
 33F4:425E 37F5:024E   588: IFnot (#L0:145) GOTO .+34 (goto 622)
 33F4:4266 37F5:0256   596: OK:1530 = #I0:16
 33F4:4270 37F5:0260   606: SPAWN SEARCH:2029(with 0 args)
 33F4:4276 37F5:0266   612: idling@84:1246 = #I0:16
 33F4:4280 37F5:0270   622: NEXTTICK1
 33F4:4282 37F5:0272   624: GOTO .-346 (goto 278)


HASH TABLE

iHSH  iNAM  iSYM iNXT Symbol
---- ------ ---- ---- -----------
   0      0    0    0 ""
   1 189164 1174    0 "flashSuccEv"
   2      0    0    0 ""
   3      0    0    0 ""
   4      0    0    0 ""
   5      0    0    0 ""
   6      0    0    0 ""
   7      0    0    0 ""
   8      0    0    0 ""
   9 175484 2287 1988 "TONESWEP"
  10      0    0    0 ""
  11 169566  877 1143 "cum_rand_rt_DP"
  12      0    0    0 ""
  13      0    0    0 ""
  14 171852  145 1555 "#L0"
  15 171882  146    0 "#L1"
  16 172840  156    0 "#L2"
  17 173080  157    0 "#L3"
  18 173084  158    0 "#L4"
  19 173088  159    0 "#L5"
  20 173092  160    0 "#L6"
  21 173096  161    0 "#L7"
  22 172530  100 1247 "#I450"
  23 173104  163    0 "#L9"
  24      0    0    0 ""
  25      0    0    0 ""
  26 169014 1421    0 "Neg2Reinforcement_"
  27      0    0    0 ""
  28      0    0    0 ""
  29      0    0    0 ""
  30      0    0    0 ""
  31      0    0    0 ""
  32      0    0    0 ""
  33      0    0    0 ""
  34      0    0    0 ""
  35      0    0    0 ""
  36      0    0    0 ""
  37      0    0    0 ""
  38 170264 1896 1804 "Rand_targ_angle"
  39 183518 2326    0 "TVx2"
  40      0    0    0 ""
  41      0    0    0 ""
  42      0    0    0 ""
  43      0    0    0 ""
  44      0    0    0 ""
  45      0    0    0 ""
  46 168252 2368 1441 "X_Offset"
  47      0    0    0 ""
  48      0    0    0 ""
  49      0    0    0 ""
  50      0    0    0 ""
  51      0    0    0 ""
  52      0    0    0 ""
  53      0    0    0 ""
  54 183512 2327    0 "TVy1"
  55 183524 2328    0 "TVy2"
  56      0    0    0 ""
  57 170420  837    0 "Classic"
  58      0    0    0 ""
  59      0    0    0 ""
  60 185982  828    0 "CatchNum"
  61      0    0    0 ""
  62      0    0    0 ""
  63      0    0    0 ""
  64      0    0    0 ""
  65      0    0    0 ""
  66      0    0    0 ""
  67      0    0    0 ""
  68      0    0    0 ""
  69 183072  139    0 "#I8888"
  70      0    0    0 ""
  71      0    0    0 ""
  72      0    0    0 ""
  73 172814 1243    0 "i"
  74 179524 1291    0 "j"
  75      0    0    0 ""
  76      0    0    0 ""
  77      0    0    0 ""
  78 184444 1625    0 "plus_minus"
  79 171268  241    0 "#P1"
  80 171272  246    0 "#P2"
  81 169034 1056 1153 "Feedback_"
  82 173722  248    0 "#P4"
  83 173726  249    0 "#P5"
  84 175784  250    0 "#P6"
  85 175788  251    0 "#P7"
  86 175792  252    0 "#P8"
  87 175796  253    0 "#P9"
  88      0    0    0 ""
  89      0    0    0 ""
  90      0    0    0 ""
  91      0    0    0 ""
  92      0    0    0 ""
  93      0    0    0 ""
  94 173796    7    0 "#I-1"
  95 173710  254 1378 "#Q1"
  96 173714  260    0 "#Q2"
  97 173718  261    0 "#Q3"
  98 168842 1244 1281 "Identify_Room_"
  99 172632   28 1335 "#I1100"
 100 175140  264    0 "#Q6"
 101 175144  265    0 "#Q7"
 102 174800   43 1336 "#I1500"
 103 170780 1031 1939 "expo_jitter_soa"
 104 171628    9 1958 "#I-135"
 105 174636 1477    0 "object_soa12"
 106 174650 1478 2012 "object_soa13"
 107 174664 1479    0 "object_soa14"
 108 174678 1480    0 "object_soa15"
 109 174692 1481 1957 "object_soa16"
 110 174706 1482    0 "object_soa17"
 111 174720 1483    0 "object_soa18"
 112 174734 1484    0 "object_soa19"
 113      0    0    0 ""
 114      0    0    0 ""
 115 185182 2084    0 "soa"
 116 183048   29    0 "#I1111"
 117      0    0    0 ""
 118      0    0    0 ""
 119 173968 1524 1374 "object_targwin"
 120 175696 2307 1956 "trl_outcome"
 121 168154 2013 1933 "scr_height"
 122      0    0    0 ""
 123 177544  271 1943 "#S100"
 124 177558  272 1945 "#S101"
 125 177572  273    0 "#S102"
 126 169098 2175 1424 "StopOn_"
 127 172878  269 1425 "#S1"
 128 172918  380 1426 "#S2"
 129 172928  491 1427 "#S3"
 130 171432  772 1428 "b_"
 131 172994  658 1429 "#S5"
 132 173026  669 1430 "#S6"
 133 173066  680    0 "#S7"
 134 173076  691    0 "#S8"
 135 170382 2146 1964 "StimCond"
 136      0    0    0 ""
 137      0    0    0 ""
 138      0    0    0 ""
 139 177774  282    0 "#S110"
 140 177800  283    0 "#S111"
 141 177814  284 1967 "#S112"
 142 177840  285    0 "#S113"
 143 177868  286 1795 "#S114"
 144 177882  287    0 "#S115"
 145 177896  288    0 "#S116"
 146 177914  289    0 "#S117"
 147 177928  290 1971 "#S118"
 148 168138 1938 1431 "room"
 149      0    0    0 ""
 150 187980  118    0 "#I5500"
 151      0    0    0 ""
 152 183886  995    0 "DRW_SQR"
 153      0    0    0 ""
 154      0    0    0 ""
 155 177976  293    0 "#S120"
 156 177990  294    0 "#S121"
 157 171550   18 1432 "#I10"
 158 171556   27 1433 "#I11"
 159 171792   30 1434 "#I12"
 160 171810   34 2039 "#I13"
 161 171816   38 1436 "#I14"
 162 168410 1620 1446 "PlacOn_"
 163 171828   44 1447 "#I16"
 164 171834   47 1810 "#I17"
 165 171840   49 1811 "#I18"
 166 171846   52 1812 "#I19"
 167 180608 1923 1845 "REP_ORT"
 168      0    0    0 ""
 169 170706 1319 1783 "llength"
 170 170918 1364 1937 "max_ssd"
 171 178308  304    0 "#S130"
 172 178318  305    0 "#S131"
 173 172140   54 1449 "#I20"
 174 168390 1164 1882 "FixSpotOn_"
 175 172672   60 1451 "#I22"
 176 172170   63 1452 "#I23"
 177 178412  310    0 "#S136"
 178 178426  311 1883 "#S137"
 179 178204 1619 1857 "plac_pd"
 180 171504   69 1454 "#I27"
 181 171876   72    0 "#I28"
 182 171898   73    0 "#I29"
 183 183056  137    0 "#I8100"
 184      0    0    0 ""
 185      0    0    0 ""
 186      0    0    0 ""
 187 178478  315    0 "#S140"
 188 178488  316    0 "#S141"
 189 171856   75 1979 "#I30"
 190 178520  318    0 "#S143"
 191 169472  878 1847 "cum_rep_rt"
 192 171498   80 1457 "#I33"
 193 178570  321    0 "#S146"
 194 171492   82 1458 "#I35"
 195 171448   19 1459 "#I100"
 196 178626  324    0 "#S149"
 197 172488   85    0 "#I38"
 198 169820  821 1162 "Catch"
 199 186014  115    0 "#I501"
 200 175344 1533 2019 "oldx"
 201 172350  142 1339 "#I900"
 202      0    0    0 ""
 203 178658  326 2043 "#S150"
 204 178672  327    0 "#S151"
 205 174420   88 1460 "#I40"
 206 178694  329    0 "#S153"
 207 178714  330    0 "#S154"
 208 172200   98 1461 "#I43"
 209 178746  332 1799 "#S156"
 210 171428 1180 1462 "g_"
 211 175052 1095 1463 "fix_win_up"
 212 178794  335    0 "#S159"
 213 169626  854 1224 "Consec_corr"
 214 168462 1161 1031 "FixError_"
 215 176016 1995 1965 "sacc_out"
 216      0    0    0 ""
 217      0    0    0 ""
 218 173830 2264 1272 "tCROSS"
 219 169704  992 1464 "DR1_flag"
 220 178822  338 1827 "#S161"
 221 171928  112 1465 "#I50"
 222 178866  340    0 "#S163"
 223 168026  713 1466 "__debug_op"
 224 172218  117 1467 "#I53"
 225 178930  343    0 "#S166"
 226 178944  344    0 "#S167"
 227 170004 1633 1468 "ProbCue"
 228 178972  346    0 "#S169"
 229 174434   11    0 "#I-25"
 230 173482  119    0 "#I59"
 231 178148 1103    0 "fixating_ph"
 232      0    0    0 ""
 233      0    0    0 ""
 234 168868 2152 1049 "Stimulation_"
 235 179004  348 2048 "#S170"
 236 179018  349    0 "#S171"
 237 171862  121 1469 "#I60"
 238 179050  351    0 "#S173"
 239 169460  903 1470 "current_rt"
 240 171510  126 1471 "#I63"
 241 168472 1214 1472 "GoSaccade_"
 242 179116  355    0 "#S177"
 243 179140  356    0 "#S178"
 244 179154  357    0 "#S179"
 245      0    0    0 ""
 246 183962 1082 1871 "FIX_PGS"
 247      0    0    0 ""
 248 171610   36    0 "#I135"
 249      0    0    0 ""
 250      0    0    0 ""
 251 179168  359    0 "#S180"
 252 179188  360    0 "#S181"
 253 168402 1096 1473 "Fixate_"
 254 179218  362    0 "#S183"
 255 179242  363    0 "#S184"
 256 179256  364    0 "#S185"
 257 179282  365    0 "#S186"
 258 179296  366    0 "#S187"
 259 177342   39 2042 "#I140"
 260 179332  368    0 "#S189"
 261 171666   14    0 "#I-45"
 262      0    0    0 ""
 263 170166 2258    0 "TargOrt"
 264      0    0    0 ""
 265      0    0    0 ""
 266      0    0    0 ""
 267 179366  370    0 "#S190"
 268 179380  371    0 "#S191"
 269 172434  134 1475 "#I80"
 270 179444  373    0 "#S193"
 271 179458  374    0 "#S194"
 272 179472  375    0 "#S195"
 273 168530  864 1476 "Correct_"
 274 179518  377    0 "#S197"
 275 171068  793 1786 "Bmove_tout"
 276 170032 1162 1881 "FixJitter"
 277      0    0    0 ""
 278 169118 2115 1055 "StartInfos_"
 279      0    0    0 ""
 280      0    0    0 ""
 281      0    0    0 ""
 282 168752 1016    0 "Eot_"
 283 188244 1303    0 "KEY_T_UP"
 284      0    0    0 ""
 285 171592  141    0 "#I90"
 286 174008 1218 1328 "GRAPHS"
 287      0    0    0 ""
 288      0    0    0 ""
 289      0    0    0 ""
 290      0    0    0 ""
 291      0    0    0 ""
 292      0    0    0 ""
 293      0    0    0 ""
 294      0    0    0 ""
 295      0    0    0 ""
 296      0    0    0 ""
 297      0    0    0 ""
 298      0    0    0 ""
 299 183080 1320    0 "LOC_ASYM"
 300      0    0    0 ""
 301 174032  991 1322 "down"
 302      0    0    0 ""
 303      0    0    0 ""
 304      0    0    0 ""
 305      0    0    0 ""
 306 175120 2366    0 "WINDOWS"
 307 180860 1460 1744 "numTargAngles"
 308      0    0    0 ""
 309 168580  826    0 "CatchIncorrectG_"
 310      0    0    0 ""
 311      0    0    0 ""
 312 172768   48    0 "#I175"
 313      0    0    0 ""
 314      0    0    0 ""
 315      0    0    0 ""
 316      0    0    0 ""
 317      0    0    0 ""
 318 168050 1530 1053 "OK"
 319      0    0    0 ""
 320      0    0    0 ""
 321 173430 1536    0 "on"
 322      0    0    0 ""
 323 170022 2262 1254 "TaskStim"
 324      0    0    0 ""
 325      0    0    0 ""
 326      0    0    0 ""
 327      0    0    0 ""
 328      0    0    0 ""
 329      0    0    0 ""
 330      0    0    0 ""
 331      0    0    0 ""
 332      0    0    0 ""
 333      0    0    0 ""
 334 189152 1169    0 "flashFailEv"
 335      0    0    0 ""
 336 171648   15    0 "#I-90"
 337 168934  939    0 "Decide_"
 338      0    0    0 ""
 339      0    0    0 ""
 340      0    0    0 ""
 341      0    0    0 ""
 342      0    0    0 ""
 343      0    0    0 ""
 344      0    0    0 ""
 345      0    0    0 ""
 346      0    0    0 ""
 347 174908 1471    0 "object_random"
 348      0    0    0 ""
 349      0    0    0 ""
 350      0    0    0 ""
 351      0    0    0 ""
 352      0    0    0 ""
 353      0    0    0 ""
 354 184546  144 1960 "#I9999"
 355 172264   32 1719 "#I1200"
 356      0    0    0 ""
 357      0    0    0 ""
 358 171714   45    0 "#I1600"
 359      0    0    0 ""
 360 173934  717    0 "aCLEAR"
 361      0    0    0 ""
 362 172392  183    0 "#M4179999A"
 363      0    0    0 ""
 364      0    0    0 ""
 365      0    0    0 ""
 366      0    0    0 ""
 367      0    0    0 ""
 368      0    0    0 ""
 369      0    0    0 ""
 370 170072 2076 1844 "Singleton_color"
 371      0    0    0 ""
 372      0    0    0 ""
 373      0    0    0 ""
 374 170494 1413    0 "n_targ_pos"
 375      0    0    0 ""
 376 173862  758    0 "aREPLACE"
 377 170222 2035    0 "SelEcc"
 378      0    0    0 ""
 379 171722   78 1788 "#I3200"
 380 183604  383    0 "#S201"
 381 183626  384    0 "#S202"
 382 183694  385    0 "#S203"
 383 183716  386    0 "#S204"
 384 183738  387    0 "#S205"
 385 183760  388    0 "#S206"
 386 171424 1856 1794 "r_"
 387 183832  390    0 "#S208"
 388 183856  391    0 "#S209"
 389      0    0    0 ""
 390 168126 1072    0 "fix_manual"
 391 187964   96    0 "#I4200"
 392      0    0    0 ""
 393 189570   12    0 "#I-256"
 394 170194 2265    0 "TD_Select"
 395 183880  393    0 "#S210"
 396 183908  394    0 "#S211"
 397 183932  395    0 "#S212"
 398 183956  396    0 "#S213"
 399 183988  397    0 "#S214"
 400 184000  398    0 "#S215"
 401 183040   61 1800 "#I2222"
 402 184030  400    0 "#S217"
 403 173856  770 1806 "aXOR"
 404 184126  402    0 "#S219"
 405      0    0    0 ""
 406      0    0    0 ""
 407      0    0    0 ""
 408      0    0    0 ""
 409 183632  993    0 "DRW_L"
 410 174894 1472    0 "object_repeat"
 411 184156  404    0 "#S220"
 412 184168  405    0 "#S221"
 413 175000 2196 1814 "targ_ecc"
 414 184240  407    0 "#S223"
 415 184258  408    0 "#S224"
 416 184270  409    0 "#S225"
 417 183424  996 1815 "DRW_T"
 418 169268 1857 1978 "Rand_Comp_NG_Trl"
 419 174038 2351 1817 "up"
 420 170600 2191 1818 "Success_Tone_medR"
 421 169106 2149    0 "StimFailed_"
 422      0    0    0 ""
 423 168038 1245 1996 "IDLE"
 424      0    0    0 ""
 425      0    0    0 ""
 426      0    0    0 ""
 427 184348  415    0 "#S230"
 428 184360  416    0 "#S231"
 429 174068 1071 1989 "FirstStopTrial"
 430 184390  418    0 "#S233"
 431 168184 1577 1820 "pd_bottom"
 432 184420  420    0 "#S235"
 433 184606  421    0 "#S236"
 434 184618  422    0 "#S237"
 435 173926  763 1832 "aTITLE"
 436 183816 1325 1833 "lrx"
 437 183820 1327    0 "lry"
 438      0    0    0 ""
 439 183064  138    0 "#I8200"
 440      0    0    0 ""
 441      0    0    0 ""
 442 168176 1592 1789 "pd_left"
 443 183650 1316 1834 "LHx2"
 444 184678  427    0 "#S241"
 445 173754  978 1835 "deg_x"
 446 169338 1908 1836 "RandPerAcc"
 447 184726  430    0 "#S244"
 448 184738  431    0 "#S245"
 449 170230 2356 1837 "VarEcc"
 450 184768  433 2049 "#S247"
 451 171696   55 1838 "#I200"
 452 184798  435    0 "#S249"
 453 168090 1020    0 "Event_fifo_N"
 454 171750  122    0 "#I600"
 455      0    0    0 ""
 456      0    0    0 ""
 457      0    0    0 ""
 458 168008 2096 1909 "SPEED"
 459 183656 1318 1850 "LHy2"
 460 184966  438    0 "#S251"
 461 184984  439    0 "#S252"
 462 184996  440    0 "#S253"
 463 185014  441    0 "#S254"
 464 185026  442    0 "#S255"
 465 185044  443    0 "#S256"
 466 176002 1444 1851 "nogo_correct"
 467 172050   59 1852 "#I210"
 468 185086  446    0 "#S259"
 469      0    0    0 ""
 470      0    0    0 ""
 471 187972   97    0 "#I4250"
 472 169882 2300    0 "TrialTp"
 473 180888 1459    0 "numDistEcc"
 474 187996  101    0 "#I4650"
 475 185104  448    0 "#S260"
 476 178254 1436 1853 "no_saccade"
 477 185134  450 2045 "#S262"
 478 169994  759 1854 "ArrStruct"
 479 185164  452    0 "#S264"
 480 185176  453    0 "#S265"
 481 185256  454    0 "#S266"
 482 170012 1634 1862 "ProbSide"
 483 185286  456    0 "#S268"
 484 185298  457    0 "#S269"
 485 188888  981    0 "DELAYED"
 486      0    0    0 ""
 487      0    0    0 ""
 488 172308   62    0 "#I225"
 489      0    0    0 ""
 490 171172 1021 1977 "Exp_juice"
 491 185316  459    0 "#S270"
 492 185328  460    0 "#S271"
 493 170402 1457 1863 "Npulse"
 494 185358  462    0 "#S273"
 495 185376  463    0 "#S274"
 496 185388  464    0 "#S275"
 497 175590 1391 1864 "mouth_status"
 498 185418  466    0 "#S277"
 499 185436  467    0 "#S278"
 500 185448  468    0 "#S279"
 501      0    0    0 ""
 502      0    0    0 ""
 503      0    0    0 ""
 504      0    0    0 ""
 505 168910 2357    0 "VSyncSynced_"
 506 188012  103 2004 "#I4670"
 507 185486  470    0 "#S280"
 508 185498  471    0 "#S281"
 509 185516  472    0 "#S282"
 510 185528  473    0 "#S283"
 511 185546  474    0 "#S284"
 512 185558  475    0 "#S285"
 513 185576  476    0 "#S286"
 514 170154 1609 1867 "PercSingTrl"
 515 172068   64 1868 "#I240"
 516 185618  479    0 "#S289"
 517      0    0    0 ""
 518      0    0    0 ""
 519      0    0    0 ""
 520      0    0    0 ""
 521 170212 2031    0 "SearchEcc"
 522 188052  104    0 "#I4680"
 523 185636  481    0 "#S290"
 524 172932  182 1869 "#M41649249"
 525 185666  483    0 "#S292"
 526 185678  484    0 "#S293"
 527 184516 1234 1880 "holdtime_diff"
 528 185708  486    0 "#S295"
 529 170672 1053 1872 "Failure_Tone_bigP"
 530 185748  488 2027 "#S297"
 531 170582 2190 2046 "Success_Tone_bigR"
 532 183034   67 1874 "#I251"
 533      0    0    0 ""
 534      0    0    0 ""
 535      0    0    0 ""
 536 168344 1366 1373 "maxvoltage"
 537      0    0    0 ""
 538 183482 2276 1969 "THx1"
 539 183494 2277    0 "THx2"
 540      0    0    0 ""
 541      0    0    0 ""
 542      0    0    0 ""
 543      0    0    0 ""
 544 173846 2266    0 "tELLIPSE"
 545      0    0    0 ""
 546      0    0    0 ""
 547      0    0    0 ""
 548      0    0    0 ""
 549      0    0    0 ""
 550      0    0    0 ""
 551      0    0    0 ""
 552      0    0    0 ""
 553      0    0    0 ""
 554 168144 2028 1784 "scr_width"
 555 183500 2279    0 "THy2"
 556      0    0    0 ""
 557      0    0    0 ""
 558 175884  791    0 "blank"
 559      0    0    0 ""
 560 168104 1019 2052 "Event_fifo"
 561      0    0    0 ""
 562      0    0    0 ""
 563 172086   70 1946 "#I270"
 564      0    0    0 ""
 565      0    0    0 ""
 566 170952 2098    0 "SSD_ceil"
 567      0    0    0 ""
 568      0    0    0 ""
 569      0    0    0 ""
 570 168438 2176    0 "StopSignal_"
 571      0    0    0 ""
 572      0    0    0 ""
 573      0    0    0 ""
 574      0    0    0 ""
 575      0    0    0 ""
 576 175686 2193    0 "SVR_BEL2"
 577      0    0    0 ""
 578      0    0    0 ""
 579      0    0    0 ""
 580      0    0    0 ""
 581 184438 2109    0 "STAIR"
 582      0    0    0 ""
 583      0    0    0 ""
 584 176168 2314    0 "trl_running"
 585      0    0    0 ""
 586      0    0    0 ""
 587      0    0    0 ""
 588      0    0    0 ""
 589      0    0    0 ""
 590      0    0    0 ""
 591      0    0    0 ""
 592      0    0    0 ""
 593      0    0    0 ""
 594      0    0    0 ""
 595      0    0    0 ""
 596      0    0    0 ""
 597 174358 2042 1931 "SET_INH"
 598      0    0    0 ""
 599      0    0    0 ""
 600      0    0    0 ""
 601      0    0    0 ""
 602 175676 2194 1797 "SVR_BELL"
 603 183812 2334    0 "uly"
 604      0    0    0 ""
 605      0    0    0 ""
 606      0    0    0 ""
 607      0    0    0 ""
 608      0    0    0 ""
 609 171158 1284 1270 "inter_trl_int"
 610 171260  953    0 "DEFAULT"
 611 172652   35    0 "#I1300"
 612      0    0    0 ""
 613 168236 2367 1023 "X_Gain"
 614      0    0    0 ""
 615      0    0    0 ""
 616      0    0    0 ""
 617      0    0    0 ""
 618 175466  870    0 "count"
 619      0    0    0 ""
 620      0    0    0 ""
 621      0    0    0 ""
 622      0    0    0 ""
 623 183024 1321    0 "LOC_RAND"
 624 170636 1055    0 "Failure_Tone_smlP"
 625      0    0    0 ""
 626 170618 2192    0 "Success_Tone_smlR"
 627      0    0    0 ""
 628      0    0    0 ""
 629 171100 2293 1353 "TrainingStill"
 630      0    0    0 ""
 631 175956 1042    0 "FAILURE"
 632      0    0    0 ""
 633 184922 2071    0 "signal_pd_S"
 634 171114  814 1848 "Canc_alert"
 635 184096 1168 2026 "flash"
 636 185808  494    0 "#S301"
 637 185826  495    0 "#S302"
 638 170294  822 2024 "catch_hold_time"
 639 175374 1624 1877 "plot_y"
 640 185868  498    0 "#S305"
 641 185886  499    0 "#S306"
 642 185898  500    0 "#S307"
 643 185916  501    0 "#S308"
 644 185928  502    0 "#S309"
 645      0    0    0 ""
 646 179526 2273    0 "temp"
 647      0    0    0 ""
 648      0    0    0 ""
 649      0    0    0 ""
 650 188020  106    0 "#I4700"
 651 185946  504    0 "#S310"
 652 175304 1033 1878 "Eye_on_VDOSync"
 653 169920  986 1886 "Dist_Ecc_list"
 654 184086  724 2051 "adjacent"
 655 186082  508    0 "#S314"
 656 175840 1101 2002 "fixating"
 657 186110  510    0 "#S316"
 658 186132  511    0 "#S317"
 659 186144  512    0 "#S318"
 660 186166  513    0 "#S319"
 661      0    0    0 ""
 662      0    0    0 ""
 663      0    0    0 ""
 664 168858 2054 1048 "ShamStim_"
 665      0    0    0 ""
 666      0    0    0 ""
 667 186198  515    0 "#S320"
 668 186212  516    0 "#S321"
 669 186234  517    0 "#S322"
 670 186266  518    0 "#S323"
 671 186280  519    0 "#S324"
 672 186298  520    0 "#S325"
 673 186312  521    0 "#S326"
 674 186326  522 1980 "#S327"
 675 173178  270 1889 "#S10"
 676 173214  281 1890 "#S11"
 677 173232  292    0 "#S12"
 678 173272  303    0 "#S13"
 679 170326 1615 1985 "plac_duration"
 680 173326  325 1354 "#S15"
 681 173344  336    0 "#S16"
 682 173374  347    0 "#S17"
 683 173410  358 1891 "#S18"
 684 173476  369 1892 "#S19"
 685 186434  528    0 "#S332"
 686 182704 2274 1893 "TgAng"
 687 170252 2275 1894 "THemi"
 688 186492  531    0 "#S335"
 689 169150 2305 1895 "Trl_number"
 690 168116 2041 2050 "Set_event"
 691 172598   37 1897 "#I1350"
 692 168014 2097 1898 "SPEED_UNITS"
 693 173560  403    0 "#S22"
 694 170368 2150 1259 "StimInterval"
 695 171386 2369 1260 "xena"
 696 173632  436    0 "#S25"
 697 173790  447    0 "#S26"
 698 169858 2033 1823 "SearchType"
 699 174468  469 1899 "#S28"
 700 174822  480 1900 "#S29"
 701 186626  539    0 "#S342"
 702 168368  836 1901 "CheckMouth"
 703 186666  541    0 "#S344"
 704 168272 1298 1902 "Juice_channel"
 705 186706  543    0 "#S346"
 706 186724  544    0 "#S347"
 707 168074 1561 2011 "Pause"
 708 174870  503 1904 "#S31"
 709 174982  514    0 "#S32"
 710 172626  131 1352 "#I700"
 711 175420  536    0 "#S34"
 712 175434  547    0 "#S35"
 713 176184  558    0 "#S36"
 714 173996 1522 1990 "object_targ"
 715 176208  580 1905 "#S38"
 716 168942 1394 1906 "MouthBegin_"
 717 186838  550    0 "#S352"
 718 186864  551 2047 "#S353"
 719 186892  552    0 "#S354"
 720 168222 1913 1907 "Refresh_rate"
 721 171408 1181 1910 "gauss"
 722 186952  555    0 "#S357"
 723 170572 2046 1911 "Set_Tones"
 724 176258  614 1912 "#S41"
 725 176270  625    0 "#S42"
 726 176292  636 2023 "#S43"
 727 176324  647 2041 "#S44"
 728 172290   77 1398 "#I315"
 729 176360  654    0 "#S46"
 730 170052  823 1399 "Catch_Rew"
 731 176406  656 1913 "#S48"
 732 176424  657 1914 "#S49"
 733 171280 1946 2053 "run_cmd_sess"
 734 168080 1305 1916 "Last_task"
 735 168650 2281 1917 "Tone_"
 736 187086  564    0 "#S365"
 737 187118  565    0 "#S366"
 738 169848 1621 1918 "PlacPres"
 739 176438  659 1919 "#S50"
 740 176452  660 1987 "#S51"
 741 168758  841 1400 "CmanHeader_"
 742 176496  662    0 "#S53"
 743 176528  663    0 "#S54"
 744 168044 2118 1401 "state"
 745 168426 1163 1402 "FixSpotOff_"
 746 168642 1930 1403 "Reward_"
 747 176588  667 1921 "#S58"
 748 175940 2065 1922 "signal"
 749 168002 2051 1923 "SETS"
 750 169086 2254 1924 "TargetPre_"
 751 187264  574    0 "#S374"
 752 187278  575    0 "#S375"
 753 187304  576    0 "#S376"
 754 187318  577    0 "#S377"
 755 172122   81 1925 "#I330"
 756 176634  671 1926 "#S61"
 757 176676  672    0 "#S62"
 758 175154 1005 1803 "Eccentricity"
 759 176714  674    0 "#S64"
 760 176728  675    0 "#S65"
 761 173656  965 1407 "deg2pix_X"
 762 173666  977 1408 "deg2pix_Y"
 763 176794  678 1927 "#S68"
 764 176808  679 1928 "#S69"
 765 173918  757 1929 "aRANGE"
 766 187470  584    0 "#S383"
 767 168494 1454 1930 "NOGOWrong_"
 768 187600  586    0 "#S385"
 769 175446 1178 1991 "frequency"
 770 188198 1300 1992 "KEY_REWD"
 771 176842  681 1993 "#S70"
 772 176856  682 1994 "#S71"
 773 176894  683    0 "#S72"
 774 176920  684    0 "#S73"
 775 176948  685    0 "#S74"
 776 176962  686    0 "#S75"
 777 176976  687    0 "#S76"
 778 177008  688    0 "#S77"
 779 177120  689 1995 "#S78"
 780 177132  690 1997 "#S79"
 781 188418  594    0 "#S392"
 782 188452  595    0 "#S393"
 783 188486  596    0 "#S394"
 784 188512  597    0 "#S395"
 785 168202 2016 1998 "scr_pixX"
 786 168212 2019 1999 "scr_pixY"
 787 172524   83 2000 "#I350"
 788 177162  693 2001 "#S81"
 789 177184  694    0 "#S82"
 790 172548  132 1419 "#I750"
 791 168954 1395 1420 "MouthEnd_"
 792 177232  697    0 "#S85"
 793 177246  698    0 "#S86"
 794 177260  699 1970 "#S87"
 795 177290  700    0 "#S88"
 796 177304  701    0 "#S89"
 797 169140 1278    0 "InfosZero"
 798      0    0    0 ""
 799      0    0    0 ""
 800      0    0    0 ""
 801      0    0    0 ""
 802      0    0    0 ""
 803 177336  703    0 "#S90"
 804 175538 2363 1421 "WATCHMTH"
 805 177374  705    0 "#S92"
 806 177388  706    0 "#S93"
 807 177402  707    0 "#S94"
 808 170126 2075 1986 "SingFreq"
 809 168418 2238 1423 "Target_"
 810 177482  710    0 "#S97"
 811 177512  711    0 "#S98"
 812 177526  712    0 "#S99"
 813      0    0    0 ""
 814      0    0    0 ""
 815      0    0    0 ""
 816      0    0    0 ""
 817      0    0    0 ""
 818      0    0    0 ""
 819      0    0    0 ""
 820      0    0    0 ""
 821 177014 2151    0 "StimTm"
 822      0    0    0 ""
 823      0    0    0 ""
 824 189510  168    0 "#M3F989375"
 825      0    0    0 ""
 826      0    0    0 ""
 827 168598  827    0 "CatchIncorrectNG_"
 828      0    0    0 ""
 829      0    0    0 ""
 830      0    0    0 ""
 831      0    0    0 ""
 832      0    0    0 ""
 833      0    0    0 ""
 834 168194 1600 1798 "pd_size"
 835      0    0    0 ""
 836 175658 2003    0 "sample_n"
 837      0    0    0 ""
 838      0    0    0 ""
 839      0    0    0 ""
 840      0    0    0 ""
 841      0    0    0 ""
 842      0    0    0 ""
 843      0    0    0 ""
 844      0    0    0 ""
 845      0    0    0 ""
 846 185964  987    0 "DistFix"
 847      0    0    0 ""
 848      0    0    0 ""
 849      0    0    0 ""
 850      0    0    0 ""
 851      0    0    0 ""
 852 171454  164 1830 "#M00000000"
 853      0    0    0 ""
 854      0    0    0 ""
 855      0    0    0 ""
 856      0    0    0 ""
 857      0    0    0 ""
 858      0    0    0 ""
 859      0    0    0 ""
 860      0    0    0 ""
 861      0    0    0 ""
 862      0    0    0 ""
 863      0    0    0 ""
 864 168616  800 1315 "BreakTFix_"
 865 184554   23 1959 "#I1001"
 866      0    0    0 ""
 867 172248   40    0 "#I1400"
 868      0    0    0 ""
 869      0    0    0 ""
 870 172726   51    0 "#I1800"
 871      0    0    0 ""
 872      0    0    0 ""
 873      0    0    0 ""
 874      0    0    0 ""
 875 175334 2362    0 "WATCHEYE"
 876 171742   56 1347 "#I2000"
 877 169070 2038    0 "SendPenatrInfo_"
 878      0    0    0 ""
 879      0    0    0 ""
 880      0    0    0 ""
 881      0    0    0 ""
 882      0    0    0 ""
 883      0    0    0 ""
 884      0    0    0 ""
 885      0    0    0 ""
 886      0    0    0 ""
 887      0    0    0 ""
 888 171904  222 1230 "#M4405C000"
 889      0    0    0 ""
 890      0    0    0 ""
 891 188630  604    0 "#S400"
 892 188646  605    0 "#S401"
 893 188660  606    0 "#S402"
 894 187988   86 2003 "#I3800"
 895 188690  608    0 "#S404"
 896 188726  609    0 "#S405"
 897 188742  610    0 "#S406"
 898 169612  869 2005 "Correct_trls"
 899 188148 1456 2006 "now"
 900 171868   90 2007 "#I4000"
 901 174426   24 1961 "#I1025"
 902      0    0    0 ""
 903 169056 2298 1074 "TrialInBlock"
 904      0    0    0 ""
 905      0    0    0 ""
 906 188028  109    0 "#I4800"
 907 188822  615    0 "#S410"
 908 188838  616    0 "#S411"
 909 188852  617    0 "#S412"
 910 188866  618    0 "#S413"
 911 183414 2034 2009 "SEL_LOCS"
 912 172256  114 2010 "#I5000"
 913 188934  621    0 "#S416"
 914 188948  622    0 "#S417"
 915 188962  623    0 "#S418"
 916 188978  624    0 "#S419"
 917      0    0    0 ""
 918      0    0    0 ""
 919 174204 1495    0 "object_ssd10"
 920 174218 1496    0 "object_ssd11"
 921 169286 1858 1288 "Rand_Comp_Trl_DA"
 922 174246 1498    0 "object_ssd13"
 923 174260 1499 2013 "object_ssd14"
 924 174274 1500 2020 "object_ssd15"
 925 169898 2091 2015 "soa_mode"
 926 173114  148 2016 "#L11"
 927 173120  149 2017 "#L12"
 928 173126  150 2018 "#L13"
 929 173132  151 2028 "#L14"
 930 174512 1485 2029 "object_soa2"
 931 174524 1486 2030 "object_soa3"
 932 170174 2259 2031 "TargOrt1"
 933 170184 2260 1984 "TargOrt2"
 934 174560 1489    0 "object_soa6"
 935 174572 1490    0 "object_soa7"
 936 169304 1859 1304 "Rand_Comp_Trl_DP"
 937 174596 1492    0 "object_soa9"
 938      0    0    0 ""
 939 172816    1 2032 "#F0"
 940 172820    2 2033 "#F1"
 941 173766    3 2034 "#F2"
 942 175382    4 2035 "#F3"
 943 175386    5 2036 "#F4"
 944 172566   25 2037 "#I1050"
 945 189410  643    0 "#S436"
 946 189430  644    0 "#S437"
 947 189450  645    0 "#S438"
 948 171886  220 2038 "#M43E48000"
 949 173644 1627    0 "PORTB"
 950 173650 1628    0 "PORTC"
 951      0    0    0 ""
 952      0    0    0 ""
 953      0    0    0 ""
 954      0    0    0 ""
 955 189638  648    0 "#S440"
 956 189648  649    0 "#S441"
 957 189692  650    0 "#S442"
 958 189706  651    0 "#S443"
 959 175320  829 2054 "CenterEyeNow"
 960      0    0    0 ""
 961      0    0    0 ""
 962      0    0    0 ""
 963 170934 1401 1791 "n_SOAs"
 964 183674 1330    0 "LVx2"
 965 171392  801    0 "broca"
 966 171708  135 2040 "#I800"
 967 175634 2361 1974 "WATCHBOD"
 968      0    0    0 ""
 969      0    0    0 ""
 970 168054 2043 1021 "Set_monkey"
 971 170238 2261    0 "TargTrainSet"
 972      0    0    0 ""
 973 171414  852    0 "color_num"
 974      0    0    0 ""
 975      0    0    0 ""
 976      0    0    0 ""
 977      0    0    0 ""
 978 168522  716 1940 "Abort_"
 979 174084 1493 1792 "object_ssd0"
 980 174096 1494 1962 "object_ssd1"
 981 174108 1505    0 "object_ssd2"
 982 174120 1506 1440 "object_ssd3"
 983 174132 1507    0 "object_ssd4"
 984 174144 1508    0 "object_ssd5"
 985 174156 1509    0 "object_ssd6"
 986 174168 1510    0 "object_ssd7"
 987 171436   16 1286 "#I0"
 988 171440   17 1287 "#I1"
 989 171444   53    0 "#I2"
 990 171522   74    0 "#I3"
 991 171526   87    0 "#I4"
 992 171530  111    0 "#I5"
 993 169202 1861 1165 "Rand_Comp_Trl_number_DA"
 994 171538  129 1253 "#I7"
 995 171542  133 2008 "#I8"
 996 171546  140 1963 "#I9"
 997 169826  824    0 "CatchCode"
 998      0    0    0 ""
 999      0    0    0 ""
1000      0    0    0 ""
1001      0    0    0 ""
1002 168450 2299 1334 "TrialStart_"
1003 175280 1039    0 "eye_y"
1004      0    0    0 ""
1005 168380  834 1064 "CheckBody"
1006      0    0    0 ""
1007      0    0    0 ""
1008 169178 1862    0 "Rand_Comp_Trl_number_DP"
1009      0    0    0 ""
1010 170690 1153 1849 "fixation_target"
1011      0    0    0 ""
1012      0    0    0 ""
1013      0    0    0 ""
1014 170910 1406    0 "n_SSDs"
1015      0    0    0 ""
1016      0    0    0 ""
1017 169534  876 1859 "cum_rand_rt_DA"
1018 169002 2113    0 "Staircase_"
1019      0    0    0 ""
1020 169374 1910 1065 "RandPerAcc_DP"

HASH OVERFLOW TABLE

iHSH  iNAM  iSYM iNXT Symbol
---- ------ ---- ---- -----------
1021 168066 1388    0 "monkey"
1022 168166 2178    0 "subj_dist"
1023 168244 2370    0 "Y_Gain"
1024 168262 2371    0 "Y_Offset"
1025 168286 2121    0 "Stim_channel"
1026 168300 1037 1025 "eye_X_channel"
1027 168314 1041 1026 "eye_Y_channel"
1028 168328 1610 1027 "PhotoD_channel"
1029 168356  735    0 "analogUnits"
1030 168484 1210    0 "GoError_"
1031 168506 1215 1030 "GoTargFixError_"
1032 168540 1209    0 "GOCorrect_"
1033 168552 1452 1032 "NOGOCorrect_"
1034 168566  825 1033 "CatchCorrect_"
1035 168628 1004    0 "EarlySaccade_"
1036 168656 1018    0 "Error_tone"
1037 168668 1934 1036 "Reward_tone"
1038 168680 1017    0 "Error_sacc"
1039 168692  868 1038 "correct_sacc"
1040 168706 1032    0 "ExtraReward_"
1041 168720 2095 1040 "SoundOnReward_"
1042 168736 2094 1041 "SoundNoReward_"
1043 168770 1369    0 "MemHeader_"
1044 168782 1212 1043 "GONOGOHeader_"
1045 168796  982 1044 "DelayedHeader_"
1046 168812 2032 1045 "SearchHeader_"
1047 168826  820 1046 "CaptureHeader_"
1048 168882 1015    0 "EndStim_"
1049 168892 2372    0 "ZeroEyePosition_"
1050 168924 1996 1035 "Saccade_"
1051 168964 1334 1047 "MapHeader_"
1052 168976 1166    0 "FixWindow_"
1053 168988 2256 1052 "TargetWindow_"
1054 169044 1935    0 "RewardSize_"
1055 169130 1014    0 "EndInfos_"
1056 169162  853    0 "Comp_Trl_number"
1057 169226 1921 1056 "Rep_Comp_Trl_number"
1058 169246 1860 1057 "Rand_Comp_Trl_number"
1059 169322 1920    0 "Rep_Comp_NG_Trl"
1060 169350 1927    0 "RepPerAcc"
1061 169360 1909    0 "RandPerAcc_DA"
1062 169388 1892 1039 "rand_inacc_sacc"
1063 169404 1922 1062 "rep_inacc_sacc"
1064 169420 1893 1061 "rand_inacc_sacc_DA"
1065 169440 1894    0 "rand_inacc_sacc_DP"
1066 169484  768    0 "avg_rep_rt"
1067 169496 1217 1066 "graph_rep_rt"
1068 169510  875    0 "cum_rand_rt"
1069 169522  765 1068 "avg_rand_rt"
1070 169550  766    0 "avg_rand_rt_DA"
1071 169582  767    0 "avg_rand_rt_DP"
1072 169598 1216 1069 "graph_rand_rt"
1073 169638  792 1058 "Block_number"
1074 169652 2323    0 "Trls_per_block"
1075 169668 1204    0 "go_weight"
1076 169678 2174 1075 "stop_weight"
1077 169690 1266 1076 "ignore_weight"
1078 169714  799 1077 "Bonus_weight"
1079 169728  938 1078 "Dealer_wins_weight"
1080 169748  776 1079 "BigR_weight"
1081 169760 1368 1080 "MedR_weight"
1082 169772 2083 1081 "SmlR_weight"
1083 169784 2082 1082 "SmlP_weight"
1084 169796 1367 1083 "MedP_weight"
1085 169808  775 1084 "BigP_weight"
1086 169836 1608    0 "Perc_catch"
1087 169870 2255    0 "TargetType"
1088 169890 2053    0 "SetSize"
1089 169908  855 1059 "Consec_trl"
1090 169934  985    0 "Dist_Ang_list"
1091 169948 1911 1090 "RanTarg_Ang_list"
1092 169966 1928 1091 "RepTarg_Ang_list"
1093 169984 2294 1092 "TrAngList"
1094 170042 1313    0 "LatStruct"
1095 170062 2301 1087 "trialtype"
1096 170088 1455    0 "NonSingleton_color"
1097 170108  913 1096 "d1color"
1098 170116 2077    0 "SingMode"
1099 170136  990    0 "DistPres"
1100 170146 2074 1086 "SingCol"
1101 170204  989    0 "DistOrt"
1102 170258  984    0 "DHemi"
1103 170280 1867    0 "Rand_d1_angle"
1104 170310 2030    0 "search_fix_time"
1105 170340 1345 1104 "max_plactime"
1106 170354 1379 1105 "min_plactime"
1107 170392 1307    0 "LastStim"
1108 170410 1635    0 "PulseGap"
1109 170428 2156 1097 "stop_sig_color"
1110 170444 1251 1109 "ignore_sig_color"
1111 170462 1128 1110 "fixation_color"
1112 170478 1335 1111 "Mask_sig_color"
1113 170506  850 1093 "Color_list"
1114 170518 2081 1113 "Size_list"
1115 170528  743 1114 "Angle_list"
1116 170540 1012 1115 "Eccentricity_list"
1117 170558 1150 1088 "fixation_size"
1118 170654 1054 1089 "Failure_Tone_medP"
1119 170714 1333    0 "lwidth"
1120 170722 1093 1117 "fix_win_size"
1121 170736 2222 1120 "targ_win_size"
1122 170750  733 1106 "allowed_fix_time"
1123 170768 1027    0 "expo_jitter"
1124 170796 1378 1122 "min_holdtime"
1125 170810 1343 1124 "max_holdtime"
1126 170824 1384    0 "min_soa"
1127 170832 1362 1126 "max_soa"
1128 170840 1380 1125 "Min_saccade_time"
1129 170858 1358 1128 "max_saccade_time"
1130 170876 1351    0 "max_sacc_duration"
1131 170894 2203 1129 "targ_hold_time"
1132 170926 1386    0 "min_ssd"
1133 170942 2099    0 "SSD_floor"
1134 170962 2112    0 "staircase"
1135 170972 2100 1116 "SSD_list"
1136 170982 2090 1135 "SOA_list"
1137 170992  819 1131 "cancl_time"
1138 171004 2283 1130 "tone_duration"
1139 171018 1933 1024 "reward_offset"
1140 171032  774 1137 "Base_Reward_time"
1141 171050  773 1140 "Base_Punish_time"
1142 171080 1396 1071 "Move_ct"
1143 171088 1344 1142 "Max_move_ct"
1144 171126 1160    0 "fixed_trl_length"
1145 171144 2297 1144 "trial_length"
1146 171182 1453 1127 "nogosoa"
1147 171190 1931 1138 "Reward_duration"
1148 171206 1637 1141 "punish_time"
1149 171218 2189 1037 "success_tone"
1150 171232 1052 1149 "failure_tone"
1151 171246 1247    0 "IFI"
1152 171250 1175 1148 "flashTime"
1153 171276  247 1133 "#P3"
1154 171294 1957    0 "run_fix_sess"
1155 171308 1981 1154 "run_mg_sess"
1156 171320 1967 1155 "run_gonogo_sess"
1157 171336 1960 1156 "run_flash_sess"
1158 171352 1953 1157 "run_delayed_sess"
1159 171370 1988 1158 "run_search_sess"
1160 171398 1229 1063 "helmholtz"
1161 171466  201    0 "#M42C80000"
1162 171478  113 1100 "#I500"
1163 171484   20 1054 "#I1000"
1164 171516   84    0 "#I36"
1165 171534  120    0 "#I6"
1166 171562  166 1161 "#M3F000000"
1167 171574   50 1107 "#I180"
1168 171580  205 1166 "#M43340000"
1169 171598  200 1168 "#M42B40000"
1170 171616  203 1169 "#M43070000"
1171 171636  239 1170 "#MC3070000"
1172 171654  238 1171 "#MC2B40000"
1173 171672  237 1172 "#MC2340000"
1174 171684  177 1173 "#M41000000"
1175 171702   89    0 "#I400"
1176 171730  171 1174 "#M40200000"
1177 171756  172 1176 "#M40400000"
1178 171768  176 1177 "#M40C00000"
1179 171780  178 1178 "#M41100000"
1180 171798  180 1179 "#M41400000"
1181 171822   41    0 "#I15"
1182 171916  173 1180 "#M40600000"
1183 171934   21 1182 "#I10000"
1184 171942  169 1183 "#M3FC00000"
1185 171954  170 1184 "#M40000000"
1186 171966  174 1185 "#M40800000"
1187 171978  175 1186 "#M40A00000"
1188 171990  187 1187 "#M41F00000"
1189 172002  196 1188 "#M42700000"
1190 172014   31 1101 "#I120"
1191 172020  202 1189 "#M42F00000"
1192 172032   42    0 "#I150"
1193 172038  204 1191 "#M43160000"
1194 172056  207 1193 "#M43520000"
1195 172074  209 1194 "#M43700000"
1196 172092  211 1195 "#M43870000"
1197 172104   76    0 "#I300"
1198 172110  212 1196 "#M43960000"
1199 172128  214 1198 "#M43A50000"
1200 172146  194 1199 "#M42480000"
1201 172158  181 1200 "#M41500000"
1202 172176  185 1201 "#M41B80000"
1203 172188  188 1202 "#M42040000"
1204 172206  191 1203 "#M422C0000"
1205 172224  195 1204 "#M42540000"
1206 172236  197 1205 "#M427C0000"
1207 172272   99    0 "#I45"
1208 172278  192 1206 "#M42340000"
1209 172296  213    0 "#M439D8000"
1210 172314  208 1208 "#M43610000"
1211 172326  206 1210 "#M43480000"
1212 172338  216 1211 "#M43C80000"
1213 172356  225 1212 "#M44610000"
1214 172368  226 1213 "#M447A0000"
1215 172380  179 1214 "#M41300000"
1216 172404  219 1215 "#M43E10000"
1217 172416  130    0 "#I70"
1218 172422  198 1216 "#M428C0000"
1219 172440  199 1218 "#M42A00000"
1220 172452  217 1219 "#M43DC0000"
1221 172464  184 1220 "#M41900000"
1222 172476  186 1221 "#M41E00000"
1223 172494  189 1222 "#M42180000"
1224 172506  108    0 "#I48"
1225 172512  193 1223 "#M42400000"
1226 172536  223 1225 "#M44160000"
1227 172554  224 1209 "#M443B8000"
1228 172574  227    0 "#M44834000"
1229 172586  229 1226 "#M44960000"
1230 172606  231    0 "#M44A8C000"
1231 172618  124 1229 "#I60000"
1232 172640  228 1227 "#M44898000"
1233 172660  230 1232 "#M44A28000"
1234 172678  218 1233 "#M43DE8000"
1235 172690  221 1231 "#M43FA0000"
1236 172702  232 1235 "#M44AF0000"
1237 172714  233 1236 "#M44C80000"
1238 172734  234 1237 "#M44E10000"
1239 172746  235 1238 "#M44FA0000"
1240 172758  125 1239 "#I600000"
1241 172774   66    0 "#I250"
1242 172780  210 1240 "#M437A0000"
1243 172792  215 1242 "#M43AF0000"
1244 172804 1213    0 "GOODVARS"
1245 172836  268    0 "#S0"
1246 172956  602    0 "#S4"
1247 173100  162    0 "#L8"
1248 173108  147 1098 "#L10"
1249 173150  702    0 "#S9"
1250 173314  314 1147 "#S14"
1251 173416 2120 1167 "STIM"
1252 173422  833 1028 "channel"
1253 173434 1528    0 "off"
1254 173438 1301 1251 "KEY_STIM"
1255 173448 2039    0 "SET_CLRS"
1256 173488   68    0 "#I255"
1257 173512  381    0 "#S20"
1258 173536  392 1029 "#S21"
1259 173584  414    0 "#S23"
1260 173608  425    0 "#S24"
1261 173638 1626 1234 "PORTA"
1262 173676 2342    0 "unit2pix_X"
1263 173688 2350    0 "unit2pix_Y"
1264 173700 2040    0 "SET_COOR"
1265 173730 1228 1119 "half_width"
1266 173742 1220 1085 "half_height"
1267 173760  979 1060 "deg_y"
1268 173802 1182    0 "gLEFT"
1269 173808 1219 1266 "gRIGHT"
1270 173816 2292    0 "tPOINT"
1271 173824 2263    0 "tBOX"
1272 173838 2329    0 "tXCROSS"
1273 173872  769    0 "aVISIBLE"
1274 173882  726 1273 "aINVISIBLE"
1275 173894  725    0 "aFILLED"
1276 173902  764 1275 "aUNFILLED"
1277 173912  760 1121 "aSIZE"
1278 173942 1470    0 "object_fixwin"
1279 173956 1462    0 "object_eye"
1280 173984 1468    0 "object_fix"
1281 174016  262    0 "#Q4"
1282 174020 1314 1268 "left"
1283 174026 1936 1269 "right"
1284 174042   10    0 "#I-2"
1285 174062  458 1095 "#S27"
1286 174180 1511    0 "object_ssd8"
1287 174192 1512    0 "object_ssd9"
1288 174232 1497    0 "object_ssd12"
1289 174288 1501 1248 "object_ssd16"
1290 174302 1502    0 "object_ssd17"
1291 174316 1503    0 "object_ssd18"
1292 174330 1504    0 "object_ssd19"
1293 174344 1461    0 "object_30_70"
1294 174366 2101    0 "ssd_range"
1295 174376 1280 1282 "inh_left"
1296 174386 1281 1283 "inh_right"
1297 174396 1279 1277 "inh_box_size"
1298 174410   57 1243 "#I200000"
1299 174474 1070    0 "FirstSOATrial"
1300 174488 1473 1292 "object_soa0"
1301 174500 1474    0 "object_soa1"
1302 174536 1487 1274 "object_soa4"
1303 174548 1488    0 "object_soa5"
1304 174584 1491    0 "object_soa8"
1305 174608 1475 1146 "object_soa10"
1306 174622 1476    0 "object_soa11"
1307 174748 2045 1305 "SET_SOA"
1308 174756 2092 1294 "soa_range"
1309 174766 2089 1295 "soa_left"
1310 174776 2093 1296 "soa_right"
1311 174786 2085 1297 "soa_box_size"
1312 174842  492 1197 "#S30"
1313 174876 1069 1299 "FirstSearchTrial"
1314 174922 2044 1271 "SET_SCH"
1315 174930    8 1163 "#I-1000"
1316 174988 2195 1103 "targ_angle"
1317 175010 1089 1309 "fix_win_left"
1318 175024 1091 1310 "fix_win_right"
1319 175038 1087    0 "fix_win_down"
1320 175064 2218 1317 "targ_win_left"
1321 175078 2220 1318 "targ_win_right"
1322 175094 2216 1319 "targ_win_down"
1323 175108 2224    0 "targ_win_up"
1324 175128  902    0 "curr_target"
1325 175148  736 1316 "Angle"
1326 175168 2133 1118 "stim_ecc_x"
1327 175180 2145    0 "stim_ecc_y"
1328 175192 1225    0 "half_size_tw"
1329 175206 1531 1311 "old_fix_win_size"
1330 175224 1532 1329 "old_targ_win_size"
1331 175242 1270 1278 "In_FixWin"
1332 175252 1276    0 "In_TargWin"
1333 175264 1323 1291 "LOCATE_I"
1334 175274 1035    0 "eye_x"
1335 175286  263    0 "#Q5"
1336 175290  266    0 "#Q8"
1337 175294  267 1307 "#Q9"
1338 175298  255    0 "#Q10"
1339 175350 1534    0 "oldy"
1340 175356 1312 1152 "lasttime"
1341 175366 1623 1340 "plot_x"
1342 175396  525    0 "#S33"
1343 175440 2280 1150 "TONE"
1344 175456  999 1250 "duration"
1345 175472   22 1298 "#I10000000"
1346 175494  127 1228 "#I64000"
1347 175502   79    0 "#I32000"
1348 175510   46    0 "#I16000"
1349 175518  136 1261 "#I8000"
1350 175526  835 1344 "CheckMotion"
1351 175548 1390 1252 "mouth_channel"
1352 175562 1392 1342 "mouth_thresh"
1353 175576 2119    0 "still"
1354 175582 1397    0 "moving"
1355 175604 1304    0 "last_status"
1356 175616 1389    0 "mouth"
1357 175622 1393 1341 "mouth_time"
1358 175644  794 1351 "body_channel"
1359 175668  714 1022 "a_sets"
1360 175708 2317 1357 "trl_start_time"
1361 175724 1311    0 "laststopoutcome"
1362 175740  843 1313 "CMDTRIAL"
1363 175750  884 1360 "curr_holdtime"
1364 175764 2322 1285 "trl_type"
1365 175774  893 1132 "curr_ssd"
1366 175800 1200 1326 "go_trl"
1367 175808 2170 1366 "stop_trl"
1368 175818 1262 1367 "ignore_trl"
1369 175830 1419 1280 "need_fix"
1370 175850 2207    0 "targ_on"
1371 175858 1275 1321 "in_flight"
1372 175868 1541 1324 "on_target"
1373 175878 2108 1256 "stage"
1374 175890 1143 1332 "fixation_pd"
1375 175902 1105 1350 "FIXATION"
1376 175912 2253 1067 "target_pd"
1377 175922 2237 1372 "target"
1378 175930 2069 1284 "signal_pd"
1379 175948 2179 1159 "SUCCESS"
1380 175964 1425 1308 "no_change"
1381 175974 1431 1369 "no_fix"
1382 175982  807 1381 "broke_fix"
1383 175992 1208 1245 "go_wrong"
1384 176026  813    0 "broke_targ"
1385 176038 1192    0 "go_correct"
1386 176050 1451 1383 "nogo_wrong"
1387 176062  798    0 "body_move"
1388 176072 2291 1279 "too_fast"
1389 176082 1085 1363 "fix_spot_time"
1390 176096 2214 1389 "targ_time"
1391 176106 2001 1390 "saccade_time"
1392 176120  750 1391 "aquire_fix_time"
1393 176136 2162 1392 "stop_sig_time"
1394 176150  756 1393 "aquire_targ_time"
1395 176196  569 1384 "#S37"
1396 176226  591 1134 "#S39"
1397 176236  603    0 "#S40"
1398 176338  653    0 "#S45"
1399 176392  655    0 "#S47"
1400 176482  661 1051 "#S52"
1401 176542  664 1293 "#S55"
1402 176560  665    0 "#S56"
1403 176574  666 1042 "#S57"
1404 176602  668    0 "#S59"
1405 176620  670    0 "#S60"
1406 176690  673    0 "#S63"
1407 176754  676 1262 "#S66"
1408 176768  677 1263 "#S67"
1409 177022 2002 1395 "sacctarg"
1410 177032 1912 1394 "ReactionTime"
1411 177046 1371 1362 "MGTRIAL"
1412 177054  889 1337 "curr_soa"
1413 177064 1075    0 "fix_off"
1414 177072 1003 1160 "early_sacc"
1415 177084 1435 1414 "no_sacc"
1416 177092 1079 1410 "fix_off_time"
1417 177106 2148 1343 "StimDone"
1418 177144  692    0 "#S80"
1419 177200  695    0 "#S83"
1420 177214  696    0 "#S84"
1421 177356  704    0 "#S91"
1422 177454  708    0 "#S95"
1423 177468  709    0 "#S96"
1424 177590  274 1386 "#S103"
1425 177604  275    0 "#S104"
1426 177656  276    0 "#S105"
1427 177670  277    0 "#S106"
1428 177684  278 1246 "#S107"
1429 177714  279 1331 "#S108"
1430 177760  280    0 "#S109"
1431 177942  291 1417 "#S119"
1432 178028  295    0 "#S122"
1433 178054  296    0 "#S123"
1434 178068  297    0 "#S124"
1435 178082  298 1276 "#S125"
1436 178114  299    0 "#S126"
1437 178120 1306 1361 "LastSearchOutcome"
1438 178138 2004 1411 "SCHTRIAL"
1439 178160 1104 1409 "fixating_targ"
1440 178174 1102 1413 "fixating_off"
1441 178188 1132 1139 "fixation_offset"
1442 178212 1613    0 "plac"
1443 178218 2247    0 "target_f_pd"
1444 178230 2244 1258 "target_f"
1445 178240 1446 1379 "nogo_success"
1446 178270  300 1181 "#S127"
1447 178286  301 1338 "#S128"
1448 178296  302    0 "#S129"
1449 178340  306    0 "#S132"
1450 178350  307    0 "#S133"
1451 178374  308    0 "#S134"
1452 178384  309    0 "#S135"
1453 178436  312    0 "#S138"
1454 178464  313    0 "#S139"
1455 178500  317    0 "#S142"
1456 178532  319 1376 "#S144"
1457 178554  320 1387 "#S145"
1458 178602  322    0 "#S147"
1459 178616  323 1164 "#S148"
1460 178682  328    0 "#S152"
1461 178726  331    0 "#S155"
1462 178762  333 1207 "#S157"
1463 178776  334 1323 "#S158"
1464 178808  337    0 "#S160"
1465 178852  339 1370 "#S162"
1466 178898  341    0 "#S164"
1467 178912  342    0 "#S165"
1468 178958  345 1190 "#S168"
1469 179036  350    0 "#S172"
1470 179064  352 1072 "#S174"
1471 179078  353    0 "#S175"
1472 179102  354 1050 "#S176"
1473 179204  361 1217 "#S182"
1474 179318  367    0 "#S188"
1475 179418  372    0 "#S192"
1476 179486  376 1034 "#S196"
1477 179532 1559 1375 "orientation"
1478 179544 1235    0 "Homo_orient"
1479 179556 1924    0 "RepDistOrients"
1480 179572 1929 1479 "RepTargOrients"
1481 179588 1674 1478 "R1_targ_orient"
1482 179604 1647 1481 "R1_d1_orient"
1483 179618 1650 1482 "R1_d2_orient"
1484 179632 1653 1483 "R1_d3_orient"
1485 179646 1656 1484 "R1_d4_orient"
1486 179660 1659 1485 "R1_d5_orient"
1487 179674 1662 1486 "R1_d6_orient"
1488 179688 1665 1487 "R1_d7_orient"
1489 179702 1668 1488 "R1_d8_orient"
1490 179716 1671 1489 "R1_d9_orient"
1491 179730 1641 1490 "R1_d10_orient"
1492 179744 1644 1491 "R1_d11_orient"
1493 179758 1710 1492 "R2_targ_orient"
1494 179774 1683 1493 "R2_d1_orient"
1495 179788 1686 1494 "R2_d2_orient"
1496 179802 1689 1495 "R2_d3_orient"
1497 179816 1692 1496 "R2_d4_orient"
1498 179830 1695 1497 "R2_d5_orient"
1499 179844 1698 1498 "R2_d6_orient"
1500 179858 1701 1499 "R2_d7_orient"
1501 179872 1704 1500 "R2_d8_orient"
1502 179886 1707 1501 "R2_d9_orient"
1503 179900 1677 1502 "R2_d10_orient"
1504 179914 1680 1503 "R2_d11_orient"
1505 179928 1746 1504 "R3_targ_orient"
1506 179944 1719 1505 "R3_d1_orient"
1507 179958 1722 1506 "R3_d2_orient"
1508 179972 1725 1507 "R3_d3_orient"
1509 179986 1728 1508 "R3_d4_orient"
1510 180000 1731 1509 "R3_d5_orient"
1511 180014 1734 1510 "R3_d6_orient"
1512 180028 1737 1511 "R3_d7_orient"
1513 180042 1740 1512 "R3_d8_orient"
1514 180056 1743 1513 "R3_d9_orient"
1515 180070 1713 1514 "R3_d10_orient"
1516 180084 1716 1515 "R3_d11_orient"
1517 180098 1782 1516 "R4_targ_orient"
1518 180114 1755 1517 "R4_d1_orient"
1519 180128 1758 1518 "R4_d2_orient"
1520 180142 1761 1519 "R4_d3_orient"
1521 180156 1764 1520 "R4_d4_orient"
1522 180170 1767 1521 "R4_d5_orient"
1523 180184 1770 1522 "R4_d6_orient"
1524 180198 1773 1523 "R4_d7_orient"
1525 180212 1776 1524 "R4_d8_orient"
1526 180226 1779 1525 "R4_d9_orient"
1527 180240 1749 1526 "R4_d10_orient"
1528 180254 1752 1527 "R4_d11_orient"
1529 180268 1818 1528 "R5_targ_orient"
1530 180284 1791 1529 "R5_d1_orient"
1531 180298 1794 1530 "R5_d2_orient"
1532 180312 1797 1531 "R5_d3_orient"
1533 180326 1800 1532 "R5_d4_orient"
1534 180340 1803 1533 "R5_d5_orient"
1535 180354 1806 1534 "R5_d6_orient"
1536 180368 1809 1535 "R5_d7_orient"
1537 180382 1812 1536 "R5_d8_orient"
1538 180396 1815 1537 "R5_d9_orient"
1539 180410 1785 1538 "R5_d10_orient"
1540 180424 1788 1539 "R5_d11_orient"
1541 180438 1854 1540 "R6_targ_orient"
1542 180454 1827 1541 "R6_d1_orient"
1543 180468 1830 1542 "R6_d2_orient"
1544 180482 1833 1543 "R6_d3_orient"
1545 180496 1836 1544 "R6_d4_orient"
1546 180510 1839 1545 "R6_d5_orient"
1547 180524 1842 1546 "R6_d6_orient"
1548 180538 1845 1547 "R6_d7_orient"
1549 180552 1848 1548 "R6_d8_orient"
1550 180566 1851 1549 "R6_d9_orient"
1551 180580 1821 1550 "R6_d10_orient"
1552 180594 1824 1551 "R6_d11_orient"
1553 180616 1899 1552 "RandHomo_orient"
1554 180632  988 1480 "DistOrients"
1555 180644 2257 1554 "TargOrients"
1556 180656 1898 1553 "Rand_targ_orient"
1557 180674 1869 1556 "Rand_d1_orient"
1558 180690 1872 1557 "Rand_d2_orient"
1559 180706 1875 1558 "Rand_d3_orient"
1560 180722 1878 1559 "Rand_d4_orient"
1561 180738 1881 1560 "Rand_d5_orient"
1562 180754 1884 1561 "Rand_d6_orient"
1563 180770 1887 1562 "Rand_d7_orient"
1564 180786 1889 1563 "Rand_d8_orient"
1565 180802 1891 1564 "Rand_d9_orient"
1566 180818 1864 1565 "Rand_d10_orient"
1567 180834 1866 1566 "Rand_d11_orient"
1568 180850 1895    0 "RAND_ORT"
1569 180874 1458    0 "numDistAngles"
1570 180900 1672 1325 "R1_targ_angle"
1571 180914 1645 1570 "R1_d1_angle"
1572 180926 1648 1571 "R1_d2_angle"
1573 180938 1651 1572 "R1_d3_angle"
1574 180950 1654 1573 "R1_d4_angle"
1575 180962 1657 1574 "R1_d5_angle"
1576 180974 1660 1575 "R1_d6_angle"
1577 180986 1663 1576 "R1_d7_angle"
1578 180998 1666 1577 "R1_d8_angle"
1579 181010 1669 1578 "R1_d9_angle"
1580 181022 1639 1579 "R1_d10_angle"
1581 181036 1642 1580 "R1_d11_angle"
1582 181050 1673    0 "R1_targ_ecc"
1583 181062 1646 1582 "R1_d1_ecc"
1584 181072 1649 1583 "R1_d2_ecc"
1585 181082 1652 1584 "R1_d3_ecc"
1586 181092 1655 1585 "R1_d4_ecc"
1587 181102 1658 1586 "R1_d5_ecc"
1588 181112 1661 1587 "R1_d6_ecc"
1589 181122 1664 1588 "R1_d7_ecc"
1590 181132 1667 1589 "R1_d8_ecc"
1591 181142 1670 1590 "R1_d9_ecc"
1592 181152 1640 1591 "R1_d10_ecc"
1593 181164 1643 1592 "R1_d11_ecc"
1594 181176 1708 1581 "R2_targ_angle"
1595 181190 1681 1594 "R2_d1_angle"
1596 181202 1684 1595 "R2_d2_angle"
1597 181214 1687 1596 "R2_d3_angle"
1598 181226 1690 1597 "R2_d4_angle"
1599 181238 1693 1598 "R2_d5_angle"
1600 181250 1696 1599 "R2_d6_angle"
1601 181262 1699 1600 "R2_d7_angle"
1602 181274 1702 1601 "R2_d8_angle"
1603 181286 1705 1602 "R2_d9_angle"
1604 181298 1675 1603 "R2_d10_angle"
1605 181312 1678 1604 "R2_d11_angle"
1606 181326 1709 1593 "R2_targ_ecc"
1607 181338 1682 1606 "R2_d1_ecc"
1608 181348 1685 1607 "R2_d2_ecc"
1609 181358 1688 1608 "R2_d3_ecc"
1610 181368 1691 1609 "R2_d4_ecc"
1611 181378 1694 1610 "R2_d5_ecc"
1612 181388 1697 1611 "R2_d6_ecc"
1613 181398 1700 1612 "R2_d7_ecc"
1614 181408 1703 1613 "R2_d8_ecc"
1615 181418 1706 1614 "R2_d9_ecc"
1616 181428 1676 1615 "R2_d10_ecc"
1617 181440 1679 1616 "R2_d11_ecc"
1618 181452 1744 1605 "R3_targ_angle"
1619 181466 1717 1618 "R3_d1_angle"
1620 181478 1720 1619 "R3_d2_angle"
1621 181490 1723 1620 "R3_d3_angle"
1622 181502 1726 1621 "R3_d4_angle"
1623 181514 1729 1622 "R3_d5_angle"
1624 181526 1732 1623 "R3_d6_angle"
1625 181538 1735 1624 "R3_d7_angle"
1626 181550 1738 1625 "R3_d8_angle"
1627 181562 1741 1626 "R3_d9_angle"
1628 181574 1711 1627 "R3_d10_angle"
1629 181588 1714 1628 "R3_d11_angle"
1630 181602 1745 1617 "R3_targ_ecc"
1631 181614 1718 1630 "R3_d1_ecc"
1632 181624 1721 1631 "R3_d2_ecc"
1633 181634 1724 1632 "R3_d3_ecc"
1634 181644 1727 1633 "R3_d4_ecc"
1635 181654 1730 1634 "R3_d5_ecc"
1636 181664 1733 1635 "R3_d6_ecc"
1637 181674 1736 1636 "R3_d7_ecc"
1638 181684 1739 1637 "R3_d8_ecc"
1639 181694 1742 1638 "R3_d9_ecc"
1640 181704 1712 1639 "R3_d10_ecc"
1641 181716 1715 1640 "R3_d11_ecc"
1642 181728 1780 1629 "R4_targ_angle"
1643 181742 1753 1642 "R4_d1_angle"
1644 181754 1756 1643 "R4_d2_angle"
1645 181766 1759 1644 "R4_d3_angle"
1646 181778 1762 1645 "R4_d4_angle"
1647 181790 1765 1646 "R4_d5_angle"
1648 181802 1768 1647 "R4_d6_angle"
1649 181814 1771 1648 "R4_d7_angle"
1650 181826 1774 1649 "R4_d8_angle"
1651 181838 1777 1650 "R4_d9_angle"
1652 181850 1747 1651 "R4_d10_angle"
1653 181864 1750 1652 "R4_d11_angle"
1654 181878 1781 1641 "R4_targ_ecc"
1655 181890 1754 1654 "R4_d1_ecc"
1656 181900 1757 1655 "R4_d2_ecc"
1657 181910 1760 1656 "R4_d3_ecc"
1658 181920 1763 1657 "R4_d4_ecc"
1659 181930 1766 1658 "R4_d5_ecc"
1660 181940 1769 1659 "R4_d6_ecc"
1661 181950 1772 1660 "R4_d7_ecc"
1662 181960 1775 1661 "R4_d8_ecc"
1663 181970 1778 1662 "R4_d9_ecc"
1664 181980 1748 1663 "R4_d10_ecc"
1665 181992 1751 1664 "R4_d11_ecc"
1666 182004 1816 1653 "R5_targ_angle"
1667 182018 1789 1666 "R5_d1_angle"
1668 182030 1792 1667 "R5_d2_angle"
1669 182042 1795 1668 "R5_d3_angle"
1670 182054 1798 1669 "R5_d4_angle"
1671 182066 1801 1670 "R5_d5_angle"
1672 182078 1804 1671 "R5_d6_angle"
1673 182090 1807 1672 "R5_d7_angle"
1674 182102 1810 1673 "R5_d8_angle"
1675 182114 1813 1674 "R5_d9_angle"
1676 182126 1783 1675 "R5_d10_angle"
1677 182140 1786 1676 "R5_d11_angle"
1678 182154 1817 1665 "R5_targ_ecc"
1679 182166 1790 1678 "R5_d1_ecc"
1680 182176 1793 1679 "R5_d2_ecc"
1681 182186 1796 1680 "R5_d3_ecc"
1682 182196 1799 1681 "R5_d4_ecc"
1683 182206 1802 1682 "R5_d5_ecc"
1684 182216 1805 1683 "R5_d6_ecc"
1685 182226 1808 1684 "R5_d7_ecc"
1686 182236 1811 1685 "R5_d8_ecc"
1687 182246 1814 1686 "R5_d9_ecc"
1688 182256 1784 1687 "R5_d10_ecc"
1689 182268 1787 1688 "R5_d11_ecc"
1690 182280 1852 1677 "R6_targ_angle"
1691 182294 1825 1690 "R6_d1_angle"
1692 182306 1828 1691 "R6_d2_angle"
1693 182318 1831 1692 "R6_d3_angle"
1694 182330 1834 1693 "R6_d4_angle"
1695 182342 1837 1694 "R6_d5_angle"
1696 182354 1840 1695 "R6_d6_angle"
1697 182366 1843 1696 "R6_d7_angle"
1698 182378 1846 1697 "R6_d8_angle"
1699 182390 1849 1698 "R6_d9_angle"
1700 182402 1819 1699 "R6_d10_angle"
1701 182416 1822 1700 "R6_d11_angle"
1702 182430 1853 1689 "R6_targ_ecc"
1703 182442 1826 1702 "R6_d1_ecc"
1704 182452 1829 1703 "R6_d2_ecc"
1705 182462 1832 1704 "R6_d3_ecc"
1706 182472 1835 1705 "R6_d4_ecc"
1707 182482 1838 1706 "R6_d5_ecc"
1708 182492 1841 1707 "R6_d6_ecc"
1709 182502 1844 1708 "R6_d7_ecc"
1710 182512 1847 1709 "R6_d8_ecc"
1711 182522 1850 1710 "R6_d9_ecc"
1712 182532 1820 1711 "R6_d10_ecc"
1713 182544 1823 1712 "R6_d11_ecc"
1714 182556 1914    0 "REP1_LOC"
1715 182566 1915 1714 "REP2_LOC"
1716 182576 1916 1715 "REP3_LOC"
1717 182586 1917 1716 "REP4_LOC"
1718 182596 1918 1717 "REP5_LOC"
1719 182606 1919 1718 "REP6_LOC"
1720 182616 1905 1569 "RandomizeRepDistAngles"
1721 182640 1906    0 "RandomizeRepDistEccentricities"
1722 182672 1907 1720 "RandomizeRepTargAngles"
1723 182696 1322 1397 "LOC_REP"
1724 182710 1870 1701 "Rand_d2_angle"
1725 182724 1873 1724 "Rand_d3_angle"
1726 182738 1876 1725 "Rand_d4_angle"
1727 182752 1879 1726 "Rand_d5_angle"
1728 182766 1882 1727 "Rand_d6_angle"
1729 182780 1885 1728 "Rand_d7_angle"
1730 182794 1897 1713 "Rand_targ_ecc"
1731 182808 1868 1730 "Rand_d1_ecc"
1732 182820 1871 1731 "Rand_d2_ecc"
1733 182832 1874 1732 "Rand_d3_ecc"
1734 182844 1877 1733 "Rand_d4_ecc"
1735 182856 1880 1734 "Rand_d5_ecc"
1736 182868 1883 1735 "Rand_d6_ecc"
1737 182880 1886 1736 "Rand_d7_ecc"
1738 182892 1888 1737 "Rand_d8_ecc"
1739 182904 1890 1738 "Rand_d9_ecc"
1740 182916 1863 1739 "Rand_d10_ecc"
1741 182930 1865 1740 "Rand_d11_ecc"
1742 182944 1902 1722 "RandomizeRanDistAngles"
1743 182968 1903 1721 "RandomizeRanDistEccentricities"
1744 183000 1904 1742 "RandomizeRanTargAngles"
1745 183090  910 1729 "d1_angle"
1746 183100  914 1745 "d2_angle"
1747 183110  917 1746 "d3_angle"
1748 183120  920 1747 "d4_angle"
1749 183130  923 1748 "d5_angle"
1750 183140  926 1749 "d6_angle"
1751 183150  929 1750 "d7_angle"
1752 183160  932 1751 "d8_angle"
1753 183170  935 1752 "d9_angle"
1754 183180  904 1753 "d10_angle"
1755 183190  907 1754 "d11_angle"
1756 183200  911 1741 "d1_ecc"
1757 183208  915 1756 "d2_ecc"
1758 183216  918 1757 "d3_ecc"
1759 183224  921 1758 "d4_ecc"
1760 183232  924 1759 "d5_ecc"
1761 183240  927 1760 "d6_ecc"
1762 183248  930 1761 "d7_ecc"
1763 183256  933 1762 "d8_ecc"
1764 183264  936 1763 "d9_ecc"
1765 183272  905 1764 "d10_ecc"
1766 183280  908 1765 "d11_ecc"
1767 183288 2208 1567 "targ_orient"
1768 183300  912 1767 "d1_orient"
1769 183310  916 1768 "d2_orient"
1770 183320  919 1769 "d3_orient"
1771 183330  922 1770 "d4_orient"
1772 183340  925 1771 "d5_orient"
1773 183350  928 1772 "d6_orient"
1774 183360  931 1773 "d7_orient"
1775 183370  934 1774 "d8_orient"
1776 183380  937 1775 "d9_orient"
1777 183390  906 1776 "d10_orient"
1778 183402  909 1777 "d11_orient"
1779 183430  844 1112 "Color"
1780 183436 1068 1136 "fill"
1781 183442  859    0 "conversion_X"
1782 183456  863    0 "conversion_Y"
1783 183470 1222 1145 "half_length"
1784 183488 2278 1265 "THy1"
1785 183506 2325 1755 "TVx1"
1786 183538  378 1192 "#S198"
1787 183560  379 1123 "#S199"
1788 183582  382    0 "#S200"
1789 183638 1315 1320 "LHx1"
1790 183644 1317 1415 "LHy1"
1791 183662 1329 1175 "LVx1"
1792 183668 1331    0 "LVy1"
1793 183680 1332    0 "LVy2"
1794 183782  389    0 "#S207"
1795 183788  994 1442 "DRW_PLAC"
1796 183798 1224 1330 "half_size"
1797 183808 2332    0 "ulx"
1798 183894 2078 1796 "Size"
1799 183970 1549    0 "open"
1800 184018  399    0 "#S216"
1801 184036 1176    0 "FLS_PGS"
1802 184044  242 1300 "#P10"
1803 184050 1584 1406 "pd_eccentricity"
1804 184066 1569 1785 "pd_angle"
1805 184076 1556 1099 "opposite"
1806 184114  401    0 "#S218"
1807 184132  190 1345 "#M42200000"
1808 184174  842 1801 "CMD_PGS"
1809 184182 2061 1779 "sig_color"
1810 184192  256 1448 "#Q11"
1811 184198  257 1264 "#Q12"
1812 184204  258    0 "#Q13"
1813 184210  244 1302 "#P14"
1814 184228  406 1766 "#S222"
1815 184288  410    0 "#S226"
1816 184300  411 1368 "#S227"
1817 184318  412 1327 "#S228"
1818 184330  413    0 "#S229"
1819 184378  417 1438 "#S232"
1820 184408  419    0 "#S234"
1821 184426  947 1365 "decide_ssd"
1822 184456 2047 1816 "SETC_TRL"
1823 184466  951 1364 "decide_trl_type"
1824 184482 1606 1787 "per_jitter"
1825 184494 1296 1824 "jitter"
1826 184502  944 1825 "decide_jitter"
1827 184530 1269    0 "ii"
1828 184534  167 1807 "#M3F800000"
1829 184562  236 1828 "#MBF800000"
1830 184574  165 1829 "#M3E800000"
1831 184586 1370 1808 "MG_PGS"
1832 184636  423    0 "#S238"
1833 184648  424    0 "#S239"
1834 184666  426    0 "#S240"
1835 184696  428    0 "#S242"
1836 184708  429 1267 "#S243"
1837 184756  432    0 "#S246"
1838 184786  434    0 "#S248"
1839 184804 2088 1826 "soa_jitter"
1840 184816 1607 1839 "per_soa_jitter"
1841 184832 2050    0 "SETMGTRL"
1842 184842  945 1840 "decide_soa_jitter"
1843 184860 1183 1831 "GNG_PGS"
1844 184868 1337 1809 "maskcolor"
1845 184878  259 1568 "#Q14"
1846 184884  245 1303 "#P15"
1847 184890 1157 1456 "fixation_target_pd"
1848 184910 2073    0 "signal_pd_T"
1849 184934  762 1377 "atarget"
1850 184954  437    0 "#S250"
1851 185056  444 1385 "#S257"
1852 185074  445 1255 "#S258"
1853 185116  449    0 "#S261"
1854 185146  451 1094 "#S263"
1855 185186 2049 1822 "SETG_TRL"
1856 185196 2087    0 "soa_diff"
1857 185206  240 1453 "#MC3A6AA3D"
1858 185218    6    0 "#F5"
1859 185222   26 1070 "#I1099"
1860 185230  980 1843 "DEL_PGS"
1861 185238  243    0 "#P13"
1862 185268  455 1151 "#S267"
1863 185346  461    0 "#S272"
1864 185406  465 1355 "#S276"
1865 185454 2048 1855 "SETD_TRL"
1866 185464 2324 1860 "TSCH_PGS"
1867 185588  477 1841 "#S287"
1868 185606  478    0 "#S288"
1869 185648  482 1743 "#S291"
1870 185696  485 1856 "#S294"
1871 185714 1328 1866 "LSCH_PGS"
1872 185736  487    0 "#S296"
1873 185766  489 1241 "#S298"
1874 185778  490    0 "#S299"
1875 185796  493    0 "#S300"
1876 185838  496 1416 "#S303"
1877 185856  497    0 "#S304"
1878 185958  505    0 "#S311"
1879 185972 2052 1865 "SETS_TRL"
1880 185992 1614 1870 "plac_diff"
1881 186002 1616 1842 "plac_jitter"
1882 186020   58 1450 "#I21"
1883 186026   65    0 "#I25"
1884 186032 1184 1819 "GNGTRIAL"
1885 186042 1081 1876 "fix_on_time"
1886 186058  506 1780 "#S312"
1887 186070  507    0 "#S313"
1888 186100  509    0 "#S315"
1889 186356  523    0 "#S328"
1890 186370  524    0 "#S329"
1891 186402  526    0 "#S330"
1892 186416  527    0 "#S331"
1893 186448  529    0 "#S333"
1894 186462  530 1102 "#S334"
1895 186506  532 1073 "#S336"
1896 186524  533    0 "#S337"
1897 186538  534 1257 "#S338"
1898 186552  535 1444 "#S339"
1899 186570  537    0 "#S340"
1900 186584  538    0 "#S341"
1901 186640  540 1356 "#S343"
1902 186680  542 1358 "#S345"
1903 186738  545 1312 "#S348"
1904 186752  546    0 "#S349"
1905 186786  548    0 "#S350"
1906 186800  549 1396 "#S351"
1907 186906  553    0 "#S355"
1908 186912  983 1884 "DELTRIAL"
1909 186922  745 1790 "anticip_sacc"
1910 186940  554    0 "#S356"
1911 186964  556 1723 "#S358"
1912 186982  557    0 "#S359"
1913 186996  559    0 "#S360"
1914 187014  560    0 "#S361"
1915 187028  561 1445 "#S362"
1916 187042  562    0 "#S363"
1917 187072  563    0 "#S364"
1918 187132  566 1805 "#S367"
1919 187150  567    0 "#S368"
1920 187164  568    0 "#S369"
1921 187178  570    0 "#S370"
1922 187208  571 1404 "#S371"
1923 187232  572 1359 "#S372"
1924 187246  573 1244 "#S373"
1925 187344  578 1405 "#S378"
1926 187358  579    0 "#S379"
1927 187392  581    0 "#S380"
1928 187406  582    0 "#S381"
1929 187444  583 1380 "#S382"
1930 187484  585 1388 "#S384"
1931 187490 2352    0 "UPD8_INH"
1932 187500  872 1249 "ct"
1933 187504 2365 1371 "weight"
1934 187512  831    0 "change_value"
1935 187526 1630 1781 "position_x"
1936 187538 1632 1782 "position_y"
1937 187550  874 1821 "ct_ssd"
1938 187558 2354 1412 "UPD8_SOA"
1939 187568  873 1938 "ct_soa"
1940 187576 1939 1108 "rts"
1941 187606 2353 1314 "UPD8_SCH"
1942 187616 1900 1935 "random_position_x"
1943 187634 1925 1942 "repeat_position_x"
1944 187652 1901 1936 "random_position_y"
1945 187670 1926 1944 "repeat_position_y"
1946 187688   13    0 "#I-300"
1947 187696 2159 1437 "stop_sig_color_r"
1948 187714 2158    0 "stop_sig_color_g"
1949 187732 2157 1306 "stop_sig_color_b"
1950 187750 1254 1947 "ignore_sig_color_r"
1951 187770 1253 1948 "ignore_sig_color_g"
1952 187790 1252 1949 "ignore_sig_color_b"
1953 187810 1131 1950 "fixation_color_r"
1954 187828 1130 1951 "fixation_color_g"
1955 187846 1129 1952 "fixation_color_b"
1956 187864 2241 1953 "target_color_r"
1957 187880 2240 1954 "target_color_g"
1958 187896 2239 1955 "target_color_b"
1959 187912 1277    0 "INFOS"
1960 187918  143    0 "#I999"
1961 187924   91    0 "#I4001"
1962 187932   92 1793 "#I4050"
1963 187940   93    0 "#I4060"
1964 187948   94 1932 "#I4100"
1965 187956   95 1443 "#I4150"
1966 188004  102    0 "#I4660"
1967 188036  110    0 "#I4900"
1968 188044  123 1348 "#I6000"
1969 188060  105    0 "#I4690"
1970 188068  107    0 "#I4790"
1971 188076  116    0 "#I5100"
1972 188084  715    0 "ABORT"
1973 188090 1297 1966 "JUICE"
1974 188096  839    0 "closed"
1975 188104 2304 1885 "trl_end_time"
1976 188118 2286 1975 "tone_time"
1977 188128  952 1973 "decidejuice"
1978 188140 1013 1879 "END_TRL"
1979 188152 1622 1455 "play_the_odds"
1980 188166   71    0 "#I2730"
1981 188174  152    0 "#L15"
1982 188180  153 1861 "#L16"
1983 188186  154 1813 "#L17"
1984 188192  155 1846 "#L18"
1985 188208 1299 1477 "juice_duration"
1986 188224 2285 1422 "tone_freq"
1987 188234 2284 1920 "tone_durr"
1988 188254 1302    0 "KEY_T_DN"
1989 188264 1165 1908 "FIXTRIAL"
1990 188274 1420 1439 "need_targ"
1991 188292  587    0 "#S386"
1992 188306  588    0 "#S387"
1993 188320  589    0 "#S388"
1994 188332  590    0 "#S389"
1995 188346  592    0 "#S390"
1996 188352 1974    0 "run_idle"
1997 188384  593    0 "#S391"
1998 188532  598    0 "#S396"
1999 188552  599 1382 "#S397"
2000 188572  600 1418 "#S398"
2001 188592  601    0 "#S399"
2002 188598  840 1888 "CMANDING"
2003 188674  607    0 "#S403"
2004 188696 1372    0 "MGUIDE"
2005 188756  611    0 "#S407"
2006 188770  612    0 "#S408"
2007 188786  613 1346 "#S409"
2008 188792 1211    0 "GONOGO"
2009 188882  619    0 "#S414"
2010 188918  620    0 "#S415"
2011 188984 2029 1903 "SEARCH"
2012 188992 1562    0 "pcnt"
2013 189020  626    0 "#S420"
2014 189036  627 1968 "#S421"
2015 189050  628 1289 "#S422"
2016 189064  629 1290 "#S423"
2017 189080  630 1333 "#S424"
2018 189098  631 1802 "#S425"
2019 189104 1177    0 "FLSHSCRN"
2020 189114 2302 2014 "trl_ct"
2021 189122 1173    0 "flashStart"
2022 189134 1529 1976 "offTime"
2023 189142 1170 1778 "flashOnEv"
2024 189176 1171 2022 "flashSessEnd"
2025 189190 1172 2021 "flashSessStart"
2026 189206 2358 1875 "wait_flash"
2027 189218 2360    0 "waitIFI"
2028 189236  632 1301 "#S426"
2029 189250  633 1981 "#S427"
2030 189264  634 1982 "#S428"
2031 189280  635 1983 "#S429"
2032 189308  637 1941 "#S430"
2033 189322  638    0 "#S431"
2034 189336  639    0 "#S432"
2035 189358  640    0 "#S433"
2036 189376  641    0 "#S434"
2037 189390  642 1858 "#S435"
2038 189470  646 1349 "#S439"
2039 189476 2359 1435 "WAIT_MU"
2040 189484 2330    0 "u_sec"
2041 189490 2114 2025 "start"
2042 189496  838 1474 "clock_cycles"
2043 189522  128 1972 "#I65535"
2044 189530 2037    0 "SEND_TTL"
2045 189540 2355 1934 "value"
2046 189546 1560 1873 "output"
2047 189554 2055    0 "shiftVal"
2048 189564   33    0 "#I128"
2049 189578 1638 2044 "QUE_TTL"
2050 189586 2036 1896 "send_event"
2051 189598 1398 1887 "n_evs_sent"
2052 189610 1246    0 "idling"
2053 189618 1989 1915 "run_vm_sess"
2054 189732  652    0 "#S444"

----------------------------------------------------------
NAME TABLE

  iNAM iSYM  Name
------ ----  -----------------
    44    1 "#F0"
    86    2 "#F1"
   128    3 "#F2"
   170    4 "#F3"
   212    5 "#F4"
   254    6 "#F5"
   296    7 "#I-1"
   338    8 "#I-1000"
   380    9 "#I-135"
   422   10 "#I-2"
   464   11 "#I-25"
   506   12 "#I-256"
   548   13 "#I-300"
   590   14 "#I-45"
   632   15 "#I-90"
   674   16 "#I0"
   716   17 "#I1"
   758   18 "#I10"
   800   19 "#I100"
   842   20 "#I1000"
   884   21 "#I10000"
   926   22 "#I10000000"
   968   23 "#I1001"
  1010   24 "#I1025"
  1052   25 "#I1050"
  1094   26 "#I1099"
  1136   27 "#I11"
  1178   28 "#I1100"
  1220   29 "#I1111"
  1262   30 "#I12"
  1304   31 "#I120"
  1346   32 "#I1200"
  1388   33 "#I128"
  1430   34 "#I13"
  1472   35 "#I1300"
  1514   36 "#I135"
  1556   37 "#I1350"
  1598   38 "#I14"
  1640   39 "#I140"
  1682   40 "#I1400"
  1724   41 "#I15"
  1766   42 "#I150"
  1808   43 "#I1500"
  1850   44 "#I16"
  1892   45 "#I1600"
  1934   46 "#I16000"
  1976   47 "#I17"
  2018   48 "#I175"
  2060   49 "#I18"
  2102   50 "#I180"
  2144   51 "#I1800"
  2186   52 "#I19"
  2228   53 "#I2"
  2270   54 "#I20"
  2312   55 "#I200"
  2354   56 "#I2000"
  2396   57 "#I200000"
  2438   58 "#I21"
  2480   59 "#I210"
  2522   60 "#I22"
  2564   61 "#I2222"
  2606   62 "#I225"
  2648   63 "#I23"
  2690   64 "#I240"
  2732   65 "#I25"
  2774   66 "#I250"
  2816   67 "#I251"
  2858   68 "#I255"
  2900   69 "#I27"
  2942   70 "#I270"
  2984   71 "#I2730"
  3026   72 "#I28"
  3068   73 "#I29"
  3110   74 "#I3"
  3152   75 "#I30"
  3194   76 "#I300"
  3236   77 "#I315"
  3278   78 "#I3200"
  3320   79 "#I32000"
  3362   80 "#I33"
  3404   81 "#I330"
  3446   82 "#I35"
  3488   83 "#I350"
  3530   84 "#I36"
  3572   85 "#I38"
  3614   86 "#I3800"
  3656   87 "#I4"
  3698   88 "#I40"
  3740   89 "#I400"
  3782   90 "#I4000"
  3824   91 "#I4001"
  3866   92 "#I4050"
  3908   93 "#I4060"
  3950   94 "#I4100"
  3992   95 "#I4150"
  4034   96 "#I4200"
  4076   97 "#I4250"
  4118   98 "#I43"
  4160   99 "#I45"
  4202  100 "#I450"
  4244  101 "#I4650"
  4286  102 "#I4660"
  4328  103 "#I4670"
  4370  104 "#I4680"
  4412  105 "#I4690"
  4454  106 "#I4700"
  4496  107 "#I4790"
  4538  108 "#I48"
  4580  109 "#I4800"
  4622  110 "#I4900"
  4664  111 "#I5"
  4706  112 "#I50"
  4748  113 "#I500"
  4790  114 "#I5000"
  4832  115 "#I501"
  4874  116 "#I5100"
  4916  117 "#I53"
  4958  118 "#I5500"
  5000  119 "#I59"
  5042  120 "#I6"
  5084  121 "#I60"
  5126  122 "#I600"
  5168  123 "#I6000"
  5210  124 "#I60000"
  5252  125 "#I600000"
  5294  126 "#I63"
  5336  127 "#I64000"
  5378  128 "#I65535"
  5420  129 "#I7"
  5462  130 "#I70"
  5504  131 "#I700"
  5546  132 "#I750"
  5588  133 "#I8"
  5630  134 "#I80"
  5672  135 "#I800"
  5714  136 "#I8000"
  5756  137 "#I8100"
  5798  138 "#I8200"
  5840  139 "#I8888"
  5882  140 "#I9"
  5924  141 "#I90"
  5966  142 "#I900"
  6008  143 "#I999"
  6050  144 "#I9999"
  6092  145 "#L0"
  6134  146 "#L1"
  6176  147 "#L10"
  6218  148 "#L11"
  6260  149 "#L12"
  6302  150 "#L13"
  6344  151 "#L14"
  6386  152 "#L15"
  6428  153 "#L16"
  6470  154 "#L17"
  6512  155 "#L18"
  6554  156 "#L2"
  6596  157 "#L3"
  6638  158 "#L4"
  6680  159 "#L5"
  6722  160 "#L6"
  6764  161 "#L7"
  6806  162 "#L8"
  6848  163 "#L9"
  6890  164 "#M00000000"
  6932  165 "#M3E800000"
  6974  166 "#M3F000000"
  7016  167 "#M3F800000"
  7058  168 "#M3F989375"
  7100  169 "#M3FC00000"
  7142  170 "#M40000000"
  7184  171 "#M40200000"
  7226  172 "#M40400000"
  7268  173 "#M40600000"
  7310  174 "#M40800000"
  7352  175 "#M40A00000"
  7394  176 "#M40C00000"
  7436  177 "#M41000000"
  7478  178 "#M41100000"
  7520  179 "#M41300000"
  7562  180 "#M41400000"
  7604  181 "#M41500000"
  7646  182 "#M41649249"
  7688  183 "#M4179999A"
  7730  184 "#M41900000"
  7772  185 "#M41B80000"
  7814  186 "#M41E00000"
  7856  187 "#M41F00000"
  7898  188 "#M42040000"
  7940  189 "#M42180000"
  7982  190 "#M42200000"
  8024  191 "#M422C0000"
  8066  192 "#M42340000"
  8108  193 "#M42400000"
  8150  194 "#M42480000"
  8192  195 "#M42540000"
  8234  196 "#M42700000"
  8276  197 "#M427C0000"
  8318  198 "#M428C0000"
  8360  199 "#M42A00000"
  8402  200 "#M42B40000"
  8444  201 "#M42C80000"
  8486  202 "#M42F00000"
  8528  203 "#M43070000"
  8570  204 "#M43160000"
  8612  205 "#M43340000"
  8654  206 "#M43480000"
  8696  207 "#M43520000"
  8738  208 "#M43610000"
  8780  209 "#M43700000"
  8822  210 "#M437A0000"
  8864  211 "#M43870000"
  8906  212 "#M43960000"
  8948  213 "#M439D8000"
  8990  214 "#M43A50000"
  9032  215 "#M43AF0000"
  9074  216 "#M43C80000"
  9116  217 "#M43DC0000"
  9158  218 "#M43DE8000"
  9200  219 "#M43E10000"
  9242  220 "#M43E48000"
  9284  221 "#M43FA0000"
  9326  222 "#M4405C000"
  9368  223 "#M44160000"
  9410  224 "#M443B8000"
  9452  225 "#M44610000"
  9494  226 "#M447A0000"
  9536  227 "#M44834000"
  9578  228 "#M44898000"
  9620  229 "#M44960000"
  9662  230 "#M44A28000"
  9704  231 "#M44A8C000"
  9746  232 "#M44AF0000"
  9788  233 "#M44C80000"
  9830  234 "#M44E10000"
  9872  235 "#M44FA0000"
  9914  236 "#MBF800000"
  9956  237 "#MC2340000"
  9998  238 "#MC2B40000"
 10040  239 "#MC3070000"
 10082  240 "#MC3A6AA3D"
 10124  241 "#P1"
 10166  242 "#P10"
 10208  243 "#P13"
 10250  244 "#P14"
 10292  245 "#P15"
 10334  246 "#P2"
 10376  247 "#P3"
 10418  248 "#P4"
 10460  249 "#P5"
 10502  250 "#P6"
 10544  251 "#P7"
 10586  252 "#P8"
 10628  253 "#P9"
 10670  254 "#Q1"
 10712  255 "#Q10"
 10754  256 "#Q11"
 10796  257 "#Q12"
 10838  258 "#Q13"
 10880  259 "#Q14"
 10922  260 "#Q2"
 10964  261 "#Q3"
 11006  262 "#Q4"
 11048  263 "#Q5"
 11090  264 "#Q6"
 11132  265 "#Q7"
 11174  266 "#Q8"
 11216  267 "#Q9"
 11258  268 "#S0"
 11300  269 "#S1"
 11342  270 "#S10"
 11384  271 "#S100"
 11426  272 "#S101"
 11468  273 "#S102"
 11510  274 "#S103"
 11552  275 "#S104"
 11594  276 "#S105"
 11636  277 "#S106"
 11678  278 "#S107"
 11720  279 "#S108"
 11762  280 "#S109"
 11804  281 "#S11"
 11846  282 "#S110"
 11888  283 "#S111"
 11930  284 "#S112"
 11972  285 "#S113"
 12014  286 "#S114"
 12056  287 "#S115"
 12098  288 "#S116"
 12140  289 "#S117"
 12182  290 "#S118"
 12224  291 "#S119"
 12266  292 "#S12"
 12308  293 "#S120"
 12350  294 "#S121"
 12392  295 "#S122"
 12434  296 "#S123"
 12476  297 "#S124"
 12518  298 "#S125"
 12560  299 "#S126"
 12602  300 "#S127"
 12644  301 "#S128"
 12686  302 "#S129"
 12728  303 "#S13"
 12770  304 "#S130"
 12812  305 "#S131"
 12854  306 "#S132"
 12896  307 "#S133"
 12938  308 "#S134"
 12980  309 "#S135"
 13022  310 "#S136"
 13064  311 "#S137"
 13106  312 "#S138"
 13148  313 "#S139"
 13190  314 "#S14"
 13232  315 "#S140"
 13274  316 "#S141"
 13316  317 "#S142"
 13358  318 "#S143"
 13400  319 "#S144"
 13442  320 "#S145"
 13484  321 "#S146"
 13526  322 "#S147"
 13568  323 "#S148"
 13610  324 "#S149"
 13652  325 "#S15"
 13694  326 "#S150"
 13736  327 "#S151"
 13778  328 "#S152"
 13820  329 "#S153"
 13862  330 "#S154"
 13904  331 "#S155"
 13946  332 "#S156"
 13988  333 "#S157"
 14030  334 "#S158"
 14072  335 "#S159"
 14114  336 "#S16"
 14156  337 "#S160"
 14198  338 "#S161"
 14240  339 "#S162"
 14282  340 "#S163"
 14324  341 "#S164"
 14366  342 "#S165"
 14408  343 "#S166"
 14450  344 "#S167"
 14492  345 "#S168"
 14534  346 "#S169"
 14576  347 "#S17"
 14618  348 "#S170"
 14660  349 "#S171"
 14702  350 "#S172"
 14744  351 "#S173"
 14786  352 "#S174"
 14828  353 "#S175"
 14870  354 "#S176"
 14912  355 "#S177"
 14954  356 "#S178"
 14996  357 "#S179"
 15038  358 "#S18"
 15080  359 "#S180"
 15122  360 "#S181"
 15164  361 "#S182"
 15206  362 "#S183"
 15248  363 "#S184"
 15290  364 "#S185"
 15332  365 "#S186"
 15374  366 "#S187"
 15416  367 "#S188"
 15458  368 "#S189"
 15500  369 "#S19"
 15542  370 "#S190"
 15584  371 "#S191"
 15626  372 "#S192"
 15668  373 "#S193"
 15710  374 "#S194"
 15752  375 "#S195"
 15794  376 "#S196"
 15836  377 "#S197"
 15878  378 "#S198"
 15920  379 "#S199"
 15962  380 "#S2"
 16004  381 "#S20"
 16046  382 "#S200"
 16088  383 "#S201"
 16130  384 "#S202"
 16172  385 "#S203"
 16214  386 "#S204"
 16256  387 "#S205"
 16298  388 "#S206"
 16340  389 "#S207"
 16382  390 "#S208"
 16424  391 "#S209"
 16466  392 "#S21"
 16508  393 "#S210"
 16550  394 "#S211"
 16592  395 "#S212"
 16634  396 "#S213"
 16676  397 "#S214"
 16718  398 "#S215"
 16760  399 "#S216"
 16802  400 "#S217"
 16844  401 "#S218"
 16886  402 "#S219"
 16928  403 "#S22"
 16970  404 "#S220"
 17012  405 "#S221"
 17054  406 "#S222"
 17096  407 "#S223"
 17138  408 "#S224"
 17180  409 "#S225"
 17222  410 "#S226"
 17264  411 "#S227"
 17306  412 "#S228"
 17348  413 "#S229"
 17390  414 "#S23"
 17432  415 "#S230"
 17474  416 "#S231"
 17516  417 "#S232"
 17558  418 "#S233"
 17600  419 "#S234"
 17642  420 "#S235"
 17684  421 "#S236"
 17726  422 "#S237"
 17768  423 "#S238"
 17810  424 "#S239"
 17852  425 "#S24"
 17894  426 "#S240"
 17936  427 "#S241"
 17978  428 "#S242"
 18020  429 "#S243"
 18062  430 "#S244"
 18104  431 "#S245"
 18146  432 "#S246"
 18188  433 "#S247"
 18230  434 "#S248"
 18272  435 "#S249"
 18314  436 "#S25"
 18356  437 "#S250"
 18398  438 "#S251"
 18440  439 "#S252"
 18482  440 "#S253"
 18524  441 "#S254"
 18566  442 "#S255"
 18608  443 "#S256"
 18650  444 "#S257"
 18692  445 "#S258"
 18734  446 "#S259"
 18776  447 "#S26"
 18818  448 "#S260"
 18860  449 "#S261"
 18902  450 "#S262"
 18944  451 "#S263"
 18986  452 "#S264"
 19028  453 "#S265"
 19070  454 "#S266"
 19112  455 "#S267"
 19154  456 "#S268"
 19196  457 "#S269"
 19238  458 "#S27"
 19280  459 "#S270"
 19322  460 "#S271"
 19364  461 "#S272"
 19406  462 "#S273"
 19448  463 "#S274"
 19490  464 "#S275"
 19532  465 "#S276"
 19574  466 "#S277"
 19616  467 "#S278"
 19658  468 "#S279"
 19700  469 "#S28"
 19742  470 "#S280"
 19784  471 "#S281"
 19826  472 "#S282"
 19868  473 "#S283"
 19910  474 "#S284"
 19952  475 "#S285"
 19994  476 "#S286"
 20036  477 "#S287"
 20078  478 "#S288"
 20120  479 "#S289"
 20162  480 "#S29"
 20204  481 "#S290"
 20246  482 "#S291"
 20288  483 "#S292"
 20330  484 "#S293"
 20372  485 "#S294"
 20414  486 "#S295"
 20456  487 "#S296"
 20498  488 "#S297"
 20540  489 "#S298"
 20582  490 "#S299"
 20624  491 "#S3"
 20666  492 "#S30"
 20708  493 "#S300"
 20750  494 "#S301"
 20792  495 "#S302"
 20834  496 "#S303"
 20876  497 "#S304"
 20918  498 "#S305"
 20960  499 "#S306"
 21002  500 "#S307"
 21044  501 "#S308"
 21086  502 "#S309"
 21128  503 "#S31"
 21170  504 "#S310"
 21212  505 "#S311"
 21254  506 "#S312"
 21296  507 "#S313"
 21338  508 "#S314"
 21380  509 "#S315"
 21422  510 "#S316"
 21464  511 "#S317"
 21506  512 "#S318"
 21548  513 "#S319"
 21590  514 "#S32"
 21632  515 "#S320"
 21674  516 "#S321"
 21716  517 "#S322"
 21758  518 "#S323"
 21800  519 "#S324"
 21842  520 "#S325"
 21884  521 "#S326"
 21926  522 "#S327"
 21968  523 "#S328"
 22010  524 "#S329"
 22052  525 "#S33"
 22094  526 "#S330"
 22136  527 "#S331"
 22178  528 "#S332"
 22220  529 "#S333"
 22262  530 "#S334"
 22304  531 "#S335"
 22346  532 "#S336"
 22388  533 "#S337"
 22430  534 "#S338"
 22472  535 "#S339"
 22514  536 "#S34"
 22556  537 "#S340"
 22598  538 "#S341"
 22640  539 "#S342"
 22682  540 "#S343"
 22724  541 "#S344"
 22766  542 "#S345"
 22808  543 "#S346"
 22850  544 "#S347"
 22892  545 "#S348"
 22934  546 "#S349"
 22976  547 "#S35"
 23018  548 "#S350"
 23060  549 "#S351"
 23102  550 "#S352"
 23144  551 "#S353"
 23186  552 "#S354"
 23228  553 "#S355"
 23270  554 "#S356"
 23312  555 "#S357"
 23354  556 "#S358"
 23396  557 "#S359"
 23438  558 "#S36"
 23480  559 "#S360"
 23522  560 "#S361"
 23564  561 "#S362"
 23606  562 "#S363"
 23648  563 "#S364"
 23690  564 "#S365"
 23732  565 "#S366"
 23774  566 "#S367"
 23816  567 "#S368"
 23858  568 "#S369"
 23900  569 "#S37"
 23942  570 "#S370"
 23984  571 "#S371"
 24026  572 "#S372"
 24068  573 "#S373"
 24110  574 "#S374"
 24152  575 "#S375"
 24194  576 "#S376"
 24236  577 "#S377"
 24278  578 "#S378"
 24320  579 "#S379"
 24362  580 "#S38"
 24404  581 "#S380"
 24446  582 "#S381"
 24488  583 "#S382"
 24530  584 "#S383"
 24572  585 "#S384"
 24614  586 "#S385"
 24656  587 "#S386"
 24698  588 "#S387"
 24740  589 "#S388"
 24782  590 "#S389"
 24824  591 "#S39"
 24866  592 "#S390"
 24908  593 "#S391"
 24950  594 "#S392"
 24992  595 "#S393"
 25034  596 "#S394"
 25076  597 "#S395"
 25118  598 "#S396"
 25160  599 "#S397"
 25202  600 "#S398"
 25244  601 "#S399"
 25286  602 "#S4"
 25328  603 "#S40"
 25370  604 "#S400"
 25412  605 "#S401"
 25454  606 "#S402"
 25496  607 "#S403"
 25538  608 "#S404"
 25580  609 "#S405"
 25622  610 "#S406"
 25664  611 "#S407"
 25706  612 "#S408"
 25748  613 "#S409"
 25790  614 "#S41"
 25832  615 "#S410"
 25874  616 "#S411"
 25916  617 "#S412"
 25958  618 "#S413"
 26000  619 "#S414"
 26042  620 "#S415"
 26084  621 "#S416"
 26126  622 "#S417"
 26168  623 "#S418"
 26210  624 "#S419"
 26252  625 "#S42"
 26294  626 "#S420"
 26336  627 "#S421"
 26378  628 "#S422"
 26420  629 "#S423"
 26462  630 "#S424"
 26504  631 "#S425"
 26546  632 "#S426"
 26588  633 "#S427"
 26630  634 "#S428"
 26672  635 "#S429"
 26714  636 "#S43"
 26756  637 "#S430"
 26798  638 "#S431"
 26840  639 "#S432"
 26882  640 "#S433"
 26924  641 "#S434"
 26966  642 "#S435"
 27008  643 "#S436"
 27050  644 "#S437"
 27092  645 "#S438"
 27134  646 "#S439"
 27176  647 "#S44"
 27218  648 "#S440"
 27260  649 "#S441"
 27302  650 "#S442"
 27344  651 "#S443"
 27386  652 "#S444"
 27428  653 "#S45"
 27470  654 "#S46"
 27512  655 "#S47"
 27554  656 "#S48"
 27596  657 "#S49"
 27638  658 "#S5"
 27680  659 "#S50"
 27722  660 "#S51"
 27764  661 "#S52"
 27806  662 "#S53"
 27848  663 "#S54"
 27890  664 "#S55"
 27932  665 "#S56"
 27974  666 "#S57"
 28016  667 "#S58"
 28058  668 "#S59"
 28100  669 "#S6"
 28142  670 "#S60"
 28184  671 "#S61"
 28226  672 "#S62"
 28268  673 "#S63"
 28310  674 "#S64"
 28352  675 "#S65"
 28394  676 "#S66"
 28436  677 "#S67"
 28478  678 "#S68"
 28520  679 "#S69"
 28562  680 "#S7"
 28604  681 "#S70"
 28646  682 "#S71"
 28688  683 "#S72"
 28730  684 "#S73"
 28772  685 "#S74"
 28814  686 "#S75"
 28856  687 "#S76"
 28898  688 "#S77"
 28940  689 "#S78"
 28982  690 "#S79"
 29024  691 "#S8"
 29066  692 "#S80"
 29108  693 "#S81"
 29150  694 "#S82"
 29192  695 "#S83"
 29234  696 "#S84"
 29276  697 "#S85"
 29318  698 "#S86"
 29360  699 "#S87"
 29402  700 "#S88"
 29444  701 "#S89"
 29486  702 "#S9"
 29528  703 "#S90"
 29570  704 "#S91"
 29612  705 "#S92"
 29654  706 "#S93"
 29696  707 "#S94"
 29738  708 "#S95"
 29780  709 "#S96"
 29822  710 "#S97"
 29864  711 "#S98"
 29906  712 "#S99"
 29948  713 "__debug_op"
 29990  714 "a_sets"
 30032  715 "ABORT"
 30074  716 "Abort_"
 30116  717 "aCLEAR"
 30158  718 "adjacent"
 30200  719 "adjacent"
 30242  720 "adjacent"
 30284  721 "adjacent"
 30326  722 "adjacent"
 30368  723 "adjacent"
 30410  724 "adjacent"
 30452  725 "aFILLED"
 30494  726 "aINVISIBLE"
 30536  727 "Allowed_fix_time"
 30578  728 "allowed_fix_time"
 30620  729 "allowed_fix_time"
 30662  730 "allowed_fix_time"
 30704  731 "allowed_fix_time"
 30746  732 "allowed_fix_time"
 30788  733 "allowed_fix_time"
 30830  734 "AnalogUnits"
 30872  735 "analogUnits"
 30914  736 "Angle"
 30956  737 "angle"
 30998  738 "angle"
 31040  739 "angle"
 31082  740 "angle"
 31124  741 "angle"
 31166  742 "angle"
 31208  743 "Angle_list"
 31250  744 "anticip_sacc"
 31292  745 "anticip_sacc"
 31334  746 "aquire_fix_time"
 31376  747 "aquire_fix_time"
 31418  748 "aquire_fix_time"
 31460  749 "aquire_fix_time"
 31502  750 "aquire_fix_time"
 31544  751 "aquire_targ_time"
 31586  752 "aquire_targ_time"
 31628  753 "aquire_targ_time"
 31670  754 "aquire_targ_time"
 31712  755 "aquire_targ_time"
 31754  756 "aquire_targ_time"
 31796  757 "aRANGE"
 31838  758 "aREPLACE"
 31880  759 "ArrStruct"
 31922  760 "aSIZE"
 31964  761 "atarget"
 32006  762 "atarget"
 32048  763 "aTITLE"
 32090  764 "aUNFILLED"
 32132  765 "avg_rand_rt"
 32174  766 "avg_rand_rt_DA"
 32216  767 "avg_rand_rt_DP"
 32258  768 "avg_rep_rt"
 32300  769 "aVISIBLE"
 32342  770 "aXOR"
 32384  771 "b_"
 32426  772 "b_"
 32468  773 "Base_Punish_time"
 32510  774 "Base_Reward_time"
 32552  775 "BigP_weight"
 32594  776 "BigR_weight"
 32636  777 "blank"
 32678  778 "blank"
 32720  779 "blank"
 32762  780 "blank"
 32804  781 "blank"
 32846  782 "blank"
 32888  783 "blank"
 32930  784 "blank"
 32972  785 "blank"
 33014  786 "blank"
 33056  787 "blank"
 33098  788 "blank"
 33140  789 "blank"
 33182  790 "blank"
 33224  791 "blank"
 33266  792 "Block_number"
 33308  793 "Bmove_tout"
 33350  794 "body_channel"
 33392  795 "body_move"
 33434  796 "body_move"
 33476  797 "body_move"
 33518  798 "body_move"
 33560  799 "Bonus_weight"
 33602  800 "BreakTFix_"
 33644  801 "broca"
 33686  802 "broke_fix"
 33728  803 "broke_fix"
 33770  804 "broke_fix"
 33812  805 "broke_fix"
 33854  806 "broke_fix"
 33896  807 "broke_fix"
 33938  808 "broke_targ"
 33980  809 "broke_targ"
 34022  810 "broke_targ"
 34064  811 "broke_targ"
 34106  812 "broke_targ"
 34148  813 "broke_targ"
 34190  814 "Canc_alert"
 34232  815 "Cancl_time"
 34274  816 "cancl_time"
 34316  817 "cancl_time"
 34358  818 "cancl_time"
 34400  819 "cancl_time"
 34442  820 "CaptureHeader_"
 34484  821 "Catch"
 34526  822 "catch_hold_time"
 34568  823 "Catch_Rew"
 34610  824 "CatchCode"
 34652  825 "CatchCorrect_"
 34694  826 "CatchIncorrectG_"
 34736  827 "CatchIncorrectNG_"
 34778  828 "CatchNum"
 34820  829 "CenterEyeNow"
 34862  830 "change_value"
 34904  831 "change_value"
 34946  832 "channel"
 34988  833 "channel"
 35030  834 "CheckBody"
 35072  835 "CheckMotion"
 35114  836 "CheckMouth"
 35156  837 "Classic"
 35198  838 "clock_cycles"
 35240  839 "closed"
 35282  840 "CMANDING"
 35324  841 "CmanHeader_"
 35366  842 "CMD_PGS"
 35408  843 "CMDTRIAL"
 35450  844 "Color"
 35492  845 "color"
 35534  846 "color"
 35576  847 "color"
 35618  848 "color"
 35660  849 "color"
 35702  850 "Color_list"
 35744  851 "color_num"
 35786  852 "color_num"
 35828  853 "Comp_Trl_number"
 35870  854 "Consec_corr"
 35912  855 "Consec_trl"
 35954  856 "conversion_X"
 35996  857 "conversion_X"
 36038  858 "conversion_X"
 36080  859 "conversion_X"
 36122  860 "conversion_Y"
 36164  861 "conversion_Y"
 36206  862 "conversion_Y"
 36248  863 "conversion_Y"
 36290  864 "Correct_"
 36332  865 "Correct_sacc"
 36374  866 "correct_sacc"
 36416  867 "correct_sacc"
 36458  868 "correct_sacc"
 36500  869 "Correct_trls"
 36542  870 "count"
 36584  871 "ct"
 36626  872 "ct"
 36668  873 "ct_soa"
 36710  874 "ct_ssd"
 36752  875 "cum_rand_rt"
 36794  876 "cum_rand_rt_DA"
 36836  877 "cum_rand_rt_DP"
 36878  878 "cum_rep_rt"
 36920  879 "Curr_holdtime"
 36962  880 "curr_holdtime"
 37004  881 "curr_holdtime"
 37046  882 "curr_holdtime"
 37088  883 "curr_holdtime"
 37130  884 "curr_holdtime"
 37172  885 "Curr_soa"
 37214  886 "curr_soa"
 37256  887 "curr_soa"
 37298  888 "curr_soa"
 37340  889 "curr_soa"
 37382  890 "Curr_SSD"
 37424  891 "curr_ssd"
 37466  892 "curr_ssd"
 37508  893 "curr_ssd"
 37550  894 "Curr_target"
 37592  895 "curr_target"
 37634  896 "curr_target"
 37676  897 "curr_target"
 37718  898 "curr_target"
 37760  899 "curr_target"
 37802  900 "curr_target"
 37844  901 "curr_target"
 37886  902 "curr_target"
 37928  903 "current_rt"
 37970  904 "d10_angle"
 38012  905 "d10_ecc"
 38054  906 "d10_orient"
 38096  907 "d11_angle"
 38138  908 "d11_ecc"
 38180  909 "d11_orient"
 38222  910 "d1_angle"
 38264  911 "d1_ecc"
 38306  912 "d1_orient"
 38348  913 "d1color"
 38390  914 "d2_angle"
 38432  915 "d2_ecc"
 38474  916 "d2_orient"
 38516  917 "d3_angle"
 38558  918 "d3_ecc"
 38600  919 "d3_orient"
 38642  920 "d4_angle"
 38684  921 "d4_ecc"
 38726  922 "d4_orient"
 38768  923 "d5_angle"
 38810  924 "d5_ecc"
 38852  925 "d5_orient"
 38894  926 "d6_angle"
 38936  927 "d6_ecc"
 38978  928 "d6_orient"
 39020  929 "d7_angle"
 39062  930 "d7_ecc"
 39104  931 "d7_orient"
 39146  932 "d8_angle"
 39188  933 "d8_ecc"
 39230  934 "d8_orient"
 39272  935 "d9_angle"
 39314  936 "d9_ecc"
 39356  937 "d9_orient"
 39398  938 "Dealer_wins_weight"
 39440  939 "Decide_"
 39482  940 "decide_jitter"
 39524  941 "decide_jitter"
 39566  942 "decide_jitter"
 39608  943 "decide_jitter"
 39650  944 "decide_jitter"
 39692  945 "decide_soa_jitter"
 39734  946 "Decide_SSD"
 39776  947 "decide_ssd"
 39818  948 "decide_trl_type"
 39860  949 "decide_trl_type"
 39902  950 "decide_trl_type"
 39944  951 "decide_trl_type"
 39986  952 "decidejuice"
 40028  953 "DEFAULT"
 40070  954 "Deg2Pix_X"
 40112  955 "deg2pix_X"
 40154  956 "deg2pix_X"
 40196  957 "deg2pix_X"
 40238  958 "deg2pix_X"
 40280  959 "deg2pix_X"
 40322  960 "deg2pix_X"
 40364  961 "deg2pix_X"
 40406  962 "deg2pix_X"
 40448  963 "deg2pix_X"
 40490  964 "deg2pix_X"
 40532  965 "deg2pix_X"
 40574  966 "Deg2Pix_Y"
 40616  967 "deg2pix_Y"
 40658  968 "deg2pix_Y"
 40700  969 "deg2pix_Y"
 40742  970 "deg2pix_Y"
 40784  971 "deg2pix_Y"
 40826  972 "deg2pix_Y"
 40868  973 "deg2pix_Y"
 40910  974 "deg2pix_Y"
 40952  975 "deg2pix_Y"
 40994  976 "deg2pix_Y"
 41036  977 "deg2pix_Y"
 41078  978 "deg_x"
 41120  979 "deg_y"
 41162  980 "DEL_PGS"
 41204  981 "DELAYED"
 41246  982 "DelayedHeader_"
 41288  983 "DELTRIAL"
 41330  984 "DHemi"
 41372  985 "Dist_Ang_list"
 41414  986 "Dist_Ecc_list"
 41456  987 "DistFix"
 41498  988 "DistOrients"
 41540  989 "DistOrt"
 41582  990 "DistPres"
 41624  991 "down"
 41666  992 "DR1_flag"
 41708  993 "DRW_L"
 41750  994 "DRW_PLAC"
 41792  995 "DRW_SQR"
 41834  996 "DRW_T"
 41876  997 "duration"
 41918  998 "duration"
 41960  999 "duration"
 42002 1000 "early_sacc"
 42044 1001 "early_sacc"
 42086 1002 "early_sacc"
 42128 1003 "early_sacc"
 42170 1004 "EarlySaccade_"
 42212 1005 "Eccentricity"
 42254 1006 "eccentricity"
 42296 1007 "eccentricity"
 42338 1008 "eccentricity"
 42380 1009 "eccentricity"
 42422 1010 "eccentricity"
 42464 1011 "eccentricity"
 42506 1012 "Eccentricity_list"
 42548 1013 "END_TRL"
 42590 1014 "EndInfos_"
 42632 1015 "EndStim_"
 42674 1016 "Eot_"
 42716 1017 "Error_sacc"
 42758 1018 "Error_tone"
 42800 1019 "Event_fifo"
 42842 1020 "Event_fifo_N"
 42884 1021 "Exp_juice"
 42926 1022 "Expo_Jitter"
 42968 1023 "expo_jitter"
 43010 1024 "expo_jitter"
 43052 1025 "expo_jitter"
 43094 1026 "expo_jitter"
 43136 1027 "expo_jitter"
 43178 1028 "Expo_Jitter_SOA"
 43220 1029 "expo_jitter_soa"
 43262 1030 "expo_jitter_soa"
 43304 1031 "expo_jitter_soa"
 43346 1032 "ExtraReward_"
 43388 1033 "Eye_on_VDOSync"
 43430 1034 "eye_x"
 43472 1035 "eye_x"
 43514 1036 "Eye_X_channel"
 43556 1037 "eye_X_channel"
 43598 1038 "eye_y"
 43640 1039 "eye_y"
 43682 1040 "Eye_Y_channel"
 43724 1041 "eye_Y_channel"
 43766 1042 "FAILURE"
 43808 1043 "failure"
 43850 1044 "failure"
 43892 1045 "failure"
 43934 1046 "failure"
 43976 1047 "failure"
 44018 1048 "failure"
 44060 1049 "failure"
 44102 1050 "failure"
 44144 1051 "Failure_tone"
 44186 1052 "failure_tone"
 44228 1053 "Failure_Tone_bigP"
 44270 1054 "Failure_Tone_medP"
 44312 1055 "Failure_Tone_smlP"
 44354 1056 "Feedback_"
 44396 1057 "fill"
 44438 1058 "fill"
 44480 1059 "fill"
 44522 1060 "fill"
 44564 1061 "fill"
 44606 1062 "fill"
 44648 1063 "fill"
 44690 1064 "fill"
 44732 1065 "fill"
 44774 1066 "fill"
 44816 1067 "fill"
 44858 1068 "fill"
 44900 1069 "FirstSearchTrial"
 44942 1070 "FirstSOATrial"
 44984 1071 "FirstStopTrial"
 45026 1072 "fix_manual"
 45068 1073 "fix_off"
 45110 1074 "fix_off"
 45152 1075 "fix_off"
 45194 1076 "fix_off_time"
 45236 1077 "fix_off_Time"
 45278 1078 "fix_off_time"
 45320 1079 "fix_off_time"
 45362 1080 "fix_on_time"
 45404 1081 "fix_on_time"
 45446 1082 "FIX_PGS"
 45488 1083 "fix_spot_time"
 45530 1084 "fix_spot_time"
 45572 1085 "fix_spot_time"
 45614 1086 "Fix_win_down"
 45656 1087 "fix_win_down"
 45698 1088 "Fix_win_left"
 45740 1089 "fix_win_left"
 45782 1090 "Fix_win_right"
 45824 1091 "fix_win_right"
 45866 1092 "Fix_win_size"
 45908 1093 "fix_win_size"
 45950 1094 "Fix_win_up"
 45992 1095 "fix_win_up"
 46034 1096 "Fixate_"
 46076 1097 "fixating"
 46118 1098 "fixating"
 46160 1099 "fixating"
 46202 1100 "fixating"
 46244 1101 "fixating"
 46286 1102 "fixating_off"
 46328 1103 "fixating_ph"
 46370 1104 "fixating_targ"
 46412 1105 "FIXATION"
 46454 1106 "fixation"
 46496 1107 "fixation"
 46538 1108 "fixation"
 46580 1109 "fixation"
 46622 1110 "fixation"
 46664 1111 "fixation"
 46706 1112 "fixation"
 46748 1113 "fixation"
 46790 1114 "fixation"
 46832 1115 "fixation"
 46874 1116 "fixation"
 46916 1117 "Fixation_color"
 46958 1118 "fixation_color"
 47000 1119 "fixation_color"
 47042 1120 "fixation_color"
 47084 1121 "fixation_color"
 47126 1122 "fixation_color"
 47168 1123 "fixation_color"
 47210 1124 "fixation_color"
 47252 1125 "fixation_color"
 47294 1126 "fixation_color"
 47336 1127 "fixation_color"
 47378 1128 "fixation_color"
 47420 1129 "fixation_color_b"
 47462 1130 "fixation_color_g"
 47504 1131 "fixation_color_r"
 47546 1132 "fixation_offset"
 47588 1133 "fixation_pd"
 47630 1134 "fixation_pd"
 47672 1135 "fixation_pd"
 47714 1136 "fixation_pd"
 47756 1137 "fixation_pd"
 47798 1138 "fixation_pd"
 47840 1139 "fixation_pd"
 47882 1140 "fixation_pd"
 47924 1141 "fixation_pd"
 47966 1142 "fixation_pd"
 48008 1143 "fixation_pd"
 48050 1144 "Fixation_size"
 48092 1145 "fixation_size"
 48134 1146 "fixation_size"
 48176 1147 "fixation_size"
 48218 1148 "fixation_size"
 48260 1149 "fixation_size"
 48302 1150 "fixation_size"
 48344 1151 "Fixation_Target"
 48386 1152 "fixation_target"
 48428 1153 "fixation_target"
 48470 1154 "fixation_target_pd"
 48512 1155 "fixation_target_pd"
 48554 1156 "fixation_target_pd"
 48596 1157 "fixation_target_pd"
 48638 1158 "Fixed_trl_length"
 48680 1159 "fixed_trl_length"
 48722 1160 "fixed_trl_length"
 48764 1161 "FixError_"
 48806 1162 "FixJitter"
 48848 1163 "FixSpotOff_"
 48890 1164 "FixSpotOn_"
 48932 1165 "FIXTRIAL"
 48974 1166 "FixWindow_"
 49016 1167 "flash"
 49058 1168 "flash"
 49100 1169 "flashFailEv"
 49142 1170 "flashOnEv"
 49184 1171 "flashSessEnd"
 49226 1172 "flashSessStart"
 49268 1173 "flashStart"
 49310 1174 "flashSuccEv"
 49352 1175 "flashTime"
 49394 1176 "FLS_PGS"
 49436 1177 "FLSHSCRN"
 49478 1178 "frequency"
 49520 1179 "g_"
 49562 1180 "g_"
 49604 1181 "gauss"
 49646 1182 "gLEFT"
 49688 1183 "GNG_PGS"
 49730 1184 "GNGTRIAL"
 49772 1185 "go_correct"
 49814 1186 "go_correct"
 49856 1187 "go_correct"
 49898 1188 "go_correct"
 49940 1189 "go_correct"
 49982 1190 "go_correct"
 50024 1191 "go_correct"
 50066 1192 "go_correct"
 50108 1193 "Go_trl"
 50150 1194 "go_trl"
 50192 1195 "go_trl"
 50234 1196 "go_trl"
 50276 1197 "Go_trl"
 50318 1198 "Go_trl"
 50360 1199 "go_trl"
 50402 1200 "go_trl"
 50444 1201 "Go_weight"
 50486 1202 "go_weight"
 50528 1203 "go_weight"
 50570 1204 "go_weight"
 50612 1205 "go_wrong"
 50654 1206 "go_wrong"
 50696 1207 "go_wrong"
 50738 1208 "go_wrong"
 50780 1209 "GOCorrect_"
 50822 1210 "GoError_"
 50864 1211 "GONOGO"
 50906 1212 "GONOGOHeader_"
 50948 1213 "GOODVARS"
 50990 1214 "GoSaccade_"
 51032 1215 "GoTargFixError_"
 51074 1216 "graph_rand_rt"
 51116 1217 "graph_rep_rt"
 51158 1218 "GRAPHS"
 51200 1219 "gRIGHT"
 51242 1220 "half_height"
 51284 1221 "half_length"
 51326 1222 "half_length"
 51368 1223 "half_size"
 51410 1224 "half_size"
 51452 1225 "half_size_tw"
 51494 1226 "half_width"
 51536 1227 "half_width"
 51578 1228 "half_width"
 51620 1229 "helmholtz"
 51662 1230 "holdtime_diff"
 51704 1231 "holdtime_diff"
 51746 1232 "holdtime_diff"
 51788 1233 "holdtime_diff"
 51830 1234 "holdtime_diff"
 51872 1235 "Homo_orient"
 51914 1236 "i"
 51956 1237 "i"
 51998 1238 "i"
 52040 1239 "i"
 52082 1240 "i"
 52124 1241 "i"
 52166 1242 "i"
 52208 1243 "i"
 52250 1244 "Identify_Room_"
 52292 1245 "IDLE"
 52334 1246 "idling"
 52376 1247 "IFI"
 52418 1248 "Ignore_sig_color"
 52460 1249 "ignore_sig_color"
 52502 1250 "ignore_sig_color"
 52544 1251 "ignore_sig_color"
 52586 1252 "ignore_sig_color_b"
 52628 1253 "ignore_sig_color_g"
 52670 1254 "ignore_sig_color_r"
 52712 1255 "Ignore_trl"
 52754 1256 "ignore_trl"
 52796 1257 "ignore_trl"
 52838 1258 "ignore_trl"
 52880 1259 "Ignore_trl"
 52922 1260 "Ignore_trl"
 52964 1261 "ignore_trl"
 53006 1262 "ignore_trl"
 53048 1263 "Ignore_weight"
 53090 1264 "ignore_weight"
 53132 1265 "ignore_weight"
 53174 1266 "ignore_weight"
 53216 1267 "ii"
 53258 1268 "ii"
 53300 1269 "ii"
 53342 1270 "In_FixWin"
 53384 1271 "in_flight"
 53426 1272 "in_flight"
 53468 1273 "in_flight"
 53510 1274 "in_flight"
 53552 1275 "in_flight"
 53594 1276 "In_TargWin"
 53636 1277 "INFOS"
 53678 1278 "InfosZero"
 53720 1279 "inh_box_size"
 53762 1280 "inh_left"
 53804 1281 "inh_right"
 53846 1282 "Inter_trl_int"
 53888 1283 "inter_trl_int"
 53930 1284 "inter_trl_int"
 53972 1285 "j"
 54014 1286 "j"
 54056 1287 "j"
 54098 1288 "j"
 54140 1289 "j"
 54182 1290 "j"
 54224 1291 "j"
 54266 1292 "jitter"
 54308 1293 "jitter"
 54350 1294 "jitter"
 54392 1295 "jitter"
 54434 1296 "jitter"
 54476 1297 "JUICE"
 54518 1298 "Juice_channel"
 54560 1299 "juice_duration"
 54602 1300 "KEY_REWD"
 54644 1301 "KEY_STIM"
 54686 1302 "KEY_T_DN"
 54728 1303 "KEY_T_UP"
 54770 1304 "last_status"
 54812 1305 "Last_task"
 54854 1306 "LastSearchOutcome"
 54896 1307 "LastStim"
 54938 1308 "LastStopOutcome"
 54980 1309 "laststopoutcome"
 55022 1310 "laststopoutcome"
 55064 1311 "laststopoutcome"
 55106 1312 "lasttime"
 55148 1313 "LatStruct"
 55190 1314 "left"
 55232 1315 "LHx1"
 55274 1316 "LHx2"
 55316 1317 "LHy1"
 55358 1318 "LHy2"
 55400 1319 "llength"
 55442 1320 "LOC_ASYM"
 55484 1321 "LOC_RAND"
 55526 1322 "LOC_REP"
 55568 1323 "LOCATE_I"
 55610 1324 "lrx"
 55652 1325 "lrx"
 55694 1326 "lry"
 55736 1327 "lry"
 55778 1328 "LSCH_PGS"
 55820 1329 "LVx1"
 55862 1330 "LVx2"
 55904 1331 "LVy1"
 55946 1332 "LVy2"
 55988 1333 "lwidth"
 56030 1334 "MapHeader_"
 56072 1335 "Mask_sig_color"
 56114 1336 "maskcolor"
 56156 1337 "maskcolor"
 56198 1338 "Max_Holdtime"
 56240 1339 "max_holdtime"
 56282 1340 "max_holdtime"
 56324 1341 "max_holdtime"
 56366 1342 "max_holdtime"
 56408 1343 "max_holdtime"
 56450 1344 "Max_move_ct"
 56492 1345 "max_plactime"
 56534 1346 "Max_sacc_duration"
 56576 1347 "max_sacc_duration"
 56618 1348 "max_sacc_duration"
 56660 1349 "max_sacc_duration"
 56702 1350 "max_sacc_duration"
 56744 1351 "max_sacc_duration"
 56786 1352 "Max_saccade_time"
 56828 1353 "max_saccade_time"
 56870 1354 "max_saccade_time"
 56912 1355 "max_saccade_time"
 56954 1356 "max_saccade_time"
 56996 1357 "max_saccade_time"
 57038 1358 "max_saccade_time"
 57080 1359 "Max_SOA"
 57122 1360 "max_soa"
 57164 1361 "max_soa"
 57206 1362 "max_soa"
 57248 1363 "Max_SSD"
 57290 1364 "max_ssd"
 57332 1365 "MaxVoltage"
 57374 1366 "maxvoltage"
 57416 1367 "MedP_weight"
 57458 1368 "MedR_weight"
 57500 1369 "MemHeader_"
 57542 1370 "MG_PGS"
 57584 1371 "MGTRIAL"
 57626 1372 "MGUIDE"
 57668 1373 "Min_Holdtime"
 57710 1374 "min_holdtime"
 57752 1375 "min_holdtime"
 57794 1376 "min_holdtime"
 57836 1377 "min_holdtime"
 57878 1378 "min_holdtime"
 57920 1379 "min_plactime"
 57962 1380 "Min_saccade_time"
 58004 1381 "Min_SOA"
 58046 1382 "min_soa"
 58088 1383 "min_soa"
 58130 1384 "min_soa"
 58172 1385 "Min_SSD"
 58214 1386 "min_ssd"
 58256 1387 "Monkey"
 58298 1388 "monkey"
 58340 1389 "mouth"
 58382 1390 "mouth_channel"
 58424 1391 "mouth_status"
 58466 1392 "mouth_thresh"
 58508 1393 "mouth_time"
 58550 1394 "MouthBegin_"
 58592 1395 "MouthEnd_"
 58634 1396 "Move_ct"
 58676 1397 "moving"
 58718 1398 "n_evs_sent"
 58760 1399 "N_SOAs"
 58802 1400 "n_soas"
 58844 1401 "n_SOAs"
 58886 1402 "N_SSDs"
 58928 1403 "n_ssds"
 58970 1404 "n_SSDs"
 59012 1405 "n_SSDs"
 59054 1406 "n_SSDs"
 59096 1407 "N_targ_pos"
 59138 1408 "n_targ_pos"
 59180 1409 "n_targ_pos"
 59222 1410 "n_targ_pos"
 59264 1411 "n_targ_pos"
 59306 1412 "n_targ_pos"
 59348 1413 "n_targ_pos"
 59390 1414 "need_fix"
 59432 1415 "need_fix"
 59474 1416 "need_fix"
 59516 1417 "need_fix"
 59558 1418 "need_fix"
 59600 1419 "need_fix"
 59642 1420 "need_targ"
 59684 1421 "Neg2Reinforcement_"
 59726 1422 "no_change"
 59768 1423 "no_change"
 59810 1424 "no_change"
 59852 1425 "no_change"
 59894 1426 "no_fix"
 59936 1427 "no_fix"
 59978 1428 "no_fix"
 60020 1429 "no_fix"
 60062 1430 "no_fix"
 60104 1431 "no_fix"
 60146 1432 "no_sacc"
 60188 1433 "no_sacc"
 60230 1434 "no_sacc"
 60272 1435 "no_sacc"
 60314 1436 "no_saccade"
 60356 1437 "nogo_correct"
 60398 1438 "nogo_correct"
 60440 1439 "nogo_correct"
 60482 1440 "nogo_correct"
 60524 1441 "nogo_correct"
 60566 1442 "nogo_correct"
 60608 1443 "nogo_correct"
 60650 1444 "nogo_correct"
 60692 1445 "nogo_success"
 60734 1446 "nogo_success"
 60776 1447 "nogo_wrong"
 60818 1448 "nogo_wrong"
 60860 1449 "nogo_wrong"
 60902 1450 "nogo_wrong"
 60944 1451 "nogo_wrong"
 60986 1452 "NOGOCorrect_"
 61028 1453 "nogosoa"
 61070 1454 "NOGOWrong_"
 61112 1455 "NonSingleton_color"
 61154 1456 "now"
 61196 1457 "Npulse"
 61238 1458 "numDistAngles"
 61280 1459 "numDistEcc"
 61322 1460 "numTargAngles"
 61364 1461 "object_30_70"
 61406 1462 "object_eye"
 61448 1463 "object_fix"
 61490 1464 "object_fix"
 61532 1465 "object_fix"
 61574 1466 "object_fix"
 61616 1467 "object_fix"
 61658 1468 "object_fix"
 61700 1469 "object_fixwin"
 61742 1470 "object_fixwin"
 61784 1471 "object_random"
 61826 1472 "object_repeat"
 61868 1473 "object_soa0"
 61910 1474 "object_soa1"
 61952 1475 "object_soa10"
 61994 1476 "object_soa11"
 62036 1477 "object_soa12"
 62078 1478 "object_soa13"
 62120 1479 "object_soa14"
 62162 1480 "object_soa15"
 62204 1481 "object_soa16"
 62246 1482 "object_soa17"
 62288 1483 "object_soa18"
 62330 1484 "object_soa19"
 62372 1485 "object_soa2"
 62414 1486 "object_soa3"
 62456 1487 "object_soa4"
 62498 1488 "object_soa5"
 62540 1489 "object_soa6"
 62582 1490 "object_soa7"
 62624 1491 "object_soa8"
 62666 1492 "object_soa9"
 62708 1493 "object_ssd0"
 62750 1494 "object_ssd1"
 62792 1495 "object_ssd10"
 62834 1496 "object_ssd11"
 62876 1497 "object_ssd12"
 62918 1498 "object_ssd13"
 62960 1499 "object_ssd14"
 63002 1500 "object_ssd15"
 63044 1501 "object_ssd16"
 63086 1502 "object_ssd17"
 63128 1503 "object_ssd18"
 63170 1504 "object_ssd19"
 63212 1505 "object_ssd2"
 63254 1506 "object_ssd3"
 63296 1507 "object_ssd4"
 63338 1508 "object_ssd5"
 63380 1509 "object_ssd6"
 63422 1510 "object_ssd7"
 63464 1511 "object_ssd8"
 63506 1512 "object_ssd9"
 63548 1513 "object_targ"
 63590 1514 "object_targ"
 63632 1515 "object_targ"
 63674 1516 "object_targ"
 63716 1517 "object_targ"
 63758 1518 "object_targ"
 63800 1519 "object_targ"
 63842 1520 "object_targ"
 63884 1521 "object_targ"
 63926 1522 "object_targ"
 63968 1523 "object_targwin"
 64010 1524 "object_targwin"
 64052 1525 "off"
 64094 1526 "off"
 64136 1527 "off"
 64178 1528 "off"
 64220 1529 "offTime"
 64262 1530 "OK"
 64304 1531 "old_fix_win_size"
 64346 1532 "old_targ_win_size"
 64388 1533 "oldx"
 64430 1534 "oldy"
 64472 1535 "on"
 64514 1536 "on"
 64556 1537 "on_target"
 64598 1538 "on_target"
 64640 1539 "on_target"
 64682 1540 "on_target"
 64724 1541 "on_target"
 64766 1542 "open"
 64808 1543 "open"
 64850 1544 "open"
 64892 1545 "open"
 64934 1546 "open"
 64976 1547 "open"
 65018 1548 "open"
 65060 1549 "open"
 65102 1550 "opposite"
 65144 1551 "opposite"
 65186 1552 "opposite"
 65228 1553 "opposite"
 65270 1554 "opposite"
 65312 1555 "opposite"
 65354 1556 "opposite"
 65396 1557 "orientation"
 65438 1558 "orientation"
 65480 1559 "orientation"
 65522 1560 "output"
 65564 1561 "Pause"
 65606 1562 "pcnt"
 65648 1563 "pd_angle"
 65690 1564 "pd_angle"
 65732 1565 "pd_angle"
 65774 1566 "pd_angle"
 65816 1567 "pd_angle"
 65858 1568 "pd_angle"
 65900 1569 "pd_angle"
 65942 1570 "PD_bottom"
 65984 1571 "pd_bottom"
 66026 1572 "pd_bottom"
 66068 1573 "pd_bottom"
 66110 1574 "pd_bottom"
 66152 1575 "pd_bottom"
 66194 1576 "pd_bottom"
 66236 1577 "pd_bottom"
 66278 1578 "pd_eccentricity"
 66320 1579 "pd_eccentricity"
 66362 1580 "pd_eccentricity"
 66404 1581 "pd_eccentricity"
 66446 1582 "pd_eccentricity"
 66488 1583 "pd_eccentricity"
 66530 1584 "pd_eccentricity"
 66572 1585 "PD_left"
 66614 1586 "pd_left"
 66656 1587 "pd_left"
 66698 1588 "pd_left"
 66740 1589 "pd_left"
 66782 1590 "pd_left"
 66824 1591 "pd_left"
 66866 1592 "pd_left"
 66908 1593 "PD_size"
 66950 1594 "pd_size"
 66992 1595 "pd_size"
 67034 1596 "pd_size"
 67076 1597 "pd_size"
 67118 1598 "pd_size"
 67160 1599 "pd_size"
 67202 1600 "pd_size"
 67244 1601 "per_jitter"
 67286 1602 "per_jitter"
 67328 1603 "per_jitter"
 67370 1604 "per_jitter"
 67412 1605 "per_jitter"
 67454 1606 "per_jitter"
 67496 1607 "per_soa_jitter"
 67538 1608 "Perc_catch"
 67580 1609 "PercSingTrl"
 67622 1610 "PhotoD_channel"
 67664 1611 "plac"
 67706 1612 "plac"
 67748 1613 "plac"
 67790 1614 "plac_diff"
 67832 1615 "plac_duration"
 67874 1616 "plac_jitter"
 67916 1617 "plac_pd"
 67958 1618 "plac_pd"
 68000 1619 "plac_pd"
 68042 1620 "PlacOn_"
 68084 1621 "PlacPres"
 68126 1622 "play_the_odds"
 68168 1623 "plot_x"
 68210 1624 "plot_y"
 68252 1625 "plus_minus"
 68294 1626 "PORTA"
 68336 1627 "PORTB"
 68378 1628 "PORTC"
 68420 1629 "position_x"
 68462 1630 "position_x"
 68504 1631 "position_y"
 68546 1632 "position_y"
 68588 1633 "ProbCue"
 68630 1634 "ProbSide"
 68672 1635 "PulseGap"
 68714 1636 "Punish_time"
 68756 1637 "punish_time"
 68798 1638 "QUE_TTL"
 68840 1639 "R1_d10_angle"
 68882 1640 "R1_d10_ecc"
 68924 1641 "R1_d10_orient"
 68966 1642 "R1_d11_angle"
 69008 1643 "R1_d11_ecc"
 69050 1644 "R1_d11_orient"
 69092 1645 "R1_d1_angle"
 69134 1646 "R1_d1_ecc"
 69176 1647 "R1_d1_orient"
 69218 1648 "R1_d2_angle"
 69260 1649 "R1_d2_ecc"
 69302 1650 "R1_d2_orient"
 69344 1651 "R1_d3_angle"
 69386 1652 "R1_d3_ecc"
 69428 1653 "R1_d3_orient"
 69470 1654 "R1_d4_angle"
 69512 1655 "R1_d4_ecc"
 69554 1656 "R1_d4_orient"
 69596 1657 "R1_d5_angle"
 69638 1658 "R1_d5_ecc"
 69680 1659 "R1_d5_orient"
 69722 1660 "R1_d6_angle"
 69764 1661 "R1_d6_ecc"
 69806 1662 "R1_d6_orient"
 69848 1663 "R1_d7_angle"
 69890 1664 "R1_d7_ecc"
 69932 1665 "R1_d7_orient"
 69974 1666 "R1_d8_angle"
 70016 1667 "R1_d8_ecc"
 70058 1668 "R1_d8_orient"
 70100 1669 "R1_d9_angle"
 70142 1670 "R1_d9_ecc"
 70184 1671 "R1_d9_orient"
 70226 1672 "R1_targ_angle"
 70268 1673 "R1_targ_ecc"
 70310 1674 "R1_targ_orient"
 70352 1675 "R2_d10_angle"
 70394 1676 "R2_d10_ecc"
 70436 1677 "R2_d10_orient"
 70478 1678 "R2_d11_angle"
 70520 1679 "R2_d11_ecc"
 70562 1680 "R2_d11_orient"
 70604 1681 "R2_d1_angle"
 70646 1682 "R2_d1_ecc"
 70688 1683 "R2_d1_orient"
 70730 1684 "R2_d2_angle"
 70772 1685 "R2_d2_ecc"
 70814 1686 "R2_d2_orient"
 70856 1687 "R2_d3_angle"
 70898 1688 "R2_d3_ecc"
 70940 1689 "R2_d3_orient"
 70982 1690 "R2_d4_angle"
 71024 1691 "R2_d4_ecc"
 71066 1692 "R2_d4_orient"
 71108 1693 "R2_d5_angle"
 71150 1694 "R2_d5_ecc"
 71192 1695 "R2_d5_orient"
 71234 1696 "R2_d6_angle"
 71276 1697 "R2_d6_ecc"
 71318 1698 "R2_d6_orient"
 71360 1699 "R2_d7_angle"
 71402 1700 "R2_d7_ecc"
 71444 1701 "R2_d7_orient"
 71486 1702 "R2_d8_angle"
 71528 1703 "R2_d8_ecc"
 71570 1704 "R2_d8_orient"
 71612 1705 "R2_d9_angle"
 71654 1706 "R2_d9_ecc"
 71696 1707 "R2_d9_orient"
 71738 1708 "R2_targ_angle"
 71780 1709 "R2_targ_ecc"
 71822 1710 "R2_targ_orient"
 71864 1711 "R3_d10_angle"
 71906 1712 "R3_d10_ecc"
 71948 1713 "R3_d10_orient"
 71990 1714 "R3_d11_angle"
 72032 1715 "R3_d11_ecc"
 72074 1716 "R3_d11_orient"
 72116 1717 "R3_d1_angle"
 72158 1718 "R3_d1_ecc"
 72200 1719 "R3_d1_orient"
 72242 1720 "R3_d2_angle"
 72284 1721 "R3_d2_ecc"
 72326 1722 "R3_d2_orient"
 72368 1723 "R3_d3_angle"
 72410 1724 "R3_d3_ecc"
 72452 1725 "R3_d3_orient"
 72494 1726 "R3_d4_angle"
 72536 1727 "R3_d4_ecc"
 72578 1728 "R3_d4_orient"
 72620 1729 "R3_d5_angle"
 72662 1730 "R3_d5_ecc"
 72704 1731 "R3_d5_orient"
 72746 1732 "R3_d6_angle"
 72788 1733 "R3_d6_ecc"
 72830 1734 "R3_d6_orient"
 72872 1735 "R3_d7_angle"
 72914 1736 "R3_d7_ecc"
 72956 1737 "R3_d7_orient"
 72998 1738 "R3_d8_angle"
 73040 1739 "R3_d8_ecc"
 73082 1740 "R3_d8_orient"
 73124 1741 "R3_d9_angle"
 73166 1742 "R3_d9_ecc"
 73208 1743 "R3_d9_orient"
 73250 1744 "R3_targ_angle"
 73292 1745 "R3_targ_ecc"
 73334 1746 "R3_targ_orient"
 73376 1747 "R4_d10_angle"
 73418 1748 "R4_d10_ecc"
 73460 1749 "R4_d10_orient"
 73502 1750 "R4_d11_angle"
 73544 1751 "R4_d11_ecc"
 73586 1752 "R4_d11_orient"
 73628 1753 "R4_d1_angle"
 73670 1754 "R4_d1_ecc"
 73712 1755 "R4_d1_orient"
 73754 1756 "R4_d2_angle"
 73796 1757 "R4_d2_ecc"
 73838 1758 "R4_d2_orient"
 73880 1759 "R4_d3_angle"
 73922 1760 "R4_d3_ecc"
 73964 1761 "R4_d3_orient"
 74006 1762 "R4_d4_angle"
 74048 1763 "R4_d4_ecc"
 74090 1764 "R4_d4_orient"
 74132 1765 "R4_d5_angle"
 74174 1766 "R4_d5_ecc"
 74216 1767 "R4_d5_orient"
 74258 1768 "R4_d6_angle"
 74300 1769 "R4_d6_ecc"
 74342 1770 "R4_d6_orient"
 74384 1771 "R4_d7_angle"
 74426 1772 "R4_d7_ecc"
 74468 1773 "R4_d7_orient"
 74510 1774 "R4_d8_angle"
 74552 1775 "R4_d8_ecc"
 74594 1776 "R4_d8_orient"
 74636 1777 "R4_d9_angle"
 74678 1778 "R4_d9_ecc"
 74720 1779 "R4_d9_orient"
 74762 1780 "R4_targ_angle"
 74804 1781 "R4_targ_ecc"
 74846 1782 "R4_targ_orient"
 74888 1783 "R5_d10_angle"
 74930 1784 "R5_d10_ecc"
 74972 1785 "R5_d10_orient"
 75014 1786 "R5_d11_angle"
 75056 1787 "R5_d11_ecc"
 75098 1788 "R5_d11_orient"
 75140 1789 "R5_d1_angle"
 75182 1790 "R5_d1_ecc"
 75224 1791 "R5_d1_orient"
 75266 1792 "R5_d2_angle"
 75308 1793 "R5_d2_ecc"
 75350 1794 "R5_d2_orient"
 75392 1795 "R5_d3_angle"
 75434 1796 "R5_d3_ecc"
 75476 1797 "R5_d3_orient"
 75518 1798 "R5_d4_angle"
 75560 1799 "R5_d4_ecc"
 75602 1800 "R5_d4_orient"
 75644 1801 "R5_d5_angle"
 75686 1802 "R5_d5_ecc"
 75728 1803 "R5_d5_orient"
 75770 1804 "R5_d6_angle"
 75812 1805 "R5_d6_ecc"
 75854 1806 "R5_d6_orient"
 75896 1807 "R5_d7_angle"
 75938 1808 "R5_d7_ecc"
 75980 1809 "R5_d7_orient"
 76022 1810 "R5_d8_angle"
 76064 1811 "R5_d8_ecc"
 76106 1812 "R5_d8_orient"
 76148 1813 "R5_d9_angle"
 76190 1814 "R5_d9_ecc"
 76232 1815 "R5_d9_orient"
 76274 1816 "R5_targ_angle"
 76316 1817 "R5_targ_ecc"
 76358 1818 "R5_targ_orient"
 76400 1819 "R6_d10_angle"
 76442 1820 "R6_d10_ecc"
 76484 1821 "R6_d10_orient"
 76526 1822 "R6_d11_angle"
 76568 1823 "R6_d11_ecc"
 76610 1824 "R6_d11_orient"
 76652 1825 "R6_d1_angle"
 76694 1826 "R6_d1_ecc"
 76736 1827 "R6_d1_orient"
 76778 1828 "R6_d2_angle"
 76820 1829 "R6_d2_ecc"
 76862 1830 "R6_d2_orient"
 76904 1831 "R6_d3_angle"
 76946 1832 "R6_d3_ecc"
 76988 1833 "R6_d3_orient"
 77030 1834 "R6_d4_angle"
 77072 1835 "R6_d4_ecc"
 77114 1836 "R6_d4_orient"
 77156 1837 "R6_d5_angle"
 77198 1838 "R6_d5_ecc"
 77240 1839 "R6_d5_orient"
 77282 1840 "R6_d6_angle"
 77324 1841 "R6_d6_ecc"
 77366 1842 "R6_d6_orient"
 77408 1843 "R6_d7_angle"
 77450 1844 "R6_d7_ecc"
 77492 1845 "R6_d7_orient"
 77534 1846 "R6_d8_angle"
 77576 1847 "R6_d8_ecc"
 77618 1848 "R6_d8_orient"
 77660 1849 "R6_d9_angle"
 77702 1850 "R6_d9_ecc"
 77744 1851 "R6_d9_orient"
 77786 1852 "R6_targ_angle"
 77828 1853 "R6_targ_ecc"
 77870 1854 "R6_targ_orient"
 77912 1855 "r_"
 77954 1856 "r_"
 77996 1857 "Rand_Comp_NG_Trl"
 78038 1858 "Rand_Comp_Trl_DA"
 78080 1859 "Rand_Comp_Trl_DP"
 78122 1860 "Rand_Comp_Trl_number"
 78164 1861 "Rand_Comp_Trl_number_DA"
 78206 1862 "Rand_Comp_Trl_number_DP"
 78248 1863 "Rand_d10_ecc"
 78290 1864 "Rand_d10_orient"
 78332 1865 "Rand_d11_ecc"
 78374 1866 "Rand_d11_orient"
 78416 1867 "Rand_d1_angle"
 78458 1868 "Rand_d1_ecc"
 78500 1869 "Rand_d1_orient"
 78542 1870 "Rand_d2_angle"
 78584 1871 "Rand_d2_ecc"
 78626 1872 "Rand_d2_orient"
 78668 1873 "Rand_d3_angle"
 78710 1874 "Rand_d3_ecc"
 78752 1875 "Rand_d3_orient"
 78794 1876 "Rand_d4_angle"
 78836 1877 "Rand_d4_ecc"
 78878 1878 "Rand_d4_orient"
 78920 1879 "Rand_d5_angle"
 78962 1880 "Rand_d5_ecc"
 79004 1881 "Rand_d5_orient"
 79046 1882 "Rand_d6_angle"
 79088 1883 "Rand_d6_ecc"
 79130 1884 "Rand_d6_orient"
 79172 1885 "Rand_d7_angle"
 79214 1886 "Rand_d7_ecc"
 79256 1887 "Rand_d7_orient"
 79298 1888 "Rand_d8_ecc"
 79340 1889 "Rand_d8_orient"
 79382 1890 "Rand_d9_ecc"
 79424 1891 "Rand_d9_orient"
 79466 1892 "rand_inacc_sacc"
 79508 1893 "rand_inacc_sacc_DA"
 79550 1894 "rand_inacc_sacc_DP"
 79592 1895 "RAND_ORT"
 79634 1896 "Rand_targ_angle"
 79676 1897 "Rand_targ_ecc"
 79718 1898 "Rand_targ_orient"
 79760 1899 "RandHomo_orient"
 79802 1900 "random_position_x"
 79844 1901 "random_position_y"
 79886 1902 "RandomizeRanDistAngles"
 79928 1903 "RandomizeRanDistEccentricities"
 79970 1904 "RandomizeRanTargAngles"
 80012 1905 "RandomizeRepDistAngles"
 80054 1906 "RandomizeRepDistEccentricities"
 80096 1907 "RandomizeRepTargAngles"
 80138 1908 "RandPerAcc"
 80180 1909 "RandPerAcc_DA"
 80222 1910 "RandPerAcc_DP"
 80264 1911 "RanTarg_Ang_list"
 80306 1912 "ReactionTime"
 80348 1913 "Refresh_rate"
 80390 1914 "REP1_LOC"
 80432 1915 "REP2_LOC"
 80474 1916 "REP3_LOC"
 80516 1917 "REP4_LOC"
 80558 1918 "REP5_LOC"
 80600 1919 "REP6_LOC"
 80642 1920 "Rep_Comp_NG_Trl"
 80684 1921 "Rep_Comp_Trl_number"
 80726 1922 "rep_inacc_sacc"
 80768 1923 "REP_ORT"
 80810 1924 "RepDistOrients"
 80852 1925 "repeat_position_x"
 80894 1926 "repeat_position_y"
 80936 1927 "RepPerAcc"
 80978 1928 "RepTarg_Ang_list"
 81020 1929 "RepTargOrients"
 81062 1930 "Reward_"
 81104 1931 "Reward_duration"
 81146 1932 "Reward_Offset"
 81188 1933 "reward_offset"
 81230 1934 "Reward_tone"
 81272 1935 "RewardSize_"
 81314 1936 "right"
 81356 1937 "Room"
 81398 1938 "room"
 81440 1939 "rts"
 81482 1940 "run_cmd_sess"
 81524 1941 "run_cmd_sess"
 81566 1942 "run_cmd_sess"
 81608 1943 "run_cmd_sess"
 81650 1944 "run_cmd_sess"
 81692 1945 "run_cmd_sess"
 81734 1946 "run_cmd_sess"
 81776 1947 "run_delayed_sess"
 81818 1948 "run_delayed_sess"
 81860 1949 "run_delayed_sess"
 81902 1950 "run_delayed_sess"
 81944 1951 "run_delayed_sess"
 81986 1952 "run_delayed_sess"
 82028 1953 "run_delayed_sess"
 82070 1954 "run_fix_sess"
 82112 1955 "run_fix_sess"
 82154 1956 "run_fix_sess"
 82196 1957 "run_fix_sess"
 82238 1958 "run_flash_sess"
 82280 1959 "run_flash_sess"
 82322 1960 "run_flash_sess"
 82364 1961 "run_gonogo_sess"
 82406 1962 "run_gonogo_sess"
 82448 1963 "run_gonogo_sess"
 82490 1964 "run_gonogo_sess"
 82532 1965 "run_gonogo_sess"
 82574 1966 "run_gonogo_sess"
 82616 1967 "run_gonogo_sess"
 82658 1968 "run_idle"
 82700 1969 "run_idle"
 82742 1970 "run_idle"
 82784 1971 "run_idle"
 82826 1972 "run_idle"
 82868 1973 "run_idle"
 82910 1974 "run_idle"
 82952 1975 "run_mg_sess"
 82994 1976 "run_mg_sess"
 83036 1977 "run_mg_sess"
 83078 1978 "run_mg_sess"
 83120 1979 "run_mg_sess"
 83162 1980 "run_mg_sess"
 83204 1981 "run_mg_sess"
 83246 1982 "run_search_sess"
 83288 1983 "run_search_sess"
 83330 1984 "run_search_sess"
 83372 1985 "run_search_sess"
 83414 1986 "run_search_sess"
 83456 1987 "run_search_sess"
 83498 1988 "run_search_sess"
 83540 1989 "run_vm_sess"
 83582 1990 "sacc_out"
 83624 1991 "sacc_out"
 83666 1992 "sacc_out"
 83708 1993 "sacc_out"
 83750 1994 "sacc_out"
 83792 1995 "sacc_out"
 83834 1996 "Saccade_"
 83876 1997 "saccade_time"
 83918 1998 "saccade_time"
 83960 1999 "saccade_time"
 84002 2000 "saccade_time"
 84044 2001 "saccade_time"
 84086 2002 "sacctarg"
 84128 2003 "sample_n"
 84170 2004 "SCHTRIAL"
 84212 2005 "Scr_height"
 84254 2006 "scr_height"
 84296 2007 "scr_height"
 84338 2008 "scr_height"
 84380 2009 "scr_height"
 84422 2010 "scr_height"
 84464 2011 "scr_height"
 84506 2012 "scr_height"
 84548 2013 "scr_height"
 84590 2014 "Scr_pixX"
 84632 2015 "scr_pixX"
 84674 2016 "scr_pixX"
 84716 2017 "Scr_pixY"
 84758 2018 "scr_pixY"
 84800 2019 "scr_pixY"
 84842 2020 "Scr_width"
 84884 2021 "scr_width"
 84926 2022 "scr_width"
 84968 2023 "scr_width"
 85010 2024 "scr_width"
 85052 2025 "scr_width"
 85094 2026 "scr_width"
 85136 2027 "scr_width"
 85178 2028 "scr_width"
 85220 2029 "SEARCH"
 85262 2030 "search_fix_time"
 85304 2031 "SearchEcc"
 85346 2032 "SearchHeader_"
 85388 2033 "SearchType"
 85430 2034 "SEL_LOCS"
 85472 2035 "SelEcc"
 85514 2036 "send_event"
 85556 2037 "SEND_TTL"
 85598 2038 "SendPenatrInfo_"
 85640 2039 "SET_CLRS"
 85682 2040 "SET_COOR"
 85724 2041 "Set_event"
 85766 2042 "SET_INH"
 85808 2043 "Set_monkey"
 85850 2044 "SET_SCH"
 85892 2045 "SET_SOA"
 85934 2046 "Set_Tones"
 85976 2047 "SETC_TRL"
 86018 2048 "SETD_TRL"
 86060 2049 "SETG_TRL"
 86102 2050 "SETMGTRL"
 86144 2051 "SETS"
 86186 2052 "SETS_TRL"
 86228 2053 "SetSize"
 86270 2054 "ShamStim_"
 86312 2055 "shiftVal"
 86354 2056 "Sig_color"
 86396 2057 "sig_color"
 86438 2058 "sig_color"
 86480 2059 "sig_color"
 86522 2060 "sig_color"
 86564 2061 "sig_color"
 86606 2062 "signal"
 86648 2063 "signal"
 86690 2064 "signal"
 86732 2065 "signal"
 86774 2066 "signal_pd"
 86816 2067 "signal_pd"
 86858 2068 "signal_pd"
 86900 2069 "signal_pd"
 86942 2070 "signal_pd_S"
 86984 2071 "signal_pd_S"
 87026 2072 "signal_pd_T"
 87068 2073 "signal_pd_T"
 87110 2074 "SingCol"
 87152 2075 "SingFreq"
 87194 2076 "Singleton_color"
 87236 2077 "SingMode"
 87278 2078 "Size"
 87320 2079 "size"
 87362 2080 "size"
 87404 2081 "Size_list"
 87446 2082 "SmlP_weight"
 87488 2083 "SmlR_weight"
 87530 2084 "soa"
 87572 2085 "soa_box_size"
 87614 2086 "soa_diff"
 87656 2087 "soa_diff"
 87698 2088 "soa_jitter"
 87740 2089 "soa_left"
 87782 2090 "SOA_list"
 87824 2091 "soa_mode"
 87866 2092 "soa_range"
 87908 2093 "soa_right"
 87950 2094 "SoundNoReward_"
 87992 2095 "SoundOnReward_"
 88034 2096 "SPEED"
 88076 2097 "SPEED_UNITS"
 88118 2098 "SSD_ceil"
 88160 2099 "SSD_floor"
 88202 2100 "SSD_list"
 88244 2101 "ssd_range"
 88286 2102 "stage"
 88328 2103 "stage"
 88370 2104 "stage"
 88412 2105 "stage"
 88454 2106 "stage"
 88496 2107 "stage"
 88538 2108 "stage"
 88580 2109 "STAIR"
 88622 2110 "Staircase"
 88664 2111 "staircase"
 88706 2112 "staircase"
 88748 2113 "Staircase_"
 88790 2114 "start"
 88832 2115 "StartInfos_"
 88874 2116 "State"
 88916 2117 "state"
 88958 2118 "state"
 89000 2119 "still"
 89042 2120 "STIM"
 89084 2121 "Stim_channel"
 89126 2122 "stim_ecc_x"
 89168 2123 "stim_ecc_x"
 89210 2124 "stim_ecc_x"
 89252 2125 "stim_ecc_x"
 89294 2126 "stim_ecc_x"
 89336 2127 "stim_ecc_x"
 89378 2128 "stim_ecc_x"
 89420 2129 "stim_ecc_x"
 89462 2130 "stim_ecc_x"
 89504 2131 "stim_ecc_x"
 89546 2132 "stim_ecc_x"
 89588 2133 "stim_ecc_x"
 89630 2134 "stim_ecc_y"
 89672 2135 "stim_ecc_y"
 89714 2136 "stim_ecc_y"
 89756 2137 "stim_ecc_y"
 89798 2138 "stim_ecc_y"
 89840 2139 "stim_ecc_y"
 89882 2140 "stim_ecc_y"
 89924 2141 "stim_ecc_y"
 89966 2142 "stim_ecc_y"
 90008 2143 "stim_ecc_y"
 90050 2144 "stim_ecc_y"
 90092 2145 "stim_ecc_y"
 90134 2146 "StimCond"
 90176 2147 "StimDone"
 90218 2148 "StimDone"
 90260 2149 "StimFailed_"
 90302 2150 "StimInterval"
 90344 2151 "StimTm"
 90386 2152 "Stimulation_"
 90428 2153 "Stop_sig_color"
 90470 2154 "stop_sig_color"
 90512 2155 "stop_sig_color"
 90554 2156 "stop_sig_color"
 90596 2157 "stop_sig_color_b"
 90638 2158 "stop_sig_color_g"
 90680 2159 "stop_sig_color_r"
 90722 2160 "stop_sig_time"
 90764 2161 "stop_sig_time"
 90806 2162 "stop_sig_time"
 90848 2163 "Stop_trl"
 90890 2164 "stop_trl"
 90932 2165 "stop_trl"
 90974 2166 "stop_trl"
 91016 2167 "Stop_trl"
 91058 2168 "Stop_trl"
 91100 2169 "stop_trl"
 91142 2170 "stop_trl"
 91184 2171 "Stop_weight"
 91226 2172 "stop_weight"
 91268 2173 "stop_weight"
 91310 2174 "stop_weight"
 91352 2175 "StopOn_"
 91394 2176 "StopSignal_"
 91436 2177 "Subj_dist"
 91478 2178 "subj_dist"
 91520 2179 "SUCCESS"
 91562 2180 "success"
 91604 2181 "success"
 91646 2182 "success"
 91688 2183 "success"
 91730 2184 "success"
 91772 2185 "success"
 91814 2186 "success"
 91856 2187 "success"
 91898 2188 "Success_tone"
 91940 2189 "success_tone"
 91982 2190 "Success_Tone_bigR"
 92024 2191 "Success_Tone_medR"
 92066 2192 "Success_Tone_smlR"
 92108 2193 "SVR_BEL2"
 92150 2194 "SVR_BELL"
 92192 2195 "targ_angle"
 92234 2196 "targ_ecc"
 92276 2197 "Targ_hold_time"
 92318 2198 "targ_hold_time"
 92360 2199 "targ_hold_time"
 92402 2200 "targ_hold_time"
 92444 2201 "targ_hold_time"
 92486 2202 "targ_hold_time"
 92528 2203 "targ_hold_time"
 92570 2204 "targ_on"
 92612 2205 "targ_on"
 92654 2206 "targ_on"
 92696 2207 "targ_on"
 92738 2208 "targ_orient"
 92780 2209 "targ_time"
 92822 2210 "targ_time"
 92864 2211 "targ_time"
 92906 2212 "targ_time"
 92948 2213 "targ_time"
 92990 2214 "targ_time"
 93032 2215 "Targ_win_down"
 93074 2216 "targ_win_down"
 93116 2217 "Targ_win_left"
 93158 2218 "targ_win_left"
 93200 2219 "Targ_win_right"
 93242 2220 "targ_win_right"
 93284 2221 "Targ_win_size"
 93326 2222 "targ_win_size"
 93368 2223 "Targ_win_up"
 93410 2224 "targ_win_up"
 93452 2225 "target"
 93494 2226 "target"
 93536 2227 "target"
 93578 2228 "target"
 93620 2229 "target"
 93662 2230 "target"
 93704 2231 "target"
 93746 2232 "target"
 93788 2233 "target"
 93830 2234 "target"
 93872 2235 "target"
 93914 2236 "target"
 93956 2237 "target"
 93998 2238 "Target_"
 94040 2239 "target_color_b"
 94082 2240 "target_color_g"
 94124 2241 "target_color_r"
 94166 2242 "target_f"
 94208 2243 "target_f"
 94250 2244 "target_f"
 94292 2245 "target_f_pd"
 94334 2246 "target_f_pd"
 94376 2247 "target_f_pd"
 94418 2248 "target_pd"
 94460 2249 "target_pd"
 94502 2250 "target_pd"
 94544 2251 "target_pd"
 94586 2252 "target_pd"
 94628 2253 "target_pd"
 94670 2254 "TargetPre_"
 94712 2255 "TargetType"
 94754 2256 "TargetWindow_"
 94796 2257 "TargOrients"
 94838 2258 "TargOrt"
 94880 2259 "TargOrt1"
 94922 2260 "TargOrt2"
 94964 2261 "TargTrainSet"
 95006 2262 "TaskStim"
 95048 2263 "tBOX"
 95090 2264 "tCROSS"
 95132 2265 "TD_Select"
 95174 2266 "tELLIPSE"
 95216 2267 "temp"
 95258 2268 "temp"
 95300 2269 "temp"
 95342 2270 "temp"
 95384 2271 "temp"
 95426 2272 "temp"
 95468 2273 "temp"
 95510 2274 "TgAng"
 95552 2275 "THemi"
 95594 2276 "THx1"
 95636 2277 "THx2"
 95678 2278 "THy1"
 95720 2279 "THy2"
 95762 2280 "TONE"
 95804 2281 "Tone_"
 95846 2282 "Tone_Duration"
 95888 2283 "tone_duration"
 95930 2284 "tone_durr"
 95972 2285 "tone_freq"
 96014 2286 "tone_time"
 96056 2287 "TONESWEP"
 96098 2288 "too_fast"
 96140 2289 "too_fast"
 96182 2290 "too_fast"
 96224 2291 "too_fast"
 96266 2292 "tPOINT"
 96308 2293 "TrainingStill"
 96350 2294 "TrAngList"
 96392 2295 "Trial_length"
 96434 2296 "trial_length"
 96476 2297 "trial_length"
 96518 2298 "TrialInBlock"
 96560 2299 "TrialStart_"
 96602 2300 "TrialTp"
 96644 2301 "trialtype"
 96686 2302 "trl_ct"
 96728 2303 "trl_end_time"
 96770 2304 "trl_end_time"
 96812 2305 "Trl_number"
 96854 2306 "Trl_Outcome"
 96896 2307 "trl_outcome"
 96938 2308 "trl_running"
 96980 2309 "trl_running"
 97022 2310 "trl_running"
 97064 2311 "trl_running"
 97106 2312 "trl_running"
 97148 2313 "trl_running"
 97190 2314 "trl_running"
 97232 2315 "Trl_Start_Time"
 97274 2316 "trl_start_time"
 97316 2317 "trl_start_time"
 97358 2318 "Trl_type"
 97400 2319 "trl_type"
 97442 2320 "trl_type"
 97484 2321 "trl_type"
 97526 2322 "trl_type"
 97568 2323 "Trls_per_block"
 97610 2324 "TSCH_PGS"
 97652 2325 "TVx1"
 97694 2326 "TVx2"
 97736 2327 "TVy1"
 97778 2328 "TVy2"
 97820 2329 "tXCROSS"
 97862 2330 "u_sec"
 97904 2331 "ulx"
 97946 2332 "ulx"
 97988 2333 "uly"
 98030 2334 "uly"
 98072 2335 "Unit2Pix_X"
 98114 2336 "unit2pix_X"
 98156 2337 "unit2pix_X"
 98198 2338 "unit2pix_X"
 98240 2339 "unit2pix_X"
 98282 2340 "unit2pix_X"
 98324 2341 "unit2pix_X"
 98366 2342 "unit2pix_X"
 98408 2343 "Unit2Pix_Y"
 98450 2344 "unit2pix_Y"
 98492 2345 "unit2pix_Y"
 98534 2346 "unit2pix_Y"
 98576 2347 "unit2pix_Y"
 98618 2348 "unit2pix_Y"
 98660 2349 "unit2pix_Y"
 98702 2350 "unit2pix_Y"
 98744 2351 "up"
 98786 2352 "UPD8_INH"
 98828 2353 "UPD8_SCH"
 98870 2354 "UPD8_SOA"
 98912 2355 "value"
 98954 2356 "VarEcc"
 98996 2357 "VSyncSynced_"
 99038 2358 "wait_flash"
 99080 2359 "WAIT_MU"
 99122 2360 "waitIFI"
 99164 2361 "WATCHBOD"
 99206 2362 "WATCHEYE"
 99248 2363 "WATCHMTH"
 99290 2364 "weight"
 99332 2365 "weight"
 99374 2366 "WINDOWS"
 99416 2367 "X_Gain"
 99458 2368 "X_Offset"
 99500 2369 "xena"
 99542 2370 "Y_Gain"
 99584 2371 "Y_Offset"
 99626 2372 "ZeroEyePosition_"

  iNAM Name
------ -----------------
168002 "SETS"
168008 "SPEED"
168014 "SPEED_UNITS"
168026 "__debug_op"
168038 "IDLE"
168044 "State"
168050 "OK"
168054 "Set_monkey"
168066 "Monkey"
168074 "Pause"
168080 "Last_task"
168090 "Event_fifo_N"
168104 "Event_fifo"
168116 "Set_event"
168126 "fix_manual"
168138 "Room"
168144 "Scr_width"
168154 "Scr_height"
168166 "Subj_dist"
168176 "PD_left"
168184 "PD_bottom"
168194 "PD_size"
168202 "Scr_pixX"
168212 "Scr_pixY"
168222 "Refresh_rate"
168236 "X_Gain"
168244 "Y_Gain"
168252 "X_Offset"
168262 "Y_Offset"
168272 "Juice_channel"
168286 "Stim_channel"
168300 "Eye_X_channel"
168314 "Eye_Y_channel"
168328 "PhotoD_channel"
168344 "MaxVoltage"
168356 "AnalogUnits"
168368 "CheckMouth"
168380 "CheckBody"
168390 "FixSpotOn_"
168402 "Fixate_"
168410 "PlacOn_"
168418 "Target_"
168426 "FixSpotOff_"
168438 "StopSignal_"
168450 "TrialStart_"
168462 "FixError_"
168472 "GoSaccade_"
168484 "GoError_"
168494 "NOGOWrong_"
168506 "GoTargFixError_"
168522 "Abort_"
168530 "Correct_"
168540 "GOCorrect_"
168552 "NOGOCorrect_"
168566 "CatchCorrect_"
168580 "CatchIncorrectG_"
168598 "CatchIncorrectNG_"
168616 "BreakTFix_"
168628 "EarlySaccade_"
168642 "Reward_"
168650 "Tone_"
168656 "Error_tone"
168668 "Reward_tone"
168680 "Error_sacc"
168692 "Correct_sacc"
168706 "ExtraReward_"
168720 "SoundOnReward_"
168736 "SoundNoReward_"
168752 "Eot_"
168758 "CmanHeader_"
168770 "MemHeader_"
168782 "GONOGOHeader_"
168796 "DelayedHeader_"
168812 "SearchHeader_"
168826 "CaptureHeader_"
168842 "Identify_Room_"
168858 "ShamStim_"
168868 "Stimulation_"
168882 "EndStim_"
168892 "ZeroEyePosition_"
168910 "VSyncSynced_"
168924 "Saccade_"
168934 "Decide_"
168942 "MouthBegin_"
168954 "MouthEnd_"
168964 "MapHeader_"
168976 "FixWindow_"
168988 "TargetWindow_"
169002 "Staircase_"
169014 "Neg2Reinforcement_"
169034 "Feedback_"
169044 "RewardSize_"
169056 "TrialInBlock"
169070 "SendPenatrInfo_"
169086 "TargetPre_"
169098 "StopOn_"
169106 "StimFailed_"
169118 "StartInfos_"
169130 "EndInfos_"
169140 "InfosZero"
169150 "Trl_number"
169162 "Comp_Trl_number"
169178 "Rand_Comp_Trl_number_DP"
169202 "Rand_Comp_Trl_number_DA"
169226 "Rep_Comp_Trl_number"
169246 "Rand_Comp_Trl_number"
169268 "Rand_Comp_NG_Trl"
169286 "Rand_Comp_Trl_DA"
169304 "Rand_Comp_Trl_DP"
169322 "Rep_Comp_NG_Trl"
169338 "RandPerAcc"
169350 "RepPerAcc"
169360 "RandPerAcc_DA"
169374 "RandPerAcc_DP"
169388 "rand_inacc_sacc"
169404 "rep_inacc_sacc"
169420 "rand_inacc_sacc_DA"
169440 "rand_inacc_sacc_DP"
169460 "current_rt"
169472 "cum_rep_rt"
169484 "avg_rep_rt"
169496 "graph_rep_rt"
169510 "cum_rand_rt"
169522 "avg_rand_rt"
169534 "cum_rand_rt_DA"
169550 "avg_rand_rt_DA"
169566 "cum_rand_rt_DP"
169582 "avg_rand_rt_DP"
169598 "graph_rand_rt"
169612 "Correct_trls"
169626 "Consec_corr"
169638 "Block_number"
169652 "Trls_per_block"
169668 "Go_weight"
169678 "Stop_weight"
169690 "Ignore_weight"
169704 "DR1_flag"
169714 "Bonus_weight"
169728 "Dealer_wins_weight"
169748 "BigR_weight"
169760 "MedR_weight"
169772 "SmlR_weight"
169784 "SmlP_weight"
169796 "MedP_weight"
169808 "BigP_weight"
169820 "Catch"
169826 "CatchCode"
169836 "Perc_catch"
169848 "PlacPres"
169858 "SearchType"
169870 "TargetType"
169882 "TrialTp"
169890 "SetSize"
169898 "soa_mode"
169908 "Consec_trl"
169920 "Dist_Ecc_list"
169934 "Dist_Ang_list"
169948 "RanTarg_Ang_list"
169966 "RepTarg_Ang_list"
169984 "TrAngList"
169994 "ArrStruct"
170004 "ProbCue"
170012 "ProbSide"
170022 "TaskStim"
170032 "FixJitter"
170042 "LatStruct"
170052 "Catch_Rew"
170062 "trialtype"
170072 "Singleton_color"
170088 "NonSingleton_color"
170108 "d1color"
170116 "SingMode"
170126 "SingFreq"
170136 "DistPres"
170146 "SingCol"
170154 "PercSingTrl"
170166 "TargOrt"
170174 "TargOrt1"
170184 "TargOrt2"
170194 "TD_Select"
170204 "DistOrt"
170212 "SearchEcc"
170222 "SelEcc"
170230 "VarEcc"
170238 "TargTrainSet"
170252 "THemi"
170258 "DHemi"
170264 "Rand_targ_angle"
170280 "Rand_d1_angle"
170294 "catch_hold_time"
170310 "search_fix_time"
170326 "plac_duration"
170340 "max_plactime"
170354 "min_plactime"
170368 "StimInterval"
170382 "StimCond"
170392 "LastStim"
170402 "Npulse"
170410 "PulseGap"
170420 "Classic"
170428 "Stop_sig_color"
170444 "Ignore_sig_color"
170462 "Fixation_color"
170478 "Mask_sig_color"
170494 "N_targ_pos"
170506 "Color_list"
170518 "Size_list"
170528 "Angle_list"
170540 "Eccentricity_list"
170558 "Fixation_size"
170572 "Set_Tones"
170582 "Success_Tone_bigR"
170600 "Success_Tone_medR"
170618 "Success_Tone_smlR"
170636 "Failure_Tone_smlP"
170654 "Failure_Tone_medP"
170672 "Failure_Tone_bigP"
170690 "Fixation_Target"
170706 "llength"
170714 "lwidth"
170722 "Fix_win_size"
170736 "Targ_win_size"
170750 "Allowed_fix_time"
170768 "Expo_Jitter"
170780 "Expo_Jitter_SOA"
170796 "Min_Holdtime"
170810 "Max_Holdtime"
170824 "Min_SOA"
170832 "Max_SOA"
170840 "Min_saccade_time"
170858 "Max_saccade_time"
170876 "Max_sacc_duration"
170894 "Targ_hold_time"
170910 "N_SSDs"
170918 "Max_SSD"
170926 "Min_SSD"
170934 "N_SOAs"
170942 "SSD_floor"
170952 "SSD_ceil"
170962 "Staircase"
170972 "SSD_list"
170982 "SOA_list"
170992 "Cancl_time"
171004 "Tone_Duration"
171018 "Reward_Offset"
171032 "Base_Reward_time"
171050 "Base_Punish_time"
171068 "Bmove_tout"
171080 "Move_ct"
171088 "Max_move_ct"
171100 "TrainingStill"
171114 "Canc_alert"
171126 "Fixed_trl_length"
171144 "Trial_length"
171158 "Inter_trl_int"
171172 "Exp_juice"
171182 "nogosoa"
171190 "Reward_duration"
171206 "Punish_time"
171218 "Success_tone"
171232 "Failure_tone"
171246 "IFI"
171250 "flashTime"
171260 "DEFAULT"
171268 "#P1"
171272 "#P2"
171276 "#P3"
171280 "run_cmd_sess"
171294 "run_fix_sess"
171308 "run_mg_sess"
171320 "run_gonogo_sess"
171336 "run_flash_sess"
171352 "run_delayed_sess"
171370 "run_search_sess"
171386 "xena"
171392 "broca"
171398 "helmholtz"
171408 "gauss"
171414 "color_num"
171424 "r_"
171428 "g_"
171432 "b_"
171436 "#I0"
171440 "#I1"
171444 "#I2"
171448 "#I100"
171454 "#M00000000"
171466 "#M42C80000"
171478 "#I500"
171484 "#I1000"
171492 "#I35"
171498 "#I33"
171504 "#I27"
171510 "#I63"
171516 "#I36"
171522 "#I3"
171526 "#I4"
171530 "#I5"
171534 "#I6"
171538 "#I7"
171542 "#I8"
171546 "#I9"
171550 "#I10"
171556 "#I11"
171562 "#M3F000000"
171574 "#I180"
171580 "#M43340000"
171592 "#I90"
171598 "#M42B40000"
171610 "#I135"
171616 "#M43070000"
171628 "#I-135"
171636 "#MC3070000"
171648 "#I-90"
171654 "#MC2B40000"
171666 "#I-45"
171672 "#MC2340000"
171684 "#M41000000"
171696 "#I200"
171702 "#I400"
171708 "#I800"
171714 "#I1600"
171722 "#I3200"
171730 "#M40200000"
171742 "#I2000"
171750 "#I600"
171756 "#M40400000"
171768 "#M40C00000"
171780 "#M41100000"
171792 "#I12"
171798 "#M41400000"
171810 "#I13"
171816 "#I14"
171822 "#I15"
171828 "#I16"
171834 "#I17"
171840 "#I18"
171846 "#I19"
171852 "#L0"
171856 "#I30"
171862 "#I60"
171868 "#I4000"
171876 "#I28"
171882 "#L1"
171886 "#M43E48000"
171898 "#I29"
171904 "#M4405C000"
171916 "#M40600000"
171928 "#I50"
171934 "#I10000"
171942 "#M3FC00000"
171954 "#M40000000"
171966 "#M40800000"
171978 "#M40A00000"
171990 "#M41F00000"
172002 "#M42700000"
172014 "#I120"
172020 "#M42F00000"
172032 "#I150"
172038 "#M43160000"
172050 "#I210"
172056 "#M43520000"
172068 "#I240"
172074 "#M43700000"
172086 "#I270"
172092 "#M43870000"
172104 "#I300"
172110 "#M43960000"
172122 "#I330"
172128 "#M43A50000"
172140 "#I20"
172146 "#M42480000"
172158 "#M41500000"
172170 "#I23"
172176 "#M41B80000"
172188 "#M42040000"
172200 "#I43"
172206 "#M422C0000"
172218 "#I53"
172224 "#M42540000"
172236 "#M427C0000"
172248 "#I1400"
172256 "#I5000"
172264 "#I1200"
172272 "#I45"
172278 "#M42340000"
172290 "#I315"
172296 "#M439D8000"
172308 "#I225"
172314 "#M43610000"
172326 "#M43480000"
172338 "#M43C80000"
172350 "#I900"
172356 "#M44610000"
172368 "#M447A0000"
172380 "#M41300000"
172392 "#M4179999A"
172404 "#M43E10000"
172416 "#I70"
172422 "#M428C0000"
172434 "#I80"
172440 "#M42A00000"
172452 "#M43DC0000"
172464 "#M41900000"
172476 "#M41E00000"
172488 "#I38"
172494 "#M42180000"
172506 "#I48"
172512 "#M42400000"
172524 "#I350"
172530 "#I450"
172536 "#M44160000"
172548 "#I750"
172554 "#M443B8000"
172566 "#I1050"
172574 "#M44834000"
172586 "#M44960000"
172598 "#I1350"
172606 "#M44A8C000"
172618 "#I60000"
172626 "#I700"
172632 "#I1100"
172640 "#M44898000"
172652 "#I1300"
172660 "#M44A28000"
172672 "#I22"
172678 "#M43DE8000"
172690 "#M43FA0000"
172702 "#M44AF0000"
172714 "#M44C80000"
172726 "#I1800"
172734 "#M44E10000"
172746 "#M44FA0000"
172758 "#I600000"
172768 "#I175"
172774 "#I250"
172780 "#M437A0000"
172792 "#M43AF0000"
172804 "GOODVARS"
172814 "i"
172816 "#F0"
172820 "#F1"
172824 "WARNING!!!
"
172836 "#S0"
172840 "#L2"
172844 "Trial weights do not sum to 100.
"
172878 "#S1"
172882 "CHANGE PARAMETERS BEFORE RECORDING
"
172918 "#S2"
172922 "dpop"
172928 "#S3"
172932 "#M41649249"
172944 "WARNING!!!
"
172956 "#S4"
172960 "SSDs exceed Max time allowed...
"
172994 "#S5"
172998 "...for saccade to target.
"
173026 "#S6"
173030 "CHANGE PARAMETERS BEFORE RECORDING
"
173066 "#S7"
173070 "dpop"
173076 "#S8"
173080 "#L3"
173084 "#L4"
173088 "#L5"
173092 "#L6"
173096 "#L7"
173100 "#L8"
173104 "#L9"
173108 "#L10"
173114 "#L11"
173120 "#L12"
173126 "#L13"
173132 "#L14"
173138 "WARNING!!!
"
173150 "#S9"
173154 "Trial length too short
"
173178 "#S10"
173184 "Extending trial length to %d
"
173214 "#S11"
173220 "WARNING!!!
"
173232 "#S12"
173238 "Trial weights do not sum to 100.
"
173272 "#S13"
173278 "CHANGE PARAMETERS BEFORE RECORDING
"
173314 "#S14"
173320 "dpop"
173326 "#S15"
173332 "WARNING!!!
"
173344 "#S16"
173350 "Trial length too short
"
173374 "#S17"
173380 "Extending trial length to %d
"
173410 "#S18"
173416 "STIM"
173422 "channel"
173430 "on"
173434 "off"
173438 "KEY_STIM"
173448 "SET_CLRS"
173458 "cm %d %d %d %d;
"
173476 "#S19"
173482 "#I59"
173488 "#I255"
173494 "cm 255 %d %d %d;
"
173512 "#S20"
173518 "cm 254 %d %d %d;
"
173536 "#S21"
173542 "cm 253 %d %d %d;
"
173560 "#S22"
173566 "cm 252 %d %d %d;
"
173584 "#S23"
173590 "cm 251 %d %d %d;
"
173608 "#S24"
173614 "cm 250 %d %d %d;
"
173632 "#S25"
173638 "PORTA"
173644 "PORTB"
173650 "PORTC"
173656 "Deg2Pix_X"
173666 "Deg2Pix_Y"
173676 "Unit2Pix_X"
173688 "Unit2Pix_Y"
173700 "SET_COOR"
173710 "#Q1"
173714 "#Q2"
173718 "#Q3"
173722 "#P4"
173726 "#P5"
173730 "half_width"
173742 "half_height"
173754 "deg_x"
173760 "deg_y"
173766 "#F2"
173770 "vc %d, %d, %d, %d
"
173790 "#S26"
173796 "#I-1"
173802 "gLEFT"
173808 "gRIGHT"
173816 "tPOINT"
173824 "tBOX"
173830 "tCROSS"
173838 "tXCROSS"
173846 "tELLIPSE"
173856 "aXOR"
173862 "aREPLACE"
173872 "aVISIBLE"
173882 "aINVISIBLE"
173894 "aFILLED"
173902 "aUNFILLED"
173912 "aSIZE"
173918 "aRANGE"
173926 "aTITLE"
173934 "aCLEAR"
173942 "object_fixwin"
173956 "object_eye"
173968 "object_targwin"
173984 "object_fix"
173996 "object_targ"
174008 "GRAPHS"
174016 "#Q4"
174020 "left"
174026 "right"
174032 "down"
174038 "up"
174042 "#I-2"
174048 "*** TASK ***"
174062 "#S27"
174068 "FirstStopTrial"
174084 "object_ssd0"
174096 "object_ssd1"
174108 "object_ssd2"
174120 "object_ssd3"
174132 "object_ssd4"
174144 "object_ssd5"
174156 "object_ssd6"
174168 "object_ssd7"
174180 "object_ssd8"
174192 "object_ssd9"
174204 "object_ssd10"
174218 "object_ssd11"
174232 "object_ssd12"
174246 "object_ssd13"
174260 "object_ssd14"
174274 "object_ssd15"
174288 "object_ssd16"
174302 "object_ssd17"
174316 "object_ssd18"
174330 "object_ssd19"
174344 "object_30_70"
174358 "SET_INH"
174366 "ssd_range"
174376 "inh_left"
174386 "inh_right"
174396 "inh_box_size"
174410 "#I200000"
174420 "#I40"
174426 "#I1025"
174434 "#I-25"
174440 "*** INHIBITION FUNCTION ***"
174468 "#S28"
174474 "FirstSOATrial"
174488 "object_soa0"
174500 "object_soa1"
174512 "object_soa2"
174524 "object_soa3"
174536 "object_soa4"
174548 "object_soa5"
174560 "object_soa6"
174572 "object_soa7"
174584 "object_soa8"
174596 "object_soa9"
174608 "object_soa10"
174622 "object_soa11"
174636 "object_soa12"
174650 "object_soa13"
174664 "object_soa14"
174678 "object_soa15"
174692 "object_soa16"
174706 "object_soa17"
174720 "object_soa18"
174734 "object_soa19"
174748 "SET_SOA"
174756 "soa_range"
174766 "soa_left"
174776 "soa_right"
174786 "soa_box_size"
174800 "#I1500"
174808 "x axis = %d
"
174822 "#S29"
174828 "y axis = %d
"
174842 "#S30"
174848 "*** SOA FUNCTION ***"
174870 "#S31"
174876 "FirstSearchTrial"
174894 "object_repeat"
174908 "object_random"
174922 "SET_SCH"
174930 "#I-1000"
174938 "*** Repeat vs. Random Display Search RT ***"
174982 "#S32"
174988 "targ_angle"
175000 "targ_ecc"
175010 "Fix_win_left"
175024 "Fix_win_right"
175038 "Fix_win_down"
175052 "Fix_win_up"
175064 "Targ_win_left"
175078 "Targ_win_right"
175094 "Targ_win_down"
175108 "Targ_win_up"
175120 "WINDOWS"
175128 "curr_target"
175140 "#Q6"
175144 "#Q7"
175148 "angle"
175154 "eccentricity"
175168 "stim_ecc_x"
175180 "stim_ecc_y"
175192 "half_size_tw"
175206 "old_fix_win_size"
175224 "old_targ_win_size"
175242 "In_FixWin"
175252 "In_TargWin"
175264 "LOCATE_I"
175274 "eye_x"
175280 "eye_y"
175286 "#Q5"
175290 "#Q8"
175294 "#Q9"
175298 "#Q10"
175304 "Eye_on_VDOSync"
175320 "CenterEyeNow"
175334 "WATCHEYE"
175344 "oldx"
175350 "oldy"
175356 "lasttime"
175366 "plot_x"
175374 "plot_y"
175382 "#F3"
175386 "#F4"
175390 "cl;
"
175396 "#S33"
175402 "ru %d,%d,%d,%d;
"
175420 "#S34"
175426 "co %d;
"
175434 "#S35"
175440 "TONE"
175446 "frequency"
175456 "duration"
175466 "count"
175472 "#I10000000"
175484 "TONESWEP"
175494 "#I64000"
175502 "#I32000"
175510 "#I16000"
175518 "#I8000"
175526 "CheckMotion"
175538 "WATCHMTH"
175548 "mouth_channel"
175562 "mouth_thresh"
175576 "still"
175582 "moving"
175590 "mouth_status"
175604 "last_status"
175616 "mouth"
175622 "mouth_time"
175634 "WATCHBOD"
175644 "body_channel"
175658 "sample_n"
175668 "a_sets"
175676 "SVR_BELL"
175686 "SVR_BEL2"
175696 "Trl_Outcome"
175708 "Trl_Start_Time"
175724 "LastStopOutcome"
175740 "CMDTRIAL"
175750 "curr_holdtime"
175764 "trl_type"
175774 "curr_ssd"
175784 "#P6"
175788 "#P7"
175792 "#P8"
175796 "#P9"
175800 "go_trl"
175808 "stop_trl"
175818 "ignore_trl"
175830 "need_fix"
175840 "fixating"
175850 "targ_on"
175858 "in_flight"
175868 "on_target"
175878 "stage"
175884 "blank"
175890 "fixation_pd"
175902 "fixation"
175912 "target_pd"
175922 "target"
175930 "signal_pd"
175940 "signal"
175948 "success"
175956 "failure"
175964 "no_change"
175974 "no_fix"
175982 "broke_fix"
175992 "go_wrong"
176002 "nogo_correct"
176016 "sacc_out"
176026 "broke_targ"
176038 "go_correct"
176050 "nogo_wrong"
176062 "body_move"
176072 "too_fast"
176082 "fix_spot_time"
176096 "targ_time"
176106 "saccade_time"
176120 "aquire_fix_time"
176136 "stop_sig_time"
176150 "aquire_targ_time"
176168 "trl_running"
176180 " 
"
176184 "#S36"
176190 "# %d"
176196 "#S37"
176202 " (%d"
176208 "#S38"
176214 " correct)
"
176226 "#S39"
176232 "GO
"
176236 "#S40"
176242 "holdtime = %d
"
176258 "#S41"
176264 "STOP
"
176270 "#S42"
176276 "holdtime = %d
"
176292 "#S43"
176298 "               ssd = %d
"
176324 "#S44"
176330 "IGNORE
"
176338 "#S45"
176344 "holdtime = %d
"
176360 "#S46"
176366 "               isd = %d
"
176392 "#S47"
176398 "vp %d
"
176406 "#S48"
176412 "XM RFRSH:
"
176424 "#S49"
176430 "vp %d
"
176438 "#S50"
176444 "vp %d
"
176452 "#S51"
176458 "Aborted (no fixation)
"
176482 "#S52"
176488 "vp %d
"
176496 "#S53"
176502 "Aborted (broke fixation)
"
176528 "#S54"
176534 "vp %d
"
176542 "#S55"
176548 "XM RFRSH:
"
176560 "#S56"
176566 "vp %d
"
176574 "#S57"
176580 "vw %d
"
176588 "#S58"
176594 "vp %d
"
176602 "#S59"
176608 "XM RFRSH:
"
176620 "#S60"
176626 "vp %d
"
176634 "#S61"
176640 "                          rt = %d
"
176676 "#S62"
176682 "vp %d
"
176690 "#S63"
176696 "Error (too fast)
"
176714 "#S64"
176720 "vp %d
"
176728 "#S65"
176734 "Error (no saccade)
"
176754 "#S66"
176760 "vp %d
"
176768 "#S67"
176774 "Correct (canceled)
"
176794 "#S68"
176800 "vp %d
"
176808 "#S69"
176814 "Error (inaccurate saccade)
"
176842 "#S70"
176848 "vp %d
"
176856 "#S71"
176862 "Error (broke target fixation)
"
176894 "#S72"
176900 "Correct (saccade)
"
176920 "#S73"
176926 "Error (noncanceled)
"
176948 "#S74"
176954 "vp %d
"
176962 "#S75"
176968 "vp %d
"
176976 "#S76"
176982 "Aborted (body movement)
"
177008 "#S77"
177014 "StimTm"
177022 "sacctarg"
177032 "ReactionTime"
177046 "MGTRIAL"
177054 "curr_soa"
177064 "fix_off"
177072 "early_sacc"
177084 "no_sacc"
177092 "fix_off_time"
177106 "StimDone"
177116 " 
"
177120 "#S78"
177126 "# %d"
177132 "#S79"
177138 " (%d"
177144 "#S80"
177150 " correct)
"
177162 "#S81"
177168 "holdtime = %d
"
177184 "#S82"
177190 "soa = %d
"
177200 "#S83"
177206 "vp %d
"
177214 "#S84"
177220 "XM RFRSH:
"
177232 "#S85"
177238 "vp %d
"
177246 "#S86"
177252 "vp %d
"
177260 "#S87"
177266 "Aborted (no fixation)
"
177290 "#S88"
177296 "vp %d
"
177304 "#S89"
177310 "Aborted (broke fixation)
"
177336 "#S90"
177342 "#I140"
177348 "vp %d
"
177356 "#S91"
177362 "XM RFRSH:
"
177374 "#S92"
177380 "vp %d
"
177388 "#S93"
177394 "vp %d
"
177402 "#S94"
177408 "                          premature rt = %d
"
177454 "#S95"
177460 "vp %d
"
177468 "#S96"
177474 "vp %d
"
177482 "#S97"
177488 "Error (early saccade)
"
177512 "#S98"
177518 "vp %d
"
177526 "#S99"
177532 "XM RFRSH:
"
177544 "#S100"
177550 "vp %d
"
177558 "#S101"
177564 "vp %d
"
177572 "#S102"
177578 "XM RFRSH:
"
177590 "#S103"
177596 "vp %d
"
177604 "#S104"
177610 "                   visual_premature rt = %d
"
177656 "#S105"
177662 "vp %d
"
177670 "#S106"
177676 "vp %d
"
177684 "#S107"
177690 "Error (early saccade)
"
177714 "#S108"
177720 "                        visual rt = %d
"
177760 "#S109"
177766 "vp %d
"
177774 "#S110"
177780 "Error (no saccade)
"
177800 "#S111"
177806 "vp %d
"
177814 "#S112"
177820 "Correct (canceled)
"
177840 "#S113"
177846 "Error (noncanceled)
"
177868 "#S114"
177874 "vp %d
"
177882 "#S115"
177888 "vp %d
"
177896 "#S116"
177902 "XM RFRSH:
"
177914 "#S117"
177920 "vp %d
"
177928 "#S118"
177934 "vp %d
"
177942 "#S119"
177948 "Error (inaccurate saccade)
"
177976 "#S120"
177982 "vp %d
"
177990 "#S121"
177996 "Error (broke target fixation)
"
178028 "#S122"
178034 "Correct (saccade)
"
178054 "#S123"
178060 "vp %d
"
178068 "#S124"
178074 "vp %d
"
178082 "#S125"
178088 "Aborted (body movement)
"
178114 "#S126"
178120 "LastSearchOutcome"
178138 "SCHTRIAL"
178148 "fixating_ph"
178160 "fixating_targ"
178174 "fixating_off"
178188 "fixation_offset"
178204 "plac_pd"
178212 "plac"
178218 "target_f_pd"
178230 "target_f"
178240 "nogo_success"
178254 "no_saccade"
178266 " 
"
178270 "#S127"
178276 "Block %d"
178286 "#S128"
178292 " 
"
178296 "#S129"
178302 "# %d"
178308 "#S130"
178314 " 
"
178318 "#S131"
178324 "Trial Type = %d"
178340 "#S132"
178346 " 
"
178350 "#S133"
178356 "Fix-Sch ISI = %d"
178374 "#S134"
178380 " 
"
178384 "#S135"
178390 " random correct = %d"
178412 "#S136"
178418 "    %d"
178426 "#S137"
178432 " 
"
178436 "#S138"
178442 " repeat correct = %d"
178464 "#S139"
178470 "    %d"
178478 "#S140"
178484 " 
"
178488 "#S141"
178494 " (%d"
178500 "#S142"
178506 " random RT)
"
178520 "#S143"
178526 " (%d"
178532 "#S144"
178538 " repeated RT)
"
178554 "#S145"
178560 "soa = %d
"
178570 "#S146"
178576 " Sing. Abs. correct = %d"
178602 "#S147"
178608 "    %d"
178616 "#S148"
178622 " 
"
178626 "#S149"
178632 " Sing. Pres. correct = %d"
178658 "#S150"
178664 "    %d"
178672 "#S151"
178678 " 
"
178682 "#S152"
178688 " (%d"
178694 "#S153"
178700 " absent RT)
"
178714 "#S154"
178720 " (%d"
178726 "#S155"
178732 " present RT)
"
178746 "#S156"
178752 "soa = %d
"
178762 "#S157"
178768 "vp %d
"
178776 "#S158"
178782 "XM RFRSH:
"
178794 "#S159"
178800 "vp %d
"
178808 "#S160"
178814 "vp %d
"
178822 "#S161"
178828 "Aborted (no fixation)
"
178852 "#S162"
178858 "vp %d
"
178866 "#S163"
178872 "Aborted (broke fixation)
"
178898 "#S164"
178904 "vp %d
"
178912 "#S165"
178918 "XM RFRSH:
"
178930 "#S166"
178936 "vp %d
"
178944 "#S167"
178950 "wm %d
"
178958 "#S168"
178964 "vp %d
"
178972 "#S169"
178978 "Aborted (broke fixation)
"
179004 "#S170"
179010 "vp %d
"
179018 "#S171"
179024 "XM RFRSH:
"
179036 "#S172"
179042 "vp %d
"
179050 "#S173"
179056 "wm %d
"
179064 "#S174"
179070 "vp %d
"
179078 "#S175"
179084 "Error (too fast)
"
179102 "#S176"
179108 "vp %d
"
179116 "#S177"
179122 "Error (too fast)
"
179140 "#S178"
179146 "vp %d
"
179154 "#S179"
179160 "vp %d
"
179168 "#S180"
179174 "Error (NoGo)
"
179188 "#S181"
179194 "rt = %d
"
179204 "#S182"
179210 "vp %d
"
179218 "#S183"
179224 "Error (too fast)
"
179242 "#S184"
179248 "vp %d
"
179256 "#S185"
179262 "Error (no saccade)
"
179282 "#S186"
179288 "vp %d
"
179296 "#S187"
179302 "Catch Correct
"
179318 "#S188"
179324 "vp %d
"
179332 "#S189"
179338 "Error (inaccurate saccade)
"
179366 "#S190"
179372 "vp %d
"
179380 "#S191"
179386 "Error (broke target fixation)
"
179418 "#S192"
179424 "Correct (saccade)
"
179444 "#S193"
179450 "vp %d
"
179458 "#S194"
179464 "wm %d
"
179472 "#S195"
179478 "vp %d
"
179486 "#S196"
179492 "Aborted (body movement)
"
179518 "#S197"
179524 "j"
179526 "temp"
179532 "orientation"
179544 "Homo_orient"
179556 "RepDistOrients"
179572 "RepTargOrients"
179588 "R1_targ_orient"
179604 "R1_d1_orient"
179618 "R1_d2_orient"
179632 "R1_d3_orient"
179646 "R1_d4_orient"
179660 "R1_d5_orient"
179674 "R1_d6_orient"
179688 "R1_d7_orient"
179702 "R1_d8_orient"
179716 "R1_d9_orient"
179730 "R1_d10_orient"
179744 "R1_d11_orient"
179758 "R2_targ_orient"
179774 "R2_d1_orient"
179788 "R2_d2_orient"
179802 "R2_d3_orient"
179816 "R2_d4_orient"
179830 "R2_d5_orient"
179844 "R2_d6_orient"
179858 "R2_d7_orient"
179872 "R2_d8_orient"
179886 "R2_d9_orient"
179900 "R2_d10_orient"
179914 "R2_d11_orient"
179928 "R3_targ_orient"
179944 "R3_d1_orient"
179958 "R3_d2_orient"
179972 "R3_d3_orient"
179986 "R3_d4_orient"
180000 "R3_d5_orient"
180014 "R3_d6_orient"
180028 "R3_d7_orient"
180042 "R3_d8_orient"
180056 "R3_d9_orient"
180070 "R3_d10_orient"
180084 "R3_d11_orient"
180098 "R4_targ_orient"
180114 "R4_d1_orient"
180128 "R4_d2_orient"
180142 "R4_d3_orient"
180156 "R4_d4_orient"
180170 "R4_d5_orient"
180184 "R4_d6_orient"
180198 "R4_d7_orient"
180212 "R4_d8_orient"
180226 "R4_d9_orient"
180240 "R4_d10_orient"
180254 "R4_d11_orient"
180268 "R5_targ_orient"
180284 "R5_d1_orient"
180298 "R5_d2_orient"
180312 "R5_d3_orient"
180326 "R5_d4_orient"
180340 "R5_d5_orient"
180354 "R5_d6_orient"
180368 "R5_d7_orient"
180382 "R5_d8_orient"
180396 "R5_d9_orient"
180410 "R5_d10_orient"
180424 "R5_d11_orient"
180438 "R6_targ_orient"
180454 "R6_d1_orient"
180468 "R6_d2_orient"
180482 "R6_d3_orient"
180496 "R6_d4_orient"
180510 "R6_d5_orient"
180524 "R6_d6_orient"
180538 "R6_d7_orient"
180552 "R6_d8_orient"
180566 "R6_d9_orient"
180580 "R6_d10_orient"
180594 "R6_d11_orient"
180608 "REP_ORT"
180616 "RandHomo_orient"
180632 "DistOrients"
180644 "TargOrients"
180656 "Rand_targ_orient"
180674 "Rand_d1_orient"
180690 "Rand_d2_orient"
180706 "Rand_d3_orient"
180722 "Rand_d4_orient"
180738 "Rand_d5_orient"
180754 "Rand_d6_orient"
180770 "Rand_d7_orient"
180786 "Rand_d8_orient"
180802 "Rand_d9_orient"
180818 "Rand_d10_orient"
180834 "Rand_d11_orient"
180850 "RAND_ORT"
180860 "numTargAngles"
180874 "numDistAngles"
180888 "numDistEcc"
180900 "R1_targ_angle"
180914 "R1_d1_angle"
180926 "R1_d2_angle"
180938 "R1_d3_angle"
180950 "R1_d4_angle"
180962 "R1_d5_angle"
180974 "R1_d6_angle"
180986 "R1_d7_angle"
180998 "R1_d8_angle"
181010 "R1_d9_angle"
181022 "R1_d10_angle"
181036 "R1_d11_angle"
181050 "R1_targ_ecc"
181062 "R1_d1_ecc"
181072 "R1_d2_ecc"
181082 "R1_d3_ecc"
181092 "R1_d4_ecc"
181102 "R1_d5_ecc"
181112 "R1_d6_ecc"
181122 "R1_d7_ecc"
181132 "R1_d8_ecc"
181142 "R1_d9_ecc"
181152 "R1_d10_ecc"
181164 "R1_d11_ecc"
181176 "R2_targ_angle"
181190 "R2_d1_angle"
181202 "R2_d2_angle"
181214 "R2_d3_angle"
181226 "R2_d4_angle"
181238 "R2_d5_angle"
181250 "R2_d6_angle"
181262 "R2_d7_angle"
181274 "R2_d8_angle"
181286 "R2_d9_angle"
181298 "R2_d10_angle"
181312 "R2_d11_angle"
181326 "R2_targ_ecc"
181338 "R2_d1_ecc"
181348 "R2_d2_ecc"
181358 "R2_d3_ecc"
181368 "R2_d4_ecc"
181378 "R2_d5_ecc"
181388 "R2_d6_ecc"
181398 "R2_d7_ecc"
181408 "R2_d8_ecc"
181418 "R2_d9_ecc"
181428 "R2_d10_ecc"
181440 "R2_d11_ecc"
181452 "R3_targ_angle"
181466 "R3_d1_angle"
181478 "R3_d2_angle"
181490 "R3_d3_angle"
181502 "R3_d4_angle"
181514 "R3_d5_angle"
181526 "R3_d6_angle"
181538 "R3_d7_angle"
181550 "R3_d8_angle"
181562 "R3_d9_angle"
181574 "R3_d10_angle"
181588 "R3_d11_angle"
181602 "R3_targ_ecc"
181614 "R3_d1_ecc"
181624 "R3_d2_ecc"
181634 "R3_d3_ecc"
181644 "R3_d4_ecc"
181654 "R3_d5_ecc"
181664 "R3_d6_ecc"
181674 "R3_d7_ecc"
181684 "R3_d8_ecc"
181694 "R3_d9_ecc"
181704 "R3_d10_ecc"
181716 "R3_d11_ecc"
181728 "R4_targ_angle"
181742 "R4_d1_angle"
181754 "R4_d2_angle"
181766 "R4_d3_angle"
181778 "R4_d4_angle"
181790 "R4_d5_angle"
181802 "R4_d6_angle"
181814 "R4_d7_angle"
181826 "R4_d8_angle"
181838 "R4_d9_angle"
181850 "R4_d10_angle"
181864 "R4_d11_angle"
181878 "R4_targ_ecc"
181890 "R4_d1_ecc"
181900 "R4_d2_ecc"
181910 "R4_d3_ecc"
181920 "R4_d4_ecc"
181930 "R4_d5_ecc"
181940 "R4_d6_ecc"
181950 "R4_d7_ecc"
181960 "R4_d8_ecc"
181970 "R4_d9_ecc"
181980 "R4_d10_ecc"
181992 "R4_d11_ecc"
182004 "R5_targ_angle"
182018 "R5_d1_angle"
182030 "R5_d2_angle"
182042 "R5_d3_angle"
182054 "R5_d4_angle"
182066 "R5_d5_angle"
182078 "R5_d6_angle"
182090 "R5_d7_angle"
182102 "R5_d8_angle"
182114 "R5_d9_angle"
182126 "R5_d10_angle"
182140 "R5_d11_angle"
182154 "R5_targ_ecc"
182166 "R5_d1_ecc"
182176 "R5_d2_ecc"
182186 "R5_d3_ecc"
182196 "R5_d4_ecc"
182206 "R5_d5_ecc"
182216 "R5_d6_ecc"
182226 "R5_d7_ecc"
182236 "R5_d8_ecc"
182246 "R5_d9_ecc"
182256 "R5_d10_ecc"
182268 "R5_d11_ecc"
182280 "R6_targ_angle"
182294 "R6_d1_angle"
182306 "R6_d2_angle"
182318 "R6_d3_angle"
182330 "R6_d4_angle"
182342 "R6_d5_angle"
182354 "R6_d6_angle"
182366 "R6_d7_angle"
182378 "R6_d8_angle"
182390 "R6_d9_angle"
182402 "R6_d10_angle"
182416 "R6_d11_angle"
182430 "R6_targ_ecc"
182442 "R6_d1_ecc"
182452 "R6_d2_ecc"
182462 "R6_d3_ecc"
182472 "R6_d4_ecc"
182482 "R6_d5_ecc"
182492 "R6_d6_ecc"
182502 "R6_d7_ecc"
182512 "R6_d8_ecc"
182522 "R6_d9_ecc"
182532 "R6_d10_ecc"
182544 "R6_d11_ecc"
182556 "REP1_LOC"
182566 "REP2_LOC"
182576 "REP3_LOC"
182586 "REP4_LOC"
182596 "REP5_LOC"
182606 "REP6_LOC"
182616 "RandomizeRepDistAngles"
182640 "RandomizeRepDistEccentricities"
182672 "RandomizeRepTargAngles"
182696 "LOC_REP"
182704 "TgAng"
182710 "Rand_d2_angle"
182724 "Rand_d3_angle"
182738 "Rand_d4_angle"
182752 "Rand_d5_angle"
182766 "Rand_d6_angle"
182780 "Rand_d7_angle"
182794 "Rand_targ_ecc"
182808 "Rand_d1_ecc"
182820 "Rand_d2_ecc"
182832 "Rand_d3_ecc"
182844 "Rand_d4_ecc"
182856 "Rand_d5_ecc"
182868 "Rand_d6_ecc"
182880 "Rand_d7_ecc"
182892 "Rand_d8_ecc"
182904 "Rand_d9_ecc"
182916 "Rand_d10_ecc"
182930 "Rand_d11_ecc"
182944 "RandomizeRanDistAngles"
182968 "RandomizeRanDistEccentricities"
183000 "RandomizeRanTargAngles"
183024 "LOC_RAND"
183034 "#I251"
183040 "#I2222"
183048 "#I1111"
183056 "#I8100"
183064 "#I8200"
183072 "#I8888"
183080 "LOC_ASYM"
183090 "d1_angle"
183100 "d2_angle"
183110 "d3_angle"
183120 "d4_angle"
183130 "d5_angle"
183140 "d6_angle"
183150 "d7_angle"
183160 "d8_angle"
183170 "d9_angle"
183180 "d10_angle"
183190 "d11_angle"
183200 "d1_ecc"
183208 "d2_ecc"
183216 "d3_ecc"
183224 "d4_ecc"
183232 "d5_ecc"
183240 "d6_ecc"
183248 "d7_ecc"
183256 "d8_ecc"
183264 "d9_ecc"
183272 "d10_ecc"
183280 "d11_ecc"
183288 "targ_orient"
183300 "d1_orient"
183310 "d2_orient"
183320 "d3_orient"
183330 "d4_orient"
183340 "d5_orient"
183350 "d6_orient"
183360 "d7_orient"
183370 "d8_orient"
183380 "d9_orient"
183390 "d10_orient"
183402 "d11_orient"
183414 "SEL_LOCS"
183424 "DRW_T"
183430 "color"
183436 "fill"
183442 "conversion_X"
183456 "conversion_Y"
183470 "half_length"
183482 "THx1"
183488 "THy1"
183494 "THx2"
183500 "THy2"
183506 "TVx1"
183512 "TVy1"
183518 "TVx2"
183524 "TVy2"
183530 "co %d;
"
183538 "#S198"
183544 "ru %d,%d,%d,%d
"
183560 "#S199"
183566 "ru %d,%d,%d,%d
"
183582 "#S200"
183588 "rf %d,%d,%d,%d
"
183604 "#S201"
183610 "rf %d,%d,%d,%d
"
183626 "#S202"
183632 "DRW_L"
183638 "LHx1"
183644 "LHy1"
183650 "LHx2"
183656 "LHy2"
183662 "LVx1"
183668 "LVy1"
183674 "LVx2"
183680 "LVy2"
183686 "co %d;
"
183694 "#S203"
183700 "ru %d,%d,%d,%d
"
183716 "#S204"
183722 "ru %d,%d,%d,%d
"
183738 "#S205"
183744 "rf %d,%d,%d,%d
"
183760 "#S206"
183766 "rf %d,%d,%d,%d
"
183782 "#S207"
183788 "DRW_PLAC"
183798 "half_size"
183808 "ulx"
183812 "uly"
183816 "lrx"
183820 "lry"
183824 "co %d;
"
183832 "#S208"
183838 "ru %d,%d,%d,%d;
"
183856 "#S209"
183862 "rf %d,%d,%d,%d;
"
183880 "#S210"
183886 "DRW_SQR"
183894 "size"
183900 "co %d;
"
183908 "#S211"
183914 "ru %d,%d,%d,%d;
"
183932 "#S212"
183938 "rf %d,%d,%d,%d;
"
183956 "#S213"
183962 "FIX_PGS"
183970 "open"
183976 "rw %d,%d;
"
183988 "#S214"
183994 "cl:
"
184000 "#S215"
184006 "rw %d,%d;
"
184018 "#S216"
184024 "cl:
"
184030 "#S217"
184036 "FLS_PGS"
184044 "#P10"
184050 "pd_eccentricity"
184066 "pd_angle"
184076 "opposite"
184086 "adjacent"
184096 "flash"
184102 "rw %d,%d;
"
184114 "#S218"
184120 "cl:
"
184126 "#S219"
184132 "#M42200000"
184144 "rw %d,%d;
"
184156 "#S220"
184162 "cl:
"
184168 "#S221"
184174 "CMD_PGS"
184182 "sig_color"
184192 "#Q11"
184198 "#Q12"
184204 "#Q13"
184210 "#P14"
184216 "rw %d,%d;
"
184228 "#S222"
184234 "cl:
"
184240 "#S223"
184246 "rw %d,%d;
"
184258 "#S224"
184264 "cl:
"
184270 "#S225"
184276 "rw %d,%d;
"
184288 "#S226"
184294 "cl:
"
184300 "#S227"
184306 "rw %d,%d;
"
184318 "#S228"
184324 "cl:
"
184330 "#S229"
184336 "rw %d,%d;
"
184348 "#S230"
184354 "cl:
"
184360 "#S231"
184366 "rw %d,%d;
"
184378 "#S232"
184384 "cl:
"
184390 "#S233"
184396 "rw %d,%d;
"
184408 "#S234"
184414 "cl:
"
184420 "#S235"
184426 "Decide_SSD"
184438 "STAIR"
184444 "plus_minus"
184456 "SETC_TRL"
184466 "decide_trl_type"
184482 "per_jitter"
184494 "jitter"
184502 "decide_jitter"
184516 "holdtime_diff"
184530 "ii"
184534 "#M3F800000"
184546 "#I9999"
184554 "#I1001"
184562 "#MBF800000"
184574 "#M3E800000"
184586 "MG_PGS"
184594 "rw %d,%d;
"
184606 "#S236"
184612 "cl:
"
184618 "#S237"
184624 "rw %d,%d;
"
184636 "#S238"
184642 "cl:
"
184648 "#S239"
184654 "rw %d,%d;
"
184666 "#S240"
184672 "cl:
"
184678 "#S241"
184684 "rw %d,%d;
"
184696 "#S242"
184702 "cl:
"
184708 "#S243"
184714 "rw %d,%d;
"
184726 "#S244"
184732 "cl:
"
184738 "#S245"
184744 "rw %d,%d;
"
184756 "#S246"
184762 "cl:
"
184768 "#S247"
184774 "rw %d,%d;
"
184786 "#S248"
184792 "cl:
"
184798 "#S249"
184804 "soa_jitter"
184816 "per_soa_jitter"
184832 "SETMGTRL"
184842 "decide_soa_jitter"
184860 "GNG_PGS"
184868 "maskcolor"
184878 "#Q14"
184884 "#P15"
184890 "fixation_target_pd"
184910 "signal_pd_T"
184922 "signal_pd_S"
184934 "atarget"
184942 "rw %d,%d;
"
184954 "#S250"
184960 "cl:
"
184966 "#S251"
184972 "rw %d,%d;
"
184984 "#S252"
184990 "cl:
"
184996 "#S253"
185002 "rw %d,%d;
"
185014 "#S254"
185020 "cl:
"
185026 "#S255"
185032 "rw %d,%d;
"
185044 "#S256"
185050 "cl:
"
185056 "#S257"
185062 "rw %d,%d;
"
185074 "#S258"
185080 "cl:
"
185086 "#S259"
185092 "rw %d,%d;
"
185104 "#S260"
185110 "cl:
"
185116 "#S261"
185122 "rw %d,%d;
"
185134 "#S262"
185140 "cl:
"
185146 "#S263"
185152 "rw %d,%d;
"
185164 "#S264"
185170 "cl:
"
185176 "#S265"
185182 "soa"
185186 "SETG_TRL"
185196 "soa_diff"
185206 "#MC3A6AA3D"
185218 "#F5"
185222 "#I1099"
185230 "DEL_PGS"
185238 "#P13"
185244 "rw %d,%d;
"
185256 "#S266"
185262 "cl:
"
185268 "#S267"
185274 "rw %d,%d;
"
185286 "#S268"
185292 "cl:
"
185298 "#S269"
185304 "rw %d,%d;
"
185316 "#S270"
185322 "cl:
"
185328 "#S271"
185334 "rw %d,%d;
"
185346 "#S272"
185352 "cl:
"
185358 "#S273"
185364 "rw %d,%d;
"
185376 "#S274"
185382 "cl:
"
185388 "#S275"
185394 "rw %d,%d;
"
185406 "#S276"
185412 "cl:
"
185418 "#S277"
185424 "rw %d,%d;
"
185436 "#S278"
185442 "cl:
"
185448 "#S279"
185454 "SETD_TRL"
185464 "TSCH_PGS"
185474 "rw %d,%d;
"
185486 "#S280"
185492 "cl:
"
185498 "#S281"
185504 "rw %d,%d;
"
185516 "#S282"
185522 "cl:
"
185528 "#S283"
185534 "rw %d,%d;
"
185546 "#S284"
185552 "cl:
"
185558 "#S285"
185564 "rw %d,%d;
"
185576 "#S286"
185582 "cl:
"
185588 "#S287"
185594 "rw %d,%d;
"
185606 "#S288"
185612 "cl:
"
185618 "#S289"
185624 "rw %d,%d;
"
185636 "#S290"
185642 "cl:
"
185648 "#S291"
185654 "rw %d,%d;
"
185666 "#S292"
185672 "cl:
"
185678 "#S293"
185684 "rw %d,%d;
"
185696 "#S294"
185702 "cl:
"
185708 "#S295"
185714 "LSCH_PGS"
185724 "rw %d,%d;
"
185736 "#S296"
185742 "cl:
"
185748 "#S297"
185754 "rw %d,%d;
"
185766 "#S298"
185772 "cl:
"
185778 "#S299"
185784 "rw %d,%d;
"
185796 "#S300"
185802 "cl:
"
185808 "#S301"
185814 "rw %d,%d;
"
185826 "#S302"
185832 "cl:
"
185838 "#S303"
185844 "rw %d,%d;
"
185856 "#S304"
185862 "cl:
"
185868 "#S305"
185874 "rw %d,%d;
"
185886 "#S306"
185892 "cl:
"
185898 "#S307"
185904 "rw %d,%d;
"
185916 "#S308"
185922 "cl:
"
185928 "#S309"
185934 "rw %d,%d;
"
185946 "#S310"
185952 "cl:
"
185958 "#S311"
185964 "DistFix"
185972 "SETS_TRL"
185982 "CatchNum"
185992 "plac_diff"
186002 "plac_jitter"
186014 "#I501"
186020 "#I21"
186026 "#I25"
186032 "GNGTRIAL"
186042 "fix_on_time"
186054 " 
"
186058 "#S312"
186064 "# %d"
186070 "#S313"
186076 " (%d"
186082 "#S314"
186088 " correct)
"
186100 "#S315"
186106 "GO
"
186110 "#S316"
186116 "holdtime = %d
"
186132 "#S317"
186138 "STOP
"
186144 "#S318"
186150 "holdtime = %d
"
186166 "#S319"
186172 "               SOA = %d
"
186198 "#S320"
186204 "IGNORE
"
186212 "#S321"
186218 "holdtime = %d
"
186234 "#S322"
186240 "               SOA = %d
"
186266 "#S323"
186272 "vp %d
"
186280 "#S324"
186286 "XM RFRSH:
"
186298 "#S325"
186304 "vp %d
"
186312 "#S326"
186318 "vp %d
"
186326 "#S327"
186332 "Aborted (no fixation)
"
186356 "#S328"
186362 "vp %d
"
186370 "#S329"
186376 "Aborted (broke fixation)
"
186402 "#S330"
186408 "vp %d
"
186416 "#S331"
186422 "XM RFRSH:
"
186434 "#S332"
186440 "vp %d
"
186448 "#S333"
186454 "vp %d
"
186462 "#S334"
186468 "Error (early saccade)
"
186492 "#S335"
186498 "vp %d
"
186506 "#S336"
186512 "XM RFRSH:
"
186524 "#S337"
186530 "vp %d
"
186538 "#S338"
186544 "vp %d
"
186552 "#S339"
186558 "XM RFRSH:
"
186570 "#S340"
186576 "vp %d
"
186584 "#S341"
186590 "                          rt = %d
"
186626 "#S342"
186632 "vp %d
"
186640 "#S343"
186646 "Error (no saccade)
"
186666 "#S344"
186672 "vp %d
"
186680 "#S345"
186686 "Correct (canceled)
"
186706 "#S346"
186712 "XM RFRSH:
"
186724 "#S347"
186730 "vp %d
"
186738 "#S348"
186744 "vp %d
"
186752 "#S349"
186758 "Error (inaccurate saccade)
"
186786 "#S350"
186792 "vp %d
"
186800 "#S351"
186806 "Error (broke target fixation)
"
186838 "#S352"
186844 "Correct (saccade)
"
186864 "#S353"
186870 "Error (noncanceled)
"
186892 "#S354"
186898 "vp %d
"
186906 "#S355"
186912 "DELTRIAL"
186922 "anticip_sacc"
186936 " 
"
186940 "#S356"
186946 "# %d"
186952 "#S357"
186958 " (%d"
186964 "#S358"
186970 " correct)
"
186982 "#S359"
186988 "vp %d
"
186996 "#S360"
187002 "XM RFRSH:
"
187014 "#S361"
187020 "vp %d
"
187028 "#S362"
187034 "vp %d
"
187042 "#S363"
187048 "Aborted (no fixation)
"
187072 "#S364"
187078 "vp %d
"
187086 "#S365"
187092 "Aborted (broke fixation)
"
187118 "#S366"
187124 "vp %d
"
187132 "#S367"
187138 "XM RFRSH:
"
187150 "#S368"
187156 "vp %d
"
187164 "#S369"
187170 "vp %d
"
187178 "#S370"
187184 "Error (early saccade)
"
187208 "#S371"
187214 "       soa = %d
"
187232 "#S372"
187238 "vp %d
"
187246 "#S373"
187252 "XM RFRSH:
"
187264 "#S374"
187270 "vp %d
"
187278 "#S375"
187284 "           rt = %d
"
187304 "#S376"
187310 "vp %d
"
187318 "#S377"
187324 "Error (no saccade)
"
187344 "#S378"
187350 "vp %d
"
187358 "#S379"
187364 "Error (inaccurate saccade)
"
187392 "#S380"
187398 "vp %d
"
187406 "#S381"
187412 "Error (broke target fixation)
"
187444 "#S382"
187450 "Correct (saccade)
"
187470 "#S383"
187476 "vp %d
"
187484 "#S384"
187490 "UPD8_INH"
187500 "ct"
187504 "weight"
187512 "change_value"
187526 "position_x"
187538 "position_y"
187550 "ct_ssd"
187558 "UPD8_SOA"
187568 "ct_soa"
187576 "rts"
187580 "mean latency = %d
"
187600 "#S385"
187606 "UPD8_SCH"
187616 "random_position_x"
187634 "repeat_position_x"
187652 "random_position_y"
187670 "repeat_position_y"
187688 "#I-300"
187696 "stop_sig_color_r"
187714 "stop_sig_color_g"
187732 "stop_sig_color_b"
187750 "ignore_sig_color_r"
187770 "ignore_sig_color_g"
187790 "ignore_sig_color_b"
187810 "fixation_color_r"
187828 "fixation_color_g"
187846 "fixation_color_b"
187864 "target_color_r"
187880 "target_color_g"
187896 "target_color_b"
187912 "INFOS"
187918 "#I999"
187924 "#I4001"
187932 "#I4050"
187940 "#I4060"
187948 "#I4100"
187956 "#I4150"
187964 "#I4200"
187972 "#I4250"
187980 "#I5500"
187988 "#I3800"
187996 "#I4650"
188004 "#I4660"
188012 "#I4670"
188020 "#I4700"
188028 "#I4800"
188036 "#I4900"
188044 "#I6000"
188052 "#I4680"
188060 "#I4690"
188068 "#I4790"
188076 "#I5100"
188084 "ABORT"
188090 "JUICE"
188096 "closed"
188104 "trl_end_time"
188118 "tone_time"
188128 "decidejuice"
188140 "END_TRL"
188148 "now"
188152 "play_the_odds"
188166 "#I2730"
188174 "#L15"
188180 "#L16"
188186 "#L17"
188192 "#L18"
188198 "KEY_REWD"
188208 "juice_duration"
188224 "tone_freq"
188234 "tone_durr"
188244 "KEY_T_UP"
188254 "KEY_T_DN"
188264 "FIXTRIAL"
188274 "need_targ"
188284 "vp %d
"
188292 "#S386"
188298 "vp %d
"
188306 "#S387"
188312 "vp %d
"
188320 "#S388"
188326 "broke"
188332 "#S389"
188338 "vp %d
"
188346 "#S390"
188352 "run_idle"
188362 "dialog Select_Monkey"
188384 "#S391"
188390 "key currt = spawn KEY_T_UP"
188418 "#S392"
188424 "key curlf = spawn KEY_T_DN"
188452 "#S393"
188458 "key curup = spawn KEY_REWD"
188486 "#S394"
188492 "key curdn = OK = 1"
188512 "#S395"
188518 "key currt = "
188532 "#S396"
188538 "key curlf = "
188552 "#S397"
188558 "key curup = "
188572 "#S398"
188578 "key curdn = "
188592 "#S399"
188598 "CMANDING"
188608 "dialog Select_Monkey"
188630 "#S400"
188636 "DM RFRSH"
188646 "#S401"
188652 "vw %d:
"
188660 "#S402"
188666 "vw %d:
"
188674 "#S403"
188680 "EM RFRSH"
188690 "#S404"
188696 "MGUIDE"
188704 "dialog Select_Monkey"
188726 "#S405"
188732 "DM RFRSH"
188742 "#S406"
188748 "vw %d:
"
188756 "#S407"
188762 "vw %d:
"
188770 "#S408"
188776 "EM RFRSH"
188786 "#S409"
188792 "GONOGO"
188800 "dialog Select_Monkey"
188822 "#S410"
188828 "DM RFRSH"
188838 "#S411"
188844 "vw %d:
"
188852 "#S412"
188858 "vw %d:
"
188866 "#S413"
188872 "EM RFRSH"
188882 "#S414"
188888 "DELAYED"
188896 "dialog Select_Monkey"
188918 "#S415"
188924 "DM RFRSH"
188934 "#S416"
188940 "vw %d:
"
188948 "#S417"
188954 "vw %d:
"
188962 "#S418"
188968 "EM RFRSH"
188978 "#S419"
188984 "SEARCH"
188992 "pcnt"
188998 "dialog Select_Monkey"
189020 "#S420"
189026 "DM RFRSH"
189036 "#S421"
189042 "vw %d:
"
189050 "#S422"
189056 "vw %d:
"
189064 "#S423"
189070 "EM RFRSH"
189080 "#S424"
189086 "Stim Time%d"
189098 "#S425"
189104 "FLSHSCRN"
189114 "trl_ct"
189122 "flashStart"
189134 "offTime"
189142 "flashOnEv"
189152 "flashFailEv"
189164 "flashSuccEv"
189176 "flashSessEnd"
189190 "flashSessStart"
189206 "wait_flash"
189218 "waitIFI"
189226 "DM RFRSH"
189236 "#S426"
189242 "vw %d:
"
189250 "#S427"
189256 "vw %d:
"
189264 "#S428"
189270 "EM RFRSH"
189280 "#S429"
189286 "dialog Select_Monkey"
189308 "#S430"
189314 "vp %d
"
189322 "#S431"
189328 "vp %d
"
189336 "#S432"
189342 "Broke fixation
"
189358 "#S433"
189364 "XM RFRSH:
"
189376 "#S434"
189382 "vp %d
"
189390 "#S435"
189396 "key currt = "
189410 "#S436"
189416 "key curlf = "
189430 "#S437"
189436 "key curup = "
189450 "#S438"
189456 "key curdn = "
189470 "#S439"
189476 "WAIT_MU"
189484 "u_sec"
189490 "start"
189496 "clock_cycles"
189510 "#M3F989375"
189522 "#I65535"
189530 "SEND_TTL"
189540 "value"
189546 "output"
189554 "shiftVal"
189564 "#I128"
189570 "#I-256"
189578 "QUE_TTL"
189586 "send_event"
189598 "n_evs_sent"
189610 "idling"
189618 "run_vm_sess"
189630 "vi 256;"
189638 "#S440"
189644 "ca"
189648 "#S441"
189654 "flushing video memory please wait...
"
189692 "#S442"
189698 "done!
"
189706 "#S443"
189712 "dialog Choose_Task"
189732 "#S444"
----------------------------------------------------------

ANALYSIS OF 11610 INSTRUCTIONS (112528/126000 bytes) IN 84/150 PROCESSES.

   0 HALT           0 x  2 =     0 bytes (  0%) Stop clock
   1 RESUME         0 x  6 =     0 bytes (  0%) Resume process
   2 SET         2017 x 10 = 20170 bytes ( 17%) Assignment
   3 NEXTTICK      13 x  4 =    52 bytes (  0%) Wait ticks
   4 WAIT          16 x  4 =    64 bytes (  0%) Wait milliseconds
   5 WSOF           0 x  4 =     0 bytes (  0%) Wait for status off
   6 WSON           0 x  4 =     0 bytes (  0%) Wait for status on
   7 WCOF           0 x  4 =     0 bytes (  0%) Wait for cancel off
   8 WCON           0 x  4 =     0 bytes (  0%) Wait for cancel on
   9 SPAWN        399 x  6 =  2394 bytes (  3%) Spawn process
  10 ADD          288 x 14 =  4032 bytes (  2%) val3 = var1 + var2
  11 SUB           26 x 14 =   364 bytes (  0%) val3 = var1 - var2
  12 MUL           10 x 14 =   140 bytes (  0%) val3 = var1 * var2
  13 DIV           12 x 14 =   168 bytes (  0%) val3 = var1 / var2
  14 MOD          185 x 14 =  2590 bytes (  2%) val3 = var1 % var2
  15 NEG            0 x 14 =     0 bytes (  0%) val2 = - var1
  16 BAND           4 x 14 =    56 bytes (  0%) val3 = val1 & val2
  17 BOR            1 x 14 =    14 bytes (  0%) val3 = val1 | val2
  18 BXOR           0 x 14 =     0 bytes (  0%) val3 = val1 ^ val2
  19 LAND          70 x 14 =   980 bytes (  1%) val3 = val1 && val2
  20 LOR           36 x 14 =   504 bytes (  0%) val3 = val1 || val2
  21 EQ           369 x 14 =  5166 bytes (  3%) val3 = val1 == val2
  22 NE            10 x 14 =   140 bytes (  0%) val3 = val1 != val2
  23 GT           130 x 14 =  1820 bytes (  1%) val3 = val1 > val2
  24 LT            32 x 14 =   448 bytes (  0%) val3 = val1 < val2
  25 LE             7 x 14 =    98 bytes (  0%) val3 = val1 <= val2
  26 GE             6 x 14 =    84 bytes (  0%) val3 = val1 >= val2
  27 NOT           36 x 14 =   504 bytes (  0%) val2 = ! val1
  28 LCOMP          0 x 14 =     0 bytes (  0%) val2 = ~ val1
  29 IF           708 x  8 =  5664 bytes (  6%) IF (expr) stmt
  30 GOTO         301 x  4 =  1204 bytes (  3%) GOTO #
  31 NEXTTICK1     87 x  2 =   174 bytes (  1%) NEXTTICK1
  32 TRIGGER        0 x  6 =     0 bytes (  0%) Trigger databases
  33 SUSPEND        0 x  6 =     0 bytes (  0%) Suspend process
  34 HARVEST        0 x  6 =     0 bytes (  0%) Harvest databases
  35 CALL0        102 x  6 =   612 bytes (  1%) Builtin function
  36 CALL1        444 x  8 =  3552 bytes (  4%) Builtin function
  37 CALL2        454 x 10 =  4540 bytes (  4%) Builtin function
  38 CALL3        108 x 12 =  1296 bytes (  1%) Builtin function
  39 CALL4         71 x 14 =   994 bytes (  1%) Builtin function
  40 CALL5         15 x 16 =   240 bytes (  0%) Builtin function
  41 CALL6          4 x 18 =    72 bytes (  0%) Builtin function
  42 CALL7          0 x 20 =     0 bytes (  0%) Builtin function
  43 CALL8          0 x 22 =     0 bytes (  0%) Builtin function
  44 CALL9          0 x 24 =     0 bytes (  0%) Builtin function
  45 CALL10         0 x 26 =     0 bytes (  0%) Builtin function
  46 CALL11         0 x 28 =     0 bytes (  0%) Builtin function
  47 CALL12         0 x 30 =     0 bytes (  0%) Builtin function
  48 CALL13         0 x 32 =     0 bytes (  0%) Builtin function
  49 CALL14         0 x 34 =     0 bytes (  0%) Builtin function
  50 CALL15         0 x 36 =     0 bytes (  0%) Builtin function
  51 CALL16         0 x 38 =     0 bytes (  0%) Builtin function
  52 AFETCH1      863 x  8 =  6904 bytes (  7%) Fetch array value
  53 AFETCH2        6 x 10 =    60 bytes (  0%) Fetch array value
  54 AFETCH3        0 x 12 =     0 bytes (  0%) Fetch array value
  55 AFETCH4        0 x 14 =     0 bytes (  0%) Fetch array value
  56 AFETCH5        0 x 16 =     0 bytes (  0%) Fetch array value
  57 AFETCH6        0 x 18 =     0 bytes (  0%) Fetch array value
  58 ASTORE1      978 x  8 =  7824 bytes (  8%) Store array value
  59 ASTORE2      258 x 10 =  2580 bytes (  2%) Store array value
  60 ASTORE3        0 x 12 =     0 bytes (  0%) Store array value
  61 ASTORE4        0 x 14 =     0 bytes (  0%) Store array value
  62 ASTORE5        0 x 16 =     0 bytes (  0%) Store array value
  63 ASTORE6        0 x 18 =     0 bytes (  0%) Store array value
  64 WAITFORPROCESS    330 x  6 =  1980 bytes (  3%) Wait for process
  65 LSHIFT         1 x 14 =    14 bytes (  0%) val3 = val1 << val2
  66 RSHIFT         1 x 14 =    14 bytes (  0%) val3 = val1 >> val2
  67 FBINARY      724 x 14 = 10136 bytes (  6%) val3 = val1 Fop val2
  68 FUNARY      2488 x 10 = 24880 bytes ( 21%) val3 = Fop val1
  69 FIF            0 x  8 =     0 bytes (  0%) fIF (expr) stmt
PCL Calling write_pxe_file..
PXESave - PXEfile='ALL_PROS.pxe', profile='ALL_PROS.pro', kernel_op=40C6:0002 kernel_symtab=5F8B:0002
PXEsave - sizeof(PXE) is 202
PXESave - Opening PXE file 'ALL_PROS.pxe'..
PXESave - 'KPED' 12.1 Set 45  PCL 12.5
PXESave - pro_file='ALL_PROS.pro'
PXESave - speed=100/100000 sets=2
PXESave - Scanning 150 PROCESS control blocks..
PXESave - Found 84 PROCESS control blocks.
PXESave - PROCESS 'DEFAULT' reading 12548 bytes of instructions..
          PROCESS 'DEFAULT' mapping instructions..
MapOp - Mapping 12548 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'DEFAULT' writting 12548 bytes of instructions to fileOffset=204
PXESave - PROCESS 'GOODVARS' reading 1742 bytes of instructions..
          PROCESS 'GOODVARS' mapping instructions..
MapOp - Mapping 1742 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'GOODVARS' writting 1742 bytes of instructions to fileOffset=12752
PXESave - PROCESS 'STIM' reading 70 bytes of instructions..
          PROCESS 'STIM' mapping instructions..
MapOp - Mapping 70 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'STIM' writting 70 bytes of instructions to fileOffset=14494
PXESave - PROCESS 'KEY_STIM' reading 16 bytes of instructions..
          PROCESS 'KEY_STIM' mapping instructions..
MapOp - Mapping 16 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'KEY_STIM' writting 16 bytes of instructions to fileOffset=14564
PXESave - PROCESS 'SET_CLRS' reading 626 bytes of instructions..
          PROCESS 'SET_CLRS' mapping instructions..
MapOp - Mapping 626 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SET_CLRS' writting 626 bytes of instructions to fileOffset=14580
PXESave - PROCESS 'SET_COOR' reading 286 bytes of instructions..
          PROCESS 'SET_COOR' mapping instructions..
MapOp - Mapping 286 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SET_COOR' writting 286 bytes of instructions to fileOffset=15206
PXESave - PROCESS 'GRAPHS' reading 314 bytes of instructions..
          PROCESS 'GRAPHS' mapping instructions..
MapOp - Mapping 314 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'GRAPHS' writting 314 bytes of instructions to fileOffset=15492
PXESave - PROCESS 'SET_INH' reading 798 bytes of instructions..
          PROCESS 'SET_INH' mapping instructions..
MapOp - Mapping 798 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SET_INH' writting 798 bytes of instructions to fileOffset=15806
PXESave - PROCESS 'SET_SOA' reading 656 bytes of instructions..
          PROCESS 'SET_SOA' mapping instructions..
MapOp - Mapping 656 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SET_SOA' writting 656 bytes of instructions to fileOffset=16604
PXESave - PROCESS 'SET_SCH' reading 98 bytes of instructions..
          PROCESS 'SET_SCH' mapping instructions..
MapOp - Mapping 98 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SET_SCH' writting 98 bytes of instructions to fileOffset=17260
PXESave - PROCESS 'WINDOWS' reading 680 bytes of instructions..
          PROCESS 'WINDOWS' mapping instructions..
MapOp - Mapping 680 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'WINDOWS' writting 680 bytes of instructions to fileOffset=17358
PXESave - PROCESS 'LOCATE_I' reading 360 bytes of instructions..
          PROCESS 'LOCATE_I' mapping instructions..
MapOp - Mapping 360 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'LOCATE_I' writting 360 bytes of instructions to fileOffset=18038
PXESave - PROCESS 'WATCHEYE' reading 686 bytes of instructions..
          PROCESS 'WATCHEYE' mapping instructions..
MapOp - Mapping 686 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'WATCHEYE' writting 686 bytes of instructions to fileOffset=18398
PXESave - PROCESS 'TONE' reading 54 bytes of instructions..
          PROCESS 'TONE' mapping instructions..
MapOp - Mapping 54 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'TONE' writting 54 bytes of instructions to fileOffset=19084
PXESave - PROCESS 'TONESWEP' reading 288 bytes of instructions..
          PROCESS 'TONESWEP' mapping instructions..
MapOp - Mapping 288 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'TONESWEP' writting 288 bytes of instructions to fileOffset=19138
PXESave - PROCESS 'WATCHMTH' reading 404 bytes of instructions..
          PROCESS 'WATCHMTH' mapping instructions..
MapOp - Mapping 404 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'WATCHMTH' writting 404 bytes of instructions to fileOffset=19426
PXESave - PROCESS 'WATCHBOD' reading 160 bytes of instructions..
          PROCESS 'WATCHBOD' mapping instructions..
MapOp - Mapping 160 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'WATCHBOD' writting 160 bytes of instructions to fileOffset=19830
PXESave - PROCESS 'SVR_BELL' reading 180 bytes of instructions..
          PROCESS 'SVR_BELL' mapping instructions..
MapOp - Mapping 180 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SVR_BELL' writting 180 bytes of instructions to fileOffset=19990
PXESave - PROCESS 'SVR_BEL2' reading 20 bytes of instructions..
          PROCESS 'SVR_BEL2' mapping instructions..
MapOp - Mapping 20 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SVR_BEL2' writting 20 bytes of instructions to fileOffset=20170
PXESave - PROCESS 'CMDTRIAL' reading 2698 bytes of instructions..
          PROCESS 'CMDTRIAL' mapping instructions..
MapOp - Mapping 2698 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'CMDTRIAL' writting 2698 bytes of instructions to fileOffset=20190
PXESave - PROCESS 'MGTRIAL' reading 3692 bytes of instructions..
          PROCESS 'MGTRIAL' mapping instructions..
MapOp - Mapping 3692 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'MGTRIAL' writting 3692 bytes of instructions to fileOffset=22888
PXESave - PROCESS 'SCHTRIAL' reading 3844 bytes of instructions..
          PROCESS 'SCHTRIAL' mapping instructions..
MapOp - Mapping 3844 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SCHTRIAL' writting 3844 bytes of instructions to fileOffset=26580
PXESave - PROCESS 'REP_ORT' reading 3364 bytes of instructions..
          PROCESS 'REP_ORT' mapping instructions..
MapOp - Mapping 3364 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'REP_ORT' writting 3364 bytes of instructions to fileOffset=30424
PXESave - PROCESS 'RAND_ORT' reading 1292 bytes of instructions..
          PROCESS 'RAND_ORT' mapping instructions..
MapOp - Mapping 1292 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'RAND_ORT' writting 1292 bytes of instructions to fileOffset=33788
PXESave - PROCESS 'LOC_REP' reading 36 bytes of instructions..
          PROCESS 'LOC_REP' mapping instructions..
MapOp - Mapping 36 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'LOC_REP' writting 36 bytes of instructions to fileOffset=35080
PXESave - PROCESS 'RandomizeRepDistAngles' reading 110 bytes of instructions..
          PROCESS 'RandomizeRepDistAngles' mapping instructions..
MapOp - Mapping 110 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'RandomizeRepDistAngles' writting 110 bytes of instructions to fileOffset=35116
PXESave - PROCESS 'RandomizeRepDistEccentricities' reading 110 bytes of instructions..
          PROCESS 'RandomizeRepDistEccentricities' mapping instructions..
MapOp - Mapping 110 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'RandomizeRepDistEccentricities' writting 110 bytes of instructions to fileOffset=35226
PXESave - PROCESS 'RandomizeRepTargAngles' reading 110 bytes of instructions..
          PROCESS 'RandomizeRepTargAngles' mapping instructions..
MapOp - Mapping 110 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'RandomizeRepTargAngles' writting 110 bytes of instructions to fileOffset=35336
PXESave - PROCESS 'REP1_LOC' reading 270 bytes of instructions..
          PROCESS 'REP1_LOC' mapping instructions..
MapOp - Mapping 270 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'REP1_LOC' writting 270 bytes of instructions to fileOffset=35446
PXESave - PROCESS 'REP2_LOC' reading 270 bytes of instructions..
          PROCESS 'REP2_LOC' mapping instructions..
MapOp - Mapping 270 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'REP2_LOC' writting 270 bytes of instructions to fileOffset=35716
PXESave - PROCESS 'REP3_LOC' reading 270 bytes of instructions..
          PROCESS 'REP3_LOC' mapping instructions..
MapOp - Mapping 270 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'REP3_LOC' writting 270 bytes of instructions to fileOffset=35986
PXESave - PROCESS 'REP4_LOC' reading 270 bytes of instructions..
          PROCESS 'REP4_LOC' mapping instructions..
MapOp - Mapping 270 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'REP4_LOC' writting 270 bytes of instructions to fileOffset=36256
PXESave - PROCESS 'REP5_LOC' reading 270 bytes of instructions..
          PROCESS 'REP5_LOC' mapping instructions..
MapOp - Mapping 270 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'REP5_LOC' writting 270 bytes of instructions to fileOffset=36526
PXESave - PROCESS 'REP6_LOC' reading 270 bytes of instructions..
          PROCESS 'REP6_LOC' mapping instructions..
MapOp - Mapping 270 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'REP6_LOC' writting 270 bytes of instructions to fileOffset=36796
PXESave - PROCESS 'RandomizeRanDistAngles' reading 110 bytes of instructions..
          PROCESS 'RandomizeRanDistAngles' mapping instructions..
MapOp - Mapping 110 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'RandomizeRanDistAngles' writting 110 bytes of instructions to fileOffset=37066
PXESave - PROCESS 'RandomizeRanDistEccentricities' reading 110 bytes of instructions..
          PROCESS 'RandomizeRanDistEccentricities' mapping instructions..
MapOp - Mapping 110 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'RandomizeRanDistEccentricities' writting 110 bytes of instructions to fileOffset=37176
PXESave - PROCESS 'RandomizeRanTargAngles' reading 110 bytes of instructions..
          PROCESS 'RandomizeRanTargAngles' mapping instructions..
MapOp - Mapping 110 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'RandomizeRanTargAngles' writting 110 bytes of instructions to fileOffset=37286
PXESave - PROCESS 'LOC_RAND' reading 8296 bytes of instructions..
          PROCESS 'LOC_RAND' mapping instructions..
MapOp - Mapping 8296 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'LOC_RAND' writting 8296 bytes of instructions to fileOffset=37396
PXESave - PROCESS 'LOC_ASYM' reading 3924 bytes of instructions..
          PROCESS 'LOC_ASYM' mapping instructions..
MapOp - Mapping 3924 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'LOC_ASYM' writting 3924 bytes of instructions to fileOffset=45692
PXESave - PROCESS 'SEL_LOCS' reading 2834 bytes of instructions..
          PROCESS 'SEL_LOCS' mapping instructions..
MapOp - Mapping 2834 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SEL_LOCS' writting 2834 bytes of instructions to fileOffset=49616
PXESave - PROCESS 'DRW_T' reading 1294 bytes of instructions..
          PROCESS 'DRW_T' mapping instructions..
MapOp - Mapping 1294 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'DRW_T' writting 1294 bytes of instructions to fileOffset=52450
PXESave - PROCESS 'DRW_L' reading 1350 bytes of instructions..
          PROCESS 'DRW_L' mapping instructions..
MapOp - Mapping 1350 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'DRW_L' writting 1350 bytes of instructions to fileOffset=53744
PXESave - PROCESS 'DRW_PLAC' reading 370 bytes of instructions..
          PROCESS 'DRW_PLAC' mapping instructions..
MapOp - Mapping 370 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'DRW_PLAC' writting 370 bytes of instructions to fileOffset=55094
PXESave - PROCESS 'DRW_SQR' reading 380 bytes of instructions..
          PROCESS 'DRW_SQR' mapping instructions..
MapOp - Mapping 380 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'DRW_SQR' writting 380 bytes of instructions to fileOffset=55464
PXESave - PROCESS 'FIX_PGS' reading 442 bytes of instructions..
          PROCESS 'FIX_PGS' mapping instructions..
MapOp - Mapping 442 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'FIX_PGS' writting 442 bytes of instructions to fileOffset=55844
PXESave - PROCESS 'FLS_PGS' reading 506 bytes of instructions..
          PROCESS 'FLS_PGS' mapping instructions..
MapOp - Mapping 506 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'FLS_PGS' writting 506 bytes of instructions to fileOffset=56286
PXESave - PROCESS 'CMD_PGS' reading 2046 bytes of instructions..
          PROCESS 'CMD_PGS' mapping instructions..
MapOp - Mapping 2046 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'CMD_PGS' writting 2046 bytes of instructions to fileOffset=56792
PXESave - PROCESS 'STAIR' reading 250 bytes of instructions..
          PROCESS 'STAIR' mapping instructions..
MapOp - Mapping 250 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'STAIR' writting 250 bytes of instructions to fileOffset=58838
PXESave - PROCESS 'SETC_TRL' reading 730 bytes of instructions..
          PROCESS 'SETC_TRL' mapping instructions..
MapOp - Mapping 730 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SETC_TRL' writting 730 bytes of instructions to fileOffset=59088
PXESave - PROCESS 'MG_PGS' reading 2156 bytes of instructions..
          PROCESS 'MG_PGS' mapping instructions..
MapOp - Mapping 2156 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'MG_PGS' writting 2156 bytes of instructions to fileOffset=59818
PXESave - PROCESS 'SETMGTRL' reading 760 bytes of instructions..
          PROCESS 'SETMGTRL' mapping instructions..
MapOp - Mapping 760 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SETMGTRL' writting 760 bytes of instructions to fileOffset=61974
PXESave - PROCESS 'GNG_PGS' reading 2312 bytes of instructions..
          PROCESS 'GNG_PGS' mapping instructions..
MapOp - Mapping 2312 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'GNG_PGS' writting 2312 bytes of instructions to fileOffset=62734
PXESave - PROCESS 'SETG_TRL' reading 1014 bytes of instructions..
          PROCESS 'SETG_TRL' mapping instructions..
MapOp - Mapping 1014 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SETG_TRL' writting 1014 bytes of instructions to fileOffset=65046
PXESave - PROCESS 'DEL_PGS' reading 1780 bytes of instructions..
          PROCESS 'DEL_PGS' mapping instructions..
MapOp - Mapping 1780 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'DEL_PGS' writting 1780 bytes of instructions to fileOffset=66060
PXESave - PROCESS 'SETD_TRL' reading 510 bytes of instructions..
          PROCESS 'SETD_TRL' mapping instructions..
MapOp - Mapping 510 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SETD_TRL' writting 510 bytes of instructions to fileOffset=67840
PXESave - PROCESS 'TSCH_PGS' reading 7982 bytes of instructions..
          PROCESS 'TSCH_PGS' mapping instructions..
MapOp - Mapping 7982 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'TSCH_PGS' writting 7982 bytes of instructions to fileOffset=68350
PXESave - PROCESS 'LSCH_PGS' reading 7982 bytes of instructions..
          PROCESS 'LSCH_PGS' mapping instructions..
MapOp - Mapping 7982 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'LSCH_PGS' writting 7982 bytes of instructions to fileOffset=76332
PXESave - PROCESS 'SETS_TRL' reading 1622 bytes of instructions..
          PROCESS 'SETS_TRL' mapping instructions..
MapOp - Mapping 1622 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SETS_TRL' writting 1622 bytes of instructions to fileOffset=84314
PXESave - PROCESS 'GNGTRIAL' reading 2780 bytes of instructions..
          PROCESS 'GNGTRIAL' mapping instructions..
MapOp - Mapping 2780 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'GNGTRIAL' writting 2780 bytes of instructions to fileOffset=85936
PXESave - PROCESS 'DELTRIAL' reading 1726 bytes of instructions..
          PROCESS 'DELTRIAL' mapping instructions..
MapOp - Mapping 1726 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'DELTRIAL' writting 1726 bytes of instructions to fileOffset=88716
PXESave - PROCESS 'UPD8_INH' reading 1976 bytes of instructions..
          PROCESS 'UPD8_INH' mapping instructions..
MapOp - Mapping 1976 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'UPD8_INH' writting 1976 bytes of instructions to fileOffset=90442
PXESave - PROCESS 'UPD8_SOA' reading 1952 bytes of instructions..
          PROCESS 'UPD8_SOA' mapping instructions..
MapOp - Mapping 1952 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'UPD8_SOA' writting 1952 bytes of instructions to fileOffset=92418
PXESave - PROCESS 'UPD8_SCH' reading 792 bytes of instructions..
          PROCESS 'UPD8_SCH' mapping instructions..
MapOp - Mapping 792 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'UPD8_SCH' writting 792 bytes of instructions to fileOffset=94370
PXESave - PROCESS 'INFOS' reading 4358 bytes of instructions..
          PROCESS 'INFOS' mapping instructions..
MapOp - Mapping 4358 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'INFOS' writting 4358 bytes of instructions to fileOffset=95162
PXESave - PROCESS 'ABORT' reading 688 bytes of instructions..
          PROCESS 'ABORT' mapping instructions..
MapOp - Mapping 688 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'ABORT' writting 688 bytes of instructions to fileOffset=99520
PXESave - PROCESS 'JUICE' reading 44 bytes of instructions..
          PROCESS 'JUICE' mapping instructions..
MapOp - Mapping 44 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'JUICE' writting 44 bytes of instructions to fileOffset=100208
PXESave - PROCESS 'SUCCESS' reading 1202 bytes of instructions..
          PROCESS 'SUCCESS' mapping instructions..
MapOp - Mapping 1202 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SUCCESS' writting 1202 bytes of instructions to fileOffset=100252
PXESave - PROCESS 'FAILURE' reading 992 bytes of instructions..
          PROCESS 'FAILURE' mapping instructions..
MapOp - Mapping 992 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'FAILURE' writting 992 bytes of instructions to fileOffset=101454
PXESave - PROCESS 'END_TRL' reading 1636 bytes of instructions..
          PROCESS 'END_TRL' mapping instructions..
MapOp - Mapping 1636 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'END_TRL' writting 1636 bytes of instructions to fileOffset=102446
PXESave - PROCESS 'KEY_REWD' reading 190 bytes of instructions..
          PROCESS 'KEY_REWD' mapping instructions..
MapOp - Mapping 190 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'KEY_REWD' writting 190 bytes of instructions to fileOffset=104082
PXESave - PROCESS 'KEY_T_UP' reading 50 bytes of instructions..
          PROCESS 'KEY_T_UP' mapping instructions..
MapOp - Mapping 50 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'KEY_T_UP' writting 50 bytes of instructions to fileOffset=104272
PXESave - PROCESS 'KEY_T_DN' reading 68 bytes of instructions..
          PROCESS 'KEY_T_DN' mapping instructions..
MapOp - Mapping 68 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'KEY_T_DN' writting 68 bytes of instructions to fileOffset=104322
PXESave - PROCESS 'FIXTRIAL' reading 470 bytes of instructions..
          PROCESS 'FIXTRIAL' mapping instructions..
MapOp - Mapping 470 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'FIXTRIAL' writting 470 bytes of instructions to fileOffset=104390
PXESave - PROCESS 'FIXATION' reading 1032 bytes of instructions..
          PROCESS 'FIXATION' mapping instructions..
MapOp - Mapping 1032 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'FIXATION' writting 1032 bytes of instructions to fileOffset=104860
PXESave - PROCESS 'CMANDING' reading 990 bytes of instructions..
          PROCESS 'CMANDING' mapping instructions..
MapOp - Mapping 990 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'CMANDING' writting 990 bytes of instructions to fileOffset=105892
PXESave - PROCESS 'MGUIDE' reading 938 bytes of instructions..
          PROCESS 'MGUIDE' mapping instructions..
MapOp - Mapping 938 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'MGUIDE' writting 938 bytes of instructions to fileOffset=106882
PXESave - PROCESS 'GONOGO' reading 822 bytes of instructions..
          PROCESS 'GONOGO' mapping instructions..
MapOp - Mapping 822 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'GONOGO' writting 822 bytes of instructions to fileOffset=107820
PXESave - PROCESS 'DELAYED' reading 802 bytes of instructions..
          PROCESS 'DELAYED' mapping instructions..
MapOp - Mapping 802 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'DELAYED' writting 802 bytes of instructions to fileOffset=108642
PXESave - PROCESS 'SEARCH' reading 1110 bytes of instructions..
          PROCESS 'SEARCH' mapping instructions..
MapOp - Mapping 1110 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SEARCH' writting 1110 bytes of instructions to fileOffset=109444
PXESave - PROCESS 'FLSHSCRN' reading 1162 bytes of instructions..
          PROCESS 'FLSHSCRN' mapping instructions..
MapOp - Mapping 1162 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'FLSHSCRN' writting 1162 bytes of instructions to fileOffset=110554
PXESave - PROCESS 'WAIT_MU' reading 100 bytes of instructions..
          PROCESS 'WAIT_MU' mapping instructions..
MapOp - Mapping 100 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'WAIT_MU' writting 100 bytes of instructions to fileOffset=111716
PXESave - PROCESS 'SEND_TTL' reading 138 bytes of instructions..
          PROCESS 'SEND_TTL' mapping instructions..
MapOp - Mapping 138 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'SEND_TTL' writting 138 bytes of instructions to fileOffset=111816
PXESave - PROCESS 'QUE_TTL' reading 150 bytes of instructions..
          PROCESS 'QUE_TTL' mapping instructions..
MapOp - Mapping 150 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'QUE_TTL' writting 150 bytes of instructions to fileOffset=111954
PXESave - PROCESS 'IDLE' reading 628 bytes of instructions..
          PROCESS 'IDLE' mapping instructions..
MapOp - Mapping 628 instruction bytes; firstOp=37F5:0002 pcl_symtab=56B9:0016 kernel_symtab=5F8B:0002..
          PROCESS 'IDLE' writting 628 bytes of instructions to fileOffset=112104
pxesave - INSTRUCTIONS=6251/7000 (112530/126000 bytes) pxe.op=202 pxe.nBytesOp=112530
 PROCESS   1: state=1  nOp=12548 iOp=     2-12549  iCache=     2-12549   'DEFAULT'
 PROCESS   2: state=1  nOp=1742  iOp= 12550-14291  iCache= 12550-14291   'GOODVARS'
 PROCESS   3: state=1  nOp=70    iOp= 14292-14361  iCache= 14292-14361   'STIM'
 PROCESS   4: state=1  nOp=16    iOp= 14362-14377  iCache= 14362-14377   'KEY_STIM'
 PROCESS   5: state=1  nOp=626   iOp= 14378-15003  iCache= 14378-15003   'SET_CLRS'
 PROCESS   6: state=1  nOp=286   iOp= 15004-15289  iCache= 15004-15289   'SET_COOR'
 PROCESS   7: state=1  nOp=314   iOp= 15290-15603  iCache= 15290-15603   'GRAPHS'
 PROCESS   8: state=1  nOp=798   iOp= 15604-16401  iCache= 15604-16401   'SET_INH'
 PROCESS   9: state=1  nOp=656   iOp= 16402-17057  iCache= 16402-17057   'SET_SOA'
 PROCESS  10: state=1  nOp=98    iOp= 17058-17155  iCache= 17058-17155   'SET_SCH'
 PROCESS  11: state=1  nOp=680   iOp= 17156-17835  iCache= 17156-17835   'WINDOWS'
 PROCESS  12: state=1  nOp=360   iOp= 17836-18195  iCache= 17836-18195   'LOCATE_I'
 PROCESS  13: state=1  nOp=686   iOp= 18196-18881  iCache= 18196-18881   'WATCHEYE'
 PROCESS  14: state=1  nOp=54    iOp= 18882-18935  iCache= 18882-18935   'TONE'
 PROCESS  15: state=1  nOp=288   iOp= 18936-19223  iCache= 18936-19223   'TONESWEP'
 PROCESS  16: state=1  nOp=404   iOp= 19224-19627  iCache= 19224-19627   'WATCHMTH'
 PROCESS  17: state=1  nOp=160   iOp= 19628-19787  iCache= 19628-19787   'WATCHBOD'
 PROCESS  18: state=1  nOp=180   iOp= 19788-19967  iCache= 19788-19967   'SVR_BELL'
 PROCESS  19: state=1  nOp=20    iOp= 19968-19987  iCache= 19968-19987   'SVR_BEL2'
 PROCESS  20: state=1  nOp=2698  iOp= 19988-22685  iCache= 19988-22685   'CMDTRIAL'
 PROCESS  21: state=1  nOp=3692  iOp= 22686-26377  iCache= 22686-26377   'MGTRIAL'
 PROCESS  22: state=1  nOp=3844  iOp= 26378-30221  iCache= 26378-30221   'SCHTRIAL'
 PROCESS  23: state=1  nOp=3364  iOp= 30222-33585  iCache= 30222-33585   'REP_ORT'
 PROCESS  24: state=1  nOp=1292  iOp= 33586-34877  iCache= 33586-34877   'RAND_ORT'
 PROCESS  25: state=1  nOp=36    iOp= 34878-34913  iCache= 34878-34913   'LOC_REP'
 PROCESS  26: state=1  nOp=110   iOp= 34914-35023  iCache= 34914-35023   'RandomizeRepDistAngles'
 PROCESS  27: state=1  nOp=110   iOp= 35024-35133  iCache= 35024-35133   'RandomizeRepDistEccentricities'
 PROCESS  28: state=1  nOp=110   iOp= 35134-35243  iCache= 35134-35243   'RandomizeRepTargAngles'
 PROCESS  29: state=1  nOp=270   iOp= 35244-35513  iCache= 35244-35513   'REP1_LOC'
 PROCESS  30: state=1  nOp=270   iOp= 35514-35783  iCache= 35514-35783   'REP2_LOC'
 PROCESS  31: state=1  nOp=270   iOp= 35784-36053  iCache= 35784-36053   'REP3_LOC'
 PROCESS  32: state=1  nOp=270   iOp= 36054-36323  iCache= 36054-36323   'REP4_LOC'
 PROCESS  33: state=1  nOp=270   iOp= 36324-36593  iCache= 36324-36593   'REP5_LOC'
 PROCESS  34: state=1  nOp=270   iOp= 36594-36863  iCache= 36594-36863   'REP6_LOC'
 PROCESS  35: state=1  nOp=110   iOp= 36864-36973  iCache= 36864-36973   'RandomizeRanDistAngles'
 PROCESS  36: state=1  nOp=110   iOp= 36974-37083  iCache= 36974-37083   'RandomizeRanDistEccentricities'
 PROCESS  37: state=1  nOp=110   iOp= 37084-37193  iCache= 37084-37193   'RandomizeRanTargAngles'
 PROCESS  38: state=1  nOp=8296  iOp= 37194-45489  iCache= 37194-45489   'LOC_RAND'
 PROCESS  39: state=1  nOp=3924  iOp= 45490-49413  iCache= 45490-49413   'LOC_ASYM'
 PROCESS  40: state=1  nOp=2834  iOp= 49414-52247  iCache= 49414-52247   'SEL_LOCS'
 PROCESS  41: state=1  nOp=1294  iOp= 52248-53541  iCache= 52248-53541   'DRW_T'
 PROCESS  42: state=1  nOp=1350  iOp= 53542-54891  iCache= 53542-54891   'DRW_L'
 PROCESS  43: state=1  nOp=370   iOp= 54892-55261  iCache= 54892-55261   'DRW_PLAC'
 PROCESS  44: state=1  nOp=380   iOp= 55262-55641  iCache= 55262-55641   'DRW_SQR'
 PROCESS  45: state=1  nOp=442   iOp= 55642-56083  iCache= 55642-56083   'FIX_PGS'
 PROCESS  46: state=1  nOp=506   iOp= 56084-56589  iCache= 56084-56589   'FLS_PGS'
 PROCESS  47: state=1  nOp=2046  iOp= 56590-58635  iCache= 56590-58635   'CMD_PGS'
 PROCESS  48: state=1  nOp=250   iOp= 58636-58885  iCache= 58636-58885   'STAIR'
 PROCESS  49: state=1  nOp=730   iOp= 58886-59615  iCache= 58886-59615   'SETC_TRL'
 PROCESS  50: state=1  nOp=2156  iOp= 59616-61771  iCache= 59616-61771   'MG_PGS'
 PROCESS  51: state=1  nOp=760   iOp= 61772-62531  iCache= 61772-62531   'SETMGTRL'
 PROCESS  52: state=1  nOp=2312  iOp= 62532-64843  iCache= 62532-64843   'GNG_PGS'
 PROCESS  53: state=1  nOp=1014  iOp= 64844-65857  iCache= 64844-65857   'SETG_TRL'
 PROCESS  54: state=1  nOp=1780  iOp= 65858-67637  iCache= 65858-67637   'DEL_PGS'
 PROCESS  55: state=1  nOp=510   iOp= 67638-68147  iCache= 67638-68147   'SETD_TRL'
 PROCESS  56: state=1  nOp=7982  iOp= 68148-76129  iCache= 68148-76129   'TSCH_PGS'
 PROCESS  57: state=1  nOp=7982  iOp= 76130-84111  iCache= 76130-84111   'LSCH_PGS'
 PROCESS  58: state=1  nOp=1622  iOp= 84112-85733  iCache= 84112-85733   'SETS_TRL'
 PROCESS  59: state=1  nOp=2780  iOp= 85734-88513  iCache= 85734-88513   'GNGTRIAL'
 PROCESS  60: state=1  nOp=1726  iOp= 88514-90239  iCache= 88514-90239   'DELTRIAL'
 PROCESS  61: state=1  nOp=1976  iOp= 90240-92215  iCache= 90240-92215   'UPD8_INH'
 PROCESS  62: state=1  nOp=1952  iOp= 92216-94167  iCache= 92216-94167   'UPD8_SOA'
 PROCESS  63: state=1  nOp=792   iOp= 94168-94959  iCache= 94168-94959   'UPD8_SCH'
 PROCESS  64: state=1  nOp=4358  iOp= 94960-99317  iCache= 94960-99317   'INFOS'
 PROCESS  65: state=1  nOp=688   iOp= 99318-100005 iCache= 99318-100005  'ABORT'
 PROCESS  66: state=1  nOp=44    iOp=100006-100049 iCache=100006-100049  'JUICE'
 PROCESS  67: state=1  nOp=1202  iOp=100050-101251 iCache=100050-101251  'SUCCESS'
 PROCESS  68: state=1  nOp=992   iOp=101252-102243 iCache=101252-102243  'FAILURE'
 PROCESS  69: state=1  nOp=1636  iOp=102244-103879 iCache=102244-103879  'END_TRL'
 PROCESS  70: state=1  nOp=190   iOp=103880-104069 iCache=103880-104069  'KEY_REWD'
 PROCESS  71: state=1  nOp=50    iOp=104070-104119 iCache=104070-104119  'KEY_T_UP'
 PROCESS  72: state=1  nOp=68    iOp=104120-104187 iCache=104120-104187  'KEY_T_DN'
 PROCESS  73: state=1  nOp=470   iOp=104188-104657 iCache=104188-104657  'FIXTRIAL'
 PROCESS  74: state=1  nOp=1032  iOp=104658-105689 iCache=104658-105689  'FIXATION'
 PROCESS  75: state=1  nOp=990   iOp=105690-106679 iCache=105690-106679  'CMANDING'
 PROCESS  76: state=1  nOp=938   iOp=106680-107617 iCache=106680-107617  'MGUIDE'
 PROCESS  77: state=1  nOp=822   iOp=107618-108439 iCache=107618-108439  'GONOGO'
 PROCESS  78: state=1  nOp=802   iOp=108440-109241 iCache=108440-109241  'DELAYED'
 PROCESS  79: state=1  nOp=1110  iOp=109242-110351 iCache=109242-110351  'SEARCH'
 PROCESS  80: state=1  nOp=1162  iOp=110352-111513 iCache=110352-111513  'FLSHSCRN'
 PROCESS  81: state=1  nOp=100   iOp=111514-111613 iCache=111514-111613  'WAIT_MU'
 PROCESS  82: state=1  nOp=138   iOp=111614-111751 iCache=111614-111751  'SEND_TTL'
 PROCESS  83: state=1  nOp=150   iOp=111752-111901 iCache=111752-111901  'QUE_TTL'
 PROCESS  84: state=2  nOp=628   iOp=111902-112529 iCache=111902-112529  'IDLE'
pxesave - 84 processes fileOffset=112732 len=3696
pxesave - 2372 Symbol table fileOffset=116428 len=18984
pxesave - (1021,oflo=2055) hash table fileOffset=135412 len=24616
pxesave - 189738 name table fileOffset=160028 len=189738
pxesave - 30000 arraytable fileOffset=349766 len=218
pxesave - 250880 arraydata fileOffset=349984 len=5100
pxesave - Next fileOffset=355206
pxesave - Successful. EndOfFile=355206
PCL write_pxe_file returned 0
PCL Closing ICache file
PCL - Freeing SYMTABEX array
PCL - SYMTABEX array freed
PCL Closing IC..
PCL Closing XMS..
PCL Closing error file..
PCL Deleteing error file 'ALL_PROS.err'
PCL - Exiting with status 0
__HEADER__
PER_KERN.pro
__FOOTER__
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

// Well lookie here! Matlab code in tempo!  This is the code I used to generate the 
// Percentage kernal which is used to select holdtimes with approximately non aging
// foreperiods.  I have included it here so that you can generate different types of 
// hold time distributions if you are so inclined.  Just make a new shape called 
// My_Kernel which is 101 values long (all probabilities including 100) and you are in
// business.
// 
// Kernel_Time = 0:13:1300;
// 
// params = [37.5597  568.7732]; % these params are taken by fitting the
//                               %kernel that erik used way back in the day.  
//                               %a more appropriate shapecould probably be 
//                               %found to ensure flat hazard rates
// 
// Growth = params(1);
// Decay  = params(2);
// 
// ypred = (1-(exp(-(Kernel_Time./Growth)))).*(exp(-(Kernel_Time./Decay)));
// 
// My_Kernel = round((ypred * (10/(max(ypred))))+ 1);
// % plot(My_Kernel)
// 
// last_add = 1;
// for percentage = 1:length(Kernel_Time)
//     
//     num_of_per_samples = My_Kernel(percentage);
//     Percentage_Kernel(last_add:last_add+num_of_per_samples) = percentage-1;
//     
//     last_add = last_add + num_of_per_samples;
//     
// end

declare hide int Percentage_Kernel[570] = 	{0,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,
											10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,
											17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,
											26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,31,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,35,36,36,36,36,36,36,36,
											37,37,37,37,37,37,38,38,38,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,41,41,41,41,41,41,42,42,42,42,42,42,43,43,43,43,43,43,44,44,44,44,44,44,45,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,48,48,48,48,48,49,49,49,49,49,50,50,
											50,50,50,51,51,51,51,51,52,52,52,52,52,53,53,53,53,53,54,54,54,54,54,55,55,55,55,55,56,56,56,56,56,57,57,57,57,58,58,58,58,59,59,59,59,60,60,60,60,61,61,61,61,62,62,62,62,63,63,63,63,64,64,64,64,65,65,65,65,66,66,66,66,67,67,67,
											67,68,68,68,68,69,69,69,69,70,70,70,70,71,71,71,71,72,72,72,73,73,73,74,74,74,75,75,75,76,76,76,77,77,77,78,78,78,79,79,79,80,80,80,81,81,81,82,82,82,83,83,83,84,84,84,85,85,85,86,86,86,87,87,87,88,88,88,89,89,89,90,90,90,91,91,
											91,92,92,92,93,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,100};

__HEADER__
QUE_TTL.pro
__FOOTER__
//-------------------------------------------------------------------------
// Process QUE_TTL() runs in the background and sends up to 5 event codes
// per process cycle to the remote system, drawing them from the Event_fifo[] buffer.
// This process should be the last process in your protocol so that any
// preceeding process that adds an event code to the Event_fifo[] will do so
// before QUE_TTL() runs.
// NOTE: Two problems may arise when sending TTLs.  First, TTLs may be sent 
// too quickly for plexon to keep up and plexon may drop them.  This won't
// result in any errors you can see.  Second, too much time may be allotted
// to individual TTLs causing more time to be allotted to TTLs than is possible
// on a process cycle.  This will result in buffer overflow messages in TEMPO.
// The balance between too little time and too much time is struck by 1) the 
// number of micro seconds allotted to each TTL, 2) the number of TTLs sent
// per process cycle, and 3) the amount of other stuff you allow to happen while
// TTLs are being sent.  In rig 028 I have found that 100 microseconds between TTLs
// and 5 TTLs per process cycle results in zero drops and zero overflows AS LONG AS
// I HAVE APPROPRIATELY PLACED nextticks IN AREAS OF HEAVY TTL VOLUME.  That way
// other processes (e.g. rdx communication) don't use up all of the buffer while I am
// trying to strobe.  All of this may depend on plexon settings that I am 
// currently unaware of, and tests should be performed in each rig to find 
// appropriate parameters.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

#include C:/TEMPO/ProcLib/SEND_TTL.pro

declare QUE_TTL();

process QUE_TTL()
		{
		declare int send_event;									// current event to send (if == to set_event we are...
																// ...caught up meaning no events are in the Event_fifo.
		declare int n_evs_sent;									// # of TTLs which have been sent this process cycle		
					
		while (1)  												// run in the background                         
			{			
			n_evs_sent = 0;			
			while (n_evs_sent < 5 								// While we have not sent 5 events on this process cycle...
					&& send_event != Set_event)					// ...and we are not caught up on the Event_fifo... (GLOBAL ALERT)
				{	
				spawnwait SEND_TTL(Event_fifo[send_event]);		// ...send the next event to plexon and...
				send_event = (send_event + 1) % Event_fifo_N;	// ...advance to the next event in the Event_fifo and...
				n_evs_sent = n_evs_sent + 1;					// ... count that another code was sent.
				}	
					
			nexttick;                       					// wait one process cycle
																// Note that we may wait on process cycle because we are..
																// ...just waiting on data to be added to the Event_fifo, or...
																// ...we may wait because we have too many events for a...
																// ...single cycle.
			}
	}__HEADER__
RAND_ORT.pro
__FOOTER__


declare	int	i, j, temp;
declare int orientation;
declare float RandHomo_orient;	
declare hide DistOrients[4] = {1, 2, 3, 4};		//Possible T orientations
declare hide TargOrients[4] = {1, 2, 3, 4};		//Possible T orientations

declare Rand_targ_orient;
declare Rand_d1_orient;
declare Rand_d2_orient;
declare Rand_d3_orient;
declare Rand_d4_orient;
declare Rand_d5_orient;
declare Rand_d6_orient;
declare Rand_d7_orient;
declare Rand_d8_orient;
declare Rand_d9_orient;
declare Rand_d10_orient;
declare Rand_d11_orient;	

declare RAND_ORT();

process RAND_ORT 
	{
			
		// Randomize/Shuffle orientations

		i = 0;
		while (i < 4)			//Run loop while i < total # items in Tstimorients array
			{
			j = random(4); 			//randomly select one of six positions in X location array
			temp = DistOrients[i];			//stick one of the other locations in temp
			DistOrients[i] = DistOrients[j];
			DistOrients[j] = temp;

			temp = TargOrients[i];			//stick one of the other locations in temp
			TargOrients[i] = TargOrients[j];
			TargOrients[j] = temp;
			i = i + 1;
			}
/////////////////////////////////////// Code below allows selection of random homogeneous distractor identities during training ///////////////////////		
	

		if (SearchType == 1)	
			{
			Rand_targ_orient = TargOrt;
			Rand_d1_orient = DistOrients[0];
			Rand_d2_orient = DistOrients[1];
			Rand_d3_orient = DistOrients[2];
			Rand_d4_orient = DistOrients[3];
			Rand_d5_orient = DistOrients[0];
			Rand_d6_orient = DistOrients[1];
			Rand_d7_orient = DistOrients[2];
			Rand_d8_orient = DistOrients[3];
			Rand_d9_orient = DistOrients[0];
			Rand_d10_orient = DistOrients[1];
			Rand_d11_orient = DistOrients[2];
			}
		if (SearchType == 2)	
			{		
			Rand_targ_orient = TargOrt;
			Rand_d1_orient = DistOrt;
			Rand_d2_orient = DistOrt;
			Rand_d3_orient = DistOrt;
			Rand_d4_orient = DistOrt;
			Rand_d5_orient = DistOrt;
			Rand_d6_orient = DistOrt;
			Rand_d7_orient = DistOrt;
			Rand_d8_orient = DistOrt;
			Rand_d9_orient = DistOrt;
			Rand_d10_orient = DistOrt;
			Rand_d11_orient = DistOrt;
			}
		
		if (SearchType == 3)
			{
				
			RandHomo_orient = random(4);	
			
			Rand_targ_orient = TargOrt;
			Rand_d1_orient = DistOrients[RandHomo_orient];
			Rand_d2_orient = DistOrients[RandHomo_orient];
			Rand_d3_orient = DistOrients[RandHomo_orient];
			Rand_d4_orient = DistOrients[RandHomo_orient];
			Rand_d5_orient = DistOrients[RandHomo_orient];
			Rand_d6_orient = DistOrients[RandHomo_orient];
			Rand_d7_orient = DistOrients[RandHomo_orient];
			Rand_d8_orient = DistOrients[RandHomo_orient];
			Rand_d9_orient = DistOrients[RandHomo_orient];
			Rand_d10_orient = DistOrients[RandHomo_orient];
			Rand_d11_orient = DistOrients[RandHomo_orient];	 	
			}

		if (SearchType == 4) //singleton search mode, selects orientations (based on settings in DEFAULT.pro, and target types, randomly selected on each trial using TD_Select below
			{
				
			TD_Select = random(2);	
			
			if (TD_Select == 1)
				{
				TargetType = 1; //T Target
				Rand_targ_orient = TargOrt1;
				Rand_d1_orient = TargOrt2;
				Rand_d2_orient = TargOrt2;
				Rand_d3_orient = TargOrt2;
				Rand_d4_orient = TargOrt2;
				Rand_d5_orient = TargOrt2;
				Rand_d6_orient = TargOrt2;
				Rand_d7_orient = TargOrt2;
				Rand_d8_orient = TargOrt2;
				Rand_d9_orient = TargOrt2;
				Rand_d10_orient = TargOrt2;
				Rand_d11_orient = TargOrt2;
				}
			else
				{
				TargetType = 2; //L Target
				Rand_targ_orient = TargOrt2;
				Rand_d1_orient = TargOrt1;
				Rand_d2_orient = TargOrt1;
				Rand_d3_orient = TargOrt1;
				Rand_d4_orient = TargOrt1;
				Rand_d5_orient = TargOrt1;
				Rand_d6_orient = TargOrt1;
				Rand_d7_orient = TargOrt1;
				Rand_d8_orient = TargOrt1;
				Rand_d9_orient = TargOrt1;
				Rand_d10_orient = TargOrt1;
				Rand_d11_orient = TargOrt1;
				}
			}	
			
		if (SearchType == 5) //Variable Target, for detection only; 45b pilot	
			{	
				TD_Select = random(2);
				TargOrt = random(4);
				
			if (TD_Select == 1)
				{
				TargetType = 1; //T Target
				Rand_targ_orient = TargOrt;
				}
			else
				{
				TargetType = 2; //L Target
				Rand_targ_orient = TargOrt;
				}	
				
			}	
			
		}



	
	__HEADER__
REP_ORT.pro
__FOOTER__


declare	int	i, j, temp;
declare int orientation;
declare float Homo_orient;	
declare hide RepDistOrients[4] = {1, 2, 3, 4};		//Possible T/L orientations
declare hide RepTargOrients[4] = {1, 2, 3, 4};		//Possible T/L orientations

declare R1_targ_orient;
declare R1_d1_orient;
declare R1_d2_orient;
declare R1_d3_orient;
declare R1_d4_orient;
declare R1_d5_orient;
declare R1_d6_orient;
declare R1_d7_orient;
declare R1_d8_orient;
declare R1_d9_orient;
declare R1_d10_orient;
declare R1_d11_orient;	

declare R2_targ_orient;
declare R2_d1_orient;
declare R2_d2_orient;
declare R2_d3_orient;
declare R2_d4_orient;
declare R2_d5_orient;
declare R2_d6_orient;
declare R2_d7_orient;
declare R2_d8_orient;
declare R2_d9_orient;
declare R2_d10_orient;
declare R2_d11_orient;

declare R3_targ_orient;
declare R3_d1_orient;
declare R3_d2_orient;
declare R3_d3_orient;
declare R3_d4_orient;
declare R3_d5_orient;
declare R3_d6_orient;
declare R3_d7_orient;
declare R3_d8_orient;
declare R3_d9_orient;
declare R3_d10_orient;
declare R3_d11_orient;

declare R4_targ_orient;
declare R4_d1_orient;
declare R4_d2_orient;
declare R4_d3_orient;
declare R4_d4_orient;
declare R4_d5_orient;
declare R4_d6_orient;
declare R4_d7_orient;
declare R4_d8_orient;
declare R4_d9_orient;
declare R4_d10_orient;
declare R4_d11_orient;

declare R5_targ_orient;
declare R5_d1_orient;
declare R5_d2_orient;
declare R5_d3_orient;
declare R5_d4_orient;
declare R5_d5_orient;
declare R5_d6_orient;
declare R5_d7_orient;
declare R5_d8_orient;
declare R5_d9_orient;
declare R5_d10_orient;
declare R5_d11_orient;

declare R6_targ_orient;
declare R6_d1_orient;
declare R6_d2_orient;
declare R6_d3_orient;
declare R6_d4_orient;
declare R6_d5_orient;
declare R6_d6_orient;
declare R6_d7_orient;
declare R6_d8_orient;
declare R6_d9_orient;
declare R6_d10_orient;
declare R6_d11_orient;

declare REP_ORT();

process REP_ORT 
    {
		
	// Randomize/Shuffle orientations

	i = 0;
	while (i < 4)			//Run loop while i < total # items in Tstimorients array
		{
		j = random(4); 			//randomly select one of six positions in X location array
		temp = RepDistOrients[i];			//stick one of the other locations in temp
		RepDistOrients[i] = RepDistOrients[j];
		RepDistOrients[j] = temp;

		temp = RepTargOrients[i];			//stick one of the other locations in temp
		RepTargOrients[i] = RepTargOrients[j];
		RepTargOrients[j] = temp;
		i = i + 1;
		}
	
	// Different configurations of orientations for each array, with constraint that all but 1 orientation appears thrice
	
	if (SearchType == 1)
		{	
		R1_targ_orient = TargOrt;
		R1_d1_orient = RepDistOrients[0];
		R1_d2_orient = RepDistOrients[1];
		R1_d3_orient = RepDistOrients[2];
		R1_d4_orient = RepDistOrients[3];
		R1_d5_orient = RepDistOrients[0];
		R1_d6_orient = RepDistOrients[1];
		R1_d7_orient = RepDistOrients[2];
		R1_d8_orient = RepDistOrients[3];
		R1_d9_orient = RepDistOrients[0];
		R1_d10_orient = RepDistOrients[1];
		R1_d11_orient = RepDistOrients[2];	
		
		R2_targ_orient = TargOrt;
		R2_d1_orient = RepDistOrients[3];
		R2_d2_orient = RepDistOrients[2];
		R2_d3_orient = RepDistOrients[1];
		R2_d4_orient = RepDistOrients[0];
		R2_d5_orient = RepDistOrients[3];
		R2_d6_orient = RepDistOrients[2];
		R2_d7_orient = RepDistOrients[1];
		R2_d8_orient = RepDistOrients[0];
		R2_d9_orient = RepDistOrients[3];
		R2_d10_orient = RepDistOrients[2];
		R2_d11_orient = RepDistOrients[1];

		R3_targ_orient = TargOrt;
		R3_d1_orient = RepDistOrients[2];
		R3_d2_orient = RepDistOrients[1];
		R3_d3_orient = RepDistOrients[3];
		R3_d4_orient = RepDistOrients[0];
		R3_d5_orient = RepDistOrients[2];
		R3_d6_orient = RepDistOrients[1];
		R3_d7_orient = RepDistOrients[3];
		R3_d8_orient = RepDistOrients[0];
		R3_d9_orient = RepDistOrients[2];
		R3_d10_orient = RepDistOrients[1];
		R3_d11_orient = RepDistOrients[3];	
		
		R4_targ_orient = TargOrt;
		R4_d1_orient = RepDistOrients[1];
		R4_d2_orient = RepDistOrients[0];
		R4_d3_orient = RepDistOrients[3];
		R4_d4_orient = RepDistOrients[2];
		R4_d5_orient = RepDistOrients[1];
		R4_d6_orient = RepDistOrients[0];
		R4_d7_orient = RepDistOrients[3];
		R4_d8_orient = RepDistOrients[2];
		R4_d9_orient = RepDistOrients[1];
		R4_d10_orient = RepDistOrients[0];
		R4_d11_orient = RepDistOrients[3];	
		
		R5_targ_orient = TargOrt;
		R5_d1_orient = RepDistOrients[2];
		R5_d2_orient = RepDistOrients[0];
		R5_d3_orient = RepDistOrients[3];
		R5_d4_orient = RepDistOrients[1];
		R5_d5_orient = RepDistOrients[2];
		R5_d6_orient = RepDistOrients[0];
		R5_d7_orient = RepDistOrients[3];
		R5_d8_orient = RepDistOrients[1];
		R5_d9_orient = RepDistOrients[2];
		R5_d10_orient = RepDistOrients[0];
		R5_d11_orient = RepDistOrients[3];

		R6_targ_orient = TargOrt;
		R6_d1_orient = RepDistOrients[2];
		R6_d2_orient = RepDistOrients[3];
		R6_d3_orient = RepDistOrients[1];
		R6_d4_orient = RepDistOrients[0];
		R6_d5_orient = RepDistOrients[2];
		R6_d6_orient = RepDistOrients[3];
		R6_d7_orient = RepDistOrients[1];
		R6_d8_orient = RepDistOrients[0];
		R6_d9_orient = RepDistOrients[2];
		R6_d10_orient = RepDistOrients[3];
		R6_d11_orient = RepDistOrients[1];	
		}
		
	else if (SearchType == 2)
		{
		
		Homo_orient = random(4);
		
		R1_targ_orient = TargOrt;
		R1_d1_orient = RepDistOrients[Homo_orient];
		R1_d2_orient = RepDistOrients[Homo_orient];
		R1_d3_orient = RepDistOrients[Homo_orient];
		R1_d4_orient = RepDistOrients[Homo_orient];
		R1_d5_orient = RepDistOrients[Homo_orient];
		R1_d6_orient = RepDistOrients[Homo_orient];
		R1_d7_orient = RepDistOrients[Homo_orient];
		R1_d8_orient = RepDistOrients[Homo_orient];
		R1_d9_orient = RepDistOrients[Homo_orient];
		R1_d10_orient = RepDistOrients[Homo_orient];
		R1_d11_orient = RepDistOrients[Homo_orient];	
		
		R2_targ_orient = TargOrt;
		R2_d1_orient = RepDistOrients[Homo_orient];
		R2_d2_orient = RepDistOrients[Homo_orient];
		R2_d3_orient = RepDistOrients[Homo_orient];
		R2_d4_orient = RepDistOrients[Homo_orient];
		R2_d5_orient = RepDistOrients[Homo_orient];
		R2_d6_orient = RepDistOrients[Homo_orient];
		R2_d7_orient = RepDistOrients[Homo_orient];
		R2_d8_orient = RepDistOrients[Homo_orient];
		R2_d9_orient = RepDistOrients[Homo_orient];
		R2_d10_orient = RepDistOrients[Homo_orient];
		R2_d11_orient = RepDistOrients[Homo_orient];

		R3_targ_orient = TargOrt;
		R3_d1_orient = RepDistOrients[Homo_orient];
		R3_d2_orient = RepDistOrients[Homo_orient];
		R3_d3_orient = RepDistOrients[Homo_orient];
		R3_d4_orient = RepDistOrients[Homo_orient];
		R3_d5_orient = RepDistOrients[Homo_orient];
		R3_d6_orient = RepDistOrients[Homo_orient];
		R3_d7_orient = RepDistOrients[Homo_orient];
		R3_d8_orient = RepDistOrients[Homo_orient];
		R3_d9_orient = RepDistOrients[Homo_orient];
		R3_d10_orient = RepDistOrients[Homo_orient];
		R3_d11_orient = RepDistOrients[Homo_orient];	
		
		R4_targ_orient = TargOrt;
		R4_d1_orient = RepDistOrients[Homo_orient];
		R4_d2_orient = RepDistOrients[Homo_orient];
		R4_d3_orient = RepDistOrients[Homo_orient];
		R4_d4_orient = RepDistOrients[Homo_orient];
		R4_d5_orient = RepDistOrients[Homo_orient];
		R4_d6_orient = RepDistOrients[Homo_orient];
		R4_d7_orient = RepDistOrients[Homo_orient];
		R4_d8_orient = RepDistOrients[Homo_orient];
		R4_d9_orient = RepDistOrients[Homo_orient];
		R4_d10_orient = RepDistOrients[Homo_orient];
		R4_d11_orient = RepDistOrients[Homo_orient];	
		
		R5_targ_orient = TargOrt;
		R5_d1_orient = RepDistOrients[Homo_orient];
		R5_d2_orient = RepDistOrients[Homo_orient];
		R5_d3_orient = RepDistOrients[Homo_orient];
		R5_d4_orient = RepDistOrients[Homo_orient];
		R5_d5_orient = RepDistOrients[Homo_orient];
		R5_d6_orient = RepDistOrients[Homo_orient];
		R5_d7_orient = RepDistOrients[Homo_orient];
		R5_d8_orient = RepDistOrients[Homo_orient];
		R5_d9_orient = RepDistOrients[Homo_orient];
		R5_d10_orient = RepDistOrients[Homo_orient];
		R5_d11_orient = RepDistOrients[Homo_orient];

		R6_targ_orient = TargOrt;
		R6_d1_orient = RepDistOrients[Homo_orient];
		R6_d2_orient = RepDistOrients[Homo_orient];
		R6_d3_orient = RepDistOrients[Homo_orient];
		R6_d4_orient = RepDistOrients[Homo_orient];
		R6_d5_orient = RepDistOrients[Homo_orient];
		R6_d6_orient = RepDistOrients[Homo_orient];
		R6_d7_orient = RepDistOrients[Homo_orient];
		R6_d8_orient = RepDistOrients[Homo_orient];
		R6_d9_orient = RepDistOrients[Homo_orient];
		R6_d10_orient = RepDistOrients[Homo_orient];
		R6_d11_orient = RepDistOrients[Homo_orient];				
		}
	}

	
	__HEADER__
RIGSETUP.pro
__FOOTER__
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

// what room is this set up for?
declare constant hide int 	Room			= 28;

// viewing measurements used to compute degrees (units need to be the same)
declare constant hide float Scr_width   	= 381.0; // in some units
declare constant hide float Scr_height  	= 291.0; // in some units
declare 		 hide float Subj_dist   	= 450.0; // distance from center of subjects eyeball to screen

// where does your photodiode marker need to be?
declare constant hide float PD_left			= 6;	// distance from left of screen (same units as above)
declare constant hide float PD_bottom		= 7;	// distance from bottom of screen (same units as above)
declare constant hide float PD_size			= 25;	// minimum size for consistant triggering (same units as above)

// what is your screen resolution?
declare constant hide int   Scr_pixX    	= 640;	// number of pixels across
declare constant hide int   Scr_pixY    	= 400;	// number of pixels in height
declare constant hide float	Refresh_rate	= 70;	// in Hz

// what are your eye variables?
declare float	X_Gain = 50;						// x scaling factor to convert eye trace voltage to degrees (must be calculated from calibration)
declare float	Y_Gain = 50;						// y scaling factor to convert eye trace voltage to degrees (must be calculated from calibration)
declare float	X_Offset; 							// for zeroing x trace
declare float	Y_Offset;							// for zeroing y trace

// what kind of hardware configuration are you using?
declare constant hide int Juice_channel   	= 9;
declare constant hide int Stim_channel		= 13;
declare constant hide int Eye_X_channel   	= 1;
declare constant hide int Eye_Y_channel   	= 2;
declare constant hide int PhotoD_channel  	= 5;
declare constant hide float MaxVoltage    	= 10; 	//look at das_gain and das_polarity in kped (setup tn)
declare constant hide float AnalogUnits   	= 65536;// use this for a 64 bit AD board
// declare constant hide float AnalogUnits   = 4096;// use this for a 12 bit AD board

// what kind of motion detector hardware are you using?
declare constant hide CheckMouth			= 1;            // use this if you have a motion detector on the MOUTH going into channel 3
declare constant hide CheckBody 			= 0;            // use this if you have a motion detector on the BODY going into channel 3__HEADER__
Runs.pro
__FOOTER__
////radnomly select run length
numtrials = random(8);


////list of possible run lengths (to be selected using number chosen above, numtrials
Run_Lgth_DP[8] = {1, 2, 3, 4, 5, 6, 7, 8};
Run_Lgth_DA[8] = {1, 2, 3, 4, 5, 6, 7, 8};


////set up loop that tracks number of presentation of distractor color ( or lack of in dist absent trials)
process DP_Runs() 
	{
	
	int	i;
	i = 0;
	while (i < Run_Lgth_DP[numtrials])			//Run loop while i < total # items in run
		{
		d7color = 250; 			//distractor color
		i = i + 1;
		}
	}	


process DA_Runs() 
	{
	
	int	i;
	i = 0;
	while (i < Run_Lgth_DA[numtrials])			//Run loop while i < total # items in run
		{
		d7color = 250; 			//distractor color
		}
	}
	
////spawn one of the loops above, depnding on whether its a distractor present or absent run - may require setting DP on a per 'run' timescale rather than a per trial, by puttting, e.g., everything after schtrial within the above loop
if DistPres = 1; //Present
	spawn DP_Runs
elseif DistPres = 2;
	spawn DA_Runs
	__HEADER__
S_VARS.pro
__FOOTER__
// These are the user defined global variables needed to run the search task
//
// written by joshua.d.cosman@vanderbilt.edu      July, 2013

declare int		Trl_number;
declare int		Comp_Trl_number;
declare int		Block_number;

declare int		C_early_saccades;
declare int		C_go_correct;
declare int		C_go_wrong;
declare int		C_nogo_correct;
declare int		C_nogo_wrong;


//----------------------------------------------------------------------------------------------------------------
// Trial type distributions (must sum to 100)
declare float	Go_weight;				// percentage of go trials
declare float	Stop_weight;			// percentage of stop trials
declare float	Ignore_weight;			// percentage of ignore trials

declare float	Bonus_weight;			// percentage of time that the subject is wrong but gets rewarded anyway.
declare float	Dealer_wins_weight;		// percentage of time that the subject is right but gets punished anyway.

declare float	BigR_weight;			// weights for random changes of reward size
declare float	MedR_weight;			// weights for random changes of reward size
declare float	SmlR_weight;			// weights for random changes of reward size
declare float	SmlP_weight;			// weights for random changes of punsiment size
declare float	MedP_weight;			// weights for random changes of punsiment size
declare float	BigP_weight;			// weights for random changes of punsiment size


//----------------------------------------------------------------------------------------------------------------
// Stimulus properties
declare int		Classic;				// emulates the old stop signal task
declare int		Stop_sig_color[3];		// need to make this more finely adjustable for luminance matching
declare int		Ignore_sig_color[3];	// need to make this more finely adjustable for luminance matching
declare int		Fixation_color[3];		// need to make this more finely adjustable for luminance matching
declare int		Mask_sig_color[3];
declare int		N_targ_pos;				// number of target positions (need to calculate this myself based on user input)
declare int		Color_list[9,3];		// color of each target individually (see critique above)
declare int		tColor_list[9,3];
declare float	Size_list[9];			// size of each target individually (degrees)
declare float	Angle_list[9];			// angle of each target individually (degrees)
declare float	Eccentricity_list[9];	// distance of each target from center of screen individually (degrees)
declare float	Fixation_size;			// size of the fixatoin point (degrees)
declare int		Set_Tones;				// sets up the tones to either high or low based on user input
declare int		Success_Tone_bigR;		// positive secondary reinforcer in Hz (large reward)
declare int		Success_Tone_medR;		// positive secondary reinforcer in Hz (medium reward)
declare int		Success_Tone_smlR;		// positive secondary reinforcer in Hz (small reward)		
declare int		Failure_Tone_smlP;		// negative secondary reinforcer in Hz (short timeout)
declare int		Failure_Tone_medP;		// negative secondary reinforcer in Hz (medium timeout)
declare int		Failure_Tone_bigP;		// negative secondary reinforcer in Hz (long timeout)
declare int		Fixation_Target;		// Target number for the fixation task (changed by key macros);


//----------------------------------------------------------------------------------------------------------------
// Eye related variables
declare float	Fix_win_size;			// size of fixation window (degrees)
declare float	Targ_win_size;			// size of target window (degrees)



//----------------------------------------------------------------------------------------------------------------
// Task timing paramaters (all times in ms unless otherwise specified)
declare int		Allowed_fix_time;		// subject has this long to acquire fixation before a new trial is initiated
declare int		Expo_Jitter;			// defines if exponential holdtime is used or if holdtime is sampled from rectanglular dist.
declare int		Min_Holdtime;			// minimum time after fixation before target presentation
declare int		Max_Holdtime;			// maximum time after fixation before target presentation
declare int		Max_saccade_time;		// subject has this long to saccade to the target
declare int		Max_sacc_duration;		// once the eyes leave fixation they must be in the target before this time is up
declare int		Targ_hold_time;			// after saccade subject must hold fixation at target for this long
declare int		N_SSDs;					// number of stop signal delays (need to calculate this myself)
declare int		Max_SSD;				// longest SSD
declare int		Min_SSD;				// shortest SSD
declare int		Staircase;				// do we select the next SSD based on a staircasing algorithm?
declare float	SSD_list[20];			// needs to be in refresh rate units
declare int		Cancl_time;				// subject must hold fixation for this long on a stop trial to be deemed canceled
declare int		Tone_Duration;			// how long should the error and success tones be presented?
declare int		Reward_Offset;			// how long after tone before juice is given (needed to seperate primary and secondary reinforcement)
declare int		Base_Reward_time;		// how long will the juice solonoid remain open (monkeys are very interested in this varaible)
declare int		Base_Punish_time;		// time out for messing up
declare int		Fixed_trl_length;		// 1 for fixed trial length, 0 for fixied inter trial intervals
declare int		Trial_length;			// fixed at this value (only works if Fixed_trl_length == 1) must figure out max time for this variable and include it in comments
declare int		Inter_trl_int;			// how long between trials (only works if Fixed_trl_length == 0)










__HEADER__
SCHTRIAL.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// Run a search trial based on the variables calculated by SETS_TRL.pro and those 
// given by the user.
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013

declare hide int StimTm;
declare hide int Trl_Outcome;			// Global output used in END_TRL
declare hide int Trl_Start_Time;		// Global output used in END_TRL
declare hide int LastSearchOutcome;		// Global output used in END_TRL

declare SCHTRIAL(allowed_fix_time,		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime, 			// see SETC_TRL.pro
				trl_type, 				// see SETC_TRL.pro
				max_saccade_time, 		// see ALL_VARS.pro and DEFAULT.pro
				curr_ssd, 				// see SETC_TRL.pro
				cancl_time,				// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,			// see ALL_VARS.pro and DEFAULT.pro
				object_fix);			// animated graph object


process SCHTRIAL(allowed_fix_time, 		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime,     		// see SETC_TRL.pro
				trl_type,          		// see SETC_TRL.pro
				max_saccade_time,  		// see ALL_VARS.pro and DEFAULT.pro
				curr_ssd,          		// see SETC_TRL.pro
				cancl_time,        		// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,    		// see ALL_VARS.pro and DEFAULT.pro
				object_fix)        		// animated graph object
	{
	
	//set timing parameters


	// Number the trial types to make them easier to read below
	declare hide int 	go_trl 		= 0;
	declare hide int 	stop_trl 	= 1;
	declare hide int 	ignore_trl 	= 2;
	
	// Number the trial stages to make them easier to read below
	declare hide int 	need_fix  		= 1;
	declare hide int 	fixating_ph		= 2;
	declare hide int 	fixating_targ	= 3;
	declare hide int 	fixating_off	= 4;
	declare hide int 	fixation_offset	= 5;
	declare hide int 	in_flight 		= 6;
	declare hide int 	on_target 		= 7;	
	declare hide int 	stage;
	
	// Number the stimuli pages to make reading easier
	declare hide int   	blank       = 0;
	declare hide int	fixation_pd = 1;
	declare hide int	fixation    = 2;
	declare hide int	plac_pd   	= 3;
	declare hide int	plac      	= 4;
	declare hide int	target_f_pd = 5;
	declare hide int	target_f    = 6;
	declare hide int	target      = 7;
	
	// Assign values to success and failure so they are more readable
	declare hide int	success		 = 1;
	declare hide int	failure		 = 0;
	declare hide int	nogo_success = 3;
	declare hide int	no_change	 = 2;
	
	// Code all possible outcomes
	declare hide int constant no_fix		= 1;	// never attained fixation
	declare hide int constant broke_fix		= 2;	// attained and then lost fixation before target presentation
	declare hide int constant no_saccade	= 3;	// never made saccade on a go trial
	declare hide int constant nogo_correct	= 4;	// successfully canceled trial
	declare hide int constant sacc_out		= 5;	// made an inaccurate saccade out of the target box
	declare hide int constant broke_targ	= 6;	// didn't hold fixation at the target for long enough
	declare hide int constant go_correct	= 7;	// correct saccade on a go trial
	declare hide int constant nogo_wrong	= 8;	// error noncanceled trial
	declare hide int constant body_move		= 12;	// error body movement (for training stillness)
	declare hide int constant too_fast		= 14;	// low RT while in training to slow down.
	                                        
	// Timing variables which will be used to time task
	declare hide float 	fix_spot_time; 					
	declare hide float  targ_time;
	declare hide float  fix_off_Time; 						
	declare hide float  saccade_time;
	declare hide float 	aquire_fix_time;
	declare hide float 	stop_sig_time;
	declare hide float	aquire_targ_time;
		
	
	// This variable makes the while loop work
	declare hide int 	trl_running;
	
		// Stim complete?
	declare hide int 	StimDone;
	StimDone = 0;
	
	// Have to be reset on every iteration since 
	// variable declaration only occurs at load time
	trl_running 		= 1;
	stage 				= need_fix;
	
	// Tell the user what's up
	printf(" \n");
	printf("Block %d",Block_number);
	printf(" \n");
	printf("# %d",Trl_number);
	printf(" \n");
	printf("Trial Type = %d",TrialTP);
	printf(" \n");
	printf("Fix-Sch ISI = %d",Curr_holdtime);
	printf(" \n");
	//printf(" Random Trials(%d",Rand_Comp_Trl_number);

if (SingMode == 0)
	{
	printf(" random correct = %d",Rand_Comp_Trl_number);
	printf("    %d",RandPerAcc);
	printf(" \n");
	printf(" repeat correct = %d",Rep_Comp_Trl_number);
	printf("    %d",RepPerAcc);
	
	printf(" \n");
	printf(" (%d",avg_rand_rt);
	printf(" random RT)\n");
	
	printf(" (%d",avg_rep_rt);
	printf(" repeated RT)\n");
	printf("soa = %d\n",search_fix_time);
	}
else if (SingMode == 1)
	{
	printf(" Sing. Abs. correct = %d",Rand_Comp_Trl_DA);
	printf("    %d",RandPerAcc_DA);
	printf(" \n");
	printf(" Sing. Pres. correct = %d",Rand_Comp_Trl_DP);
	printf("    %d",RandPerAcc_DP);
	
	printf(" \n");
	printf(" (%d",avg_rand_rt_DA);
	printf(" absent RT)\n");
	
	printf(" (%d",avg_rand_rt_DP);
	printf(" present RT)\n");
	printf("soa = %d\n",search_fix_time);
	}	
	
	if (SingMode == 0)
	{
		Event_fifo[Set_event] = SearchHeader_;									// queue TrialStart_ strobe
		Set_event = (Set_event + 1) % Event_fifo_N;																			// HERE IS WHERE THE FUN BEGINS
	}
	else if (SingMode == 1)
	{
		Event_fifo[Set_event] = CaptureHeader_;									// queue TrialStart_ strobe
		Set_event = (Set_event + 1) % Event_fifo_N;																			// HERE IS WHERE THE FUN BEGINS
	}
	
	Event_fifo[Set_event] = TrialStart_;									// queue TrialStart_ strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	
	dsendf("vp %d\n",fixation_pd);											// flip the pg to the fixation stim with pd marker
	fix_spot_time = time();  												// record the time
	Event_fifo[Set_event] = FixSpotOn_;										// queue strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	
	dsendf("XM RFRSH:\n"); 													// wait one vertical retrace
	dsendf("vp %d\n",fixation);												// flip the pg to the fixation stim without pd marker
	oSetAttribute(object_fix, aVISIBLE); 									// turn on the fixation point in animated graph
	oSetAttribute(object_targ, aINVISIBLE); 									// turn on the fixation point in animated graph
	
	while (trl_running)														// trials ending will set trl_running = 0
		{	
		
	//--------------------------------------------------------------------------------------------
	// STAGE need_fix (the fixation point is on, but the subject hasn't looked at it)
		if (stage == need_fix)
			{		
			if (In_FixWin)													// If the eyes have entered the fixation window (before time, see below)...
				{
				aquire_fix_time = time();									// ...function call to time to note current time and...
				Trl_Start_Time = aquire_fix_time;							// Global output
				Event_fifo[Set_event] = Fixate_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = fixating_ph;											// ...advance to the next stage.
				}
			else if (time() > fix_spot_time + allowed_fix_time)				// But if time runs out...
				{
				Trl_Outcome = no_fix;    									// TRIAL OUTCOME ERROR (no fixation)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen,...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				lastsearchoutcome = failure;
				printf("Aborted (no fixation)\n");							// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}			
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE fixating placeholders (the subject is looking at the fixation point waiting for placeholder onset)		
		else if (stage == fixating_ph)
			{
			if (!In_FixWin)													// If the eyes stray out of the fixation window...
				{
				Trl_Outcome = broke_fix;									// TRIAL OUTCOME ERROR (broke fixation)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				lastsearchoutcome = failure;
				printf("Aborted (broke fixation)\n");						// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}
			else if (In_FixWin && time() > aquire_fix_time + curr_holdtime)	// But if the eyes are still in the window at end of holdtime...
				{
				if (PlacPres == 2) // if placeholder are present (set in DEFAULT.pro), we need to present those fuckers.
					{
					Event_fifo[Set_event] = PlacOn_;										// queue strobe
					Set_event = (Set_event + 1) % Event_fifo_N;
					dsendf("vp %d\n",plac_pd);								// ...flip the pg to the placeholders with pd marker...	
					dsendf("XM RFRSH:\n"); 										// ...wait one vetical retrace...
					dsendf("vp %d\n",plac);									// ...flip the pg to the placeholders without pd marker.
					dsendf("wm %d\n", plac_duration); // set as a variable in ALLVARS and add a random jitter
					stage = fixating_targ;
					}
				else
				    {
					plac_duration = 0;
					stage = fixating_targ;
					}
				}	
			else if (StimDone == 0 && StimTm == 1 && In_FixWin && time() > aquire_fix_time + (curr_holdtime - 150))	// But if the eyes are still in the window at end of holdtime...
				{ 
					spawn STIM(stim_channel);
					StimDone = 1;
				}
			}
	//--------------------------------------------------------------------------------------------
	// STAGE fixating target(the subject is looking at the fixation point waiting for target onset)					
	else if (stage == fixating_targ)
			{			
			if (!In_FixWin)													// If the eyes stray out of the fixation window...
				{
				Trl_Outcome = broke_fix;									// TRIAL OUTCOME ERROR (broke fixation)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				lastsearchoutcome = failure;
				printf("Aborted (broke fixation)\n");						// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}	
			else if (In_FixWin)	
				{
				Event_fifo[Set_event] = Target_;										// queue strobe
				Set_event = (Set_event + 1) % Event_fifo_N;
				dsendf("vp %d\n",target_f_pd);							// ...flip the pg to target, fixation, pd
				targ_time = time(); 									// ...record the time...
				
				dsendf("XM RFRSH:\n"); 									// ...wait 1 vertical retrace...
				dsendf("vp %d\n",target_f);								// ...and flip the pg to target plus fixation
				dsendf("wm %d\n",search_fix_time);                 //declared at beginning of file - wait until fixation offset to respond
				stage = fixating_off;
				}
			}	
	//--------------------------------------------------------------------------------------------
	// STAGE fixating offset(the subject is looking at the fixation point waiting for fixation offset)					
	
	else if (stage == fixating_off)
			{							
			if (!In_FixWin)													// If the eyes stray out of the fixation window...
				{
				Trl_Outcome = too_fast; 								// TRIAL OUTCOME TOO FAST (too fast while being trained to slow down)
				dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
				Event_fifo[Set_event] = EarlySaccade_;					// Queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue...
				oSetAttribute(object_targ, aINVISIBLE); 				// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 					// ...remove fixation point from animated graph...
				lastsearchoutcome = failure;
				printf("Error (too fast)\n");							// ...tell the user whats up...
				trl_running = 0;
				}
			else if (!In_FixWin && time() < targ_time + Min_saccade_time)
				{
				Trl_Outcome = too_fast; 								// TRIAL OUTCOME TOO FAST (too fast while being trained to slow down)
				dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
				Event_fifo[Set_event] = EarlySaccade_;					// Queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue...
				oSetAttribute(object_targ, aINVISIBLE); 				// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 					// ...remove fixation point from animated graph...
				lastsearchoutcome = failure;
				printf("Error (too fast)\n");							// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}				
			else if (In_FixWin && time() > targ_time)
				{
				dsendf("vp %d\n",target);								// ...and flip the pg to the target without fixation.
				if (Catch == 0)
					{
					oSetAttribute(object_targ, aVISIBLE); 					// ...show target in animated graph...
					}
				oSetAttribute(object_fix, aINVISIBLE); 					// ...remove fixation point from animated graph.
				stage = fixation_offset;											// Advance to the next trial stage.

				fix_off_time = time();
				
				Event_fifo[Set_event] = FixSpotOff_;					// Queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue...
					
					if (StimDone == 0 && StimTm == 2)
						{
						spawn STIM(stim_channel);
						StimDone = 1;
						}				
				}
			}
	//--------------------------------------------------------------------------------------------
	// STAGE targ_on (the fixation has been removed but the subject is still fixating - time to go!)		
		else if (stage == fixation_offset)
			{	
			if (!In_FixWin)													// If the eyes leave the fixation window...we have a saccade...				
				{															
				if (Catch == 1) //catch trial...
					{
					Trl_Outcome = nogo_wrong; 								// You dumbshit, you made a saccade on a catch trial!
					dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
					oSetAttribute(object_targ, aINVISIBLE); 				// ...remove target from animated graph...
					oSetAttribute(object_fix, aINVISIBLE); 					// ...remove fixation point from animated graph...
					Event_fifo[Set_event] = CatchIncorrectG_;										// queue strobe
					Set_event = (Set_event + 1) % Event_fifo_N;
					lastsearchoutcome = failure;
					printf("Error (NoGo)\n");							// ...tell the user whats up...
					trl_running = 0;
					}
				else if (Catch == 0) //not a catch trial...
					{
						
					/* if (PlacPres == 2)
						{ */								
						saccade_time = time();										// ...record the time...
						Event_fifo[Set_event] = Saccade_;							// ...queue strobe...
						Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
						printf("rt = %d\n",saccade_time - targ_time - search_fix_time - plac_duration);				// ...tell the user whats up...
						current_rt = saccade_time - targ_time - search_fix_time - plac_duration;
						stage = in_flight;											// ...and advance to the next stage.
						
							if (saccade_time - fix_off_time < search_fix_time + plac_duration)
								{
								Trl_Outcome = too_fast; 								// TRIAL OUTCOME TOO FAST (too fast while being trained to slow down)
								dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
								Event_fifo[Set_event] = EarlySaccade_;							// ...queue strobe...
								Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
								oSetAttribute(object_targ, aINVISIBLE); 				// ...remove target from animated graph...
								oSetAttribute(object_fix, aINVISIBLE); 					// ...remove fixation point from animated graph...
								lastsearchoutcome = failure;
								printf("Error (too fast)\n");							// ...tell the user whats up...
								trl_running = 0;										// ...and terminate the trial.
								} 
/* 						}
					else // if placeholders not present, its just normal search and no need to account for placeholder duration
						{	
						saccade_time = time();										// ...record the time...
						Event_fifo[Set_event] = Saccade_;							// ...queue strobe...
						Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
						printf("rt = %d\n",saccade_time - targ_time - search_fix_time);				// ...tell the user whats up...
						current_rt = saccade_time - targ_time - search_fix_time;
						stage = in_flight;											// ...and advance to the next stage.
						
							if (saccade_time - targ_time < search_fix_time)
								{
								Trl_Outcome = too_fast; 								// TRIAL OUTCOME TOO FAST (too fast while being trained to slow down)
								dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
								oSetAttribute(object_targ, aINVISIBLE); 				// ...remove target from animated graph...
								oSetAttribute(object_fix, aINVISIBLE); 					// ...remove fixation point from animated graph...
								lastsearchoutcome = failure;
								printf("Error (too fast)\n");							// ...tell the user whats up...
								trl_running = 0;										// ...and terminate the trial.
								}
						}  */
					}
				}					
////////////////////// Code for stimulating just prior to (70ms) a saccade /////////////////////
				// else if (Catch == 0 && In_FixWin && StimDone == 0 && StimTm == 3 && time() > fix_off_time + 70)	// But if the eyes are still in the window at end of holdtime...
				// { 
				// spawn STIM(stim_channel);
				// StimDone = 1;
				// }
/////////////////////////////////////////////////////////////////////////////////////////////////
				
			else if (Catch == 0 && In_FixWin &&  											// But if no saccade occurs...
				time() > fix_off_time + search_fix_time + plac_duration + max_saccade_time)				// ...and a saccade was supposed to be made.
				{
				Trl_Outcome = no_saccade;           						// TRIAL OUTCOME ERROR - made saccade on catch trial
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				Event_fifo[Set_event] = CatchIncorrectNG_;										// queue strobe
				Set_event = (Set_event + 1) % Event_fifo_N;
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				lastsearchoutcome = failure;
				printf("Error (no saccade)\n");								// ...tell the user whats up...
				spawn SVR_BELL();
				trl_running = 0;											// ...and terminate the trial.
				}			
			else if (Catch == 1 && In_FixWin && 
				time() > fix_off_time + search_fix_time + plac_duration + catch_hold_time)
				{
				Trl_Outcome = nogo_correct;           						// Catch trial success
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				Event_fifo[Set_event] = CatchCorrect_;										// queue strobe
				Set_event = (Set_event + 1) % Event_fifo_N;
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				lastsearchoutcome = nogo_success;
				printf("Catch Correct\n");								// ...tell the user whats up...
				trl_running = 0;
				}					
			}

	//--------------------------------------------------------------------------------------------
	// STAGE in_flight (eyes have left fixation window but have not entered target window)		
		else if (stage == in_flight)
			{
				
			if (In_TargWin)													// If the eyes get into the target window...
				{
				aquire_targ_time = time();									// ...record the time...
				stage = on_target;											// ...and advance to the next stage of the trial.
								
				Event_fifo[Set_event] = Correct_sacc;					// ...queue strobe for Neuro Explorer
				Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.					
				}
			else if (time() > saccade_time + max_sacc_duration)				// But, if the eyes are out of the target window and time runs out...
				{
				Trl_Outcome = sacc_out;   									// TRIAL OUTCOME ERROR (innacurrate saccade)
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				Event_fifo[Set_event] = Error_sacc;					// ...queue strobe for Neuro Explorer
				Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.				
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (inaccurate saccade)\n");						// ...tell the user whats up...
				trl_running = 0; 											// ...and terminate the trial.
				}
			}
		
		
		
	//--------------------------------------------------------------------------------------------
	// STAGE on_target (eyes have entered the target window.  will they remain there for duration?)	
		else if (stage == on_target)
			{
			if (!In_TargWin)												// If the eyes left the target window...
				{			
				Trl_Outcome = broke_targ;									// TRIAL OUTCOME ERROR (broke target fixation)
				
				dsendf("vp %d\n",blank);
				Event_fifo[Set_event] = BreakTFix_;					// ...queue strobe for Neuro Explorer
				Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.				// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (broke target fixation)\n");					// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}		
			else if (In_TargWin  											// But if the eyes are still in the target window...
				&&  time() > aquire_targ_time + targ_hold_time)				// ...and the target hold time is up...
				{

		
					Trl_Outcome = go_correct;								//TRIAL OUTCOME CORRECT (correct go trial)
					Correct_trls = Correct_trls + 1;						// ...set a global for 1DR...
					Event_fifo[Set_event] = Correct_;						// ...queue strobe...
					Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue...
					lastsearchoutcome = success;
					printf("Correct (saccade)\n");							// ...tell the user whats up...
																// Either way we are done, so...
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				////////////////////// Code for stimulating when fixated on target /////////////////////
				dsendf("wm %d\n",200);
				if (StimTm == 3)	
				{ 
				spawn STIM(stim_channel);
				StimDone = 1;
				}
				/////////////////////////////////////////////////////////////////////////////////////////////////
				
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				trl_running = 0;											// ...and terminate the trial.
				}			
			}			
			
		if (Move_ct > 0)
			{
			Trl_Outcome = body_move;   										// TRIAL OUTCOME ABORTED (the body was moving)
			dsendf("vp %d\n",blank);										// Flip the pg to the blank screen...
			oSetAttribute(object_targ, aINVISIBLE); 						// ...remove target from animated graph...
			oSetAttribute(object_fix, aINVISIBLE); 							// ...remove fixation point from animated graph...
			printf("Aborted (body movement)\n");							// ...tell the user whats up...
			trl_running = 0; 												// ...and terminate the trial.
			}	
			
		nexttick;
		}
	}__HEADER__
SEARCH.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
//This is the main search protocol.  It works like this.
// 1) Define all varialbes
// 2) Setup variables needed for a trial
// and start loop
// 3) Run a trial
// 4) End the trial
// 		a) deliver rewards and punishments
//		b) take care of ITI
// 		c) set up variables for next run
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013
	
	
declare SEARCH();						

process SEARCH()     
	{
	declare hide int run_search_sess = 7;
	declare hide int run_idle		 = 0;
	declare hide int on   = 1;	
	declare hide int off  = 0;	
	declare hide int pcnt = 0;		
	
	LastStim				= 0;
	Trl_number				= 1;
	Rand_Comp_Trl_number	= 0;
	Rep_Comp_Trl_number		= 0;
	Rand_Comp_Trl_DP		= 0;
	Rand_Comp_Trl_DA		= 0;
	Block_number			= 1;
	rand_inacc_sacc 		= 0;
	rep_inacc_sacc			= 0;
	RandPerAcc				= 0;
	RepPerAcc				= 0;
	Correct_trls 			= 0;
	Consec_corr				= 0;
	if (Last_task != run_search_sess)			// Only do this if we have gone into another task or if this is first run of day.
		{
		system("dialog Select_Monkey");
		spawnwait DEFAULT(State,				// Set all globals to their default values.
						Monkey,					
						Room);				
		Last_task = run_search_sess;
		}
		
	dsend("DM RFRSH");                			// This code sets up a vdosync macro definition to wait a specified ...
	if (Room == 23)                   			// ...number of vertical retraces based on the room in which we are    ...
		{                             			// ...recording.  This kluge is necessary because vdosync operates     ...
		dsendf("vw %d:\n",1);         			// ...differently in the different rooms.  In 028 a command to wait    ...
		}                             			// ...2 refresh cycles usually only waits for one and a command to     ...
	else                              			// ...wait for 1 usually only waits for 0.  Room 029 and 023 appear to ...
		{                             			// ...work properly.
		dsendf("vw %d:\n",2);
		}
	dsend("EM RFRSH");
	
	
	
	while(!OK)									
		{
		nexttick;
		if(Set_monkey)
			{
			spawnwait DEFAULT(State,			// Set all globals to their default values for a particular monkey.
						Monkey,						
						Room);	
			Set_monkey = 0;
			}
		}
	
	//spawnwait GOODVARS(State);
	
	spawnwait SET_SCH();						// sets up search RT graph
					
	spawnwait SET_CLRS(n_targ_pos);             // calls SET_CLRS.pro, which sets all colors for all tasks based on input
		
	spawnwait SETS_TRL(n_targ_pos,				// Select variables for the first search...
				go_weight,						// ...trial.  This happens once outside of the while...
				stop_weight,					// ...loop just to set up for the first iteration. After...
				ignore_weight,					// ...that SETC_TRL.pro will be called by END_TRL.pro.
				staircase,
				n_SSDs,
				min_holdtime,
                max_holdtime,
				expo_jitter);

				
	Event_fifo[Set_event] = SearchHeader_;		// Set a strobe to identify this file as a Search session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	
	Event_fifo[Set_event] = Room;				// Set a strobe to identify this file as a Search session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.

	
	nexttick 10;								// to prevent buffer overflows after task reentry.
	
//	CheckMotion = 1;							// set global for watching the motion detector
//	spawn WATCHMTH;								// start watching the mouth motion detector if present
//	spawn WATCHBOD;								// start watching motion detector for body if present
	
	while (state == run_search_sess)				// while the user has not yet terminated the countermanding task
		{
		 // check if prolonged stimulation should happen prior trial	 
 		 //if (StimTm == 5 && time() > (LastStim + StimInterval)) // for blocked, non-task stimulation
		 if (time() > (LastStim + StimInterval))	// for blocked, on-task stimulation	 
			{
			LastStim = time();
			
			if(StimCond == 1)
				{
 				Event_fifo[Set_event] = ShamStim_;			
				Set_event = (Set_event + 1) % Event_fifo_N;
				
				StimCond = 0;
				//StimTm = 0;// for trial-based, blocked stimulation vs. non-stimulation 

				//wait(Npulse * PulseGap); // Provides TTL stim parameters for blocked, pre-task stimulation; here, this is sham and simply waits
				
				Event_fifo[Set_event] = EndStim_;			
				Set_event = (Set_event + 1) % Event_fifo_N;
				}
			else
				{ 
				Event_fifo[Set_event] = Stimulation_;			
				Set_event = (Set_event + 1) % Event_fifo_N;
				
				StimCond = 1;	
				pcnt = 0;
				printf("Stim Time%d",StimTm);
/* 				while (pcnt < Npulse) // Provides TTL stim parameters for blocked, pre-task stimulation; here, this stims continuously based on DEFAULT.pro settings
					{
					spawn STIM(stim_channel);
					wait(PulseGap);
					pcnt = pcnt+1;
					} */
					
				//StimTm = 1;	// for trial-based, blocked stimulation vs. non-stimulation
				
				Event_fifo[Set_event] = EndStim_;			
				Set_event = (Set_event + 1) % Event_fifo_N;	
				} 			
			} 
			 
		 
		 //Spawn the trial
		 spawnwait SCHTRIAL(allowed_fix_time, 	// run a trial with variables defined in SETC_TRL.pro
							curr_holdtime, 
							trl_type, 
							max_saccade_time, 
							curr_ssd, 
							cancl_time, 
							max_sacc_duration, 
							targ_hold_time,
							object_fix);		
		
		spawnwait END_TRL(trl_outcome);			// end a trial with trl_outcome set in SEARCH.pro

		nexttick 5;								// wait at least five cycles and do it all again
		
		while(Pause)							// gives the user the ability to pause the task without ending it
			{
			nexttick;
			}
		
		}

												// the State global variables allow a control structure...
												// ...to impliment the task.
	State = run_idle;							// If we are out of the while loop the user wanted...
												// ...to stop Search.
//	CheckMotion = 0;							// stop watching for motion detector.
												
	oDestroy(object_fixwin);					// destroy all task graph objects
	oDestroy(object_targwin);
	oDestroy(object_fix);
	oDestroy(object_targ);
	oDestroy(object_eye);
	
	oSetGraph(gleft,aCLEAR);					// clear the left graph
	
	oDestroy(object_repeat);						// destroy all RT graph objects
	oDestroy(object_random);						

	
	oSetGraph(gleft,aCLEAR);					// clear the right graph
		
	spawn IDLE;									// return control to IDLE.pro
    
	}__HEADER__
SEL_LOCS.pro
__FOOTER__
//--------------------------------------------------------------------------------------------
// This code selects actual array locations for a given trial, based on locations set up in LOC_REP.pro and LOC_RAND.pro
// 
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013


//Move to ALLVARS.pro
	
		
	declare hide float 	targ_angle;
	declare hide float 	d1_angle; 
	declare hide float 	d2_angle; 
	declare hide float 	d3_angle; 
	declare hide float 	d4_angle; 
	declare hide float 	d5_angle; 
	declare hide float 	d6_angle; 
	declare hide float 	d7_angle; 
	declare hide float 	d8_angle; 
	declare hide float 	d9_angle; 
	declare hide float 	d10_angle; 
	declare hide float 	d11_angle; 
																		// ...by INFOS.pro at trial end.
	declare hide float 	targ_ecc;
	declare hide float 	d1_ecc; 
	declare hide float 	d2_ecc; 
	declare hide float 	d3_ecc; 
	declare hide float 	d4_ecc; 
	declare hide float 	d5_ecc; 
	declare hide float 	d6_ecc; 
	declare hide float 	d7_ecc; 
	declare hide float 	d8_ecc; 
	declare hide float 	d9_ecc; 
	declare hide float 	d10_ecc; 
	declare hide float 	d11_ecc; 
	
	declare hide float 	targ_orient;
	declare hide float 	d1_orient;
	declare hide float 	d2_orient;
	declare hide float 	d3_orient;
	declare hide float 	d4_orient;
	declare hide float 	d5_orient;
	declare hide float 	d6_orient;
	declare hide float 	d7_orient;
	declare hide float 	d8_orient;
	declare hide float 	d9_orient;
	declare hide float 	d10_orient;
	declare hide float 	d11_orient;
	

declare SEL_LOCS();

process SEL_LOCS
    {
	
		
	trialtype = random(12); //randomly choose repeated vs. novel displays

if (ArrStruct == 1)	
	{
	if (trialtype >= 0) 
		{
		TrialTp = 1;
		
		targ_angle = Rand_targ_angle;
		d1_angle = Rand_d1_angle;
		d2_angle = Rand_d2_angle;
		d3_angle = Rand_d3_angle;
		d4_angle = Rand_d4_angle;
		d5_angle = Rand_d5_angle;
		d6_angle = Rand_d6_angle;
		d7_angle = Rand_d7_angle;
		// d8_angle = Rand_d8_angle;
		// d9_angle = Rand_d9_angle;
		// d10_angle = Rand_d10_angle;
		// d11_angle = Rand_d11_angle;
		
		targ_ecc = Rand_targ_ecc;
		d1_ecc = Rand_d1_ecc;
		d2_ecc = Rand_d2_ecc;
		d3_ecc = Rand_d3_ecc;
		d4_ecc = Rand_d4_ecc;
		d5_ecc = Rand_d5_ecc;
		d6_ecc = Rand_d6_ecc;
		d7_ecc = Rand_d7_ecc;
		d8_ecc = Rand_d8_ecc;
		d9_ecc = Rand_d9_ecc;
		d10_ecc = Rand_d10_ecc;
		d11_ecc = Rand_d11_ecc;
		
		targ_orient = Rand_targ_orient;
		d1_orient = Rand_d1_orient;
		d2_orient = Rand_d2_orient;
		d3_orient = Rand_d3_orient;
		d4_orient = Rand_d4_orient;
		d5_orient = Rand_d5_orient;
		d6_orient = Rand_d6_orient;
		d7_orient = Rand_d7_orient;
		d8_orient = Rand_d8_orient;
		d9_orient = Rand_d9_orient;
		d10_orient = Rand_d10_orient;
		d11_orient = Rand_d11_orient;
		}
	}
else
	if (trialtype < 6) // presents random array on 1/2 of all trials, randomly chosen
		{
		TrialTp = 1;
		
		targ_angle = Rand_targ_angle;
		d1_angle = Rand_d1_angle;
		d2_angle = Rand_d2_angle;
		d3_angle = Rand_d3_angle;
		d4_angle = Rand_d4_angle;
		d5_angle = Rand_d5_angle;
		d6_angle = Rand_d6_angle;
		d7_angle = Rand_d7_angle;
		// d8_angle = Rand_d8_angle;
		// d9_angle = Rand_d9_angle;
		// d10_angle = Rand_d10_angle;
		// d11_angle = Rand_d11_angle;
		
		targ_ecc = Rand_targ_ecc;
		d1_ecc = Rand_d1_ecc;
		d2_ecc = Rand_d2_ecc;
		d3_ecc = Rand_d3_ecc;
		d4_ecc = Rand_d4_ecc;
		d5_ecc = Rand_d5_ecc;
		d6_ecc = Rand_d6_ecc;
		d7_ecc = Rand_d7_ecc;
		d8_ecc = Rand_d8_ecc;
		d9_ecc = Rand_d9_ecc;
		d10_ecc = Rand_d10_ecc;
		d11_ecc = Rand_d11_ecc;
		
		targ_orient = Rand_targ_orient;
		d1_orient = Rand_d1_orient;
		d2_orient = Rand_d2_orient;
		d3_orient = Rand_d3_orient;
		d4_orient = Rand_d4_orient;
		d5_orient = Rand_d5_orient;
		d6_orient = Rand_d6_orient;
		d7_orient = Rand_d7_orient;
		// d8_orient = Rand_d8_orient;
		// d9_orient = Rand_d9_orient;
		// d10_orient = Rand_d10_orient;
		// d11_orient = Rand_d11_orient;
		}	
	else if (trialtype == 6) // presents random array on 1/2 of all trials, randomly chosen
		{
		
		TrialTp = 2;
		
		targ_angle = R1_targ_angle;
		d1_angle = R1_d1_angle;
		d2_angle = R1_d2_angle;
		d3_angle = R1_d3_angle;
		d4_angle = R1_d4_angle;
		d5_angle = R1_d5_angle;
		d6_angle = R1_d6_angle;
		d7_angle = R1_d7_angle;
		// d8_angle = R1_d8_angle;
		// d9_angle = R1_d9_angle;
		// d10_angle = R1_d10_angle;
		// d11_angle = R1_d11_angle;
		
		targ_ecc = R1_targ_ecc;
		d1_ecc = R1_d1_ecc;
		d2_ecc = R1_d2_ecc;
		d3_ecc = R1_d3_ecc;
		d4_ecc = R1_d4_ecc;
		d5_ecc = R1_d5_ecc;
		d6_ecc = R1_d6_ecc;
		d7_ecc = R1_d7_ecc;
		d8_ecc = R1_d8_ecc;
		d9_ecc = R1_d9_ecc;
		d10_ecc = R1_d10_ecc;
		d11_ecc = R1_d11_ecc;
		
		targ_orient = R1_targ_orient;
		d1_orient = R1_d1_orient;
		d2_orient = R1_d2_orient;
		d3_orient = R1_d3_orient;
		d4_orient = R1_d4_orient;
		d5_orient = R1_d5_orient;
		d6_orient = R1_d6_orient;
		d7_orient = R1_d7_orient;
		d8_orient = R1_d8_orient;
		d9_orient = R1_d9_orient;
		d10_orient = R1_d10_orient;
		d11_orient = R1_d11_orient;
		}	
		
	else if (trialtype == 7) // presents random array on 1/2 of all trials, randomly chosen
		{
		
		TrialTp = 2;
		
		targ_angle = R2_targ_angle;
		d1_angle = R2_d1_angle;
		d2_angle = R2_d2_angle;
		d3_angle = R2_d3_angle;
		d4_angle = R2_d4_angle;
		d5_angle = R2_d5_angle;
		d6_angle = R2_d6_angle;
		d7_angle = R2_d7_angle;
		// d8_angle = R2_d8_angle;
		// d9_angle = R2_d9_angle;
		// d10_angle = R2_d10_angle;
		// d11_angle = R2_d11_angle;
		
		targ_ecc = R2_targ_ecc;
		d1_ecc = R2_d1_ecc;
		d2_ecc = R2_d2_ecc;
		d3_ecc = R2_d3_ecc;
		d4_ecc = R2_d4_ecc;
		d5_ecc = R2_d5_ecc;
		d6_ecc = R2_d6_ecc;
		d7_ecc = R2_d7_ecc;
		d8_ecc = R2_d8_ecc;
		d9_ecc = R2_d9_ecc;
		d10_ecc = R2_d10_ecc;
		d11_ecc = R2_d11_ecc;
		
		targ_orient = R2_targ_orient;
		d1_orient = R2_d1_orient;
		d2_orient = R2_d2_orient;
		d3_orient = R2_d3_orient;
		d4_orient = R2_d4_orient;
		d5_orient = R2_d5_orient;
		d6_orient = R2_d6_orient;
		d7_orient = R2_d7_orient;
		d8_orient = R2_d8_orient;
		d9_orient = R2_d9_orient;
		d10_orient = R2_d10_orient;
		d11_orient = R2_d11_orient;
		
		}	
	else if (trialtype == 8) // presents random array on 1/2 of all trials, randomly chosen
		{
		
		TrialTp = 2;
		
		targ_angle = R3_targ_angle;
		d1_angle = R3_d1_angle;
		d2_angle = R3_d2_angle;
		d3_angle = R3_d3_angle;
		d4_angle = R3_d4_angle;
		d5_angle = R3_d5_angle;
		d6_angle = R3_d6_angle;
		d7_angle = R3_d7_angle;
		// d8_angle = R3_d8_angle;
		// d9_angle = R3_d9_angle;
		// d10_angle = R3_d10_angle;
		// d11_angle = R3_d11_angle;
		
		targ_ecc = R3_targ_ecc;
		d1_ecc = R3_d1_ecc;
		d2_ecc = R3_d2_ecc;
		d3_ecc = R3_d3_ecc;
		d4_ecc = R3_d4_ecc;
		d5_ecc = R3_d5_ecc;
		d6_ecc = R3_d6_ecc;
		d7_ecc = R3_d7_ecc;
		d8_ecc = R3_d8_ecc;
		d9_ecc = R3_d9_ecc;
		d10_ecc = R3_d10_ecc;
		d11_ecc = R3_d11_ecc;
		
		targ_orient = R3_targ_orient;
		d1_orient = R3_d1_orient;
		d2_orient = R3_d2_orient;
		d3_orient = R3_d3_orient;
		d4_orient = R3_d4_orient;
		d5_orient = R3_d5_orient;
		d6_orient = R3_d6_orient;
		d7_orient = R3_d7_orient;
		d8_orient = R3_d8_orient;
		d9_orient = R3_d9_orient;
		d10_orient = R3_d10_orient;
		d11_orient = R3_d11_orient;
		}			
	else if (trialtype == 9) // presents random array on 1/2 of all trials, randomly chosen
		{
		
		TrialTp = 2;
		
		targ_angle = R4_targ_angle;
		d1_angle = R4_d1_angle;
		d2_angle = R4_d2_angle;
		d3_angle = R4_d3_angle;
		d4_angle = R4_d4_angle;
		d5_angle = R4_d5_angle;
		d6_angle = R4_d6_angle;
		d7_angle = R4_d7_angle;
		// d8_angle = R4_d8_angle;
		// d9_angle = R4_d9_angle;
		// d10_angle = R4_d10_angle;
		// d11_angle = R4_d11_angle;
		
		targ_ecc = R4_targ_ecc;
		d1_ecc = R4_d1_ecc;
		d2_ecc = R4_d2_ecc;
		d3_ecc = R4_d3_ecc;
		d4_ecc = R4_d4_ecc;
		d5_ecc = R4_d5_ecc;
		d6_ecc = R4_d6_ecc;
		d7_ecc = R4_d7_ecc;
		d8_ecc = R4_d8_ecc;
		d9_ecc = R4_d9_ecc;
		d10_ecc = R4_d10_ecc;
		d11_ecc = R4_d11_ecc;
		
		targ_orient = R4_targ_orient;
		d1_orient = R4_d1_orient;
		d2_orient = R4_d2_orient;
		d3_orient = R4_d3_orient;
		d4_orient = R4_d4_orient;
		d5_orient = R4_d5_orient;
		d6_orient = R4_d6_orient;
		d7_orient = R4_d7_orient;
		d8_orient = R4_d8_orient;
		d9_orient = R4_d9_orient;
		d10_orient = R4_d10_orient;
		d11_orient = R4_d11_orient;
		}		
	else if (trialtype == 10) // presents random array on 1/2 of all trials, randomly chosen
		{
		
		TrialTp = 2;
		
		targ_angle = R5_targ_angle;
		d1_angle = R5_d1_angle;
		d2_angle = R5_d2_angle;
		d3_angle = R5_d3_angle;
		d4_angle = R5_d4_angle;
		d5_angle = R5_d5_angle;
		d6_angle = R5_d6_angle;
		d7_angle = R5_d7_angle;
		// d8_angle = R5_d8_angle;
		// d9_angle = R5_d9_angle;
		// d10_angle = R5_d10_angle;
		// d11_angle = R5_d11_angle;
		
		targ_ecc = R5_targ_ecc;
		d1_ecc = R5_d1_ecc;
		d2_ecc = R5_d2_ecc;
		d3_ecc = R5_d3_ecc;
		d4_ecc = R5_d4_ecc;
		d5_ecc = R5_d5_ecc;
		d6_ecc = R5_d6_ecc;
		d7_ecc = R5_d7_ecc;
		d8_ecc = R5_d8_ecc;
		d9_ecc = R5_d9_ecc;
		d10_ecc = R5_d10_ecc;
		d11_ecc = R5_d11_ecc;
		
		targ_orient = R5_targ_orient;
		d1_orient = R5_d1_orient;
		d2_orient = R5_d2_orient;
		d3_orient = R5_d3_orient;
		d4_orient = R5_d4_orient;
		d5_orient = R5_d5_orient;
		d6_orient = R5_d6_orient;
		d7_orient = R5_d7_orient;
		d8_orient = R5_d8_orient;
		d9_orient = R5_d9_orient;
		d10_orient = R5_d10_orient;
		d11_orient = R5_d11_orient;
		}			
	else if (trialtype == 11) // presents random array on 1/2 of all trials, randomly chosen
		{
		
		TrialTp = 2;
		
		targ_angle = R6_targ_angle;
		d1_angle = R6_d1_angle;
		d2_angle = R6_d2_angle;
		d3_angle = R6_d3_angle;
		d4_angle = R6_d4_angle;
		d5_angle = R6_d5_angle;
		d6_angle = R6_d6_angle;
		d7_angle = R6_d7_angle;
		// d8_angle = R6_d8_angle;
		// d9_angle = R6_d9_angle;
		// d10_angle = R6_d10_angle;
		// d11_angle = R6_d11_angle;
		
		targ_ecc = R6_targ_ecc;
		d1_ecc = R6_d1_ecc;
		d2_ecc = R6_d2_ecc;
		d3_ecc = R6_d3_ecc;
		d4_ecc = R6_d4_ecc;
		d5_ecc = R6_d5_ecc;
		d6_ecc = R6_d6_ecc;
		d7_ecc = R6_d7_ecc;
		d8_ecc = R6_d8_ecc;
		d9_ecc = R6_d9_ecc;
		d10_ecc = R6_d10_ecc;
		d11_ecc = R6_d11_ecc;
		
		targ_orient = R6_targ_orient;
		d1_orient = R6_d1_orient;
		d2_orient = R6_d2_orient;
		d3_orient = R6_d3_orient;
		d4_orient = R6_d4_orient;
		d5_orient = R6_d5_orient;
		d6_orient = R6_d6_orient;
		d7_orient = R6_d7_orient;
		d8_orient = R6_d8_orient;
		d9_orient = R6_d9_orient;
		d10_orient = R6_d10_orient;
		d11_orient = R6_d11_orient;
		}
}		
		__HEADER__
SEND_TTL.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// Set TTLs to a value denoting a stobed event, wait 100 micro seconds so plexon can pick it up, 
// and then set the values back 0
// value  = 0 to 32767 (signed 16 bit so in theory negative works too but not used here).
// NOTE: Two problems may arise when sending TTLs.  First, TTLs may be sent 
// too quickly for plexon to keep up and plexon may drop them.  This won't
// result in any errors you can see.  Second, too much time may be allotted
// to individual TTLs causing more time to be allotted to TTLs than is possible
// on a process cycle.  This will result in buffer overflow messages in TEMPO.
// The balance between too little time and too much time is struck by 1) the 
// number of micro seconds allotted to each TTL, 2) the number of TTLs sent
// per process cycle, and 3) the amount of other stuff you allow to happen while
// TTLs are being sent.  In rig 028 I have found that 100 microseconds between TTLs
// and 5 TTLs per process cycle results in zero drops and zero overflows AS LONG AS
// I HAVE APPROPRIATELY PLACED nextticks IN AREAS OF HEAVY TTL VOLUME.  That way
// other processes (e.g. rdx communication) don't use up all of the buffer while I am
// trying to strobe.  All of this may depend on plexon settings that I am 
// currently unaware of, and tests should be performed in each rig to find 
// appropriate parameters.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

#include C:/TEMPO/ProcLib/WAIT_MU.pro

declare SEND_TTL(int value);

/* process SEND_TTL(int value)
	{
	int byteA, byteB;
		
	byteA = value & 0xFF;
	byteB = (value >> 8) 0x3F;

	write port A <- byteA;
	write port B <- byteB | 0x80;
	wait 100 usec
	write port B <- byteB | 0x80;

	wait 100 uSec
 } */

 
 process SEND_TTL(int value)
	{	
	declare int output = 1;
	int shiftVal;
	
	//printf("Sending value: %d\n",value);
	
	dioSetMode(output, PORTA|PORTB|PORTC);			// set ports A, B, and C to send strobes (output)

	// TDT doesn't want to recognize odd values (as of 7/5/16 - KL), but luckily...
	// 4 digit event codes can be represented with 14 bits (of 16 available by TDT)
	// A solution? bit-shift the value so that the event code takes ups bits 2-15, which should be decodable...
	
	shiftVal = value << 1;
	
	dioSetA(output, shiftVal & 0xFF);
	dioSetB(output, (shiftVal >> 8) | 0x80);
	
	//The commented section is the ideal form, without this shifting nonsense
	//dioSetA(output, value & 0xFF);				// load the low 8 bits on port A
	//dioSetB(output, (value >> 8) | 0x80); //& 0x3F);				// load the high 8 bits on port B
	
	
	spawnwait WAIT_MU(100);							// wait 100 micro seconds to avoid losing events
		
	dioSetA(output, ~0xFF);
	dioSetB(output, ~0xFF);
	} 

	
/* process SEND_TTL(int value)
	{	
	declare int output = 1;

	dioSetMode(output, PORTA|PORTB|PORTC);			// set ports A, B, and C to send strobes (output)

	dioSetA(output, (value & 0xFF ));				// load the low 8 bits on port A
	dioSetB(output, (value>>8) | 0x80);				// load the high 8 bits on port B
	dioSetC(output, 0x01);							// set port C to flag telling plexon strobe is happening
													// (this may not be necessary if plexon is configured in...
													// ...a different way)	
	spawnwait WAIT_MU(100);							// wait 100 micro seconds to avoid losing events
		
	dioSetA(output, (0x0 & 0xFF));					// set port A back to 0
	dioSetB(output, (0x0 & 0x7F));					// I don't know why this is set to 01110000 (this is copied from Pierre's code)
	dioSetC(output, 0x00);							// set port C back to 0
	} */__HEADER__
SET_CLRS.pro
__FOOTER__
// This sets all of the colors up which will be needed for the protocol based on user input
// specified elsewhere
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare SET_CLRS(n_targ_pos);

process SET_CLRS(n_targ_pos)
	{
	declare hide int color_num,r_, g_, b_;
	r_ = 0; g_ = 1; b_ = 2;
	
	color_num = 0;
		
	while (color_num <=  n_targ_pos)				// set each target color to the matching color number 
		{
		dsendf("cm %d %d %d %d;\n",
						color_num + 1,				// 0 remains black
						Color_list[color_num,r_],	// GLOBAL ALERT; Color_list is an array so it cannot be passed
						Color_list[color_num,g_],
						Color_list[color_num,b_]);
		color_num = color_num + 1;
		nexttick;									// if we have a large number of targets we don't want to overflow the buffer
		}
	
		// if (expo_jitter_soa == 0) 
		// {
		// Fixation_color[r_]		= 0;
		// Fixation_color[g_]		= 36;
		// Fixation_color[b_]		= 0;
		// }
		// else if (expo_jitter_soa == 1)
		// {
		// Fixation_color[r_]		= 0;
		// Fixation_color[g_]		= 0;
		// Fixation_color[b_]		= 59;
		// }
	
	// Following code is specific to search task singleton color
	
	if (SingCol == 0) // Red
		{
		Singleton_color[r_]		= 63;	
		Singleton_color[g_]		= 0;	
		Singleton_color[b_]		= 0;
		}
	else if (SingCol == 1) // Green
		{
		Singleton_color[r_]		= 0;	
		Singleton_color[g_]		= 36;	
		Singleton_color[b_]		= 0;
		}
	else if (SingCol == 2) // Blue
		{
		Singleton_color[r_]		= 0;	
		Singleton_color[g_]		= 0;	
		Singleton_color[b_]		= 59;
		}		
	else if (SingCol == 3) // Yellow
		{
		Singleton_color[r_]		= 100;	
		Singleton_color[g_]		= 100;	
		Singleton_color[b_]		= 0;
		}	
	else if (SingCol == 4) // Magenta
		{
		Singleton_color[r_]		= 255;	
		Singleton_color[g_]		= 33;	
		Singleton_color[b_]		= 255;
		}

	
	dsendf("cm 255 %d %d %d;\n",					// set the color of the fixation point to 255 (leaves room for many target colors)
						Fixation_color[r_],			// GLOBAL ALERT; Fixation_color is an array so it cannot be passed
	                    Fixation_color[g_],
						Fixation_color[b_]);
	
	dsendf("cm 254 %d %d %d;\n",					// set the color of the fixation point to 255 (leaves room for many target colors)
						Stop_sig_color[r_],			// GLOBAL ALERT; Fixation_color is an array so it cannot be passed
	                    Stop_sig_color[g_],
						Stop_sig_color[b_]);					
	
	dsendf("cm 253 %d %d %d;\n",					// set the color of the fixation point to 255 (leaves room for many target colors)
						Ignore_sig_color[r_],		// GLOBAL ALERT; Fixation_color is an array so it cannot be passed
	                    Ignore_sig_color[g_],
						Ignore_sig_color[b_]);
						
	dsendf("cm 252 %d %d %d;\n",					// set the color of the fixation point to 255 (leaves room for many target colors)
						Mask_sig_color[r_],		// GLOBAL ALERT; Fixation_color is an array so it cannot be passed
	                    Mask_sig_color[g_],
						Mask_sig_color[b_]);
	
	dsendf("cm 251 %d %d %d;\n",					// set the color of the fixation point to 255 (leaves room for many target colors)
						Singleton_color[r_],			// GLOBAL ALERT; Fixation_color is an array so it cannot be passed
	                    Singleton_color[g_],
						Singleton_color[b_]);

	dsendf("cm 250 %d %d %d;\n",					// set the color of the fixation point to 255 (leaves room for many target colors)
						NonSingleton_color[r_],			// GLOBAL ALERT; Fixation_color is an array so it cannot be passed
	                    NonSingleton_color[g_],
						NonSingleton_color[b_]);						
	}__HEADER__
SET_COOR.pro
__FOOTER__
//------------------------------------------------------------------------
// process SET_COOR(float scr_width, float scr_height, float subj_dist);
// determine virtual coordiates in degrees based on screen size and 
// subject distance to the screen
// NOTE 1:  all measurements must be in the same units (doesn't matter what units).
// NOTE 2:  accuracy (and hence step size of stimuli) is in 0.1 degree incriments
// NOTE 3:  since accuracy is in 0.1 degree incriments, input measurements must 
// 			have corresponding resolution (this depends on distance from screen)
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011


declare hide float Deg2Pix_X;
declare hide float Deg2Pix_Y; 
declare hide float Unit2Pix_X;
declare hide float Unit2Pix_Y;
						/*OUTPUT: these conversion factors will be used throughout protocol when drawing
				         (this is necessary b/c unless you are really careful with virtual coordinates
				         you wil end up with stimuli which are slightly off, and what is the point of 
				         using virtual coordinates if you have to be super careful about it?)*/
		  
				 
declare SET_COOR(float scr_width,						// see RIGSETUP.pro for variable explanation
				float scr_height, 
				float subj_dist, 
				int scr_pixX, 
				int scr_pixY);

process SET_COOR(float scr_width, 						// see RIGSETUP.pro for variable explanation
				float scr_height, 
				float subj_dist, 
				int scr_pixX, 
				int scr_pixY)
	{
	
	declare hide float half_width;  
	declare hide float half_height; 	
	declare hide float deg_x;
	declare hide float deg_y; 
	
	// get half of screen size
	half_width  = scr_width / 2;  						// right now we are thinking about cm, inches, mm, or whatever you measured in
	half_height = scr_height / 2;
	
	// figure out dimensions in degrees
	deg_x  = rad2deg(atan (half_width / subj_dist)); 	//tangent(theta) = opposite/adjacent
	deg_y  = rad2deg(atan (half_height / subj_dist));
	
	// get half of screen size in pixels
	half_width  = scr_pixX / 2;  						// now we are thinking about pixels
	half_height = scr_pixY / 2;
	
	// set screen in pixel coordinates with the origin in center
	dsendf("vc %d, %d, %d, %d\n",-1*half_width,half_width,half_height,-1*half_height);
	
	Deg2Pix_X = half_width/deg_x;
	Deg2Pix_Y = half_height/deg_y;
	
	Unit2Pix_X = scr_pixX/scr_width;
	Unit2Pix_Y = scr_pixY/scr_height;
	
	}__HEADER__
SET_INH.pro
__FOOTER__
// Sets up Inhibition function graph for cmanding 
// NOTE: GRAPHS.pro or OBJECT.pro needs to have been run already
// to set up globals.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare FirstStopTrial = 1; 								// GLOBAL ALERT; Lets UPD8_INH.pro know to reset counters

declare hide object_ssd0 ;
declare hide object_ssd1 ;
declare hide object_ssd2 ;
declare hide object_ssd3 ;
declare hide object_ssd4 ;
declare hide object_ssd5 ;
declare hide object_ssd6 ;
declare hide object_ssd7 ;
declare hide object_ssd8 ;
declare hide object_ssd9 ;
declare hide object_ssd10;
declare hide object_ssd11;
declare hide object_ssd12;
declare hide object_ssd13;
declare hide object_ssd14;
declare hide object_ssd15;
declare hide object_ssd16;
declare hide object_ssd17;
declare hide object_ssd18;
declare hide object_ssd19;
declare hide object_30_70;

declare SET_INH(int max_ssd, 
				int min_ssd,
				int n_ssds);

process SET_INH(int max_ssd, 
				int min_ssd,
				int n_ssds)
	{
	declare int ssd_range;
	declare int inh_left;
	declare int inh_right;
	declare int inh_box_size;
	
	FirstStopTrial = 1;											// GLOBAL ALERT; Lets UPD8_INH.pro know to reset counters

	ssd_range = (max_ssd - min_ssd) * 1000;
	
	oSetGraph(gRIGHT, aCLEAR);
	
	if (min_ssd == max_ssd)
		{
		ssd_range = 200000;
		}
		
	inh_left = (min_ssd * 1000) - (ssd_range/40);
	inh_right = (max_ssd * 1000) + (ssd_range/40);
	
	oSetGraph(gRIGHT,   										// Object graph virt. coord
			aRANGE, 
			inh_left,  		
			inh_right,
			1025, 
			-25);			

	inh_box_size = (ssd_range/20);		
	
	oSetGraph(gRIGHT, aTITLE, "*** INHIBITION FUNCTION ***");	// Graph title
	
	object_ssd0 = oCreate(tBOX, gRIGHT, inh_box_size, 50);		// Create SSD object (20 is max b/c defaults.  could be changed.)
    oSetAttribute(object_ssd0, aINVISIBLE);						// Not visible yet
	
	object_ssd1 = oCreate(tBOX, gRIGHT, inh_box_size, 50);		// Create SSD object
    oSetAttribute(object_ssd1, aINVISIBLE);						// Not visible yet
	
	object_ssd2 = oCreate(tBOX, gRIGHT, inh_box_size, 50);		// Create SSD object
    oSetAttribute(object_ssd2, aINVISIBLE);						// Not visible yet
	
	object_ssd3 = oCreate(tBOX, gRIGHT, inh_box_size, 50);		// Create SSD object
    oSetAttribute(object_ssd3, aINVISIBLE);						// Not visible yet
	
	object_ssd4 = oCreate(tBOX, gRIGHT, inh_box_size, 50);		// Create SSD object
    oSetAttribute(object_ssd4, aINVISIBLE);						// Not visible yet
	
	object_ssd5 = oCreate(tBOX, gRIGHT, inh_box_size, 50);		// Create SSD object
    oSetAttribute(object_ssd5, aINVISIBLE);						// Not visible yet
	
	object_ssd6 = oCreate(tBOX, gRIGHT, inh_box_size, 50);		// Create SSD object
    oSetAttribute(object_ssd6, aINVISIBLE);						// Not visible yet
	
	object_ssd7 = oCreate(tBOX, gRIGHT, inh_box_size, 50);		// Create SSD object
    oSetAttribute(object_ssd7, aINVISIBLE);						// Not visible yet
	
	object_ssd8 = oCreate(tBOX, gRIGHT, inh_box_size, 50);		// Create SSD object
    oSetAttribute(object_ssd8, aINVISIBLE);						// Not visible yet
	
	object_ssd9 = oCreate(tBOX, gRIGHT, inh_box_size, 50);		// Create SSD object
    oSetAttribute(object_ssd9, aINVISIBLE);						// Not visible yet
	
	object_ssd10 = oCreate(tBOX, gRIGHT, inh_box_size, 50);	// Create SSD object
    oSetAttribute(object_ssd10, aINVISIBLE);						// Not visible yet
	
	object_ssd11 = oCreate(tBOX, gRIGHT, inh_box_size, 50);	// Create SSD object
    oSetAttribute(object_ssd11, aINVISIBLE);						// Not visible yet
	
	object_ssd12 = oCreate(tBOX, gRIGHT, inh_box_size, 50);	// Create SSD object
    oSetAttribute(object_ssd12, aINVISIBLE);						// Not visible yet
	
	object_ssd13 = oCreate(tBOX, gRIGHT, inh_box_size, 50);	// Create SSD object
    oSetAttribute(object_ssd13, aINVISIBLE);						// Not visible yet
	
	object_ssd14 = oCreate(tBOX, gRIGHT, inh_box_size, 50);	// Create SSD object
    oSetAttribute(object_ssd14, aINVISIBLE);						// Not visible yet
	
	object_ssd15 = oCreate(tBOX, gRIGHT, inh_box_size, 50);	// Create SSD object
    oSetAttribute(object_ssd15, aINVISIBLE);						// Not visible yet
	
	object_ssd16 = oCreate(tBOX, gRIGHT, inh_box_size, 50);	// Create SSD object
    oSetAttribute(object_ssd16, aINVISIBLE);						// Not visible yet
	
	object_ssd17 = oCreate(tBOX, gRIGHT, inh_box_size, 50);	// Create SSD object
    oSetAttribute(object_ssd17, aINVISIBLE);						// Not visible yet
	
	object_ssd18 = oCreate(tBOX, gRIGHT, inh_box_size, 50);	// Create SSD object
    oSetAttribute(object_ssd18, aINVISIBLE);						// Not visible yet
	
	object_ssd19 = oCreate(tBOX, gRIGHT, inh_box_size, 50);	// Create SSD object
    oSetAttribute(object_ssd19, aINVISIBLE);						// Not visible yet
	
	object_30_70 = oCreate(tBOX, gRIGHT,inh_right, 400);	// Create SSD object
    oSetAttribute(object_30_70, aVISIBLE, aUNFILLED);
	oMOVE(object_30_70,inh_left + ((inh_right - inh_left) / 2), 500);
	
	}__HEADER__
SET_SCH.pro
__FOOTER__
// Sets up graph for search
// NOTE: GRAPHS.pro or OBJECT.pro needs to have been run already
// to set up globals.
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013

declare FirstSearchTrial = 1; 								// GLOBAL ALERT; Lets UPD8_SCH.pro know to reset counters

declare hide object_repeat;
declare hide object_random;

declare SET_SCH();

process SET_SCH()
	{
	FirstSearchTrial = 1;											// GLOBAL ALERT; Lets UPD8_SCH.pro know to reset counters

	oSetGraph(gRIGHT, aCLEAR);
	
	oSetGraph(gRIGHT,   										// Object graph virt. coord, 4 variables following aRANGE are xmin, xmax, ymin, ymax
			aRANGE, 
			-1000,  		
			1000,
			-1000, 
			1000);			

		
	
	oSetGraph(gRIGHT, aTITLE, "*** Repeat vs. Random Display Search RT ***");	// Graph title
	
	object_repeat = oCreate(tBOX, gRIGHT, 100, 100);		// Create repeat object 3rd argument width, 4th is height
    oSetAttribute(object_repeat, aINVISIBLE);						// Not visible yet
	
	object_random = oCreate(tBOX, gRIGHT, 100, 100);		// Create random object 3rd argument width, 4th is height
    oSetAttribute(object_random, aINVISIBLE);						// Not visible yet
		
	}__HEADER__
SET_SOA.pro
__FOOTER__
declare FirstSOATrial = 1; 								// GLOBAL ALERT; Lets UPD8_INH.pro know to reset counters

declare hide object_soa0;
declare hide object_soa1;
declare hide object_soa2;
declare hide object_soa3;
declare hide object_soa4;
declare hide object_soa5;
declare hide object_soa6;
declare hide object_soa7;
declare hide object_soa8;
declare hide object_soa9;
declare hide object_soa10;
declare hide object_soa11;
declare hide object_soa12;
declare hide object_soa13;
declare hide object_soa14;
declare hide object_soa15;
declare hide object_soa16;
declare hide object_soa17;
declare hide object_soa18;
declare hide object_soa19;
declare hide object_30_70;

declare SET_SOA(int max_soa, 
				int min_soa,
				int n_soas);

process SET_SOA(int max_soa, 
				int min_soa,
				int n_soas)
	{
	declare int soa_range;
	declare int soa_left;
	declare int soa_right;
	declare int soa_box_size;
//	declare int n_soas;
	
	
	FirstSOATrial = 1;											// GLOBAL ALERT; Lets UPD8_INH.pro know to reset counters

	soa_range = (max_soa - min_soa);
	
	oSetGraph(gRIGHT, aCLEAR);
	
	if (min_soa == max_soa)
		{
		soa_range = 200000;
		}
		
	soa_left = 500;
	soa_right = 1500;
	print("x axis = %d\n",soa_left);
	print("y axis = %d\n",soa_right);
	oSetGraph(gRIGHT,   										// Object graph virt. coord
			aRANGE, 
			soa_left,  		
			soa_right,
			500, 
			100);			

	soa_box_size = 15;	
	
	oSetGraph(gRIGHT, aTITLE, "*** SOA FUNCTION ***");	// Graph title
	
	object_soa0 = oCreate(tBOX, gRIGHT, soa_box_size, 15);		// Create SSD object (20 is max b/c defaults.  could be changed.)
    oSetAttribute(object_soa0, aVISIBLE);						// Not visible yet
	
	object_soa1 = oCreate(tBOX, gRIGHT, soa_box_size, 15);		// Create SSD object
    oSetAttribute(object_soa1, aINVISIBLE);						// Not visible yet
	
	object_soa2 = oCreate(tBOX, gRIGHT, soa_box_size, 15);		// Create SSD object
    oSetAttribute(object_soa2, aINVISIBLE);						// Not visible yet
	
	object_soa3 = oCreate(tBOX, gRIGHT, soa_box_size, 15);		// Create SSD object
    oSetAttribute(object_soa3, aINVISIBLE);						// Not visible yet
	
	object_soa4 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa4, aINVISIBLE);						// Not visible yet
	
	object_soa5 = oCreate(tBOX, gRIGHT, soa_box_size, 15);		// Create SSD object
    oSetAttribute(object_soa5, aINVISIBLE);						// Not visible yet
	
	object_soa6 = oCreate(tBOX, gRIGHT, soa_box_size, 15);		// Create SSD object
    oSetAttribute(object_soa6, aINVISIBLE);						// Not visible yet
	
	object_soa7 = oCreate(tBOX, gRIGHT, soa_box_size, 15);		// Create SSD object
    oSetAttribute(object_soa7, aINVISIBLE);						// Not visible yet
	
	object_soa8 = oCreate(tBOX, gRIGHT, soa_box_size, 15);		// Create SSD object
    oSetAttribute(object_soa8, aINVISIBLE);						// Not visible yet
	
	object_soa9 = oCreate(tBOX, gRIGHT, soa_box_size, 15);		// Create SSD object
    oSetAttribute(object_soa9, aINVISIBLE);						// Not visible yet
	
	object_soa10 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa10, aINVISIBLE);						// Not visible yet
	
	object_soa11 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa11, aINVISIBLE);						// Not visible yet
	
	object_soa12 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa12, aINVISIBLE);						// Not visible yet
	
	object_soa13 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa13, aINVISIBLE);						// Not visible yet
	
	object_soa14 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa14, aINVISIBLE);						// Not visible yet
	
	object_soa15 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa15, aINVISIBLE);						// Not visible yet
	
	object_soa16 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa16, aINVISIBLE);						// Not visible yet
	
	object_soa17 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa17, aINVISIBLE);						// Not visible yet
	
	object_soa18 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa18, aINVISIBLE);						// Not visible yet
	
	object_soa19 = oCreate(tBOX, gRIGHT, soa_box_size, 15);	// Create SSD object
    oSetAttribute(object_soa19, aINVISIBLE);						// Not visible yet
	
	//object_30_70 = oCreate(tBOX, gRIGHT,soa_right, 200);	// Create SSD object
    //oSetAttribute(object_30_70, aVISIBLE, aUNFILLED);
	//oMOVE(object_30_70,soa_left + ((soa_right - soa_left) / 2), 100);
	}
	__HEADER__
SETC_TRL.pro
__FOOTER__
//-----------------------------------------------------------------------------------
// process SETC_TRL(int n_targ_pos,
				// float go_weight,
				// float stop_weight,
				// float ignore_weight,
				// int stop_sig_color,
				// int ignore_sig_color,
				// int staircase,
				// int n_SSDs,
				// int min_holdtime,
				// int max_holdtime,
				// int expo_jitter);
// Calculates all variables needed to run a countermanding trial based on user defined
// space.  See DEFAULT.pro and ALL_VARS.pro for an explanation of the global input variables
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

#include C:/TEMPO/ProcLib/CMD_PGS.pro						// sets all pgs of video memory up for the impending trial
#include C:/TEMPO/ProcLib/STAIR.pro							// staircases the SSD based on the last stop trial outcome

declare hide int Curr_target;								// OUTPUT: next trial target
declare hide int Sig_color;									// next signal color (could be either stop or ignore)
declare hide int Trl_type;									// stop, go, or ignore
declare hide int Curr_SSD;									// SSD on next stop or ignore trial
declare hide int Curr_holdtime;								// next trial time between fixation and target onset
declare hide int Decide_SSD;
 
declare hide int constant Go_trl 		= 0;				// label these so they are easier to read below
declare hide int constant Stop_trl 		= 1;				// label these so they are easier to read below
declare hide int constant Ignore_trl 	= 2;				// label these so they are easier to read below

declare SETC_TRL(int n_targ_pos,							// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				float go_weight,
				float stop_weight,
				float ignore_weight,
				int staircase,
				int n_SSDs,
				int min_holdtime,
				int max_holdtime,
				int expo_jitter);

process SETC_TRL(int n_targ_pos,							// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				float go_weight,
				float stop_weight,
				float ignore_weight,
				int staircase,
				int n_SSDs,
				int min_holdtime,
				int max_holdtime,
				int expo_jitter)
	{
	
	declare hide float decide_trl_type; 							
	declare hide float per_jitter, jitter, decide_jitter, holdtime_diff;
	declare hide int fixation_color 			= 255;			// see SET_CLRS.pro
	declare hide int stop_sig_color 			= 254;			// see SET_CLRS.pro
	declare hide int ignore_sig_color 			= 253;			// see SET_CLRS.pro
	declare hide int constant nogo_correct		= 4;			// code for successfully canceled trial (see CMDTRIAL.pro)
	declare hide int constant go_correct		= 7;			// code for correct saccade on a go trial (see CMDTRIAL.pro)
	declare hide int ii;
	
	
	// -----------------------------------------------------------------------------------------------
	// Update block; trls per block set in DEFAULT.pro
	if (Correct_trls == Trls_per_block)								// if we have completed the number of correct trials needed per block
		{
		Block_number = Block_number + 1;						// incriment Block_number for strobing in INFOS.pro
		Correct_trls = 0;										// reset the block counter
		}													// 	COULD WEIGHT THIS IF NEED BE (see logic below)
	
	
	// -----------------------------------------------------------------------------------------------
	// 2) Pick a trial type
															// Pick a number and then assess user defined weights to see what type of trial will be presented.
	decide_trl_type = (1.0 + random(9999)) / 100.0;			// random number from 1-100
															// Think of the if statement below as a number line with user defined divisions (weights).
	if (decide_trl_type <= go_weight)						// If we are on the left of the number line...
		{
		Trl_type = Go_Trl;									// ...its a go trial.
		}
	else if (decide_trl_type > go_weight 
			&& decide_trl_type <= go_weight + stop_weight)	// If we are in the middle of the number line...
		{
		Trl_type  = Stop_Trl;								// ...it is a stop trial, and...
		Sig_color = stop_sig_color;							// ...the signal color will reflect this fact.
		}
	else													// Else we must be on the right of the number line.
		{													// NOTE: based on user input, ignore trials may not... 
		Trl_type  = Ignore_Trl;								// ...exist and the number line may not have anything... 
		Sig_color = ignore_sig_color;						// ...to the right of stop_weights.  (Same holds for...
		}													// ...stop trials above.
		
	if (Classic)											// We are emulating the old stop signal task
		{
		Sig_color = Fixation_Color;							// the stop signal is just the fixation point coming back on.
		}
	
	// -----------------------------------------------------------------------------------------------
	// 3) Set up all vdosync pages for the upcoming trial using globals defined by user and setc_trl
	spawnwait CMD_PGS(curr_target,							// set above
				fixation_size, 								// see DEFAULT.pro and ALL_VARS.pro
				fixation_color, 							// see SET_CLRS.pro
				sig_color, 									// see DEFAULT.pro and ALL_VARS.pro
				scr_width, 									// see RIGSETUP.pro
				scr_height, 								// see RIGSETUP.pro
				pd_left, 									// see RIGSETUP.pro
				pd_bottom, 									// see RIGSETUP.pro
				pd_size,									// see RIGSETUP.pro
				deg2pix_X,									// see SET_COOR.pro
				deg2pix_Y,									// see SET_COOR.pro
				unit2pix_X,									// see SET_COOR.pro
				unit2pix_Y,									// see SET_COOR.pro
				object_targ);								// see GRAPHS.pro
				
	

	// -----------------------------------------------------------------------------------------------
	// 4) Set Up Target and Fixation Windows and plot them on animated graphs
	spawnwait WINDOWS(curr_target,							// see above
				fix_win_size,								// see DEFAULT.pro and ALL_VARS.pro
				targ_win_size,								// see DEFAULT.pro and ALL_VARS.pro
				object_fixwin,								// animated graph object
				object_targwin,								// animated graph object
				deg2pix_X,									// see SET_COOR.pro
	            deg2pix_Y);                                 // see SET_COOR.pro
					
	
	// -----------------------------------------------------------------------------------------------
	// 6) Select current holdtime
	
	holdtime_diff = max_holdtime - min_holdtime;
	if (expo_jitter)
		{		
		decide_jitter 	= (random(1001))/1000.0;				
		per_jitter 		= exp(-1.0*(decide_jitter/0.25));	
		}
	else
		{
		per_jitter 	= random(1001) / 1000.0;				// random number 0-100 (percentages)
		}
	jitter 			= holdtime_diff * per_jitter;
	Curr_holdtime 	= round(min_holdtime + jitter);
		
	}
	
	
	__HEADER__
SETD_TRL.pro
__FOOTER__
//Modified by Namsoo	5/23/2012

#include C:/TEMPO/ProcLib/DEL_PGS.pro						// sets all pgs of video memory up for the impending trial

declare hide int Curr_target;								// OUTPUT: next trial target
declare hide int Curr_holdtime;								// next trial time between fixation and target onset
declare hide int Curr_soa;									// next trial time between target onset and fixation offset
declare hide int soa;
//declare hide int SOA_list[11];

declare SETD_TRL(int n_targ_pos,							// see DEFAULT.pro and M_VARS.pro for explanations of these globals
				int min_holdtime,
				int max_holdtime,
				int expo_jitter,
				int min_soa,
				int max_soa,
				int expo_jitter_soa);

process SETD_TRL(int n_targ_pos,							// see DEFAULT.pro and M_VARS.pro for explanations of these globals
				int min_holdtime,
				int max_holdtime,
				int expo_jitter,
				int min_soa,
				int max_soa,
				int expo_jitter_soa)
	{
	
	declare hide float per_jitter, jitter, decide_jitter, holdtime_diff, soa_diff;
	declare hide int fixation_color 	= 255;				// see SET_CLRS.pro
	
	
	// -----------------------------------------------------------------------------------------------
	// 1) Pick a target

	Curr_target = random(n_targ_pos);						// 	COULD WEIGHT THIS IF NEED BE (see logic below)
	


	
	// -----------------------------------------------------------------------------------------------
	// 2) Set up all vdosync pages for the upcoming trial using globals defined by user and setc_trl
	spawnwait DEL_PGS(curr_target,							// set above
				fixation_size, 								// see DEFAULT.pro and ALL_VARS.pro
				fixation_color, 							// see SET_CLRS.pro
				scr_width, 									// see RIGSETUP.pro
				scr_height, 								// see RIGSETUP.pro
				pd_left, 									// see RIGSETUP.pro
				pd_bottom, 									// see RIGSETUP.pro
				pd_size,									// see RIGSETUP.pro
				deg2pix_X,									// see SET_COOR.pro
				deg2pix_Y,									// see SET_COOR.pro
				unit2pix_X,									// see SET_COOR.pro
				unit2pix_Y,									// see SET_COOR.pro
				object_targ);								// see GRAPHS.pro
		
		
	

	// -----------------------------------------------------------------------------------------------
	// 3) Set Up Target and Fixation Windows and plot them on animated graphs
	spawnwait WINDOWS(curr_target,							// see above
				fix_win_size,								// see DEFAULT.pro and ALL_VARS.pro
				targ_win_size,								// see DEFAULT.pro and ALL_VARS.pro
				object_fixwin,								// animated graph object
				object_targwin,								// animated graph object
				deg2pix_X,									// see SET_COOR.pro
	            deg2pix_Y);                                 // see SET_COOR.pro
				

				
	
	// -----------------------------------------------------------------------------------------------
	// 4) Select current holdtime
	
	holdtime_diff = max_holdtime - min_holdtime;
	if (expo_jitter)
		{		
		decide_jitter 	= (random(1001))/1000.0;				
		per_jitter 		= exp(-1.0*(decide_jitter/0.25));	
		}
	else
		{
		per_jitter 	= random(1001) / 1000.0;				// random number 0-100 (percentages)
		}
	jitter 			= holdtime_diff * per_jitter;
	Curr_holdtime 	= round(min_holdtime + jitter);
	
	
	
	
	// -----------------------------------------------------------------------------------------------
	// 5) Select current soa (same logic as above)
		
	//soa_diff = max_soa - min_soa;
	
/* 	if (expo_jitter_soa)
		{		
		//	decide_jitter 	= (random(1001))/1000.0;
		//	per_jitter 		= exp(-1.0*(decide_jitter/0.25));	
		//	Curr_soa = round(-333.33 * ln(decide_jitter))+600;
		//	while (Curr_soa > 1101)
		//	{
		//		decide_jitter 	= (random(1001))/1000.0;
		//		Curr_soa = round(-333.33 * ln(decide_jitter))+600;
		//	}
		
		per_jitter = poisson(0.6);
		while (per_jitter > 5)
		{
			per_jitter = poisson(0.6);
		}
		Curr_soa = 300;//SOA_list[per_jitter];
		
		}
	else */
		{
		//per_jitter 	= random(1001) / 1000.0;				// random number 0-100 (percentages)
		//jitter 			= soa_diff * per_jitter;
		//Curr_soa 		= round(min_soa + jitter);
		
		
		//per_jitter = random(11);
		per_jitter = random(5);  //returns random number between 0 and n-1
		
		//Curr_soa = 300; 
		
		Curr_soa = SOA_list[per_jitter];
		
		
		}
	
		
	}
	
	__HEADER__
SETG_TRL.pro
__FOOTER__
//-----------------------------------------------------------------------------------
// process SETM_TRL(int n_targ_pos,
				// int min_holdtime,
				// int max_holdtime,
				// int expo_jitter,
				// int min_soa,
				// int max_soa,
				// int expo_jitter_soa);
// Calculates all variables needed to run a mem guided sacc trial based on user defined
// space.  See DEFAULT.pro and M_VARS.pro for an explanation of the global input variables
//
// written by david.c.godlove@vanderbilt.edu 	July, 2011

#include C:/TEMPO/ProcLib/GNG_PGS.pro					// sets all pgs of video memory up for the impending trial
#include C:/TEMPO/ProcLib/STAIR.pro							// staircases the SSD based on the last stop trial outcome

declare hide int Curr_target;								// OUTPUT: next trial target
declare hide int Curr_holdtime;								// next trial time between fixation and target onset
declare hide int Curr_soa;									// next trial time between target onset and fixation offset
declare hide int soa;

declare SETG_TRL(int n_targ_pos,							// see DEFAULT.pro and M_VARS.pro for explanations of these globals
				int min_holdtime,
				int max_holdtime,
				int expo_jitter,
				int min_soa,
				int max_soa,
				int expo_jitter_soa);

process SETG_TRL(int n_targ_pos,							// see DEFAULT.pro and M_VARS.pro for explanations of these globals
				int min_holdtime,
				int max_holdtime,
				int expo_jitter,
				int min_soa,
				int max_soa,
				int expo_jitter_soa)
	{
	declare hide float decide_trl_type;
	declare hide float per_jitter, jitter, decide_jitter, holdtime_diff, soa_diff;
	declare hide int fixation_color 	= 255;				// see SET_CLRS.pro
	declare hide int stop_sig_color 	= 254;				// see SET_CLRS.pro
	declare hide int ignore_sig_color 	= 253;				// see SET_CLRS.pro
	declare hide int maskcolor			= 252;
	
	declare hide int constant Go_trl 		= 0;				// label these so they are easier to read below
	declare hide int constant Stop_trl 		= 1;				// label these so they are easier to read below
	declare hide int constant Ignore_trl 	= 2;				// label these so they are easier to read below
	// -----------------------------------------------------------------------------------------------
	// 1) Pick a target
	
	Curr_target = random(n_targ_pos);						// 	COULD WEIGHT THIS IF NEED BE (see logic below)
	
	decide_trl_type = (1.0 + random(9999)) / 100.0;			// random number from 1-100
															// Think of the if statement below as a number line with user defined divisions (weights).
	if (decide_trl_type <= go_weight)						// If we are on the left of the number line...
		{
		Trl_type = Go_Trl;									// ...its a go trial.
		}
	else if (decide_trl_type > go_weight 
			&& decide_trl_type <= go_weight + stop_weight)	// If we are in the middle of the number line...
		{
		Trl_type  = Stop_Trl;								// ...it is a stop trial, and...
		Sig_color = stop_sig_color;							// ...the signal color will reflect this fact.
		}
	else 													// Else we must be on the right of the number line.
		{													// NOTE: based on user input, ignore trials may not... 
		Trl_type  = Ignore_Trl;								// ...exist and the number line may not have anything... 
		Sig_color = ignore_sig_color;						// ...to the right of stop_weights.  (Same holds for...
		}													// ...stop trials above.
		
//		
//	if (Classic)											// We are emulating the old stop signal task
//		{
//		Sig_color = Fixation_Color;							// the stop signal is just the fixation point coming back on.
//		}
	// -----------------------------------------------------------------------------------------------
	// 2) Set up all vdosync pages for the upcoming trial using globals defined by user and setc_trl
	spawnwait GNG_PGS(curr_target,							// set above
				fixation_size, 								// see DEFAULT.pro and ALL_VARS.pro
				fixation_color, 							// see SET_CLRS.pro
				sig_color,
				maskcolor,
				scr_width, 									// see RIGSETUP.pro
				scr_height, 								// see RIGSETUP.pro
				pd_left, 									// see RIGSETUP.pro
				pd_bottom, 									// see RIGSETUP.pro
				pd_size,									// see RIGSETUP.pro
				deg2pix_X,									// see SET_COOR.pro
				deg2pix_Y,									// see SET_COOR.pro
				unit2pix_X,									// see SET_COOR.pro
				unit2pix_Y,									// see SET_COOR.pro
				object_targ);								// see GRAPHS.pro
		
		
	

	// -----------------------------------------------------------------------------------------------
	// 3) Set Up Target and Fixation Windows and plot them on animated graphs
	spawnwait WINDOWS(curr_target,							// see above
				fix_win_size,								// see DEFAULT.pro and ALL_VARS.pro
				targ_win_size,								// see DEFAULT.pro and ALL_VARS.pro
				object_fixwin,								// animated graph object
				object_targwin,								// animated graph object
				deg2pix_X,									// see SET_COOR.pro
	            deg2pix_Y);                                 // see SET_COOR.pro
				

				
	
	// -----------------------------------------------------------------------------------------------
	// 4) Select current holdtime
	
	holdtime_diff = max_holdtime - min_holdtime;
	if (expo_jitter)
		{		
		decide_jitter 	= (random(1001))/1000.0;				
		per_jitter 		= exp(-1.0*(decide_jitter/0.25));	
		}
	else
		{
		per_jitter 	= random(1001) / 1000.0;				// random number 0-100 (percentages)
		}
	jitter 			= holdtime_diff * per_jitter;
	Curr_holdtime 	= round(min_holdtime + jitter);
	
	
	
	
	// -----------------------------------------------------------------------------------------------
	// 5) Select current soa (same logic as above)
	
	soa_diff = max_soa - min_soa;
	if (expo_jitter_soa)
		{		
		decide_jitter 	= (random(1001))/1000.0;
	//	per_jitter 		= exp(-1.0*(decide_jitter/0.25));	
		Curr_soa = floor((-333.33 * ln(decide_jitter)+min_soa) / 100) * 100;
		while (Curr_soa > max_soa + 1)
		{
			decide_jitter 	= (random(1001))/1000.0;
			Curr_soa = floor((-333.33 * ln(decide_jitter)+min_soa) / 100) * 100;
		}
		}
	else
		{
		per_jitter 	= random(1099) / 1000.0;				// random number 0-100 (percentages)
		jitter 			= soa_diff * per_jitter;
		Curr_soa 		= floor((min_soa + jitter) / 100) * 100;
		}
	
		
	}
	
	
	__HEADER__
SETMGTRL.pro
__FOOTER__
//-----------------------------------------------------------------------------------
// process SETC_TRL(int n_targ_pos,
				// float go_weight,
				// float stop_weight,
				// float ignore_weight,
				// int stop_sig_color,
				// int ignore_sig_color,
				// int staircase,
				// int n_SSDs,
				// int min_holdtime,
				// int max_holdtime,
				// int expo_jitter);
// Calculates all variables needed to run a countermanding trial based on user defined
// space.  See DEFAULT.pro and ALL_VARS.pro for an explanation of the global input variables
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

#include C:/TEMPO/ProcLib/MG_PGS.pro						// sets all pgs of video memory up for the impending trial
//#include C:/TEMPO/ProcLib/STAIR.pro							// staircases the SSD based on the last stop trial outcome
declare hide int StimTm;									// Should we stim on this trial?

declare hide int Curr_target;								// OUTPUT: next trial target
declare hide int Sig_color;									// next signal color (could be either stop or ignore)
declare hide int Trl_type;									// stop, go, or ignore
declare hide int Curr_holdtime;								// next trial time between fixation and target onset
declare hide int Curr_soa;
declare hide int per_jitter;
declare hide int soa_jitter;

declare hide int nogosoa;
declare hide int per_soa_jitter;

declare SETMGTRL(int n_targ_pos,							// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				float go_weight,
				float stop_weight,
				float ignore_weight,
				int n_SOAs,
				int min_holdtime,
				int max_holdtime,
				int expo_jitter,
				int expo_jitter_soa);

process SETMGTRL(int n_targ_pos,							// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				float go_weight,
				float stop_weight,
				float ignore_weight,
				int n_SOAs,
				int min_holdtime,
				int max_holdtime,
				int expo_jitter,
				int expo_jitter_soa)
	{
	
	declare hide float decide_trl_type; 							
	declare hide float jitter, decide_jitter, holdtime_diff;
	declare hide float decide_soa_jitter; 
	declare hide int fixation_color 			= 255;			// see SET_CLRS.pro
	declare hide int stop_sig_color 			= 254;			// see SET_CLRS.pro
	declare hide int ignore_sig_color 			= 253;			// see SET_CLRS.pro
	declare hide int constant nogo_correct		= 4;			// code for successfully canceled trial (see CMDTRIAL.pro)
	declare hide int constant go_correct		= 7;			// code for correct saccade on a go trial (see CMDTRIAL.pro)

	declare hide int ii;
	declare hide int constant Go_trl 		= 0;				// label these so they are easier to read below
	declare hide int constant Stop_trl 		= 1;				// label these so they are easier to read below
	declare hide int constant Ignore_trl 	= 2;				// label these so they are easier to read below
	// -----------------------------------------------------------------------------------------------
	// 2) Pick a trial type
															// Pick a number and then assess user defined weights to see what type of trial will be presented.
	decide_trl_type = (1.0 + random(9999)) / 100.0;			// random number from 1-100
															// Think of the if statement below as a number line with user defined divisions (weights).
	if (decide_trl_type <= go_weight)						// If we are on the left of the number line...
		{
		nogosoa = 0;
		Trl_type = Go_Trl;									// ...its a go trial.
		}
	else if (decide_trl_type > go_weight 
			&& decide_trl_type <= go_weight + stop_weight)	// If we are in the middle of the number line...
		{
		nogosoa = 1;
		Trl_type  = Stop_Trl;								// ...it is a stop trial, and...
		Sig_color = stop_sig_color;							// ...the signal color will reflect this fact.
		}
	else													// Else we must be on the right of the number line.
		{													// NOTE: based on user input, ignore trials may not... 
		Trl_type  = Ignore_Trl;								// ...exist and the number line may not have anything... 
		Sig_color = ignore_sig_color;						// ...to the right of stop_weights.  (Same holds for...
		}													// ...stop trials above.
		
//	if (Classic)											// We are emulating the old stop signal task
//		{
//		Sig_color = Fixation_Color;							// the stop signal is just the fixation point coming back on.
//		}
	
	Curr_target = random(N_targ_pos);						// 	COULD WEIGHT THIS IF NEED BE (see logic below)
	// -----------------------------------------------------------------------------------------------
	// 3) Set up all vdosync pages for the upcoming trial using globals defined by user and setc_trl
	spawnwait MG_PGS(curr_target,							// set above
				fixation_size, 								// see DEFAULT.pro and ALL_VARS.pro
				fixation_color, 							// see SET_CLRS.pro
				sig_color, 									// see DEFAULT.pro and ALL_VARS.pro
				scr_width, 									// see RIGSETUP.pro
				scr_height, 								// see RIGSETUP.pro
				pd_left, 									// see RIGSETUP.pro
				pd_bottom, 									// see RIGSETUP.pro
				pd_size,									// see RIGSETUP.pro
				deg2pix_X,									// see SET_COOR.pro
				deg2pix_Y,									// see SET_COOR.pro
				unit2pix_X,									// see SET_COOR.pro
				unit2pix_Y,									// see SET_COOR.pro
				object_targ);								// see GRAPHS.pro
				
	

	// -----------------------------------------------------------------------------------------------
	// 4) Set Up Target and Fixation Windows and plot them on animated graphs
	spawnwait WINDOWS(curr_target,							// see above
				fix_win_size,								// see DEFAULT.pro and ALL_VARS.pro
				targ_win_size,								// see DEFAULT.pro and ALL_VARS.pro
				object_fixwin,								// animated graph object
				object_targwin,								// animated graph object
				deg2pix_X,									// see SET_COOR.pro
	            deg2pix_Y);                                 // see SET_COOR.pro
				
	// -----------------------------------------------------------------------------------------------
	// 6) Select current holdtime
	
	holdtime_diff = max_holdtime - min_holdtime;
	if (expo_jitter)
		{		
		decide_jitter 	= (random(1001))/1000.0;				
		per_jitter 		= exp(-1.0*(decide_jitter/0.25));	
		}
	else
		{
		per_jitter 	= random(1001) / 1000.0;				// random number 0-100 (percentages)
		}
	jitter 			= holdtime_diff * per_jitter;
	Curr_holdtime 	= round(min_holdtime + jitter);
		
	
	// -----------------------------------------------------------------------------------------------
	// 5) Select current soa, as  (same logic as above)

		
		// per_soa_jitter 	= (random(1000) + 1)/ 1000.0;				// random number 0-100 (percentages)
		// soa_jitter 			= soa_diff * per_soa_jitter;
		// Curr_soa 			= round(min_soa + soa_jitter);	
	
		
		soa_jitter = random(4);
		Curr_soa = SOA_list[soa_jitter];
		// stimulation variable
		if (TaskStim == 1)
			{
			StimTm = Random(4);
			}
		
	}
	__HEADER__
SETS_TRL.pro
__FOOTER__
//-----------------------------------------------------------------------------------
// process SETS_TRL(int n_targ_pos,
				// float go_weight,
				// float stop_weight,
				// float ignore_weight,
				// int stop_sig_color,
				// int ignore_sig_color,
				// int staircase,
				// int n_SSDs,
				// int min_holdtime,
				// int max_holdtime,
				// int expo_jitter);
// Calculates all variables needed to run a search trial based on user defined
// space.  See DEFAULT.pro and ALL_VARS.pro for an explanation of the global input variables
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013

#include C:/TEMPO/ProcLib/TSCH_PGS.pro						// sets all pgs of video memory up for the impending trial
#include C:/TEMPO/ProcLib/LSCH_PGS.pro						// sets all pgs of video memory up for the impending trial 

declare hide int StimTm;									// Should we stim on this trial?
declare hide int Curr_target;								// OUTPUT: next trial target
declare hide int Sig_color;									// next signal color (could be either stop or ignore)
declare hide int Trl_type;									// stop, go, or ignore
declare hide int Curr_SSD;									// SSD on next stop or ignore trial
declare hide int Curr_holdtime;								// next trial time between fixation and target onset
declare hide int Decide_SSD;
 
declare hide int DistFix;

declare SETS_TRL(int n_targ_pos,							// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				float go_weight,
				float stop_weight,
				float ignore_weight,
				int staircase,
				int n_SSDs,
				int min_holdtime,
				int max_holdtime,
				int expo_jitter);

process SETS_TRL(int n_targ_pos,							// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				float go_weight,
				float stop_weight,
				float ignore_weight,
				int staircase,
				int n_SSDs,
				int min_holdtime,
				int max_holdtime,
				int expo_jitter)
	{
	
	declare hide float decide_trl_type; 	
	declare hide float CatchNum;	
	declare hide float per_jitter, jitter, decide_jitter, holdtime_diff, plac_diff, plac_jitter;
	declare hide int fixation_color 			= 255;			// see SET_CLRS.pro
	declare hide int constant nogo_correct		= 4;			// code for successfully canceled trial (see CMDTRIAL.pro)
	declare hide int constant go_correct		= 7;			// code for correct saccade on a go trial (see CMDTRIAL.pro)
	
	declare hide int ii;
		
	// -----------------------------------------------------------------------------------------------
	// Update block; trls per block set in DEFAULT.pro
	if (Comp_Trl_number == Trls_per_block)								// if we have completed the number of correct trials needed per block
		{
		Block_number = Block_number + 1;						// incriment Block_number for strobing in INFOS.pro
		Comp_Trl_number = 0;										// reset the block counter
		}	

	// -----------------------------------------------------------------------------------------------
	// 1) Set up catch trial based on Perc_catch parameter in DEFAULT.pro
	

	CatchNum = random(100);
	if (CatchNum > Perc_catch)
		{
		Catch = 0;
		CatchCode = 500;
		}
	else	
		{
		Catch = 1;
		CatchCode = 501;
		} 
	
	// -----------------------------------------------------------------------------------------------
	// 2) Set up all vdosync pages for the upcoming trial using globals defined by user and sets_trl.pro
	
	
	if(SingMode == 1)
		{ //selecting different fixed distractor color for each block
		if(Block_number == 1 || Block_number == 11 || Block_number == 21)
			{ 
			DistFix = 1; //fixed distractor
			SingCol = 0;
			}
		else if(Block_number == 3 || Block_number == 13 || Block_number == 23)
			{ 
			DistFix = 1; //fixed distractor
			SingCol = 1;
			}
		else if(Block_number == 5 || Block_number == 15 || Block_number == 25)
			{ 
			DistFix = 1; //fixed distractor
			SingCol = 2;
			}
		else if(Block_number == 7 || Block_number == 17 || Block_number == 27)
			{ 
			DistFix = 1; //fixed distractor
			SingCol = 3;
			}
		else if(Block_number == 9 || Block_number == 19 || Block_number == 29)
			{ 
			DistFix = 1; //fixed distractor
			SingCol = 4;
			}
		else //after 2900 trials, all blocks become random
			{
			DistFix = 2; //random distractor	
			SingCol = random(5); //pick a distractor color at random
			}
		}
	
	spawnwait SET_CLRS(n_targ_pos); //selects distractor/target colors for this trial
	
	spawnwait RAND_ORT;	// sets orientations of random stimuli
	
	
	/////////////// Logic allowing us to choose locations differently on the basis of whether we are running probability search task //////////////
	if(ProbCue == 0) //probability cueing on
		{
		spawnwait LOC_RAND;	// sets locations of stimuli
		}
	else if(ProbCue == 1) //probability cueing on
		{
		spawnwait LOC_ASYM;	// sets locations of stimuli
		}
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	spawnwait SEL_LOCS; // compiles final eccentricity, location, and orientation information for use by TSCH_PGS/LSCH_PGS below
	
	if(TargetType == 1)
		{ 
		spawnwait LSCH_PGS(curr_target,							// set above
				fixation_size, 								// see DEFAULT.pro and ALL_VARS.pro
				fixation_color, 							// see SET_CLRS.pro
				sig_color, 									// see DEFAULT.pro and ALL_VARS.pro
				scr_width, 									// see RIGSETUP.pro
				scr_height, 								// see RIGSETUP.pro
				pd_left, 									// see RIGSETUP.pro
				pd_bottom, 									// see RIGSETUP.pro
				pd_size,									// see RIGSETUP.pro
				deg2pix_X,									// see SET_COOR.pro
				deg2pix_Y,									// see SET_COOR.pro
				unit2pix_X,									// see SET_COOR.pro
				unit2pix_Y,									// see SET_COOR.pro
				object_targ);								// see GRAPHS.pro	
		}			
	else if(TargetType == 2)
		{
		spawnwait TSCH_PGS(curr_target,							// set above
				fixation_size, 								// see DEFAULT.pro and ALL_VARS.pro
				fixation_color, 							// see SET_CLRS.pro
				sig_color, 									// see DEFAULT.pro and ALL_VARS.pro
				scr_width, 									// see RIGSETUP.pro
				scr_height, 								// see RIGSETUP.pro
				pd_left, 									// see RIGSETUP.pro
				pd_bottom, 									// see RIGSETUP.pro
				pd_size,									// see RIGSETUP.pro
				deg2pix_X,									// see SET_COOR.pro
				deg2pix_Y,									// see SET_COOR.pro
				unit2pix_X,									// see SET_COOR.pro
				unit2pix_Y,									// see SET_COOR.pro
				object_targ);								// see GRAPHS.pro	
		} 		

	// -----------------------------------------------------------------------------------------------
	// 3) Set Up Target and Fixation Windows and plot them on animated graphs
	spawnwait WINDOWS(curr_target,							// see above
				fix_win_size,								// see DEFAULT.pro and ALL_VARS.pro
				targ_win_size,								// see DEFAULT.pro and ALL_VARS.pro
				object_fixwin,								// animated graph object
				object_targwin,								// animated graph object
				deg2pix_X,									// see SET_COOR.pro
	            deg2pix_Y);                                 // see SET_COOR.pro
		
	// -----------------------------------------------------------------------------------------------
	// 4) Select current holdtime
	
	holdtime_diff 	= max_holdtime - min_holdtime;			// Min and Max holdtime defined in DEFAULT.pro
	per_jitter 		= random(1001) / 1000.0;				// random number 0-100 (percentages)	
	jitter 			= holdtime_diff * per_jitter;			// multiply range of holdtime differences by percentage above
	
	if (FixJitter == 0) 
		{
		Curr_holdtime 	= round(min_holdtime + jitter);			// gives randomly jittered holdtime between min and max holdtime 
		}
	else if(FixJitter == 1)
		{
		Curr_holdtime 	= 500;
		}
	// -----------------------------------------------------------------------------------------------
	// 5) Select current fixation offset SOA
	if (soa_mode==1)
		{
			per_jitter = random(4);  //returns random number between 0 and n-1
			search_fix_time = SOA_list[per_jitter];
		}
	else
		{
		search_fix_time = 0;
		}
	// -----------------------------------------------------------------------------------------------
	// 6) Set placeholder duration
	
	plac_diff 		= max_plactime - min_plactime;			// Min and Max holdtime defined in DEFAULT.pro
	plac_jitter 	= plac_diff * per_jitter;				// multiply range of holdtime differences by percentage above
	
	plac_duration 	= round(min_plactime + plac_jitter);	// gives randomly jittered holdtime between min and max holdtime 

	
	// -----------------------------------------------------------------------------------------------
	// 7) Choose whether to stim
	//StimTm = Random(2); //allows us to randomize the time stim is delivered; see task stages in SCHTRIAL.pro
	StimTm = 1; //Single stim time
	//StimTm = 0; //stim off
	//StimTm = 5; //For prolonged stim protocol
	// -----------------------------------------------------------------------------------------------
	// 8) Choose Eccentricity
	
	SelEcc = Random(3); //choose from four eccentricities randomly; see line 130 LOC_RAND.pro
	
	}
	
	
	__HEADER__
STAIR.pro
__FOOTER__
// simple 1, 2, or 3 up down staircasing algorithm
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare Curr_SSD;								// Global output
				
declare int	Decide_SSD = -1; 					// Global only sets at load time.
												// Why you ask? So that we can start
												// the SSDs out at the longest and 
												// discourage speeding at the start.
												// This is difficult to do becuase 
												// n_SSDs is unknown at load time.

declare STAIR(int laststopoutcome,
			int n_SSDs);
			
process STAIR(int laststopoutcome,
			int n_SSDs)
	{
	declare hide int	success		= 1;
	declare hide int	failure		= 0;
	declare hide int	plus_minus;
	
	if (decide_SSD == -1)
	{
		decide_SSD = n_SSDs;					// Sorry for weirdness.  See above.
	}
	
												// 1) figure out the random SSD step for the next trial
	plus_minus = 1 + random(3);  				// pick a number 1, 2, or 3
	
												// 2) add or subtrace SSD steps based on last trial performance.
	if (laststopoutcome == success)
		{
		decide_SSD = decide_SSD + plus_minus; 	// increase SSD to make it harder
		}
	else if (laststopoutcome == failure)
		{
		decide_SSD = decide_SSD - plus_minus; 	// decrease SSD to make it easier
		}
	
												// 3) set to limits if we went out of bounds
	if (decide_SSD > n_SSDs - 1)
		{
		decide_SSD = n_SSDs - 1;
		}
	if (decide_SSD < 0)
		{
		decide_SSD = 0;
		}
		
												// 4) select SSD using new index
	Curr_SSD = SSD_list[decide_SSD];			// GLOBAL ARRAY CANNOT BE PASSED
	
	}__HEADER__
STIM.pro
__FOOTER__
//------------------------------------------------------------------------
// process STIM(int channel, int duration)
// send a TTL pulse to the stimulator and send a strobe to plexon.
// INPUT
//	 channel  = rig specific TTL channel connected stimulator
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare STIM(int channel);

process STIM(int channel)
	{
	declare hide int on   = 1;	
	declare hide int off  = 0;	
	
	mio_dig_set(channel,on);		// Start sending the TTL
	wait(2);						// Wait one ms
	mio_dig_set(channel,off);		// Stop sending the TTL
	
	Event_fifo[Set_event] = Stimulation_;		// queue strobe, and ...
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	}__HEADER__
STIM_US.pro
__FOOTER__
//------------------------------------------------------------------------
// process STIM(int channel, int duration)
// send a TTL pulse to the stimulator and send a strobe to plexon.
// INPUT
//	 channel  = rig specific TTL channel connected stimulator
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare STIM(int channel, int Npulse, int PulseGap);

process STIM(int channel, int Npulse, int PulseGap)
	{
	declare hide int on   = 1;	
	declare hide int off  = 0;	
	declare hide int pcnt = 0;	

	while(pcnt < Npulse)
		{
		mio_dig_set(channel,on);		// Start sending the TTL
		wait(2);						// Wait one ms
		mio_dig_set(channel,off);		// Stop sending the TTL
		wait(PulseGap-2)
		pcnt = pcnt+1;
		
		Event_fifo[Set_event] = Stimulation_;		// queue strobe, and ...
		Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
		}
	}__HEADER__
SUCCESS.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------------------------------
// declare SUCCESS(int trial_length,						
				// int inter_trl_int,
				// int trl_start_time,
				// int fixed_trl_length,
				// int success_tone,
				// int tone_duration,
				// int reward_offset,
				// int reward_duration);
// Give primary and secondary reinforcement, set up the variables 
// for the next trial, send all trial event codes to plexon, and 
// impose the correct inter trial interval.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

#include C:/TEMPO/ProcLib/JUICE.pro

declare SUCCESS(int trial_length,						// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				int inter_trl_int,
				int trl_start_time,
				int fixed_trl_length,
				int success_tone,
				int tone_duration,
				int reward_offset);

process SUCCESS(int trial_length,						// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				int inter_trl_int,
				int trl_start_time,
				int fixed_trl_length,
				int success_tone,
				int tone_duration,
				int reward_offset)
	{
	declare hide int trl_end_time, tone_time;	

	declare hide int run_cmd_sess = 1;					// state 1 is countermanding
	declare hide int run_mg_sess = 3;					// state 3 is mem guided sacc
	declare hide int run_gonogo_sess = 4;
	declare hide int run_delayed_sess = 6;
	declare hide int run_search_sess = 7;
	
	
	
	//
	declare hide float decidejuice;
	declare hide int 	go_trl 		= 0;
	declare hide int 	stop_trl 	= 1;
	declare hide int 	ignore_trl 	= 2;
	
	
	spawn TONE(success_tone,tone_duration);				// give the secondary reinforcer tone
	tone_time = time();									// record the time
	
	Event_fifo[Set_event] = Tone_;						// ...queue strobe...
	Set_event = (Set_event + 1) % Event_fifo_N;			// ...incriment event queue...
	
	Event_fifo[Set_event] = Reward_tone;				// ...queue strobe for Neuro Explorer...
	Set_event = (Set_event + 1) % Event_fifo_N;			// ...incriment event queue...
	
	while (time() < tone_time + reward_offset)			// wait until it is OK to give reward
		{		
		nexttick;										// wait for it... wait for it...
		}
		
	
	//Reward_duration = Reward_duration;	// for setting up 1DR.
	
	if (State == run_search_sess)
		{
		if (Consec_corr > Consec_trl) // allows us to set how many consec trials before reward given; 0 means single correct trial is all it takes 
			{
			spawn JUICE(juice_channel,reward_duration);			// YEAH BABY!  THAT'S WHAT IT'S ALL ABOUT!
			trl_end_time = time();								// record the time b/c this is the end of the trial events
	
			Event_fifo[Set_event] = Reward_;					// ...queue strobe...
			Set_event = (Set_event + 1) % Event_fifo_N;			// ...incriment event queue...
	
			Event_fifo[Set_event] = Eot_;						// ...queue strobe...
			Set_event = (Set_event + 1) % Event_fifo_N;
			}				
		}
	else
		{
		spawn JUICE(juice_channel,reward_duration);			// YEAH BABY!  THAT'S WHAT IT'S ALL ABOUT!
		trl_end_time = time();								// record the time b/c this is the end of the trial events
	
		Event_fifo[Set_event] = Reward_;					// ...queue strobe...
		Set_event = (Set_event + 1) % Event_fifo_N;			// ...incriment event queue...
	
		Event_fifo[Set_event] = Eot_;						// ...queue strobe...
		Set_event = (Set_event + 1) % Event_fifo_N;
		}
	
	spawnwait INFOS();									// ...queue a big ole` pile-o-strobes for plexon
	nexttick 10;										// Give TEMPO a chance to catch its breath before attempting.. 
														// ...RDX communication with vdosync.
														// NOTE: if you add a bunch more strobes to INFOS.pro and you...
														// start getting buffer overflow errors increase the number of nextticks.
	
	if (State == run_cmd_sess)
		{
		spawn SETC_TRL(n_targ_pos,			
					go_weight,				
					stop_weight,        				// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
					ignore_weight,              
					staircase,                      
					n_SSDs,                         
					min_holdtime,                   
					max_holdtime,                   
					expo_jitter);  
		}
	else if (State == run_search_sess)
		{
		spawnwait SETS_TRL(n_targ_pos,			
					go_weight,				
					stop_weight,        				// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
					ignore_weight,              
					staircase,                      
					n_SSDs,                         
					min_holdtime,                   
					max_holdtime,                   
					expo_jitter);  
		}		
	else if (State == run_mg_sess)
		{
		spawn SETMGTRL(n_targ_pos,							// see DEFAULT.pro and ALL_VARS.pro for explanations of these globals
				 go_weight,
				 stop_weight,
				 ignore_weight,
				 n_SOAs,
				 min_holdtime,
				 max_holdtime,
				 expo_jitter,
				 expo_jitter_soa);
		}
	else if (State == run_gonogo_sess)
		{
		spawn	SETG_TRL(n_targ_pos,				// Select variables for the first mem guided...					
				min_holdtime,           		// ...trial.  This happens once outside of the while...
				max_holdtime,           		// ...loop just to set up for the first iteration. After...
				expo_jitter,            		// ...that SETM_TRL.pro will be called by END_TRL.pro.
				min_soa,
				max_soa,
				expo_jitter_soa);
		}
		
	else if (State == run_delayed_sess)
		{
		spawn	SETD_TRL(n_targ_pos,				// Select variables for the first mem guided...					
				min_holdtime,           		// ...trial.  This happens once outside of the while...
				max_holdtime,           		// ...loop just to set up for the first iteration. After...
				expo_jitter,            		// ...that SETM_TRL.pro will be called by END_TRL.pro.
				min_soa,
				max_soa,
				expo_jitter_soa);
		}
	
		
	if(State == run_search_sess)
		{
		spawn UPD8_SCH();
		}
														// Impose the correct intertrial interval based on user input
	if (fixed_trl_length)								// Did you want a fixed trial length?
		{
		while(time() < trl_start_time + trial_length)	// Then figure out how much time has elapsed since trial start...
			{
			nexttick;									// ...and continue to wait until time is up.
			}
		}
	else												// Did you want a fixed intertrial interval?
		{
		while (time() < trl_end_time + inter_trl_int)	// Then watch the time since trial end...
			{
			nexttick;									// ...and wait until time is up.
			}		
		}
	}__HEADER__
SVR_BEL2.pro
__FOOTER__
//Made this its own process so that I can fire a sound off from the
//server without pausing to wait for the sound to end.
//Can be used as a warning tone to alert the operator that the animal
//is doing something wrong.

declare SVR_BEL2();

process SVR_BEL2()
	{
	
	sound(4000);
	wait 100;
	sound(0);
	
	}
__HEADER__
SVR_BELL.pro
__FOOTER__
//Made this its own process so that I can fire a sound off from the
//server without pausing to wait for the sound to end.
//Can be used as a warning tone to alert the operator that the animal
//is doing something wrong.

declare SVR_BELL();

process SVR_BELL()
	{	
	
	sound(250);
	wait 50;
	sound(0);
	
	sound(500);
	wait 50;
	sound(0);
	
	sound(1000);
	wait 50;
	sound(0);
	
	sound(2000);
	wait 50;
	sound(0);
	
	sound(4000);
	wait 50;
	sound(0);
	
	sound(8000);
	wait 50;
	sound(0);
	
	sound(16000);
	wait 50;
	sound(0);
	
	sound(32000);
	wait 50;
	sound(0);
	
	sound(64000);
	wait 50;
	sound(0);
	
	}
__HEADER__
tempo.gcf
__FOOTER__
; TEMPO GRAPH CONFIGURATION FILE
; Copyright 1997-2017 Reflective Computing.  All Rights Reserved.
; This file was created by TEMPO and should not be edited directly by the user.
; The commands in this file are undocumented and subject to change in future releases.
; Thu Feb 02 16:38:09 2017
; GLOAD tempo.gcf


; WINDOW CONFIGURATION

SCREENRES 1280,1024,32,1,0,0
MAINWND 1,0,0,-1,-1,1,0,555,58,0

CMDWND 1,160,972,-1,-1,0,940,405,997,0

; DATABASES PAGES & VIEWS

DBPCOLORS 0x0,0x0,0x0,0x0,0x0

; END GRAPH CONFIGURATION

__HEADER__
TEST.pro
__FOOTER__
#pragma declare = 1;



#include C:/TEMPO/ProcLib/DIO.pro
#include C:/TEMPO/ProcLib/SEND_TTL.pro
#include C:/TEMPO/ProcLib/WAIT_MU.pro
declare main();

process main() enabled
	{
	declare int send_now;
	declare int value = 1;
	while(1)
		{
		if (send_now == 1)
			{
			spawn SEND_TTL(value);
			send_now = 0;
			}
		nexttick;
		}
	}


__HEADER__
TONE.pro
__FOOTER__
//------------------------------------------------------------------------
// process Tone(int frequency, int duration)
// Play a tone for the specified frequency and duration
// INPUT
//	 frequency = frequency of tone (hz) to be played
//	 duration  = amount of time (in ms) to pay tone
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare TONE(int frequency, int duration);

process TONE(int frequency, int duration)
	{
	declare hide count;			// Count down for the pulse generator to change state (see below)
	declare hide int off = 0;	// To turn tone off at end
	
	/*  A call to the PCI-DAS-1602 analog pulse generator is in the 
		form of...
		mio_fout(count) 
		where "count" specifies a count down in 10 MHz clock cycles 
		before the square wave switches states.
		Converting that to frequency is done by...
		frequency(Hz) = 10,000,000 / count
		therefore...
		count = 10,000,000 / frequency(Hz)
	*/
	count = 10000000/frequency; // See above
	mio_fout(count);			// Start sending the tone
	wait(duration);				// Wait for user defined period of time (ms)
	mio_fout(off);				// Stop sending the tone
	}__HEADER__
TONESWEP.pro
__FOOTER__
//------------------------------------------------------------------------
// process TONESWEP()
// Play something which can be differentiated from a task relevant pure
// tone.
//
// written by david.c.godlove@vanderbilt.edu 	Sept, 2011

declare TONESWEP();

process TONESWEP()
	{
	spawnwait TONE(64000,10);
	
	spawnwait TONE(32000,10);
	
	spawnwait TONE(16000,10);
	
	spawnwait TONE(8000,10);
	
	spawnwait TONE(4000,10);
	
	spawnwait TONE(2000,10);
	
	spawnwait TONE(1000,10);
	
	spawnwait TONE(500,10);
	
	spawnwait TONE(250,10);	
	}__HEADER__
TSCH_PGS.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// process TSCH_PGS(int curr_target, 
				// float fixation_size, 
				// int fixation_color, 
				// int sig_color, 
				// float scr_width, 
				// float scr_height, 
				// float pd_left, 
				// float pd_bottom, 
				// float pd_size);
// Figure out all stimuli that will be needed on the next search trial and
// place it all into video memory.
//
// written by joshua.d.cosman@vanderbilt.edu 	July, 2013


declare hide float 	Size;   																	// Global output will be sent as stobes...        										
declare hide int   	Color;								
declare hide float 	Eccentricity; 
declare hide float 	Angle;        																// ...by INFOS.pro at trial end.

declare hide float 	targ_orient; 
declare hide float 	d1_orient; 
declare hide float 	d2_orient; 
declare hide float 	d3_orient; 
declare hide float 	d4_orient; 
declare hide float 	d5_orient; 
declare hide float 	d6_orient; 
declare hide float 	d7_orient; 
declare hide float 	d8_orient; 
declare hide float 	d9_orient; 
declare hide float 	d10_orient; 
declare hide float 	d11_orient; 

declare hide float 	targ_angle;
declare hide float 	d1_angle; 
declare hide float 	d2_angle; 
declare hide float 	d3_angle; 
declare hide float 	d4_angle; 
declare hide float 	d5_angle; 
declare hide float 	d6_angle; 
declare hide float 	d7_angle; 
declare hide float 	d8_angle; 
declare hide float 	d9_angle; 
declare hide float 	d10_angle; 
declare hide float 	d11_angle; 
      																
declare hide float 	targ_ecc;
declare hide float 	d1_ecc; 
declare hide float 	d2_ecc; 
declare hide float 	d3_ecc; 
declare hide float 	d4_ecc; 
declare hide float 	d5_ecc; 
declare hide float 	d6_ecc; 
declare hide float 	d7_ecc; 
declare hide float 	d8_ecc; 
declare hide float 	d9_ecc; 
declare hide float 	d10_ecc; 
declare hide float 	d11_ecc; 


declare TSCH_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				int sig_color,                          										// see DEFAULT.pro and ALL_VARS.pro
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ);                       										// see GRAPHS.pro

process TSCH_PGS(int curr_target, 																// set SETC_TRL.pro
				float fixation_size,                    										// see DEFAULT.pro and ALL_VARS.pro
				int fixation_color,                     										// see SET_CLRS.pro
				int sig_color,                          										// see DEFAULT.pro and ALL_VARS.pro
				float scr_width,                        										// see RIGSETUP.pro
				float scr_height,                       										// see RIGSETUP.pro
				float pd_left,                          										// see RIGSETUP.pro
				float pd_bottom,                        										// see RIGSETUP.pro
				float pd_size,                          										// see RIGSETUP.pro
				float deg2pix_X,                        										// see SET_COOR.pro
				float deg2pix_Y,                        										// see SET_COOR.pro
				float unit2pix_X,                       										// see SET_COOR.pro
				float unit2pix_Y,                       										// see SET_COOR.pro
				int object_targ)                        										// see GRAPHS.pro
	{										
											
	declare hide float 	pd_eccentricity;										
	declare hide float	pd_angle;										
	declare hide float 	opposite;										
	declare hide float	adjacent;										
	declare hide float	stim_ecc_x;										
	declare hide float	stim_ecc_y;										
	declare hide int   	open        = 0;										
	declare hide int   	fill        = 1;										
	
	// number the pgs that need to be drawn
	declare hide int   	blank       = 0;										
	declare hide int	fixation_pd = 1;										
	declare hide int	fixation    = 2;
	declare hide int	plac_pd   	= 3;										
	declare hide int	plac      	= 4;	
	declare hide int	target_f_pd = 5;										
	declare hide int	target_f  	= 6;
	declare hide int	target      = 7;										
	
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Calculate screen coordinates for stimuli on this trial								
	size         = llength;   													// Figure out the attributes of the current target 
	color        = 250; //curr_target + 1;																// zero is reserved for black.  see SET_CLRS.pro	
		
	angle			= targ_angle; 			
	eccentricity	= targ_ecc;	
										
	stim_ecc_x		= cos(angle) * eccentricity;
	stim_ecc_y		= sin(angle) * eccentricity * -1;

	oSetAttribute(object_targ, aSIZE, size*deg2pix_X, size*deg2pix_Y);							// while we are at it, resize fixation object on animated graph
	oSetAttribute(object_fix, aSIZE, 1*deg2pix_X, 1*deg2pix_Y);									
	
	opposite = ((scr_height/2)-pd_bottom);														// Figure out angle and eccentricity of photodiode marker in pixels
	adjacent = ((scr_width/2)-pd_left);                                                         // NOTE: I am assuming your pd is in the lower left quadrant of your screen
	pd_eccentricity = sqrt((opposite * opposite) + (adjacent * adjacent));
	pd_angle = rad2deg(atan (opposite / adjacent));
	pd_angle = pd_angle + 180; 																//change this for different quadrent or write some code for flexibility
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 1
	// print("fixation with photodiode");
	dsendf("rw %d,%d;\n",fixation_pd,fixation_pd); 												// draw first pg of video memory
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 2	  
	// print("fixation");
	dsendf("rw %d,%d;\n",fixation,fixation);   													// draw second pg of video memory                                       
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 3	 
	// print("placeholders with photodiode");
	

	dsendf("rw %d,%d;\n",plac_pd,plac_pd);  												// draw pg 3                                        
	dsendf("cl:\n");																			// clear screen
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point
	
	if (SetSize > 0)
		{
		spawnwait DRW_PLAC(targ_angle, targ_ecc, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
		}
	if (SetSize > 1)	
		{
		spawnwait DRW_PLAC(d1_angle, d1_ecc, d1color, fill, deg2pix_X, deg2pix_Y);          	
		}
	if (SetSize > 2)
		{
		spawnwait DRW_PLAC(d2_angle, d2_ecc, color, fill, deg2pix_X, deg2pix_Y);          	      
		}
	if (SetSize > 3)	
		{
		spawnwait DRW_PLAC(d3_angle, d3_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 4)
		{
		spawnwait DRW_PLAC(d4_angle, d4_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 5)
		{
		spawnwait DRW_PLAC(d5_angle, d5_ecc, color, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 6)
		{
		spawnwait DRW_PLAC(d6_angle, d6_ecc, color, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 7)
		{
		spawnwait DRW_PLAC(d7_angle, d7_ecc, color, fill, deg2pix_X, deg2pix_Y);          
		}
	if (SetSize > 8)
		{
		spawnwait DRW_PLAC(d8_angle, d8_ecc, color, fill, deg2pix_X, deg2pix_Y);	
		}
	if (SetSize > 9)	
		{      	
		spawnwait DRW_PLAC(d9_angle, d9_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 10)	
		{
		spawnwait DRW_PLAC(d10_angle, d10_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 11)	
		{         
		spawnwait DRW_PLAC(d11_angle, d11_ecc, color, fill, deg2pix_X, deg2pix_Y);         
		}
		
	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
	nexttick;
		
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 4	 
	// print("placeholders");
	dsendf("rw %d,%d;\n",plac,plac);  												// draw pg 3                                        
	dsendf("cl:\n");

	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point

	if (SetSize > 0)
		{
		spawnwait DRW_PLAC(targ_angle, targ_ecc, color, fill, deg2pix_X, deg2pix_Y);          	// draw target
		}
	
	if (SetSize > 1)	
		{
		spawnwait DRW_PLAC(d1_angle, d1_ecc, d1color, fill, deg2pix_X, deg2pix_Y);          	
		}
	if (SetSize > 2)
		{
		spawnwait DRW_PLAC(d2_angle, d2_ecc, color, fill, deg2pix_X, deg2pix_Y);          	      
		}
	if (SetSize > 3)	
		{
		spawnwait DRW_PLAC(d3_angle, d3_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 4)
		{
		spawnwait DRW_PLAC(d4_angle, d4_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 5)
		{
		spawnwait DRW_PLAC(d5_angle, d5_ecc, color, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 6)
		{
		spawnwait DRW_PLAC(d6_angle, d6_ecc, color, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 7)
		{
		spawnwait DRW_PLAC(d7_angle, d7_ecc, color, fill, deg2pix_X, deg2pix_Y);          
		}
	if (SetSize > 8)
		{
		spawnwait DRW_PLAC(d8_angle, d8_ecc, color, fill, deg2pix_X, deg2pix_Y);	
		}
	if (SetSize > 9)	
		{      	
		spawnwait DRW_PLAC(d9_angle, d9_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 10)	
		{
		spawnwait DRW_PLAC(d10_angle, d10_ecc, color, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 11)	
		{         
		spawnwait DRW_PLAC(d11_angle, d11_ecc, color, fill, deg2pix_X, deg2pix_Y);         
		}
	
	nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 5	 
	// print("target, fixation, and distractors with photodiode");
	dsendf("rw %d,%d;\n",target_f_pd,target_f_pd);  												// draw pg 3                                        
	dsendf("cl:\n");																			// clear screen

	if (SetSize > 0)
		{
		if (Catch == 0)
			{
			spawnwait DRW_T(targ_angle, targ_ecc, color, targ_orient, fill, deg2pix_X, deg2pix_Y);          	// draw target
			}
		else if (Catch == 1)
			{
			spawnwait DRW_L(targ_angle, targ_ecc, color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	// draw distractor
			}
		}
	
	
	if (SetSize > 1)	
		{
		spawnwait DRW_L(d1_angle, d1_ecc, d1color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	
		}
	if (SetSize > 2)
		{
		spawnwait DRW_L(d2_angle, d2_ecc, color, d2_orient, fill, deg2pix_X, deg2pix_Y);          	      
		}
	if (SetSize > 3)	
		{
		spawnwait DRW_L(d3_angle, d3_ecc, color, d3_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 4)
		{
		spawnwait DRW_L(d4_angle, d4_ecc, color, d4_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 5)
		{
		spawnwait DRW_L(d5_angle, d5_ecc, color, d5_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 6)
		{
		spawnwait DRW_L(d6_angle, d6_ecc, color, d6_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 7)
		{
		spawnwait DRW_L(d7_angle, d7_ecc, color, d7_orient, fill, deg2pix_X, deg2pix_Y);          
		}
	if (SetSize > 8)
		{
		spawnwait DRW_L(d8_angle, d8_ecc, color, d8_orient, fill, deg2pix_X, deg2pix_Y);	
		}
	if (SetSize > 9)	
		{      	
		spawnwait DRW_L(d9_angle, d9_ecc, color, d9_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 10)	
		{
		spawnwait DRW_L(d10_angle, d10_ecc, color, d10_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 11)	
		{         
		spawnwait DRW_L(d11_angle, d11_ecc, color, d11_orient, fill, deg2pix_X, deg2pix_Y);         
		}
	
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point

	spawnwait DRW_SQR(pd_size,pd_angle,pd_eccentricity,15,fill,unit2pix_X,unit2pix_Y);			// draw photodiode marker
    nexttick;
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 6	 
	// print("target, fixation, and distractors");
	dsendf("rw %d,%d;\n",target_f,target_f);  												// draw pg 3                                        
	dsendf("cl:\n");																			// clear screen

	if (SetSize > 0)
		{
		if (Catch == 0)
			{
			spawnwait DRW_T(targ_angle, targ_ecc, color, targ_orient, fill, deg2pix_X, deg2pix_Y);          	// draw target
			}
		else if (Catch == 1)
			{
			spawnwait DRW_L(targ_angle, targ_ecc, color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	// draw distractor
			}
		}
	
	
	if (SetSize > 1)	
		{
		spawnwait DRW_L(d1_angle, d1_ecc, d1color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	
		}
	if (SetSize > 2)
		{
		spawnwait DRW_L(d2_angle, d2_ecc, color, d2_orient, fill, deg2pix_X, deg2pix_Y);          	      
		}
	if (SetSize > 3)	
		{
		spawnwait DRW_L(d3_angle, d3_ecc, color, d3_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 4)
		{
		spawnwait DRW_L(d4_angle, d4_ecc, color, d4_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 5)
		{
		spawnwait DRW_L(d5_angle, d5_ecc, color, d5_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 6)
		{
		spawnwait DRW_L(d6_angle, d6_ecc, color, d6_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 7)
		{
		spawnwait DRW_L(d7_angle, d7_ecc, color, d7_orient, fill, deg2pix_X, deg2pix_Y);          
		}
	if (SetSize > 8)
		{
		spawnwait DRW_L(d8_angle, d8_ecc, color, d8_orient, fill, deg2pix_X, deg2pix_Y);	
		}
	if (SetSize > 9)	
		{      	
		spawnwait DRW_L(d9_angle, d9_ecc, color, d9_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 10)	
		{
		spawnwait DRW_L(d10_angle, d10_ecc, color, d10_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 11)	
		{         
		spawnwait DRW_L(d11_angle, d11_ecc, color, d11_orient, fill, deg2pix_X, deg2pix_Y);         
		}

	
	spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);   	// draw fixation point

    nexttick;
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 7	  
	// print("target and distractors");
	dsendf("rw %d,%d;\n",target,target);  														// draw pg 4                                        
	dsendf("cl:\n");																			// clear screen

	if (SetSize > 0)
		{
		if (Catch == 0)
			{
			spawnwait DRW_T(targ_angle, targ_ecc, color, targ_orient, fill, deg2pix_X, deg2pix_Y);          	// draw target
			}
		else if (Catch == 1)
			{
			spawnwait DRW_L(targ_angle, targ_ecc, color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	// draw distractor
			}
		}
	
	
	if (SetSize > 1)	
		{
		spawnwait DRW_L(d1_angle, d1_ecc, d1color, d1_orient, fill, deg2pix_X, deg2pix_Y);          	
		}
	if (SetSize > 2)
		{
		spawnwait DRW_L(d2_angle, d2_ecc, color, d2_orient, fill, deg2pix_X, deg2pix_Y);          	      
		}
	if (SetSize > 3)	
		{
		spawnwait DRW_L(d3_angle, d3_ecc, color, d3_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 4)
		{
		spawnwait DRW_L(d4_angle, d4_ecc, color, d4_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 5)
		{
		spawnwait DRW_L(d5_angle, d5_ecc, color, d5_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 6)
		{
		spawnwait DRW_L(d6_angle, d6_ecc, color, d6_orient, fill, deg2pix_X, deg2pix_Y); 
		}
	if (SetSize > 7)
		{
		spawnwait DRW_L(d7_angle, d7_ecc, color, d7_orient, fill, deg2pix_X, deg2pix_Y);          
		}
	if (SetSize > 8)
		{
		spawnwait DRW_L(d8_angle, d8_ecc, color, d8_orient, fill, deg2pix_X, deg2pix_Y);	
		}
	if (SetSize > 9)	
		{      	
		spawnwait DRW_L(d9_angle, d9_ecc, color, d9_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 10)	
		{
		spawnwait DRW_L(d10_angle, d10_ecc, color, d10_orient, fill, deg2pix_X, deg2pix_Y);
		}
	if (SetSize > 11)	
		{         
		spawnwait DRW_L(d11_angle, d11_ecc, color, d11_orient, fill, deg2pix_X, deg2pix_Y);         
		}

	
	if (soa_mode==1)
		{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, open, deg2pix_X, deg2pix_Y);
		}
	else
		{
		spawnwait DRW_SQR(fixation_size, 0.0, 0.0, fixation_color, fill, deg2pix_X, deg2pix_Y);		
		}
	nexttick; 
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	// Draw pg 0 (last is displayed first)	
	// print("blank"); 																			
	dsendf("rw %d,%d;\n",blank,blank);                                          				// draw the blank screen last so that it shows up first
	dsendf("cl:\n");                                                                            // clear screen (that's all)
	
	
	}__HEADER__
UPD8_INH.pro
__FOOTER__
// Updates inhibition function in the animated graph online. 
// NOTE: SET_INH must have been run already to set inhibition
// function graph up.  Needed for global objects.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

declare UPD8_INH(int curr_ssd, 
				int laststopoutcome,
				int decide_ssd);

process UPD8_INH(int curr_ssd, 
				int laststopoutcome,
				int decide_ssd)
	{
	declare int ct;
	declare float hide weight;
	declare float hide change_value;
	declare int hide success = 1;
	declare int hide failure = 0;
	declare int hide position_x;
	declare float hide position_y[20];
	declare float hide ct_ssd[20];
	
	ct = 0;
	if (FirstStopTrial == 1)
		{
		while(ct<20)
			{
			position_y[ct] = 0;
			ct_ssd[ct] = 0;
			ct = ct + 1;
			FirstStopTrial = 0;
			}
		}
	
	if (laststopoutcome == success)
		{
		change_value = 0;
		}
	else if(laststopoutcome == failure)
		{
		change_value = 1000;
		}
		
	
	position_x = (curr_ssd * 1000.0/Refresh_rate) * 1000;	

	weight = 1.0 / (ct_ssd[decide_ssd] + 1.0);
	position_y[decide_ssd] = ((1 - weight) * position_y[decide_ssd]) + (change_value * weight);
	ct_ssd[decide_ssd] = ct_ssd[decide_ssd] + 1;

	
	//---------------------------------------------------------------------
	// SSD 0		
	if (curr_ssd == SSD_list[0])
		{
		oSetAttribute(object_ssd0,aFILLED);
		oSetAttribute(object_ssd0,aVISIBLE);
		oMove(object_ssd0,position_x,position_y[0]);	
		}
	//---------------------------------------------------------------------
	// SSD 1		
	if (curr_ssd == SSD_list[1])
		{
		oSetAttribute(object_ssd1,aFILLED);
		oSetAttribute(object_ssd1,aVISIBLE);
		oMove(object_ssd1,position_x,position_y[1]);	
		}
	//---------------------------------------------------------------------
	// SSD 2		
	if (curr_ssd == SSD_list[2])
		{
		oSetAttribute(object_ssd2,aFILLED);
		oSetAttribute(object_ssd2,aVISIBLE);
		oMove(object_ssd2,position_x,position_y[2]);	
		}
	//---------------------------------------------------------------------
	// SSD 3		
	if (curr_ssd == SSD_list[3])
		{
		oSetAttribute(object_ssd3,aFILLED);
		oSetAttribute(object_ssd3,aVISIBLE);
		oMove(object_ssd3,position_x,position_y[3]);	
		}
	//---------------------------------------------------------------------
	// SSD 4		
	if (curr_ssd == SSD_list[4])
		{
		oSetAttribute(object_ssd4,aFILLED);
		oSetAttribute(object_ssd4,aVISIBLE);
		oMove(object_ssd4,position_x,position_y[4]);	
		}
	//---------------------------------------------------------------------
	// SSD 5		
	if (curr_ssd == SSD_list[5])
		{
		oSetAttribute(object_ssd5,aFILLED);
		oSetAttribute(object_ssd5,aVISIBLE);
		oMove(object_ssd5,position_x,position_y[5]);	
		}
	//---------------------------------------------------------------------
	// SSD 6		
	if (curr_ssd == SSD_list[6])
		{
		oSetAttribute(object_ssd6,aFILLED);
		oSetAttribute(object_ssd6,aVISIBLE);
		oMove(object_ssd6,position_x,position_y[6]);	
		}
	//---------------------------------------------------------------------
	// SSD 7		
	if (curr_ssd == SSD_list[7])
		{
		oSetAttribute(object_ssd7,aFILLED);
		oSetAttribute(object_ssd7,aVISIBLE);
		oMove(object_ssd7,position_x,position_y[7]);	
		}
	//---------------------------------------------------------------------
	// SSD 8		
	if (curr_ssd == SSD_list[8])
		{
		oSetAttribute(object_ssd8,aFILLED);
		oSetAttribute(object_ssd8,aVISIBLE);
		oMove(object_ssd8,position_x,position_y[8]);	
		}
	//---------------------------------------------------------------------
	// SSD 9		
	if (curr_ssd == SSD_list[9])
		{
		oSetAttribute(object_ssd9,aFILLED);
		oSetAttribute(object_ssd9,aVISIBLE);
		oMove(object_ssd9,position_x,position_y[9]);	
		}
	//---------------------------------------------------------------------
	// SSD 10		
	if (curr_ssd == SSD_list[10])
		{
		oSetAttribute(object_ssd10,aFILLED);
		oSetAttribute(object_ssd10,aVISIBLE);
		oMove(object_ssd10,position_x,position_y[10]);	
		}
	//---------------------------------------------------------------------
	// SSD 11		
	if (curr_ssd == SSD_list[11])
		{
		oSetAttribute(object_ssd11,aFILLED);
		oSetAttribute(object_ssd11,aVISIBLE);
		oMove(object_ssd11,position_x,position_y[11]);	
		}
	//---------------------------------------------------------------------
	// SSD 12		
	if (curr_ssd == SSD_list[12])
		{
		oSetAttribute(object_ssd12,aFILLED);
		oSetAttribute(object_ssd12,aVISIBLE);
		oMove(object_ssd12,position_x,position_y[12]);	
		}
	//---------------------------------------------------------------------
	// SSD 13		
	if (curr_ssd == SSD_list[13])
		{
		oSetAttribute(object_ssd13,aFILLED);
		oSetAttribute(object_ssd13,aVISIBLE);
		oMove(object_ssd13,position_x,position_y[13]);	
		}
	//---------------------------------------------------------------------
	// SSD 14		
	if (curr_ssd == SSD_list[14])
		{
		oSetAttribute(object_ssd14,aFILLED);
		oSetAttribute(object_ssd14,aVISIBLE);
		oMove(object_ssd14,position_x,position_y[14]);	
		}
	//---------------------------------------------------------------------
	// SSD 15		
	if (curr_ssd == SSD_list[15])
		{
		oSetAttribute(object_ssd15,aFILLED);
		oSetAttribute(object_ssd15,aVISIBLE);
		oMove(object_ssd15,position_x,position_y[15]);	
		}
	//---------------------------------------------------------------------
	// SSD 16		
	if (curr_ssd == SSD_list[16])
		{
		oSetAttribute(object_ssd16,aFILLED);
		oSetAttribute(object_ssd16,aVISIBLE);
		oMove(object_ssd16,position_x,position_y[16]);	
		}
	//---------------------------------------------------------------------
	// SSD 17		
	if (curr_ssd == SSD_list[17])
		{
		oSetAttribute(object_ssd17,aFILLED);
		oSetAttribute(object_ssd17,aVISIBLE);
		oMove(object_ssd17,position_x,position_y[17]);	
		}
	//---------------------------------------------------------------------
	// SSD 18		
	if (curr_ssd == SSD_list[18])
		{
		oSetAttribute(object_ssd18,aFILLED);
		oSetAttribute(object_ssd18,aVISIBLE);
		oMove(object_ssd18,position_x,position_y[18]);	
		}
	//---------------------------------------------------------------------
	// SSD 19		
	if (curr_ssd == SSD_list[19])
		{
		oSetAttribute(object_ssd19,aFILLED);
		oSetAttribute(object_ssd19,aVISIBLE);
		oMove(object_ssd19,position_x,position_y[19]);	
		}		

	}__HEADER__
UPD8_SCH.pro
__FOOTER__
// Updates inhibition function in the animated graph online. 
// NOTE: SET_INH must have been run already to set inhibition
// function graph up.  Needed for global objects.
//
// written by joshua.d.cosman@vanderbilt.edu 	January, 2011

declare UPD8_SCH();

process UPD8_SCH()
	{

	declare int success = 1;
	declare int failure = 0;
	declare int nogo_success = 3;
	declare int random_position_x;
	declare int repeat_position_x;
	declare float random_position_y;
	declare float repeat_position_y;
/* 	declare float cum_rep_rt;
	declare float avg_rep_rt;
	declare float graph_rep_rt;
	declare float cum_rand_rt;
	declare float avg_rand_rt;
	declare float graph_rand_rt; */
	
	if (FirstSearchTrial == 1)
		{
			repeat_position_y = 1000;
			random_position_y = 1000;
			FirstSearchTrial = 0;
			cum_rep_rt = 0;
			cum_rand_rt = 0;
			avg_rep_rt = 0;
			avg_rand_rt = 0;
			graph_rep_rt = 0;
			graph_rand_rt = 0;
			rand_inacc_sacc = 0;
			rep_inacc_sacc = 0;
		}
if (SingMode == 0)		
		
	if (TrialTp == 1) //Random
		{
		if (lastsearchoutcome == success || nogo_success)
			{
			cum_rand_rt = cum_rand_rt + current_rt;
			avg_rand_rt = cum_rand_rt/Rand_Comp_Trl_number;
			graph_rand_rt = 1000 - avg_rand_rt; // 1000 minus RT because Y = 1000 is YMAX, or RT = 0ms	
			
			random_position_x = -300; //fixed position, left side of graph
			random_position_y = graph_rand_rt;
			
			//Graph updated values
			oSetAttribute(object_random,aFILLED);
			oSetAttribute(object_random,aVISIBLE);
			oMove(object_random,random_position_x,random_position_y);
			}
		}	
	else		
		{
		if (lastsearchoutcome == success || nogo_success)
			{
			cum_rep_rt = cum_rep_rt + current_rt;
			avg_rep_rt = cum_rep_rt/Rep_Comp_Trl_number;
			graph_rep_rt = 1000 - avg_rep_rt; 
			
			repeat_position_x = 300; //fixed position, right side of graph	
			repeat_position_y = graph_rep_rt;
			
			//Graph updated values
			oSetAttribute(object_repeat,aFILLED);
			oSetAttribute(object_repeat,aVISIBLE);
			oMove(object_repeat,repeat_position_x,repeat_position_y);		
			}
		}	

else if (SingMode == 1)
		{
		if (DistPres == 1111) //Random
			{
			if (lastsearchoutcome == success || nogo_success)
				{
				cum_rand_rt_DA = cum_rand_rt_DA + current_rt;
				avg_rand_rt_DA = cum_rand_rt_DA/Rand_Comp_Trl_DA;
				graph_rand_rt = 1000 - avg_rand_rt_DA; // 1000 minus RT because Y = 1000 is YMAX, or RT = 0ms	
				
				random_position_x = -300; //fixed position, left side of graph
				random_position_y = graph_rand_rt;
				
				//Graph updated values
				oSetAttribute(object_random,aFILLED);
				oSetAttribute(object_random,aVISIBLE);
				oMove(object_random,random_position_x,random_position_y);
				}
			}	
		else		
			{
			if (lastsearchoutcome == success || nogo_success)
				{
				cum_rand_rt_DP = cum_rand_rt_DP + current_rt;
				avg_rand_rt_DP = cum_rand_rt_DP/Rand_Comp_Trl_DP;
				graph_rand_rt = 1000 - avg_rand_rt_DP; 
				
				repeat_position_x = 300; //fixed position, right side of graph	
				repeat_position_y = graph_rand_rt;
				
				//Graph updated values
				oSetAttribute(object_repeat,aFILLED);
				oSetAttribute(object_repeat,aVISIBLE);
				oMove(object_repeat,repeat_position_x,repeat_position_y);		
				}
			}	
		}

	}__HEADER__
UPD8_SOA.pro
__FOOTER__
declare UPD8_SOA(int curr_soa, 
				int laststopoutcome,
				int per_jitter);

process UPD8_SOA(int curr_soa, 
				int laststopoutcome,
				int per_jitter)
	{
	declare int ct;
	declare float hide weight;
	declare float hide change_value;
	declare int hide success = 1;
	declare int hide failure = 0;
	declare int hide position_x;
	declare float hide position_y[20];
	declare float hide ct_soa[20];
	declare float hide rts[20];
	
	ct = 0;
	if (FirstSOATrial == 1)
		{
		while(ct<20)
			{
			position_y[ct] = 0;
			ct_soa[ct] = 0;
			rts[ct] = 0;
			ct = ct + 1;
			FirstSOATrial = 0;
			}
		}
	
	if (laststopoutcome == success)
	{
		change_value = 0;
	}
	else if(laststopoutcome == failure)
	{
		change_value = 1000;
	}
	
	
	position_x = round(curr_soa * (1000.0/Refresh_rate));	

//	weight = 1.0 / (ct_soa[per_jitter] + 1.0);
//	position_y[per_jitter] = ((1 - weight) * position_y[per_jitter]) + (change_value * weight);
	ct_soa[per_jitter] = ct_soa[per_jitter] + 1;
	rts[per_jitter] = rts[per_jitter] + (ReactionTime);
	position_y[per_jitter] = rts[per_jitter] / ct_soa[per_jitter];
	printf("mean latency = %d\n",position_y[per_jitter]);
	
	
	//---------------------------------------------------------------------
	// SSD 0		
	if (curr_soa == SOA_list[0])
		{
		oSetAttribute(object_soa0,aFILLED);
		oSetAttribute(object_soa0,aVISIBLE);
		oMove(object_soa0,position_x,position_y[0]);	
		}
	//---------------------------------------------------------------------
	// SSD 1		
	if (curr_soa == SOA_list[1])
		{
		oSetAttribute(object_soa1,aFILLED);
		oSetAttribute(object_soa1,aVISIBLE);
		oMove(object_soa1,position_x,position_y[1]);	
		}
	//---------------------------------------------------------------------
	// SSD 2		
	if (curr_soa == SOA_list[2])
		{
		oSetAttribute(object_soa2,aFILLED);
		oSetAttribute(object_soa2,aVISIBLE);
		oMove(object_soa2,position_x,position_y[2]);	
		}
	//---------------------------------------------------------------------
	// SSD 3		
	if (curr_soa == SOA_list[3])
		{
		oSetAttribute(object_soa3,aFILLED);
		oSetAttribute(object_soa3,aVISIBLE);
		oMove(object_soa3,position_x,position_y[3]);	
		}
	//---------------------------------------------------------------------
	// SSD 4		
	if (curr_soa == SOA_list[4])
		{
		oSetAttribute(object_soa4,aFILLED);
		oSetAttribute(object_soa4,aVISIBLE);
		oMove(object_soa4,position_x,position_y[4]);	
		}
	//---------------------------------------------------------------------
	// SSD 5		
	if (curr_soa == SOA_list[5])
		{
		oSetAttribute(object_soa5,aFILLED);
		oSetAttribute(object_soa5,aVISIBLE);
		oMove(object_soa5,position_x,position_y[5]);	
		}
	//---------------------------------------------------------------------
	// SSD 6		
	if (curr_soa == SOA_list[6])
		{
		oSetAttribute(object_soa6,aFILLED);
		oSetAttribute(object_soa6,aVISIBLE);
		oMove(object_soa6,position_x,position_y[6]);	
		}
	//---------------------------------------------------------------------
	// SSD 7		
	if (curr_soa == SOA_list[7])
		{
		oSetAttribute(object_soa7,aFILLED);
		oSetAttribute(object_soa7,aVISIBLE);
		oMove(object_soa7,position_x,position_y[7]);	
		}
	//---------------------------------------------------------------------
	// SSD 8		
	if (curr_soa == SOA_list[8])
		{
		oSetAttribute(object_soa8,aFILLED);
		oSetAttribute(object_soa8,aVISIBLE);
		oMove(object_soa8,position_x,position_y[8]);	
		}
	//---------------------------------------------------------------------
	// SSD 9		
	if (curr_soa == SOA_list[9])
		{
		oSetAttribute(object_soa9,aFILLED);
		oSetAttribute(object_soa9,aVISIBLE);
		oMove(object_soa9,position_x,position_y[9]);	
		}
	//---------------------------------------------------------------------
	// SSD 10		
	if (curr_soa == SOA_list[10])
		{
		oSetAttribute(object_soa10,aFILLED);
		oSetAttribute(object_soa10,aVISIBLE);
		oMove(object_soa10,position_x,position_y[10]);	
		}
	//---------------------------------------------------------------------
	// SSD 11		
	if (curr_soa == SOA_list[11])
		{
		oSetAttribute(object_soa11,aFILLED);
		oSetAttribute(object_soa11,aVISIBLE);
		oMove(object_soa11,position_x,position_y[11]);	
		}
	//---------------------------------------------------------------------
	// SSD 12		
	if (curr_soa == SOA_list[12])
		{
		oSetAttribute(object_soa12,aFILLED);
		oSetAttribute(object_soa12,aVISIBLE);
		oMove(object_soa12,position_x,position_y[12]);	
		}
	//---------------------------------------------------------------------
	// SSD 13		
	if (curr_soa == SOA_list[13])
		{
		oSetAttribute(object_soa13,aFILLED);
		oSetAttribute(object_soa13,aVISIBLE);
		oMove(object_soa13,position_x,position_y[13]);	
		}
	//---------------------------------------------------------------------
	// SSD 14		
	if (curr_soa == SOA_list[14])
		{
		oSetAttribute(object_soa14,aFILLED);
		oSetAttribute(object_soa14,aVISIBLE);
		oMove(object_soa14,position_x,position_y[14]);	
		}
	//---------------------------------------------------------------------
	// SSD 15		
	if (curr_soa == SOA_list[15])
		{
		oSetAttribute(object_soa15,aFILLED);
		oSetAttribute(object_soa15,aVISIBLE);
		oMove(object_soa15,position_x,position_y[15]);	
		}
	//---------------------------------------------------------------------
	// SSD 16		
	if (curr_soa == SOA_list[16])
		{
		oSetAttribute(object_soa16,aFILLED);
		oSetAttribute(object_soa16,aVISIBLE);
		oMove(object_soa16,position_x,position_y[16]);	
		}
	//---------------------------------------------------------------------
	// SSD 17		
	if (curr_soa == SOA_list[17])
		{
		oSetAttribute(object_soa17,aFILLED);
		oSetAttribute(object_soa17,aVISIBLE);
		oMove(object_soa17,position_x,position_y[17]);	
		}
	//---------------------------------------------------------------------
	// SSD 18		
	if (curr_soa == SOA_list[18])
		{
		oSetAttribute(object_soa18,aFILLED);
		oSetAttribute(object_soa18,aVISIBLE);
		oMove(object_soa18,position_x,position_y[18]);	
		}
	//---------------------------------------------------------------------
	// SSD 19		
	if (curr_soa == SOA_list[19])
		{
		oSetAttribute(object_soa19,aFILLED);
		oSetAttribute(object_soa19,aVISIBLE);
		oMove(object_soa19,position_x,position_y[19]);	
		}
		
}__HEADER__
VISMAP.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------
// This is the main countermanding protocol.  It works like this.
// 1) Define all varialbes
// 2) Setup random variables needed for a trial
// start loop
// 3) Run a trial
// 4) End the trial
// 		a) deliver rewards and punishments
//		b) take care of ITI
// 		c) set up variables for next run
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011
	
declare VISMAP();						

process VISMAP()     
	{
	declare hide int run_vm_sess	= 8;
	declare hide int run_idle		= 0;
	declare hide int minStims  		= 5;
	declare hide int stimRange   	= 5;
	declare hide int nStims 		= random(stimRange)+minStims;
	
	Trl_number				= 1;
	Comp_Trl_number			= 0;
	Block_number			= 1;
	
	
	if (Last_task != run_vm_sess)				// Only do this if we have gone into another task or if this is first run of day.
		{
		system("dialog Select_Monkey");
		spawnwait DEFAULT(State,				// Set all globals to their default values.
						Monkey,					
						Room);				
		Last_task = run_vm_sess;
		}
		
	dsend("DM RFRSH");                			// This code sets up a vdosync macro definition to wait a specified ...
	if (Room == 23)                   			// ...number of vertical retraces based on the room in which we are    ...
		{                             			// ...recording.  This kluge is necessary because vdosync operates     ...
		dsendf("vw %d:\n",1);         			// ...differently in the different rooms.  In 028 a command to wait    ...
		}                             			// ...2 refresh cycles usually only waits for one and a command to     ...
	else                              			// ...wait for 1 usually only waits for 0.  Room 029 and 023 appear to ...
		{                             			// ...work properly.
		dsendf("vw %d:\n",2);
		}
	dsend("EM RFRSH");
	
	while(!OK)									
		{
		nexttick;
		if(Set_monkey)
			{
			spawnwait DEFAULT(State,			// Set all globals to their default values for a particular monkey.
						Monkey,						
						Room);	
			Set_monkey = 0;
			}
		}
	
	//spawnwait GOODVARS(State);
	
	spawnwait SET_SOA(max_soa, 					// Set up the right graph for INH f(x).
					min_soa,
					n_soas);
					
	spawnwait SET_CLRS(n_targ_pos);
	
	spawnwait SETMGTRL(n_targ_pos,				// Select variables for the first countermanding...
				go_weight,						// ...trial.  This happens once outside of the while...
				stop_weight,					// ...loop just to set up for the first iteration. After...
				ignore_weight,					// ...that SETC_TRL.pro will be called by END_TRL.pro.
				n_soas,
				min_holdtime,
                max_holdtime,
				expo_jitter,
				expo_jitter_soa);

	Event_fifo[Set_event] = MemHeader_;			// Set a strobe to identify this file as a MGUIDE session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = Identify_Room_;		// Set a strobe to identify this file as a MGUIDE session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	Event_fifo[Set_event] = Room;				// Set a strobe to identify this file as a MGUIDE session and...	
	Set_event = (Set_event + 1) % Event_fifo_N;	// ...incriment event queue.
	
	nexttick 10;								// to prevent buffer overflows after task reentry.
	
//	CheckMotion = 1;							// set global for watching the motion detector
//	spawn WATCHMTH;								// start watching the mouth motion detector if present
//	spawn WATCHBOD;								// start watching motion detector for body if present
	
	while (State == run_mg_sess)				// while the user has not yet terminated the countermanding task
		{
				
		 spawnwait VMAPTRIAL(allowed_fix_time, 	// run a trial with variables defined in SETC_TRL.pro
							curr_holdtime, 
							trl_type, 
							max_saccade_time, 
							curr_soa, 
							cancl_time, 
							max_sacc_duration, 
							targ_hold_time,
							object_fix,nStims);		
		
		spawnwait END_TRL(trl_outcome);			// end a trial with trl_outcome set in CMDTRIAL.pro
				
		nexttick;								// wait at least one cycle and do it all again
		
		while(Pause)							// gives the user the ability to pause the task without ending it
			{
			nexttick;
			}
		
		}

												// the State global variables allow a control structure...
												// ...to impliment the task.
	State = run_idle;							// If we are out of the while loop the user wanted...
												// ...to stop MGUIDE.
	CheckMotion = 0;							// stop watching for motion detector.
												
	oDestroy(object_fixwin);					// destroy all task graph objects
	oDestroy(object_targwin);
	oDestroy(object_fix);
	oDestroy(object_targ);
	oDestroy(object_eye);
	
	oSetGraph(gleft,aCLEAR);					// clear the left graph
	
	oDestroy(object_soa0);						// destroy all inh f(x) graph objects
	oDestroy(object_soa1);						
	oDestroy(object_soa2);						
	oDestroy(object_soa3);						
	oDestroy(object_soa4);						
	oDestroy(object_soa5);						
	oDestroy(object_soa6);						
	oDestroy(object_soa7);						
	oDestroy(object_soa8);						
	oDestroy(object_soa9);						
	oDestroy(object_soa10);						
	oDestroy(object_soa11);						
	oDestroy(object_soa12);						
	oDestroy(object_soa13);						
	oDestroy(object_soa14);						
	oDestroy(object_soa15);						
	oDestroy(object_soa16);						
	oDestroy(object_soa17);						
	oDestroy(object_soa18);						
	oDestroy(object_soa19);
//	oDestroy(object_30_70);
	
	oSetGraph(gleft,aCLEAR);					// clear the left graph
		
	spawn IDLE;									// return control to IDLE.pro
    
	}__HEADER__
VMAPTRIAL.pro
__FOOTER__
// VMAPTRIAL.pro presents a series of non-colored visual stimuli capped off with a colored
// stimulus that should be the target of a saccade.
// Started by kaleb.a.lowe@vanderbilt.edu on 9/5/15

// Start by copying from MGTRIAL.pro... (written by david.c.godlove@vanderbilt.edu January 2011)

declare hide int StimTm;									// Should we stim on this trial?

declare hide int Trl_Outcome;			// Global output used in END_TRL
declare hide int Trl_Start_Time;		// Global output used in END_TRL
declare hide int LastStopOutcome = 1;	// Global output used to staircase SSD
declare hide int nogosoa;
declare hide int sacctarg;
declare hide int ReactionTime;

/* Edit variables here */
declare VMAPTRIAL(allowed_fix_time,		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime, 			// see SETC_TRL.pro
				trl_type, 				// see SETC_TRL.pro
				max_saccade_time, 		// see ALL_VARS.pro and DEFAULT.pro
				curr_soa, 				// see SETC_TRL.pro
				cancl_time,				// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,			// see ALL_VARS.pro and DEFAULT.pro
				object_fix,nStims);			// animated graph object

process VMAPTRIAL(allowed_fix_time, 		// see ALL_VARS.pro and DEFAULT.pro
				curr_holdtime,     		// see SETC_TRL.pro
				trl_type,          		// see SETC_TRL.pro
				max_saccade_time,  		// see ALL_VARS.pro and DEFAULT.pro
				curr_soa,          		// see SETC_TRL.pro
				cancl_time,        		// see ALL_VARS.pro and DEFAULT.pro
				max_sacc_duration, 		// see ALL_VARS.pro and DEFAULT.pro
				targ_hold_time,    		// see ALL_VARS.pro and DEFAULT.pro
				object_fix,nStims)        		// animated graph object

	{
	
	// Number the trial types to make them easier to read below
	declare hide int 	go_trl 		= 0;
	declare hide int 	stop_trl 	= 1;
	declare hide int 	ignore_trl 	= 2;
	
	// Number the trial stages to make them easier to read below
	declare hide int 	need_fix  	= 1;
	declare hide int 	fixating  	= 2;
	declare hide int 	targ_on   	= 3;
	declare hide int    targ_off	= 4;
	declare hide int	fix_off		= 5;
	declare hide int 	in_flight 	= 6;
	declare hide int 	on_target 	= 7;	
	declare hide int 	stage;
	
	// Number the stimuli pages to make reading easier
	declare hide int   	blank       = 0;
	declare hide int	fixation_pd = 1;
	declare hide int	fixation    = 2;
	declare hide int	target_pd   = 3;
	declare hide int	target      = 4;
	declare hide int	signal_pd   = 5;
	declare hide int	signal      = 6;

	// Assign values to success and failure so they are more readable
	declare hide int	success		= 1;
	declare hide int	failure		= 0;
	declare hide int	no_change	= 2;
	
	// Code all possible outcomes
	declare hide int constant no_fix		= 1;	// never attained fixation
	declare hide int constant broke_fix		= 2;	// attained and then lost fixation before target presentation
	declare hide int constant go_wrong		= 3;	// never made saccade on a go trial
	declare hide int constant nogo_correct	= 4;	// successfully canceled trial
	declare hide int constant sacc_out		= 5;	// made an inaccurate saccade out of the target box
	declare hide int constant broke_targ	= 6;	// didn't hold fixation at the target for long enough
	declare hide int constant go_correct	= 7;	// correct saccade on a go trial
	declare hide int constant nogo_wrong	= 8;	// error noncanceled trial
	declare hide int constant body_move		= 12;	// error body movement (for training stillness)
	declare hide int constant too_fast		= 14;	// low RT while in training to slow down.
	declare hide int constant early_sacc	= 9;	// made a saccade before fixation offset												
	declare hide int constant no_sacc		= 10;	// didn't make a saccade after cued to do so
	declare hide int constant correct_sacc	= 11;	// correct saccade after cue
	
	// Timing variables which will be used to time task
	declare hide float 	fix_spot_time; 					
	declare hide float  targ_time; 					
	declare hide float  saccade_time;
	declare hide float 	aquire_fix_time;
	declare hide float 	stop_sig_time;
	declare hide float	aquire_targ_time;	
	declare hide float	fix_off_time;
	// This variable makes the while loop work
	declare hide int 	trl_running;
	
	// This counts the non-target stimuli
	declare hide int nStimShown;
	
	// Stim complete?
	declare hide int 	StimDone;
	StimDone = 0;
	
	
	// Have to be reset on every iteration since 
	// variable declaration only occurs at load time
	trl_running 		= 1;
	stage 				= need_fix;
	
	// Tell the user what's up
	printf(" \n");
	printf("# %d",Trl_number);
	printf(" (%d",Comp_Trl_number);
	printf(" correct)\n");
	printf("holdtime = %d\n",curr_holdtime);
	printf("soa = %d\n",curr_soa);


	Event_fifo[Set_event] = VMapHeader_;									// queue TrialStart_ strobe
	Set_event = (Set_event + 1) % Event_fifo_N;			
																			// HERE IS WHERE THE FUN BEGINS
	Event_fifo[Set_event] = TrialStart_;									// queue TrialStart_ strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	dsendf("vp %d\n",fixation_pd);											// flip the pg to the fixation stim with pd marker
	fix_spot_time = time();  												// record the time
	Event_fifo[Set_event] = FixSpotOn_;										// queue strobe
	Set_event = (Set_event + 1) % Event_fifo_N;								// incriment event queue
	dsendf("XM RFRSH:\n"); 													// wait one vertical retrace
	dsendf("vp %d\n",fixation);												// flip the pg to the fixation stim without pd marker
	oSetAttribute(object_fix, aVISIBLE); 									// turn on the fixation point in animated graph
	
	
	while (trl_running)														// trials ending will set trl_running = 0
		{	
		
	//--------------------------------------------------------------------------------------------
	// STAGE need_fix (the fixation point is on, but the subject hasn't looked at it)
		if (stage == need_fix)
			{		
			if (In_FixWin)													// If the eyes have entered the fixation window (before time, see below)...
				{
				aquire_fix_time = time();									// ...function call to time to note current time and...
				Trl_Start_Time = aquire_fix_time;							// Global output
				Event_fifo[Set_event] = Fixate_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = fixating;
				nStimShown = 0;												// Start counter for number of stims
				// ...advance to the next stage.
				}
			else if (time() > fix_spot_time + allowed_fix_time)				// But if time runs out...
				{
				Trl_Outcome = no_fix;    									// TRIAL OUTCOME ERROR (no fixation)
				LastStopOutcome = no_change;								// Don't change SSD
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen,...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Aborted (no fixation)\n");							// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}			
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE fixating (the subject is looking at the fixation point waiting for target onset)	
		
		else if (stage == fixating)
			{
			if (!In_FixWin)													// If the eyes stray out of the fixation window...
				{
				Trl_Outcome = broke_fix;									// TRIAL OUTCOME ERROR (broke fixation)
				LastStopOutcome = no_change;								// Don't change SSD
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Aborted (broke fixation)\n");						// ...tell the user whats up...
				trl_running = 0;											// ...and terminate the trial.
				}
				
				
//////////////////////////// peri-event stimulation code /////////////////////////////////////////////			
				
			else if (StimTm == 1 && In_FixWin && StimDone == 0 && time() > aquire_fix_time + (curr_holdtime - 140)) //stimulate 150ms before target onset
				{		
						spawn STIM(stim_channel);
						StimDone = 1;
				}

			else if (StimTm == 2 && In_FixWin && StimDone == 0 && time() > aquire_fix_time + (curr_holdtime - 40)) //stimulate 150ms before target onset
				{		
						spawn STIM(stim_channel);
						StimDone = 1;
						
				}
//////////////////////////// peri-event stimulation code /////////////////////////////////////////////			
				
			else if (In_FixWin && time() > aquire_fix_time + curr_holdtime)	// But if the eyes are still in the window at end of holdtime...
				{
				// Get Target information (Next section is from SETMGTRL.pro)
				curr_target = random(N_targ_pos);						// 	COULD WEIGHT THIS IF NEED BE (see logic below)
				// -----------------------------------------------------------------------------------------------
				// 3) Set up all vdosync pages for the upcoming trial using globals defined by user and setc_trl
				spawnwait MG_PGS(curr_target,							// set above
							fixation_size, 								// see DEFAULT.pro and ALL_VARS.pro
							fixation_color, 							// see SET_CLRS.pro
							sig_color, 									// see DEFAULT.pro and ALL_VARS.pro
							scr_width, 									// see RIGSETUP.pro
							scr_height, 								// see RIGSETUP.pro
							pd_left, 									// see RIGSETUP.pro
							pd_bottom, 									// see RIGSETUP.pro
							pd_size,									// see RIGSETUP.pro
							deg2pix_X,									// see SET_COOR.pro
							deg2pix_Y,									// see SET_COOR.pro
							unit2pix_X,									// see SET_COOR.pro
							unit2pix_Y,									// see SET_COOR.pro
							object_targ);								// see GRAPHS.pro
				
				dsendf("vp %d\n",target_pd);								// ...flip the pg to the target with pd marker...	
				targ_time = time(); 										// ...record the time...
				Event_fifo[Set_event] = Target_;						// Queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;
				dsendf("XM RFRSH:\n"); 										// ...wait one vetical retrace...
				dsendf("vp %d\n",target);	
				dsendf("vp %d\n",fixation);									// ...flip the pg to the target without pd marker.
				
//				if (trl_type == stop_trl ||									// If it is a stop or ignore trial present the signal.
//				trl_type == ignore_trl)										// This happens here so that no overhead intervenes between commands.
//					{														// That way the # of vertical retraces remains independant of incidental processing time.
//																			// (Even so, sometimes we will accidentally wait n+1 retraces. Such is vdosync.)
//					dsendf("vw %d\n",curr_ssd-1);							// Wait so many vertical retraces (one is waited implicitly b/c photodiode marker above)...
//					dsendf("vp %d\n",signal_pd);							// ...flip the pg to the signal with the pd marker...
//					stop_sig_time = targ_time + 
//						(round(curr_ssd * (1000.0 / Refresh_rate))); 		// ...record TEMPO time of presentation...
//					dsendf("XM RFRSH:\n"); 									// ...wait 1 vertical retrace...
//					dsendf("vp %d\n",signal);								// ...and flip the pg to the signal without pd marker.
//					}
//					
//				Event_fifo[Set_event] = FixSpotOff_;						// Queue strobe...
//				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				
																			// Now the animated graphs have to catch up (seperate so that stim timing stays tight)
//				if (trl_type == go_trl)										// If the trial is a go trial...
//					{
//					oSetAttribute(object_targ, aVISIBLE); 					// ...show target in animated graph...
//					oSetAttribute(object_fix, aINVISIBLE); 					// ...remove fixation point from animated graph.
//					}
//				else if (trl_type == ignore_trl)							// But if the trial is an ignore trial
//					{
//					oSetAttribute(object_targ, aVISIBLE); 					// ...just show target in animated graph (fixation point stays on).
//					}														// If it is a stop trial the target just never comes up in the animated graph.
				sacctarg = 1;
				oSetAttribute(object_targ, aVISIBLE); 						// ...show target in animated graph...	
				stage = targ_on;											// Advance to the next trial stage.				
				}
			}
			
			

	//--------------------------------------------------------------------------------------------
	// STAGE targ_on (the target has been presented but the subject is still fixating)		
		else if (stage == targ_on)
			{		
			if (!In_FixWin)													// If the eyes leave the fixation window...
				{
//				printf("                          soa = %d\n",round(curr_soa * (1000.0/Refresh_rate)));
				printf("                          premature rt = %d\n",time() - targ_time);
				Trl_Outcome = early_sacc;									// TRIAL OUTCOME ERROR (sacc before cued to do so)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);
				dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
				Event_fifo[Set_event] = EarlySaccade_;							// ...queue strobe...
				Event_fifo[Set_event] = EarlySaccade_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;				
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (early saccade)\n");							// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}
//////////////////////////// peri-event stimulation code /////////////////////////////////////////////			
				
			else if (StimTm == 3 && In_FixWin && StimDone == 0 && time() > targ_time + (curr_soa - 140)) //stimulate 150ms before target onset
				{		
						spawn STIM(stim_channel);
						StimDone = 1;
				}

			else if (StimTm == 4 && In_FixWin && StimDone == 0 && time() > targ_time + (curr_soa - 40)) //stimulate 150ms before target onset
				{		
						spawn STIM(stim_channel);
						StimDone = 1;
						
				}
//////////////////////////// peri-event stimulation code /////////////////////////////////////////////		
				
			else if (In_FixWin &&  											// But if no saccade occurs...
				time() > targ_time + curr_soa)	 							// ...and the stim onset asychrony passes...
				{
//				printf("                          soa = %d\n",round(curr_soa * (1000.0/Refresh_rate)));
				
				
				if (trl_type == stop_trl ||									// If it is a stop or ignore trial present the signal.
				trl_type == ignore_trl)										// This happens here so that no overhead intervenes between commands.
				{

					dsendf("vp %d\n",signal_pd);										// Flip the pg to the blank screen with the photodiode marker...
					fix_off_time = time();										// ...and record the time that the fixation point was extinguished.
					Event_fifo[Set_event] = FixSpotOff_;						// Queue strobe...
					Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
					dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
					dsendf("vp %d\n",signal);									// ...flip the pg to the blank screen without pd marker.
					oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
					if (nStimShown < nStims)
					{
						stage = targ_off;
					}
					else
					{
						stage = fix_off;
					}
				}
				else if (trl_type == go_trl)
				{

					dsendf("vp %d\n",signal_pd);										// Flip the pg to the blank screen with the photodiode marker...
					fix_off_time = time();										// ...and record the time that the fixation point was extinguished.
					Event_fifo[Set_event] = FixSpotOff_;						// Queue strobe...
					Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
					dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
//					dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen without pd marker.
					dsendf("vp %d\n",signal);
					oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
					stage = fix_off;											// ...and advance to the next stage.
				}
				}
			
			// else if (In_FixWin &&  											// But if no saccade occurs...
				// time() > targ_time + max_saccade_time && 					// ...and time for a saccade runs out...
				// trl_type == go_trl)				// ...and a saccade was supposed to be made.
				// {
				// Trl_Outcome = go_wrong;           							// TRIAL OUTCOME ERROR (incorrect go trial)
				// LastStopOutcome = no_change;								// Don't change SSD
				// dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				// oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				// oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				// printf("Error (no saccade)\n");								// ...tell the user whats up...
				// spawn SVR_BELL();
				// trl_running = 0;											// ...and terminate the trial.
				// }				
//			else if (In_FixWin &&											// But if no saccade occurs...
//				time() > targ_time + curr_ssd + cancl_time && 				// ...and time for a saccade runs out...
//				trl_type == stop_trl)										// ...and a saccade was NOT supposed to be made...
//				{
//				Trl_Outcome = nogo_correct;   								// TRIAL OUTCOME CORRECT (canceled trial)
//				LastStopOutcome = success;									// set the global for staircasing...
//				Correct_trls = Correct_trls + 1;							// ...set a global for 1DR...
//				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
//				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
//				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
//				Event_fifo[Set_event] = Correct_;							// ...queue strobe...
//				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
//				printf("Correct (canceled)\n");								// ...tell the user whats up...
//				if (Canc_alert)
//					{
//					spawn SVR_BEL2();										// for training purposes
//					}
//				trl_running = 0;  											// ...and terminate the trial.
//				}		
			}
		else if (stage == targ_off)
		{
			if (~In_FixWin)
			{
				printf("                   visual_premature rt = %d\n",time() - targ_time);
				Trl_Outcome = early_sacc;									// TRIAL OUTCOME ERROR (sacc before cued to do so)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);
				dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
				Event_fifo[Set_event] = EarlySaccade_;							// ...queue strobe...				
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (early saccade)\n");							// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
			}
			else if (In_FixWin && (time() - targ_time) >= curr_soa)
			{
				dsendf("vp %d\n",blank);
				dsendf("vp %d\n",blank);
				// Put an event code for stim
				oSetAttribute(object_targ,aINVISBLE); 						// turn off this target
				stage = fixating;
			}
		}
		else if (stage == fix_off)
			{
			
			////////////////////////////////////////////////////////////////////////////////////////

			if (!In_FixWin && (trl_type == go_trl))													// If the eyes leave the fixation window...			
				{
				saccade_time = time();										// ...record the time...
				// ...we have a saccade, so...
				if (70 > saccade_time - fix_off_time)
				{
				printf("                   visual_premature rt = %d\n",time() - targ_time);
				Trl_Outcome = early_sacc;									// TRIAL OUTCOME ERROR (sacc before cued to do so)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);
				dsendf("vp %d\n",blank);								// Flip the pg to the blank screen...
				Event_fifo[Set_event] = EarlySaccade_;							// ...queue strobe...				
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (early saccade)\n");							// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}
				else if (150 < (saccade_time - fix_off_time))
				{
				Event_fifo[Set_event] = Saccade_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				ReactionTime = saccade_time - fix_off_time;
				printf("                        visual rt = %d\n",ReactionTime);	// ...tell the user whats up...
				stage = in_flight;											// ...and advance to the next stage.
				}
						// ...and terminate the trial.
			}
			else if (In_FixWin &&  											// But if no saccade occurs...
				(time() > fix_off_time + max_saccade_time)&& (trl_type == go_trl)) 					// ...and time for a saccade runs out...
				{
				Trl_Outcome = no_sacc;           							// TRIAL OUTCOME ERROR (no saccade after cue)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (no saccade)\n");								// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}	
			else if (In_FixWin &&  											// But if no saccade occurs...
				time() > fix_off_time + cancl_time && trl_type == stop_trl) 					// ...and time for a saccade runs out...
				{
				Trl_Outcome = nogo_correct;           							// TRIAL OUTCOME ERROR (no saccade after cue)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				Event_fifo[Set_event] = Correct_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				printf("Correct (canceled)\n");								// ...tell the user whats up...
				if (Canc_alert)
					{
					spawn SVR_BEL2();										// for training purposes
					}
				sacctarg = 0;
				trl_running = 0;  											// ...and terminate the trial.
				}													// ...and terminate the trial.
			else if (!In_FixWin &&  											// But if no saccade occurs...
				time() < fix_off_time + cancl_time && trl_type == stop_trl) 					// ...and time for a saccade runs out...
				{
				Trl_Outcome = nogo_wrong;								//TRIAL OUTCOME ERROR (noncanceled trial)
				LastStopOutcome = no_change;
				printf("Error (noncanceled)\n");						// ...tell the user whats up...
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}	
			}			
			
	//--------------------------------------------------------------------------------------------
	// STAGE in_flight (eyes have left fixation window but have not entered target window)		
		else if (stage == in_flight)
			{
			if (In_TargWin)													// If the eyes get into the target window...
				{
				
//				dsendf("XM RFRSH:\n");
				dsendf("vp %d\n",target_pd);								// ...flip the pg to the target with pd marker...	
				aquire_targ_time = time(); 									// ...record the time...
				sacctarg = 0;
				dsendf("XM RFRSH:\n"); 										// ...wait for one retrace cycle...
				dsendf("vp %d\n",target);									// ...flip the pg to the target without pd marker.
				Event_fifo[Set_event] = Decide_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				stage = on_target;											// ...and advance to the next stage of the trial.
				}
			else if (time() > saccade_time + max_sacc_duration)				// But, if the eyes are out of the target window and time runs out...
				{
				Trl_Outcome = sacc_out;   									// TRIAL OUTCOME ERROR (innacurrate saccade)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);									// Flip the pg to the blank screen...
				Event_fifo[Set_event] = Error_sacc;					// ...queue strobe for Neuro Explorer
				Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (inaccurate saccade)\n");						// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0; 											// ...and terminate the trial.
				}
			}
		
		
		
	//--------------------------------------------------------------------------------------------
	// STAGE on_target (eyes have entered the target window.  will they remain there for duration?)	
		else if (stage == on_target)
			{
			if (!In_TargWin)												// If the eyes left the target window...
				{			
				Trl_Outcome = broke_targ;									// TRIAL OUTCOME ERROR (broke target fixation)
				LastStopOutcome = no_change;
				dsendf("vp %d\n",blank);
				Event_fifo[Set_event] = BreakTFix_;					// ...queue strobe for Neuro Explorer
				Set_event = (Set_event + 1) % Event_fifo_N;				// ...incriment event queue.				
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				printf("Error (broke target fixation)\n");					// ...tell the user whats up...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}		
			else if (In_TargWin  											// But if the eyes are still in the target window...
				&&  time() > aquire_targ_time + targ_hold_time)				// ...and the target hold time is up...				
				{
				Trl_Outcome = correct_sacc;									//TRIAL OUTCOME CORRECT (correct sacc trial)
				LastStopOutcome = success;
				Event_fifo[Set_event] = Correct_;							// ...queue strobe...
				Set_event = (Set_event + 1) % Event_fifo_N;					// ...incriment event queue...
				printf("Correct (saccade)\n");								// ...tell the user whats up...
				dsendf("vp %d\n",blank);									// ...flip the pg to the blank screen...
				oSetAttribute(object_targ, aINVISIBLE); 					// ...remove target from animated graph...
				oSetAttribute(object_fix, aINVISIBLE); 						// ...remove fixation point from animated graph...
				sacctarg = 0;
				trl_running = 0;											// ...and terminate the trial.
				}			
			}
			
		nexttick;
		}
			
		if (Move_ct > 0)
			{
			Trl_Outcome = body_move;   										// TRIAL OUTCOME ABORTED (the body was moving)
			LastStopOutcome = no_change;									// ...make sure that the last outcome is cleared.	
			dsendf("vp %d\n",blank);										// Flip the pg to the blank screen...
			oSetAttribute(object_targ, aINVISIBLE); 						// ...remove target from animated graph...
			oSetAttribute(object_fix, aINVISIBLE); 							// ...remove fixation point from animated graph...
			printf("Aborted (body movement)\n");							// ...tell the user whats up...
			sacctarg = 0;
			trl_running = 0; 												// ...and terminate the trial.
			}	
			
		nexttick;
		}
	__HEADER__
WAIT_MU.pro
__FOOTER__
//--------------------------------------------------------------------------------------------------------------
// Wait a user defined number if micro-seconds.  (Just like wait() but 
// with micro instead of milli senoncds and obviously needing a spawnwait
// statement before it.
//
// ripped off by david.c.godlove@vanderbilt.edu 	January, 2011

declare WAIT_MU(int u_sec);

process WAIT_MU(int u_sec)			// uSec between 1 and 1000
	{
	int start, duration, clock_cycles;
	
	clock_cycles = u_sec * 1.192;	// Convert uSec to 1192000 Hz hardware clock cycles (this is approximate).
									// The PC clock does not count in true uSec.  It counts at a rate around
									// 1192000 Hz (give or take based on many variables).  Yours may differ 
									// from this estimate.  To find out use...
									// time1 = timeus();
									// nexttick;	
									// time2 = timeus();
									// cycles_per_ms = ((time2 - time1)/asets)/1000.0;
									// NOTE: This answer will be variable, so try it several times before... 
									// ...settling on an answer for good.
									// see pg 6-94.
	start = timeus();
	duration = 0;
	while (duration < clock_cycles)
		{
		duration = (timeus() - start) & 0xFFFF;
		}
	}__HEADER__
WATCHBOD.pro
__FOOTER__
// For use with a simple circuit which detects when the animal shifts
// weight in the chair.
// 
// written by david.c.godlove@vanderbilt.edu 	March, 2011
// adapted from WATCHMTH.pro

//declare CheckBody	= 1;									// GLOBAL ALERT! Check body can be set to 0 to end this function
															// MOVED TO RIGSETUP.pro so that it can be toggled by rig
															
declare CheckMotion = 1;									// For turning on and off while task is running or not															
										

declare WATCHBOD();
	
process WATCHBOD()                                  		                                                                                                    
	{ 		
			
	declare body_channel	= 2;							// these should be set by rig setup but...
	declare sample_n        = 0;
	declare a_sets = 2;
			
 	while (CheckBody & CheckMotion)		
		{
		sample_n = 0;
		while (sample_n < a_sets)
			{
			
			if (ctable_set(body_channel,sample_n,0))

				{
				if (Move_ct < Max_move_ct)
					{
					Move_ct = Move_ct + 1;
					}
				spawn TONE(failure_tone,tone_duration);		// present negative tone
				}


			sample_n = sample_n + 1;
			}
		nexttick;
		}
	}__HEADER__
WATCHEYE.pro
__FOOTER__
//----------------------------------------------------------------------
// WATCHEYE - This process monitors eye position.  It runs every process 
// cycle so it is important to minimize the computations done here.  
// WATCHEYE does the following:
//  1. updates ax, ay as the current analog values for X,Y position
//  2. maps ax,ay to x,y into degrees
//  3. calls LOCATE_I to monitor eyes in relation to target windows
//  4. moves the EYE object to the new x,y position
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011

											
#include C:\TEMPO\ProcLib\LOCATE_I.pro

declare Eye_on_VDOSync = 0;
declare CenterEyeNow = 0;

declare WATCHEYE(int eye_X_channel, 
	int eye_Y_channel, 
	float analogUnits, 
	float maxvoltage,	
	float deg2pix_X,
	float deg2pix_Y);

process WATCHEYE(int eye_X_channel, 
	int eye_Y_channel, 
	float analogUnits, 
	float maxvoltage,
	float deg2pix_X,
	float deg2pix_Y)
    {
	
	declare hide float eye_x, eye_y, oldx, oldy;
	declare hide int lasttime, plot_x, plot_y;

	
    while (1)  														// From this moment until the end of eternity. (Did you know what you were starting?)                        
        {      
		
        eye_x = atable(eye_x_channel);             					// Get analog values
        eye_y = atable(eye_y_channel);
		
				
		eye_x = (eye_x * ((MaxVoltage*2) / AnalogUnits) * X_Gain) - X_Offset;	// Translate to degrees (x_ and y_gain values are set during calibration routine)
		eye_y = (eye_y * ((MaxVoltage*2)  / AnalogUnits) * Y_Gain) - Y_Offset;	
        
		if(CenterEyeNow)											// GLOBAL flag set by key press to center eye position
			{
			X_Offset = X_Offset + eye_x;
			Y_Offset = Y_Offset + eye_y;
			CenterEyeNow = 0;
			}
		
		plot_x = eye_x * deg2pix_X;
		plot_y = eye_Y * deg2pix_Y;
        if (plot_x != oldx || plot_y != oldy)     					// If position has changed..
            {
			
						
			spawn LOCATE_I(eye_x,									//...figure out where the eyes are in relation to stim...
						eye_y,
						fix_win_left,
						fix_win_right,
						fix_win_down, 
						fix_win_up,
						targ_win_left, 
						targ_win_right,
						targ_win_down, 
						targ_win_up);
							
		
			
			if(time() > lasttime + 16)								//...and if more than a single refresh has gone by...
				{
				
				oMove(object_eye, plot_x, plot_y);            		// ..update eye object...
				if (Eye_on_VDOSync)
					{
					dsendf("cl;\n");
					dsendf("ru %d,%d,%d,%d;\n",plot_x-4,(-1*plot_y)-4,plot_x+3,(-1*plot_y)+3); // .. and move vdosync location (could be good for debugging).
					dsendf("co %d;\n",5);
					}
				lasttime = time();
				oldx = plot_x;                   					// This is the new position.
				oldy = plot_y;
				}					
			}
            
        nexttick;
		
        }
    }__HEADER__
WATCHMTH.pro
__FOOTER__

// code for use with PELCO MD2001 Motion Detector
// when inactive (still)+10v. when active (moving) motion is detected and ~0v 
// the unit will automatically reset to inactive after motion ceases.
// the dip switches on the rear of the unit define the reset interval.
// currently set to 1/2 sec (shortest interval availible). so motions 
// less than 1/2 second apart will not be detected as separate events.
// 
// written by david.c.godlove@vanderbilt.edu 	March, 2011
// borrowed heavily from code by EEE

// declare CheckMouth = 1;									// GLOBAL ALERT! Check mouth can be set to 0 to end this function
															// MOVED TO RIGSETUP.pro so can be toggled in different rigs.
															
declare CheckMotion = 1;									// For turning on and off while task is running or not

declare WATCHMTH();
	
process WATCHMTH()                                  		                                                                                                    
	{ 		
			
	declare mouth_channel	= 3;							// these should be set by rig setup but...
	declare mouth_thresh	= 13720;						// ...what's the point since they quit making this motion detector.
	declare still			= 0;		
	declare moving			= 1;	
	declare mouth_status	= still;		
	declare last_status		= still;
	declare mouth;
	declare mouth_time;	
			
			
	if (atable(mouth_channel) < mouth_thresh)				// check to see if mouth is already moving when WATCHMTH() is first called
		{		
		mouth_status	= moving;							// initial status is moving
		last_status		= moving;		
		}		
		
		while (CheckMouth & CheckMotion)		
			{
			mouth = atable(mouth_channel);
			if (mouth < mouth_thresh)							// what is the current status of the mouth?
				{
				mouth_status = moving;
				if (TrainingStill)								// if we are using the motion detector to train the monk to be still instead
						{
						if (time() > mouth_time + 200)
							{
							spawn TONESWEP();					// present negative tone which can be distingueshed from task tones
							if (Move_ct < Max_move_ct)
								{
								Move_ct = Move_ct + 1;			// and increase the timeout counter
								mouth_time = time();
								}						
							}					
						}
				}
			else if (mouth >= mouth_thresh)
				{
				mouth_status = still;
				}
			
			if (mouth_status != last_status)					// did a change in the status occur on this interation?
				{
				if (mouth_status == moving)
					{
					Event_fifo[Set_event] = MouthBegin_;		// queue TrialStart_ strobe
					Set_event = (Set_event + 1) % Event_fifo_N;	// incriment event queue
					}
				else if (mouth_status == still)
					{
					Event_fifo[Set_event] = MouthEnd_;			// queue TrialStart_ strobe
					Set_event = (Set_event + 1) % Event_fifo_N;	// incriment event queue
					}
				last_status = mouth_status;
				}
			nexttick;
			}
		}
__HEADER__
WINDOWS.pro
__FOOTER__
//----------------------------------------------------------------------------------------------------
// The most awesome operating system ever.  Built by the richest and most generous man in the world.
// 							~OR~
// Process for locating fixation and target window locations.
//
// written by david.c.godlove@vanderbilt.edu 	January, 2011;    Adapted for search by joshu.d.cosman@vanderbilt.edu July, 2013

declare hide int run_search_sess = 7;
declare hide float targ_angle;
declare hide float targ_ecc;
declare hide float Fix_win_left;	
declare hide float Fix_win_right;		
declare hide float Fix_win_down;	
declare hide float Fix_win_up;	
declare hide float Targ_win_left;		
declare hide float Targ_win_right;	
declare hide float Targ_win_down;
declare hide float Targ_win_up;
             
declare WINDOWS(int curr_target,						// see SETC_TRL
				float fix_win_size,                     // see DEFAULT.pro and ALL_VARS.pro
				float targ_win_size,                    // see DEFAULT.pro and ALL_VARS.pro
				int object_fixwin,                      // animated graph object
				int object_targwin,                     // animated graph object
				float deg2pix_X,                        // see SET_COOR.pro
				float deg2pix_Y);                       // see SET_COOR.pro

process WINDOWS(int curr_target,						// see SETC_TRL
				float fix_win_size,                     // see DEFAULT.pro and ALL_VARS.pro
				float targ_win_size,                    // see DEFAULT.pro and ALL_VARS.pro
				int object_fixwin,                      // animated graph object
				int object_targwin,                     // animated graph object
				float deg2pix_X,                        // see SET_COOR.pro
				float deg2pix_Y)				        // see SET_COOR.pro
	{
	declare hide float angle, 
					eccentricity, 
					stim_ecc_x, 
					stim_ecc_y, 
					half_size_tw,
					old_fix_win_size,
					old_targ_win_size;
	
	// calculate the params of the fixation window
	Fix_win_left 	= fix_win_size/-2;					// if you wanted to use a fixation point which
	Fix_win_right 	= fix_win_size/2;					// wasn't at 0,0 you could do so and adopt the
	Fix_win_down 	= fix_win_size/2;					// same logic as below.
	Fix_win_up		= fix_win_size/-2;
	
	// find the center of the target in x and y space based on the angle and eccentricity

	if (state == run_search_sess) 	
		{
		angle			= targ_angle; 			
		eccentricity	= targ_ecc;	
		}
	else
		{
		angle			= Angle_list[curr_target]; 			// THESE USER DEFINED GLOBALS ARE ARRAYS SO 
		eccentricity	= Eccentricity_list[curr_target];	// THEY CANNOT BE PASSED INTO PROCESSES	
		}
		
	stim_ecc_x		= cos(angle) * eccentricity;
	stim_ecc_y		= sin(angle) * eccentricity * -1;
	
	oMove(object_targwin, stim_ecc_x*deg2pix_X , stim_ecc_y*deg2pix_Y); //move the animated target window to location
	oMove(object_targ, stim_ecc_x*deg2pix_X , stim_ecc_y*deg2pix_Y); //move the animated target to location
	
	// calculate the params of the target window
	half_size_tw = targ_win_size/2;
	Targ_win_left	= stim_ecc_x - half_size_tw;
	Targ_win_down	= stim_ecc_y + half_size_tw;
	Targ_win_right	= stim_ecc_x + half_size_tw;
	Targ_win_up		= stim_ecc_y - half_size_tw;
	
	// if the user changes the size of the fix window update the graph
	if (Trl_number == 1			||
		fix_win_size != old_fix_win_size)
		{
		oSetAttribute(object_fixwin, aSIZE, fix_win_size*Deg2pix_X, fix_win_size*Deg2pix_Y);
		oSetAttribute(object_fixwin, aVISIBLE);
		old_fix_win_size = fix_win_size;
		}
		
	// if the user changes the size of the targ window update the graph
	if (Trl_number == 1			||
		targ_win_size != old_targ_win_size)
		{
		oSetAttribute(object_targwin, aSIZE, targ_win_size*Deg2pix_X, targ_win_size*Deg2pix_Y);
		oSetAttribute(object_targwin, aVISIBLE);
		old_targ_win_size = targ_win_size;
		}
		
		
	}